
lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000153c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000153c  000015d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  000015d8  2**0
                  ALLOC
  3 .stab         00002064  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ebe  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_1>
       8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_2>
       c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

volatile u8 collision_detected = 0;
void activateAirbag(void);
void deactivateAirbag(void);

int main(void) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	LED_EnuInit(&LED_Arr_Str_LedConfig);
      9a:	83 e6       	ldi	r24, 0x63	; 99
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 25 01 	call	0x24a	; 0x24a <LED_EnuInit>
	SWITCH_EnuInit(&Switch_Arr_Stru_SwitchState);
      a2:	80 e6       	ldi	r24, 0x60	; 96
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	0e 94 83 00 	call	0x106	; 0x106 <SWITCH_EnuInit>
	EXI_TriggerEdge(EX_INT0, FALLING_EDGE);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	62 e0       	ldi	r22, 0x02	; 2
      ae:	0e 94 82 03 	call	0x704	; 0x704 <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 14 03 	call	0x628	; 0x628 <EXI_Enable>
	EXI_SetCallBack(EX_INT0, activateAirbag);
      b8:	2a e6       	ldi	r18, 0x6A	; 106
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	b9 01       	movw	r22, r18
      c0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <EXI_SetCallBack>
	SGI();
      c4:	78 94       	sei
	while (1)
	{
		if (collision_detected == 0) {
      c6:	80 91 68 00 	lds	r24, 0x0068
      ca:	88 23       	and	r24, r24
      cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x34>
			deactivateAirbag();
      ce:	0e 94 78 00 	call	0xf0	; 0xf0 <deactivateAirbag>
      d2:	f9 cf       	rjmp	.-14     	; 0xc6 <main+0x34>

000000d4 <activateAirbag>:
		}
	}
		return 0;
}
	void activateAirbag(void) {
      d4:	df 93       	push	r29
      d6:	cf 93       	push	r28
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
		LED_EnuTurnON(&LED_Arr_Str_LedConfig[0]);
      dc:	83 e6       	ldi	r24, 0x63	; 99
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 65 02 	call	0x4ca	; 0x4ca <LED_EnuTurnON>
		collision_detected = 1;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	80 93 68 00 	sts	0x0068, r24
	}
      ea:	cf 91       	pop	r28
      ec:	df 91       	pop	r29
      ee:	08 95       	ret

000000f0 <deactivateAirbag>:

	void deactivateAirbag(void) {
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
		LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[0]);
      f8:	83 e6       	ldi	r24, 0x63	; 99
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 a0 02 	call	0x540	; 0x540 <LED_EnuTurnOFF>
	}
     100:	cf 91       	pop	r28
     102:	df 91       	pop	r29
     104:	08 95       	ret

00000106 <SWITCH_EnuInit>:
#include "../../1_MCAL/DIO/DIO_INTERFACE.h"
#include "SWITCH_PRIVATE.h"
#include "SWITCH_CONFIG.h"

ES_t SWITCH_EnuInit(SW_t *Copy_P_Arr_Str_Switchs)
{
     106:	df 93       	push	r29
     108:	cf 93       	push	r28
     10a:	00 d0       	rcall	.+0      	; 0x10c <SWITCH_EnuInit+0x6>
     10c:	00 d0       	rcall	.+0      	; 0x10e <SWITCH_EnuInit+0x8>
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
     112:	9c 83       	std	Y+4, r25	; 0x04
     114:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     116:	1a 82       	std	Y+2, r1	; 0x02

    if (Copy_P_Arr_Str_Switchs != NULL)
     118:	8b 81       	ldd	r24, Y+3	; 0x03
     11a:	9c 81       	ldd	r25, Y+4	; 0x04
     11c:	00 97       	sbiw	r24, 0x00	; 0
     11e:	09 f4       	brne	.+2      	; 0x122 <SWITCH_EnuInit+0x1c>
     120:	5d c0       	rjmp	.+186    	; 0x1dc <SWITCH_EnuInit+0xd6>
    {
        u8 Local_u8Iterator = 0;
     122:	19 82       	std	Y+1, r1	; 0x01
        for (Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
     124:	19 82       	std	Y+1, r1	; 0x01
     126:	55 c0       	rjmp	.+170    	; 0x1d2 <SWITCH_EnuInit+0xcc>
        {
            Local_EnuErrorState = DIO_Enu_SetPinDirection(Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PortID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PinID, DIO_u8INPUT);
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	c9 01       	movw	r24, r18
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	28 0f       	add	r18, r24
     136:	39 1f       	adc	r19, r25
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	9c 81       	ldd	r25, Y+4	; 0x04
     13c:	fc 01       	movw	r30, r24
     13e:	e2 0f       	add	r30, r18
     140:	f3 1f       	adc	r31, r19
     142:	40 81       	ld	r20, Z
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	28 2f       	mov	r18, r24
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	c9 01       	movw	r24, r18
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	28 0f       	add	r18, r24
     152:	39 1f       	adc	r19, r25
     154:	8b 81       	ldd	r24, Y+3	; 0x03
     156:	9c 81       	ldd	r25, Y+4	; 0x04
     158:	fc 01       	movw	r30, r24
     15a:	e2 0f       	add	r30, r18
     15c:	f3 1f       	adc	r31, r19
     15e:	91 81       	ldd	r25, Z+1	; 0x01
     160:	84 2f       	mov	r24, r20
     162:	69 2f       	mov	r22, r25
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	0e 94 e7 05 	call	0xbce	; 0xbce <DIO_Enu_SetPinDirection>
     16a:	8a 83       	std	Y+2, r24	; 0x02
            Local_EnuErrorState = DIO_Enu_SetPinValue(Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PortID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PinID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_Status);
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	28 2f       	mov	r18, r24
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	c9 01       	movw	r24, r18
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	28 0f       	add	r18, r24
     17a:	39 1f       	adc	r19, r25
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	9c 81       	ldd	r25, Y+4	; 0x04
     180:	fc 01       	movw	r30, r24
     182:	e2 0f       	add	r30, r18
     184:	f3 1f       	adc	r31, r19
     186:	50 81       	ld	r21, Z
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	c9 01       	movw	r24, r18
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	28 0f       	add	r18, r24
     196:	39 1f       	adc	r19, r25
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	fc 01       	movw	r30, r24
     19e:	e2 0f       	add	r30, r18
     1a0:	f3 1f       	adc	r31, r19
     1a2:	41 81       	ldd	r20, Z+1	; 0x01
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	c9 01       	movw	r24, r18
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	28 0f       	add	r18, r24
     1b2:	39 1f       	adc	r19, r25
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
     1b6:	9c 81       	ldd	r25, Y+4	; 0x04
     1b8:	fc 01       	movw	r30, r24
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	92 81       	ldd	r25, Z+2	; 0x02
     1c0:	85 2f       	mov	r24, r21
     1c2:	64 2f       	mov	r22, r20
     1c4:	49 2f       	mov	r20, r25
     1c6:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     1ca:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_P_Arr_Str_Switchs != NULL)
    {
        u8 Local_u8Iterator = 0;
        for (Local_u8Iterator = 0; Local_u8Iterator < SW_NUM; Local_u8Iterator++)
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	8f 5f       	subi	r24, 0xFF	; 255
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	88 23       	and	r24, r24
     1d6:	09 f4       	brne	.+2      	; 0x1da <SWITCH_EnuInit+0xd4>
     1d8:	a7 cf       	rjmp	.-178    	; 0x128 <SWITCH_EnuInit+0x22>
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <SWITCH_EnuInit+0xda>
            Local_EnuErrorState = DIO_Enu_SetPinValue(Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PortID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_PinID, Copy_P_Arr_Str_Switchs[Local_u8Iterator].SW_Status);
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_EnuErrorState;
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	cf 91       	pop	r28
     1ec:	df 91       	pop	r29
     1ee:	08 95       	ret

000001f0 <SWITCH_EnuGetStates>:
ES_t SWITCH_EnuGetStates(SW_t *Copy_P_Arr_Str_Switch, u8 *Copy_pu8SwState)
{
     1f0:	df 93       	push	r29
     1f2:	cf 93       	push	r28
     1f4:	00 d0       	rcall	.+0      	; 0x1f6 <SWITCH_EnuGetStates+0x6>
     1f6:	00 d0       	rcall	.+0      	; 0x1f8 <SWITCH_EnuGetStates+0x8>
     1f8:	0f 92       	push	r0
     1fa:	cd b7       	in	r28, 0x3d	; 61
     1fc:	de b7       	in	r29, 0x3e	; 62
     1fe:	9b 83       	std	Y+3, r25	; 0x03
     200:	8a 83       	std	Y+2, r24	; 0x02
     202:	7d 83       	std	Y+5, r23	; 0x05
     204:	6c 83       	std	Y+4, r22	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
     206:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_P_Arr_Str_Switch != NULL && Copy_pu8SwState != NULL)
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	00 97       	sbiw	r24, 0x00	; 0
     20e:	91 f0       	breq	.+36     	; 0x234 <SWITCH_EnuGetStates+0x44>
     210:	8c 81       	ldd	r24, Y+4	; 0x04
     212:	9d 81       	ldd	r25, Y+5	; 0x05
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	71 f0       	breq	.+28     	; 0x234 <SWITCH_EnuGetStates+0x44>
    {
        Local_EnuErrorState = DIO_Enu_GetPinValue(Copy_P_Arr_Str_Switch->SW_PortID, Copy_P_Arr_Str_Switch->SW_PinID, Copy_pu8SwState);
     218:	ea 81       	ldd	r30, Y+2	; 0x02
     21a:	fb 81       	ldd	r31, Y+3	; 0x03
     21c:	80 81       	ld	r24, Z
     21e:	ea 81       	ldd	r30, Y+2	; 0x02
     220:	fb 81       	ldd	r31, Y+3	; 0x03
     222:	91 81       	ldd	r25, Z+1	; 0x01
     224:	2c 81       	ldd	r18, Y+4	; 0x04
     226:	3d 81       	ldd	r19, Y+5	; 0x05
     228:	69 2f       	mov	r22, r25
     22a:	a9 01       	movw	r20, r18
     22c:	0e 94 03 09 	call	0x1206	; 0x1206 <DIO_Enu_GetPinValue>
     230:	89 83       	std	Y+1, r24	; 0x01
     232:	02 c0       	rjmp	.+4      	; 0x238 <SWITCH_EnuGetStates+0x48>
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
     238:	89 81       	ldd	r24, Y+1	; 0x01
}
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	cf 91       	pop	r28
     246:	df 91       	pop	r29
     248:	08 95       	ret

0000024a <LED_EnuInit>:
#include"../../1_MCAL/DIO/DIO_INTERFACE.h"
#include "LED_CONFIG.h"
#include "LED_PRIVATE.h"

ES_t LED_EnuInit(LED_t *Copy_P_Str_LedConfig)
{
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	00 d0       	rcall	.+0      	; 0x250 <LED_EnuInit+0x6>
     250:	00 d0       	rcall	.+0      	; 0x252 <LED_EnuInit+0x8>
     252:	0f 92       	push	r0
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	9c 83       	std	Y+4, r25	; 0x04
     25a:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_enuErrorState = ES_NOT_OK;
     25c:	1a 82       	std	Y+2, r1	; 0x02

    if (Copy_P_Str_LedConfig != NULL)
     25e:	8b 81       	ldd	r24, Y+3	; 0x03
     260:	9c 81       	ldd	r25, Y+4	; 0x04
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	09 f4       	brne	.+2      	; 0x268 <LED_EnuInit+0x1e>
     266:	24 c1       	rjmp	.+584    	; 0x4b0 <LED_EnuInit+0x266>
    {
        u8 Local_enuIterator = 0;
     268:	19 82       	std	Y+1, r1	; 0x01
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
     26a:	19 82       	std	Y+1, r1	; 0x01
     26c:	1c c1       	rjmp	.+568    	; 0x4a6 <LED_EnuInit+0x25c>
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	88 2f       	mov	r24, r24
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	9c 01       	movw	r18, r24
     276:	22 0f       	add	r18, r18
     278:	33 1f       	adc	r19, r19
     27a:	22 0f       	add	r18, r18
     27c:	33 1f       	adc	r19, r19
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	fc 01       	movw	r30, r24
     284:	e2 0f       	add	r30, r18
     286:	f3 1f       	adc	r31, r19
     288:	40 81       	ld	r20, Z
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	9c 01       	movw	r18, r24
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	22 0f       	add	r18, r18
     298:	33 1f       	adc	r19, r19
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	9c 81       	ldd	r25, Y+4	; 0x04
     29e:	fc 01       	movw	r30, r24
     2a0:	e2 0f       	add	r30, r18
     2a2:	f3 1f       	adc	r31, r19
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	84 2f       	mov	r24, r20
     2a8:	69 2f       	mov	r22, r25
     2aa:	41 e0       	ldi	r20, 0x01	; 1
     2ac:	0e 94 e7 05 	call	0xbce	; 0xbce <DIO_Enu_SetPinDirection>
     2b0:	8a 83       	std	Y+2, r24	; 0x02
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	9c 01       	movw	r18, r24
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	22 0f       	add	r18, r18
     2c0:	33 1f       	adc	r19, r19
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
     2c4:	9c 81       	ldd	r25, Y+4	; 0x04
     2c6:	fc 01       	movw	r30, r24
     2c8:	e2 0f       	add	r30, r18
     2ca:	f3 1f       	adc	r31, r19
     2cc:	82 81       	ldd	r24, Z+2	; 0x02
     2ce:	88 23       	and	r24, r24
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <LED_EnuInit+0x8a>
     2d2:	69 c0       	rjmp	.+210    	; 0x3a6 <LED_EnuInit+0x15c>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	9c 01       	movw	r18, r24
     2dc:	22 0f       	add	r18, r18
     2de:	33 1f       	adc	r19, r19
     2e0:	22 0f       	add	r18, r18
     2e2:	33 1f       	adc	r19, r19
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	fc 01       	movw	r30, r24
     2ea:	e2 0f       	add	r30, r18
     2ec:	f3 1f       	adc	r31, r19
     2ee:	83 81       	ldd	r24, Z+3	; 0x03
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	19 f5       	brne	.+70     	; 0x33a <LED_EnuInit+0xf0>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9c 01       	movw	r18, r24
     2fc:	22 0f       	add	r18, r18
     2fe:	33 1f       	adc	r19, r19
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	fc 01       	movw	r30, r24
     30a:	e2 0f       	add	r30, r18
     30c:	f3 1f       	adc	r31, r19
     30e:	40 81       	ld	r20, Z
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9c 01       	movw	r18, r24
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	22 0f       	add	r18, r18
     31e:	33 1f       	adc	r19, r19
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	9c 81       	ldd	r25, Y+4	; 0x04
     324:	fc 01       	movw	r30, r24
     326:	e2 0f       	add	r30, r18
     328:	f3 1f       	adc	r31, r19
     32a:	91 81       	ldd	r25, Z+1	; 0x01
     32c:	84 2f       	mov	r24, r20
     32e:	69 2f       	mov	r22, r25
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     336:	8a 83       	std	Y+2, r24	; 0x02
     338:	b3 c0       	rjmp	.+358    	; 0x4a0 <LED_EnuInit+0x256>
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	88 2f       	mov	r24, r24
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	9c 01       	movw	r18, r24
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	fc 01       	movw	r30, r24
     350:	e2 0f       	add	r30, r18
     352:	f3 1f       	adc	r31, r19
     354:	83 81       	ldd	r24, Z+3	; 0x03
     356:	88 23       	and	r24, r24
     358:	19 f5       	brne	.+70     	; 0x3a0 <LED_EnuInit+0x156>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	9c 01       	movw	r18, r24
     362:	22 0f       	add	r18, r18
     364:	33 1f       	adc	r19, r19
     366:	22 0f       	add	r18, r18
     368:	33 1f       	adc	r19, r19
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	9c 81       	ldd	r25, Y+4	; 0x04
     36e:	fc 01       	movw	r30, r24
     370:	e2 0f       	add	r30, r18
     372:	f3 1f       	adc	r31, r19
     374:	40 81       	ld	r20, Z
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	9c 01       	movw	r18, r24
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	22 0f       	add	r18, r18
     384:	33 1f       	adc	r19, r19
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	fc 01       	movw	r30, r24
     38c:	e2 0f       	add	r30, r18
     38e:	f3 1f       	adc	r31, r19
     390:	91 81       	ldd	r25, Z+1	; 0x01
     392:	84 2f       	mov	r24, r20
     394:	69 2f       	mov	r22, r25
     396:	41 e0       	ldi	r20, 0x01	; 1
     398:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     39c:	8a 83       	std	Y+2, r24	; 0x02
     39e:	80 c0       	rjmp	.+256    	; 0x4a0 <LED_EnuInit+0x256>
                }
                else
                {
                    return ES_OUT_OF_RANGE;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	8d 83       	std	Y+5, r24	; 0x05
     3a4:	89 c0       	rjmp	.+274    	; 0x4b8 <LED_EnuInit+0x26e>
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9c 01       	movw	r18, r24
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	22 0f       	add	r18, r18
     3b4:	33 1f       	adc	r19, r19
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ba:	fc 01       	movw	r30, r24
     3bc:	e2 0f       	add	r30, r18
     3be:	f3 1f       	adc	r31, r19
     3c0:	82 81       	ldd	r24, Z+2	; 0x02
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <LED_EnuInit+0x17e>
     3c6:	69 c0       	rjmp	.+210    	; 0x49a <LED_EnuInit+0x250>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	88 2f       	mov	r24, r24
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	9c 01       	movw	r18, r24
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	22 0f       	add	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	fc 01       	movw	r30, r24
     3de:	e2 0f       	add	r30, r18
     3e0:	f3 1f       	adc	r31, r19
     3e2:	83 81       	ldd	r24, Z+3	; 0x03
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	19 f5       	brne	.+70     	; 0x42e <LED_EnuInit+0x1e4>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	9c 01       	movw	r18, r24
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	fc 01       	movw	r30, r24
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	40 81       	ld	r20, Z
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	88 2f       	mov	r24, r24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9c 01       	movw	r18, r24
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	84 2f       	mov	r24, r20
     422:	69 2f       	mov	r22, r25
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     42a:	8a 83       	std	Y+2, r24	; 0x02
     42c:	39 c0       	rjmp	.+114    	; 0x4a0 <LED_EnuInit+0x256>
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	88 2f       	mov	r24, r24
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9c 01       	movw	r18, r24
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	8b 81       	ldd	r24, Y+3	; 0x03
     440:	9c 81       	ldd	r25, Y+4	; 0x04
     442:	fc 01       	movw	r30, r24
     444:	e2 0f       	add	r30, r18
     446:	f3 1f       	adc	r31, r19
     448:	83 81       	ldd	r24, Z+3	; 0x03
     44a:	88 23       	and	r24, r24
     44c:	19 f5       	brne	.+70     	; 0x494 <LED_EnuInit+0x24a>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9c 01       	movw	r18, r24
     456:	22 0f       	add	r18, r18
     458:	33 1f       	adc	r19, r19
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	8b 81       	ldd	r24, Y+3	; 0x03
     460:	9c 81       	ldd	r25, Y+4	; 0x04
     462:	fc 01       	movw	r30, r24
     464:	e2 0f       	add	r30, r18
     466:	f3 1f       	adc	r31, r19
     468:	40 81       	ld	r20, Z
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	88 2f       	mov	r24, r24
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	9c 01       	movw	r18, r24
     472:	22 0f       	add	r18, r18
     474:	33 1f       	adc	r19, r19
     476:	22 0f       	add	r18, r18
     478:	33 1f       	adc	r19, r19
     47a:	8b 81       	ldd	r24, Y+3	; 0x03
     47c:	9c 81       	ldd	r25, Y+4	; 0x04
     47e:	fc 01       	movw	r30, r24
     480:	e2 0f       	add	r30, r18
     482:	f3 1f       	adc	r31, r19
     484:	91 81       	ldd	r25, Z+1	; 0x01
     486:	84 2f       	mov	r24, r20
     488:	69 2f       	mov	r22, r25
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     490:	8a 83       	std	Y+2, r24	; 0x02
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <LED_EnuInit+0x256>
                }
                else
                {
                    return ES_OUT_OF_RANGE;
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	8d 83       	std	Y+5, r24	; 0x05
     498:	0f c0       	rjmp	.+30     	; 0x4b8 <LED_EnuInit+0x26e>
                }
            }
            else
            {
                return ES_OUT_OF_RANGE;
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	8d 83       	std	Y+5, r24	; 0x05
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <LED_EnuInit+0x26e>
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	8f 5f       	subi	r24, 0xFF	; 255
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	88 23       	and	r24, r24
     4aa:	09 f4       	brne	.+2      	; 0x4ae <LED_EnuInit+0x264>
     4ac:	e0 ce       	rjmp	.-576    	; 0x26e <LED_EnuInit+0x24>
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <LED_EnuInit+0x26a>
            }
        }
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_enuErrorState;
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	8d 83       	std	Y+5, r24	; 0x05
     4b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	cf 91       	pop	r28
     4c6:	df 91       	pop	r29
     4c8:	08 95       	ret

000004ca <LED_EnuTurnON>:

ES_t LED_EnuTurnON(LED_t *Copy_P_Str_LedID)
{
     4ca:	df 93       	push	r29
     4cc:	cf 93       	push	r28
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <LED_EnuTurnON+0x6>
     4d0:	0f 92       	push	r0
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	9b 83       	std	Y+3, r25	; 0x03
     4d8:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState = ES_NOT_OK;
     4da:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_P_Str_LedID != NULL)
     4dc:	8a 81       	ldd	r24, Y+2	; 0x02
     4de:	9b 81       	ldd	r25, Y+3	; 0x03
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	29 f1       	breq	.+74     	; 0x52e <LED_EnuTurnON+0x64>
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
     4e4:	ea 81       	ldd	r30, Y+2	; 0x02
     4e6:	fb 81       	ldd	r31, Y+3	; 0x03
     4e8:	82 81       	ldd	r24, Z+2	; 0x02
     4ea:	88 23       	and	r24, r24
     4ec:	61 f4       	brne	.+24     	; 0x506 <LED_EnuTurnON+0x3c>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
     4ee:	ea 81       	ldd	r30, Y+2	; 0x02
     4f0:	fb 81       	ldd	r31, Y+3	; 0x03
     4f2:	80 81       	ld	r24, Z
     4f4:	ea 81       	ldd	r30, Y+2	; 0x02
     4f6:	fb 81       	ldd	r31, Y+3	; 0x03
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	69 2f       	mov	r22, r25
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     502:	89 83       	std	Y+1, r24	; 0x01
     504:	16 c0       	rjmp	.+44     	; 0x532 <LED_EnuTurnON+0x68>
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
     506:	ea 81       	ldd	r30, Y+2	; 0x02
     508:	fb 81       	ldd	r31, Y+3	; 0x03
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	61 f4       	brne	.+24     	; 0x528 <LED_EnuTurnON+0x5e>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
     510:	ea 81       	ldd	r30, Y+2	; 0x02
     512:	fb 81       	ldd	r31, Y+3	; 0x03
     514:	80 81       	ld	r24, Z
     516:	ea 81       	ldd	r30, Y+2	; 0x02
     518:	fb 81       	ldd	r31, Y+3	; 0x03
     51a:	91 81       	ldd	r25, Z+1	; 0x01
     51c:	69 2f       	mov	r22, r25
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     524:	89 83       	std	Y+1, r24	; 0x01
     526:	05 c0       	rjmp	.+10     	; 0x532 <LED_EnuTurnON+0x68>
        }
        else
        {
            Local_enuErrorState = ES_OUT_OF_RANGE;
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	02 c0       	rjmp	.+4      	; 0x532 <LED_EnuTurnON+0x68>
        }
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
     532:	89 81       	ldd	r24, Y+1	; 0x01
}
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <LED_EnuTurnOFF>:

ES_t LED_EnuTurnOFF(LED_t *Copy_P_Str_LedID)
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <LED_EnuTurnOFF+0x6>
     546:	0f 92       	push	r0
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	9b 83       	std	Y+3, r25	; 0x03
     54e:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState = ES_NOT_OK;
     550:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_P_Str_LedID != NULL)
     552:	8a 81       	ldd	r24, Y+2	; 0x02
     554:	9b 81       	ldd	r25, Y+3	; 0x03
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	29 f1       	breq	.+74     	; 0x5a4 <LED_EnuTurnOFF+0x64>
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
     55a:	ea 81       	ldd	r30, Y+2	; 0x02
     55c:	fb 81       	ldd	r31, Y+3	; 0x03
     55e:	82 81       	ldd	r24, Z+2	; 0x02
     560:	88 23       	and	r24, r24
     562:	61 f4       	brne	.+24     	; 0x57c <LED_EnuTurnOFF+0x3c>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
     564:	ea 81       	ldd	r30, Y+2	; 0x02
     566:	fb 81       	ldd	r31, Y+3	; 0x03
     568:	80 81       	ld	r24, Z
     56a:	ea 81       	ldd	r30, Y+2	; 0x02
     56c:	fb 81       	ldd	r31, Y+3	; 0x03
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	69 2f       	mov	r22, r25
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	16 c0       	rjmp	.+44     	; 0x5a8 <LED_EnuTurnOFF+0x68>
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
     57c:	ea 81       	ldd	r30, Y+2	; 0x02
     57e:	fb 81       	ldd	r31, Y+3	; 0x03
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	61 f4       	brne	.+24     	; 0x59e <LED_EnuTurnOFF+0x5e>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
     586:	ea 81       	ldd	r30, Y+2	; 0x02
     588:	fb 81       	ldd	r31, Y+3	; 0x03
     58a:	80 81       	ld	r24, Z
     58c:	ea 81       	ldd	r30, Y+2	; 0x02
     58e:	fb 81       	ldd	r31, Y+3	; 0x03
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	69 2f       	mov	r22, r25
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	0e 94 d3 06 	call	0xda6	; 0xda6 <DIO_Enu_SetPinValue>
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <LED_EnuTurnOFF+0x68>
        }
        else
        {
            Local_enuErrorState = ES_OUT_OF_RANGE;
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <LED_EnuTurnOFF+0x68>
        }
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	cf 91       	pop	r28
     5b2:	df 91       	pop	r29
     5b4:	08 95       	ret

000005b6 <EXI_SetCallBack>:
static void (*INT1_Fptr) (void)=NULL;
static void (*INT2_Fptr) (void)=NULL;

/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
     5b6:	df 93       	push	r29
     5b8:	cf 93       	push	r28
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <EXI_SetCallBack+0x6>
     5bc:	00 d0       	rcall	.+0      	; 0x5be <EXI_SetCallBack+0x8>
     5be:	0f 92       	push	r0
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	89 83       	std	Y+1, r24	; 0x01
     5c6:	7b 83       	std	Y+3, r23	; 0x03
     5c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	28 2f       	mov	r18, r24
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	3d 83       	std	Y+5, r19	; 0x05
     5d2:	2c 83       	std	Y+4, r18	; 0x04
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
     5d6:	9d 81       	ldd	r25, Y+5	; 0x05
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	91 05       	cpc	r25, r1
     5dc:	81 f0       	breq	.+32     	; 0x5fe <EXI_SetCallBack+0x48>
     5de:	2c 81       	ldd	r18, Y+4	; 0x04
     5e0:	3d 81       	ldd	r19, Y+5	; 0x05
     5e2:	22 30       	cpi	r18, 0x02	; 2
     5e4:	31 05       	cpc	r19, r1
     5e6:	91 f0       	breq	.+36     	; 0x60c <EXI_SetCallBack+0x56>
     5e8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ea:	9d 81       	ldd	r25, Y+5	; 0x05
     5ec:	00 97       	sbiw	r24, 0x00	; 0
     5ee:	a1 f4       	brne	.+40     	; 0x618 <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	9b 81       	ldd	r25, Y+3	; 0x03
     5f4:	90 93 6a 00 	sts	0x006A, r25
     5f8:	80 93 69 00 	sts	0x0069, r24
     5fc:	0d c0       	rjmp	.+26     	; 0x618 <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	9b 81       	ldd	r25, Y+3	; 0x03
     602:	90 93 6c 00 	sts	0x006C, r25
     606:	80 93 6b 00 	sts	0x006B, r24
     60a:	06 c0       	rjmp	.+12     	; 0x618 <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
     610:	90 93 6e 00 	sts	0x006E, r25
     614:	80 93 6d 00 	sts	0x006D, r24
		break;
	}
}
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <EXI_Enable>:
/************************************Enable/Disable functions***********************************/
void EXI_Enable(ExInterruptSource_type Interrupt)
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	00 d0       	rcall	.+0      	; 0x62e <EXI_Enable+0x6>
     62e:	0f 92       	push	r0
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	28 2f       	mov	r18, r24
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	3b 83       	std	Y+3, r19	; 0x03
     63e:	2a 83       	std	Y+2, r18	; 0x02
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	9b 81       	ldd	r25, Y+3	; 0x03
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	91 05       	cpc	r25, r1
     648:	89 f0       	breq	.+34     	; 0x66c <EXI_Enable+0x44>
     64a:	2a 81       	ldd	r18, Y+2	; 0x02
     64c:	3b 81       	ldd	r19, Y+3	; 0x03
     64e:	22 30       	cpi	r18, 0x02	; 2
     650:	31 05       	cpc	r19, r1
     652:	a1 f0       	breq	.+40     	; 0x67c <EXI_Enable+0x54>
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	9b 81       	ldd	r25, Y+3	; 0x03
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	b9 f4       	brne	.+46     	; 0x68a <EXI_Enable+0x62>
		case EX_INT0:
		SET_BIT(GICR,INT0);
     65c:	ab e5       	ldi	r26, 0x5B	; 91
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	eb e5       	ldi	r30, 0x5B	; 91
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	80 64       	ori	r24, 0x40	; 64
     668:	8c 93       	st	X, r24
     66a:	0f c0       	rjmp	.+30     	; 0x68a <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
     66c:	ab e5       	ldi	r26, 0x5B	; 91
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	eb e5       	ldi	r30, 0x5B	; 91
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	80 68       	ori	r24, 0x80	; 128
     678:	8c 93       	st	X, r24
     67a:	07 c0       	rjmp	.+14     	; 0x68a <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
     67c:	ab e5       	ldi	r26, 0x5B	; 91
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	eb e5       	ldi	r30, 0x5B	; 91
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	80 62       	ori	r24, 0x20	; 32
     688:	8c 93       	st	X, r24
		break;
	}
}
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	cf 91       	pop	r28
     692:	df 91       	pop	r29
     694:	08 95       	ret

00000696 <EXI_Disable>:

void EXI_Disable(ExInterruptSource_type Interrupt)
{
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	00 d0       	rcall	.+0      	; 0x69c <EXI_Disable+0x6>
     69c:	0f 92       	push	r0
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	3b 83       	std	Y+3, r19	; 0x03
     6ac:	2a 83       	std	Y+2, r18	; 0x02
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	91 05       	cpc	r25, r1
     6b6:	89 f0       	breq	.+34     	; 0x6da <EXI_Disable+0x44>
     6b8:	2a 81       	ldd	r18, Y+2	; 0x02
     6ba:	3b 81       	ldd	r19, Y+3	; 0x03
     6bc:	22 30       	cpi	r18, 0x02	; 2
     6be:	31 05       	cpc	r19, r1
     6c0:	a1 f0       	breq	.+40     	; 0x6ea <EXI_Disable+0x54>
     6c2:	8a 81       	ldd	r24, Y+2	; 0x02
     6c4:	9b 81       	ldd	r25, Y+3	; 0x03
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	b9 f4       	brne	.+46     	; 0x6f8 <EXI_Disable+0x62>
		case EX_INT0:
		CLR_BIT(GICR,INT0);
     6ca:	ab e5       	ldi	r26, 0x5B	; 91
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	eb e5       	ldi	r30, 0x5B	; 91
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 7b       	andi	r24, 0xBF	; 191
     6d6:	8c 93       	st	X, r24
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLR_BIT(GICR,INT1);
     6da:	ab e5       	ldi	r26, 0x5B	; 91
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	eb e5       	ldi	r30, 0x5B	; 91
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	8f 77       	andi	r24, 0x7F	; 127
     6e6:	8c 93       	st	X, r24
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLR_BIT(GICR,INT2);
     6ea:	ab e5       	ldi	r26, 0x5B	; 91
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	eb e5       	ldi	r30, 0x5B	; 91
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	80 81       	ld	r24, Z
     6f4:	8f 7d       	andi	r24, 0xDF	; 223
     6f6:	8c 93       	st	X, r24
		break;
	}
}
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <EXI_TriggerEdge>:
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	2a 97       	sbiw	r28, 0x0a	; 10
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	89 83       	std	Y+1, r24	; 0x01
     71a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	3a 87       	std	Y+10, r19	; 0x0a
     724:	29 87       	std	Y+9, r18	; 0x09
     726:	89 85       	ldd	r24, Y+9	; 0x09
     728:	9a 85       	ldd	r25, Y+10	; 0x0a
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	91 05       	cpc	r25, r1
     72e:	09 f4       	brne	.+2      	; 0x732 <EXI_TriggerEdge+0x2e>
     730:	66 c0       	rjmp	.+204    	; 0x7fe <EXI_TriggerEdge+0xfa>
     732:	29 85       	ldd	r18, Y+9	; 0x09
     734:	3a 85       	ldd	r19, Y+10	; 0x0a
     736:	22 30       	cpi	r18, 0x02	; 2
     738:	31 05       	cpc	r19, r1
     73a:	09 f4       	brne	.+2      	; 0x73e <EXI_TriggerEdge+0x3a>
     73c:	bb c0       	rjmp	.+374    	; 0x8b4 <__stack+0x55>
     73e:	89 85       	ldd	r24, Y+9	; 0x09
     740:	9a 85       	ldd	r25, Y+10	; 0x0a
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	09 f0       	breq	.+2      	; 0x748 <EXI_TriggerEdge+0x44>
     746:	dd c0       	rjmp	.+442    	; 0x902 <__stack+0xa3>
		case EX_INT0:
		switch(Edge){
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	38 87       	std	Y+8, r19	; 0x08
     750:	2f 83       	std	Y+7, r18	; 0x07
     752:	8f 81       	ldd	r24, Y+7	; 0x07
     754:	98 85       	ldd	r25, Y+8	; 0x08
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	91 05       	cpc	r25, r1
     75a:	21 f1       	breq	.+72     	; 0x7a4 <EXI_TriggerEdge+0xa0>
     75c:	2f 81       	ldd	r18, Y+7	; 0x07
     75e:	38 85       	ldd	r19, Y+8	; 0x08
     760:	22 30       	cpi	r18, 0x02	; 2
     762:	31 05       	cpc	r19, r1
     764:	2c f4       	brge	.+10     	; 0x770 <EXI_TriggerEdge+0x6c>
     766:	8f 81       	ldd	r24, Y+7	; 0x07
     768:	98 85       	ldd	r25, Y+8	; 0x08
     76a:	00 97       	sbiw	r24, 0x00	; 0
     76c:	61 f0       	breq	.+24     	; 0x786 <EXI_TriggerEdge+0x82>
     76e:	c9 c0       	rjmp	.+402    	; 0x902 <__stack+0xa3>
     770:	2f 81       	ldd	r18, Y+7	; 0x07
     772:	38 85       	ldd	r19, Y+8	; 0x08
     774:	22 30       	cpi	r18, 0x02	; 2
     776:	31 05       	cpc	r19, r1
     778:	21 f1       	breq	.+72     	; 0x7c2 <EXI_TriggerEdge+0xbe>
     77a:	8f 81       	ldd	r24, Y+7	; 0x07
     77c:	98 85       	ldd	r25, Y+8	; 0x08
     77e:	83 30       	cpi	r24, 0x03	; 3
     780:	91 05       	cpc	r25, r1
     782:	71 f1       	breq	.+92     	; 0x7e0 <EXI_TriggerEdge+0xdc>
     784:	be c0       	rjmp	.+380    	; 0x902 <__stack+0xa3>
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     786:	a5 e5       	ldi	r26, 0x55	; 85
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e5 e5       	ldi	r30, 0x55	; 85
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	8e 7f       	andi	r24, 0xFE	; 254
     792:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     794:	a5 e5       	ldi	r26, 0x55	; 85
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	e5 e5       	ldi	r30, 0x55	; 85
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8d 7f       	andi	r24, 0xFD	; 253
     7a0:	8c 93       	st	X, r24
     7a2:	af c0       	rjmp	.+350    	; 0x902 <__stack+0xa3>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
     7a4:	a5 e5       	ldi	r26, 0x55	; 85
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	e5 e5       	ldi	r30, 0x55	; 85
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	81 60       	ori	r24, 0x01	; 1
     7b0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
     7b2:	a5 e5       	ldi	r26, 0x55	; 85
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e5 e5       	ldi	r30, 0x55	; 85
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8d 7f       	andi	r24, 0xFD	; 253
     7be:	8c 93       	st	X, r24
     7c0:	a0 c0       	rjmp	.+320    	; 0x902 <__stack+0xa3>
			break;
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     7c2:	a5 e5       	ldi	r26, 0x55	; 85
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	e5 e5       	ldi	r30, 0x55	; 85
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     7d0:	a5 e5       	ldi	r26, 0x55	; 85
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	e5 e5       	ldi	r30, 0x55	; 85
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	8c 93       	st	X, r24
     7de:	91 c0       	rjmp	.+290    	; 0x902 <__stack+0xa3>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     7e0:	a5 e5       	ldi	r26, 0x55	; 85
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	e5 e5       	ldi	r30, 0x55	; 85
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	81 60       	ori	r24, 0x01	; 1
     7ec:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     7ee:	a5 e5       	ldi	r26, 0x55	; 85
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e5 e5       	ldi	r30, 0x55	; 85
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	82 60       	ori	r24, 0x02	; 2
     7fa:	8c 93       	st	X, r24
     7fc:	82 c0       	rjmp	.+260    	; 0x902 <__stack+0xa3>
			break;
			
		}
		break;
		case EX_INT1:
		switch(Edge){
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	28 2f       	mov	r18, r24
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	3e 83       	std	Y+6, r19	; 0x06
     806:	2d 83       	std	Y+5, r18	; 0x05
     808:	8d 81       	ldd	r24, Y+5	; 0x05
     80a:	9e 81       	ldd	r25, Y+6	; 0x06
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	91 05       	cpc	r25, r1
     810:	21 f1       	breq	.+72     	; 0x85a <EXI_TriggerEdge+0x156>
     812:	2d 81       	ldd	r18, Y+5	; 0x05
     814:	3e 81       	ldd	r19, Y+6	; 0x06
     816:	22 30       	cpi	r18, 0x02	; 2
     818:	31 05       	cpc	r19, r1
     81a:	2c f4       	brge	.+10     	; 0x826 <EXI_TriggerEdge+0x122>
     81c:	8d 81       	ldd	r24, Y+5	; 0x05
     81e:	9e 81       	ldd	r25, Y+6	; 0x06
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	61 f0       	breq	.+24     	; 0x83c <EXI_TriggerEdge+0x138>
     824:	6e c0       	rjmp	.+220    	; 0x902 <__stack+0xa3>
     826:	2d 81       	ldd	r18, Y+5	; 0x05
     828:	3e 81       	ldd	r19, Y+6	; 0x06
     82a:	22 30       	cpi	r18, 0x02	; 2
     82c:	31 05       	cpc	r19, r1
     82e:	21 f1       	breq	.+72     	; 0x878 <__stack+0x19>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	9e 81       	ldd	r25, Y+6	; 0x06
     834:	83 30       	cpi	r24, 0x03	; 3
     836:	91 05       	cpc	r25, r1
     838:	71 f1       	breq	.+92     	; 0x896 <__stack+0x37>
     83a:	63 c0       	rjmp	.+198    	; 0x902 <__stack+0xa3>
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
     83c:	a5 e5       	ldi	r26, 0x55	; 85
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	e5 e5       	ldi	r30, 0x55	; 85
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	8b 7f       	andi	r24, 0xFB	; 251
     848:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
     84a:	a5 e5       	ldi	r26, 0x55	; 85
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	e5 e5       	ldi	r30, 0x55	; 85
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	87 7f       	andi	r24, 0xF7	; 247
     856:	8c 93       	st	X, r24
     858:	54 c0       	rjmp	.+168    	; 0x902 <__stack+0xa3>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
     85a:	a5 e5       	ldi	r26, 0x55	; 85
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e5 e5       	ldi	r30, 0x55	; 85
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	84 60       	ori	r24, 0x04	; 4
     866:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
     868:	a5 e5       	ldi	r26, 0x55	; 85
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	e5 e5       	ldi	r30, 0x55	; 85
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	87 7f       	andi	r24, 0xF7	; 247
     874:	8c 93       	st	X, r24
     876:	45 c0       	rjmp	.+138    	; 0x902 <__stack+0xa3>
			break;
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
     878:	a5 e5       	ldi	r26, 0x55	; 85
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	e5 e5       	ldi	r30, 0x55	; 85
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	8b 7f       	andi	r24, 0xFB	; 251
     884:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
     886:	a5 e5       	ldi	r26, 0x55	; 85
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e5 e5       	ldi	r30, 0x55	; 85
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	88 60       	ori	r24, 0x08	; 8
     892:	8c 93       	st	X, r24
     894:	36 c0       	rjmp	.+108    	; 0x902 <__stack+0xa3>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
     896:	a5 e5       	ldi	r26, 0x55	; 85
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e5 e5       	ldi	r30, 0x55	; 85
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	84 60       	ori	r24, 0x04	; 4
     8a2:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
     8a4:	a5 e5       	ldi	r26, 0x55	; 85
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e5 e5       	ldi	r30, 0x55	; 85
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	88 60       	ori	r24, 0x08	; 8
     8b0:	8c 93       	st	X, r24
     8b2:	27 c0       	rjmp	.+78     	; 0x902 <__stack+0xa3>
			break;
			
		}
		break;
		case EX_INT2:
		switch(Edge){
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	28 2f       	mov	r18, r24
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	3c 83       	std	Y+4, r19	; 0x04
     8bc:	2b 83       	std	Y+3, r18	; 0x03
     8be:	8b 81       	ldd	r24, Y+3	; 0x03
     8c0:	9c 81       	ldd	r25, Y+4	; 0x04
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	91 05       	cpc	r25, r1
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <__stack+0x75>
     8c8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ca:	3c 81       	ldd	r19, Y+4	; 0x04
     8cc:	23 30       	cpi	r18, 0x03	; 3
     8ce:	31 05       	cpc	r19, r1
     8d0:	49 f0       	breq	.+18     	; 0x8e4 <__stack+0x85>
     8d2:	10 c0       	rjmp	.+32     	; 0x8f4 <__stack+0x95>
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
     8d4:	a4 e5       	ldi	r26, 0x54	; 84
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e4 e5       	ldi	r30, 0x54	; 84
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	8f 7b       	andi	r24, 0xBF	; 191
     8e0:	8c 93       	st	X, r24
     8e2:	0f c0       	rjmp	.+30     	; 0x902 <__stack+0xa3>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
     8e4:	a4 e5       	ldi	r26, 0x54	; 84
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e4 e5       	ldi	r30, 0x54	; 84
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	80 64       	ori	r24, 0x40	; 64
     8f0:	8c 93       	st	X, r24
     8f2:	07 c0       	rjmp	.+14     	; 0x902 <__stack+0xa3>
			break;
			default:
			CLR_BIT(MCUCSR,ISC2);	
     8f4:	a4 e5       	ldi	r26, 0x54	; 84
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	e4 e5       	ldi	r30, 0x54	; 84
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	8f 7b       	andi	r24, 0xBF	; 191
     900:	8c 93       	st	X, r24
		}
		break;
	}
}
     902:	2a 96       	adiw	r28, 0x0a	; 10
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <__vector_1>:
/*******************************ISR********************************/
ISR(INT0_vect)
{
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	if (INT0_Fptr!=NULL)
     93e:	80 91 69 00 	lds	r24, 0x0069
     942:	90 91 6a 00 	lds	r25, 0x006A
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	29 f0       	breq	.+10     	; 0x954 <__vector_1+0x40>
	{
		INT0_Fptr();
     94a:	e0 91 69 00 	lds	r30, 0x0069
     94e:	f0 91 6a 00 	lds	r31, 0x006A
     952:	09 95       	icall
	}
}
     954:	cf 91       	pop	r28
     956:	df 91       	pop	r29
     958:	ff 91       	pop	r31
     95a:	ef 91       	pop	r30
     95c:	bf 91       	pop	r27
     95e:	af 91       	pop	r26
     960:	9f 91       	pop	r25
     962:	8f 91       	pop	r24
     964:	7f 91       	pop	r23
     966:	6f 91       	pop	r22
     968:	5f 91       	pop	r21
     96a:	4f 91       	pop	r20
     96c:	3f 91       	pop	r19
     96e:	2f 91       	pop	r18
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_2>:
ISR(INT1_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	2f 93       	push	r18
     986:	3f 93       	push	r19
     988:	4f 93       	push	r20
     98a:	5f 93       	push	r21
     98c:	6f 93       	push	r22
     98e:	7f 93       	push	r23
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	af 93       	push	r26
     996:	bf 93       	push	r27
     998:	ef 93       	push	r30
     99a:	ff 93       	push	r31
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULL)
     9a4:	80 91 6b 00 	lds	r24, 0x006B
     9a8:	90 91 6c 00 	lds	r25, 0x006C
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	29 f0       	breq	.+10     	; 0x9ba <__vector_2+0x40>
	{
		INT1_Fptr();
     9b0:	e0 91 6b 00 	lds	r30, 0x006B
     9b4:	f0 91 6c 00 	lds	r31, 0x006C
     9b8:	09 95       	icall
	}
}
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <__vector_3>:
ISR(INT2_vect)
{
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31
     a02:	df 93       	push	r29
     a04:	cf 93       	push	r28
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULL)
     a0a:	80 91 6d 00 	lds	r24, 0x006D
     a0e:	90 91 6e 00 	lds	r25, 0x006E
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	29 f0       	breq	.+10     	; 0xa20 <__vector_3+0x40>
	{
		INT2_Fptr();
     a16:	e0 91 6d 00 	lds	r30, 0x006D
     a1a:	f0 91 6e 00 	lds	r31, 0x006E
     a1e:	09 95       	icall
	}	
}
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	bf 91       	pop	r27
     a2a:	af 91       	pop	r26
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	7f 91       	pop	r23
     a32:	6f 91       	pop	r22
     a34:	5f 91       	pop	r21
     a36:	4f 91       	pop	r20
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <DIO_Enu_Init>:
#include "DIO_PRIVATE.h"
#include "DIO_CONFIG.h"
#include "DIO_INTERFACE.h"

ES_t DIO_Enu_Init(void)
{
     a46:	df 93       	push	r29
     a48:	cf 93       	push	r28
     a4a:	0f 92       	push	r0
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_EnuErrorState = ES_NOT_OK;
     a50:	19 82       	std	Y+1, r1	; 0x01

    DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     a52:	ea e3       	ldi	r30, 0x3A	; 58
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 ef       	ldi	r24, 0xF0	; 240
     a58:	80 83       	st	Z, r24
    DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     a5a:	e7 e3       	ldi	r30, 0x37	; 55
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	80 83       	st	Z, r24
    DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     a62:	e4 e3       	ldi	r30, 0x34	; 52
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	80 83       	st	Z, r24
    DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     a6a:	e1 e3       	ldi	r30, 0x31	; 49
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	8b ef       	ldi	r24, 0xFB	; 251
     a70:	80 83       	st	Z, r24

    PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     a72:	eb e3       	ldi	r30, 0x3B	; 59
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	80 83       	st	Z, r24
    PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     a7a:	e8 e3       	ldi	r30, 0x38	; 56
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	10 82       	st	Z, r1
    PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     a80:	e5 e3       	ldi	r30, 0x35	; 53
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	10 82       	st	Z, r1
    PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     a86:	e2 e3       	ldi	r30, 0x32	; 50
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	10 82       	st	Z, r1

    Local_EnuErrorState = ES_OK;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	89 83       	std	Y+1, r24	; 0x01

    return Local_EnuErrorState;
     a90:	89 81       	ldd	r24, Y+1	; 0x01
}
     a92:	0f 90       	pop	r0
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <DIO_Enu_SetPortDirection>:

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <DIO_Enu_SetPortDirection+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <DIO_Enu_SetPortDirection+0x8>
     aa2:	0f 92       	push	r0
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	8a 83       	std	Y+2, r24	; 0x02
     aaa:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     aac:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	a8 f5       	brcc	.+106    	; 0xb1e <DIO_Enu_SetPortDirection+0x84>
    {
        switch (Copy_u8PortID)
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	3d 83       	std	Y+5, r19	; 0x05
     abc:	2c 83       	std	Y+4, r18	; 0x04
     abe:	8c 81       	ldd	r24, Y+4	; 0x04
     ac0:	9d 81       	ldd	r25, Y+5	; 0x05
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	91 05       	cpc	r25, r1
     ac6:	d1 f0       	breq	.+52     	; 0xafc <DIO_Enu_SetPortDirection+0x62>
     ac8:	2c 81       	ldd	r18, Y+4	; 0x04
     aca:	3d 81       	ldd	r19, Y+5	; 0x05
     acc:	22 30       	cpi	r18, 0x02	; 2
     ace:	31 05       	cpc	r19, r1
     ad0:	2c f4       	brge	.+10     	; 0xadc <DIO_Enu_SetPortDirection+0x42>
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	00 97       	sbiw	r24, 0x00	; 0
     ad8:	61 f0       	breq	.+24     	; 0xaf2 <DIO_Enu_SetPortDirection+0x58>
     ada:	1e c0       	rjmp	.+60     	; 0xb18 <DIO_Enu_SetPortDirection+0x7e>
     adc:	2c 81       	ldd	r18, Y+4	; 0x04
     ade:	3d 81       	ldd	r19, Y+5	; 0x05
     ae0:	22 30       	cpi	r18, 0x02	; 2
     ae2:	31 05       	cpc	r19, r1
     ae4:	81 f0       	breq	.+32     	; 0xb06 <DIO_Enu_SetPortDirection+0x6c>
     ae6:	8c 81       	ldd	r24, Y+4	; 0x04
     ae8:	9d 81       	ldd	r25, Y+5	; 0x05
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	91 05       	cpc	r25, r1
     aee:	81 f0       	breq	.+32     	; 0xb10 <DIO_Enu_SetPortDirection+0x76>
     af0:	13 c0       	rjmp	.+38     	; 0xb18 <DIO_Enu_SetPortDirection+0x7e>
        {
        case DIO_PORTA:
            DDRA = Copy_u8Value;
     af2:	ea e3       	ldi	r30, 0x3A	; 58
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	80 83       	st	Z, r24
     afa:	0e c0       	rjmp	.+28     	; 0xb18 <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
     afc:	e7 e3       	ldi	r30, 0x37	; 55
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	80 83       	st	Z, r24
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
     b06:	e4 e3       	ldi	r30, 0x34	; 52
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	80 83       	st	Z, r24
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTD:
            DDRD = Copy_u8Value;
     b10:	e1 e3       	ldi	r30, 0x31	; 49
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	89 83       	std	Y+1, r24	; 0x01
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_Enu_SetPortDirection+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_EnuErrorState;
     b22:	89 81       	ldd	r24, Y+1	; 0x01
}
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	08 95       	ret

00000b34 <DIO_Enu_SetPortValue>:

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	00 d0       	rcall	.+0      	; 0xb3a <DIO_Enu_SetPortValue+0x6>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_Enu_SetPortValue+0x8>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	8a 83       	std	Y+2, r24	; 0x02
     b44:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     b46:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	a8 f5       	brcc	.+106    	; 0xbb8 <DIO_Enu_SetPortValue+0x84>
    {
        switch (Copy_u8PortID)
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	3d 83       	std	Y+5, r19	; 0x05
     b56:	2c 83       	std	Y+4, r18	; 0x04
     b58:	8c 81       	ldd	r24, Y+4	; 0x04
     b5a:	9d 81       	ldd	r25, Y+5	; 0x05
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	91 05       	cpc	r25, r1
     b60:	d1 f0       	breq	.+52     	; 0xb96 <DIO_Enu_SetPortValue+0x62>
     b62:	2c 81       	ldd	r18, Y+4	; 0x04
     b64:	3d 81       	ldd	r19, Y+5	; 0x05
     b66:	22 30       	cpi	r18, 0x02	; 2
     b68:	31 05       	cpc	r19, r1
     b6a:	2c f4       	brge	.+10     	; 0xb76 <DIO_Enu_SetPortValue+0x42>
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	9d 81       	ldd	r25, Y+5	; 0x05
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	61 f0       	breq	.+24     	; 0xb8c <DIO_Enu_SetPortValue+0x58>
     b74:	1e c0       	rjmp	.+60     	; 0xbb2 <DIO_Enu_SetPortValue+0x7e>
     b76:	2c 81       	ldd	r18, Y+4	; 0x04
     b78:	3d 81       	ldd	r19, Y+5	; 0x05
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	81 f0       	breq	.+32     	; 0xba0 <DIO_Enu_SetPortValue+0x6c>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	81 f0       	breq	.+32     	; 0xbaa <DIO_Enu_SetPortValue+0x76>
     b8a:	13 c0       	rjmp	.+38     	; 0xbb2 <DIO_Enu_SetPortValue+0x7e>
        {
        case DIO_PORTA:
            PORTA = Copy_u8Value;
     b8c:	eb e3       	ldi	r30, 0x3B	; 59
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	80 83       	st	Z, r24
     b94:	0e c0       	rjmp	.+28     	; 0xbb2 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
     b96:	e8 e3       	ldi	r30, 0x38	; 56
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	80 83       	st	Z, r24
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
     ba0:	e5 e3       	ldi	r30, 0x35	; 53
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	80 83       	st	Z, r24
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTD:
            PORTD = Copy_u8Value;
     baa:	e2 e3       	ldi	r30, 0x32	; 50
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_Enu_SetPortValue+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DIO_Enu_SetPinDirection>:

ES_t DIO_Enu_SetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DIO_Enu_SetPinDirection+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DIO_Enu_SetPinDirection+0x8>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <DIO_Enu_SetPinDirection+0xa>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	8a 83       	std	Y+2, r24	; 0x02
     bde:	6b 83       	std	Y+3, r22	; 0x03
     be0:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
     be2:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8PortID <= DIO_PORTD &&
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	84 30       	cpi	r24, 0x04	; 4
     be8:	08 f0       	brcs	.+2      	; 0xbec <DIO_Enu_SetPinDirection+0x1e>
     bea:	d1 c0       	rjmp	.+418    	; 0xd8e <DIO_Enu_SetPinDirection+0x1c0>
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	88 30       	cpi	r24, 0x08	; 8
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <DIO_Enu_SetPinDirection+0x26>
     bf2:	cd c0       	rjmp	.+410    	; 0xd8e <DIO_Enu_SetPinDirection+0x1c0>
     bf4:	8c 81       	ldd	r24, Y+4	; 0x04
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <DIO_Enu_SetPinDirection+0x2e>
     bfa:	c9 c0       	rjmp	.+402    	; 0xd8e <DIO_Enu_SetPinDirection+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	3e 83       	std	Y+6, r19	; 0x06
     c04:	2d 83       	std	Y+5, r18	; 0x05
     c06:	6d 81       	ldd	r22, Y+5	; 0x05
     c08:	7e 81       	ldd	r23, Y+6	; 0x06
     c0a:	61 30       	cpi	r22, 0x01	; 1
     c0c:	71 05       	cpc	r23, r1
     c0e:	09 f4       	brne	.+2      	; 0xc12 <DIO_Enu_SetPinDirection+0x44>
     c10:	41 c0       	rjmp	.+130    	; 0xc94 <DIO_Enu_SetPinDirection+0xc6>
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	91 05       	cpc	r25, r1
     c1a:	34 f4       	brge	.+12     	; 0xc28 <DIO_Enu_SetPinDirection+0x5a>
     c1c:	2d 81       	ldd	r18, Y+5	; 0x05
     c1e:	3e 81       	ldd	r19, Y+6	; 0x06
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	71 f0       	breq	.+28     	; 0xc42 <DIO_Enu_SetPinDirection+0x74>
     c26:	b0 c0       	rjmp	.+352    	; 0xd88 <DIO_Enu_SetPinDirection+0x1ba>
     c28:	6d 81       	ldd	r22, Y+5	; 0x05
     c2a:	7e 81       	ldd	r23, Y+6	; 0x06
     c2c:	62 30       	cpi	r22, 0x02	; 2
     c2e:	71 05       	cpc	r23, r1
     c30:	09 f4       	brne	.+2      	; 0xc34 <DIO_Enu_SetPinDirection+0x66>
     c32:	59 c0       	rjmp	.+178    	; 0xce6 <DIO_Enu_SetPinDirection+0x118>
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	91 05       	cpc	r25, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <DIO_Enu_SetPinDirection+0x72>
     c3e:	7c c0       	rjmp	.+248    	; 0xd38 <DIO_Enu_SetPinDirection+0x16a>
     c40:	a3 c0       	rjmp	.+326    	; 0xd88 <DIO_Enu_SetPinDirection+0x1ba>
        {
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c42:	aa e3       	ldi	r26, 0x3A	; 58
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	ea e3       	ldi	r30, 0x3A	; 58
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	48 2f       	mov	r20, r24
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_Enu_SetPinDirection+0x90>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	2a 95       	dec	r18
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_Enu_SetPinDirection+0x8c>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
            DDRA |= (Copy_u8Value << Copy_u8PinID);
     c68:	aa e3       	ldi	r26, 0x3A	; 58
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ea e3       	ldi	r30, 0x3A	; 58
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8c 81       	ldd	r24, Y+4	; 0x04
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	b9 01       	movw	r22, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_Enu_SetPinDirection+0xba>
     c84:	66 0f       	add	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	8a 95       	dec	r24
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_Enu_SetPinDirection+0xb6>
     c8c:	cb 01       	movw	r24, r22
     c8e:	84 2b       	or	r24, r20
     c90:	8c 93       	st	X, r24
     c92:	7a c0       	rjmp	.+244    	; 0xd88 <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     c94:	a7 e3       	ldi	r26, 0x37	; 55
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e7 e3       	ldi	r30, 0x37	; 55
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	48 2f       	mov	r20, r24
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_Enu_SetPinDirection+0xe2>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	2a 95       	dec	r18
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_Enu_SetPinDirection+0xde>
     cb4:	80 95       	com	r24
     cb6:	84 23       	and	r24, r20
     cb8:	8c 93       	st	X, r24
            DDRB |= (Copy_u8Value << Copy_u8PinID);
     cba:	a7 e3       	ldi	r26, 0x37	; 55
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e3       	ldi	r30, 0x37	; 55
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	b9 01       	movw	r22, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_Enu_SetPinDirection+0x10c>
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	8a 95       	dec	r24
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_Enu_SetPinDirection+0x108>
     cde:	cb 01       	movw	r24, r22
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	51 c0       	rjmp	.+162    	; 0xd88 <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_Enu_SetPinDirection+0x134>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	2a 95       	dec	r18
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_Enu_SetPinDirection+0x130>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
            DDRC |= (Copy_u8Value << Copy_u8PinID);
     d0c:	a4 e3       	ldi	r26, 0x34	; 52
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e4 e3       	ldi	r30, 0x34	; 52
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	b9 01       	movw	r22, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_Enu_SetPinDirection+0x15e>
     d28:	66 0f       	add	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_Enu_SetPinDirection+0x15a>
     d30:	cb 01       	movw	r24, r22
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	28 c0       	rjmp	.+80     	; 0xd88 <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     d38:	a1 e3       	ldi	r26, 0x31	; 49
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e1 e3       	ldi	r30, 0x31	; 49
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_Enu_SetPinDirection+0x186>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	2a 95       	dec	r18
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_Enu_SetPinDirection+0x182>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
            DDRD |= (Copy_u8Value << Copy_u8PinID);
     d5e:	a1 e3       	ldi	r26, 0x31	; 49
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e1 e3       	ldi	r30, 0x31	; 49
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	b9 01       	movw	r22, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_Enu_SetPinDirection+0x1b0>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	8a 95       	dec	r24
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_Enu_SetPinDirection+0x1ac>
     d82:	cb 01       	movw	r24, r22
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_Enu_SetPinDirection+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
}
     d94:	26 96       	adiw	r28, 0x06	; 6
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <DIO_Enu_SetPinValue>:

ES_t DIO_Enu_SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	00 d0       	rcall	.+0      	; 0xdac <DIO_Enu_SetPinValue+0x6>
     dac:	00 d0       	rcall	.+0      	; 0xdae <DIO_Enu_SetPinValue+0x8>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <DIO_Enu_SetPinValue+0xa>
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	6b 83       	std	Y+3, r22	; 0x03
     db8:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
     dba:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <DIO_Enu_SetPinValue+0x1e>
     dc2:	d1 c0       	rjmp	.+418    	; 0xf66 <DIO_Enu_SetPinValue+0x1c0>
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	88 30       	cpi	r24, 0x08	; 8
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <DIO_Enu_SetPinValue+0x26>
     dca:	cd c0       	rjmp	.+410    	; 0xf66 <DIO_Enu_SetPinValue+0x1c0>
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <DIO_Enu_SetPinValue+0x2e>
     dd2:	c9 c0       	rjmp	.+402    	; 0xf66 <DIO_Enu_SetPinValue+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3e 83       	std	Y+6, r19	; 0x06
     ddc:	2d 83       	std	Y+5, r18	; 0x05
     dde:	6d 81       	ldd	r22, Y+5	; 0x05
     de0:	7e 81       	ldd	r23, Y+6	; 0x06
     de2:	61 30       	cpi	r22, 0x01	; 1
     de4:	71 05       	cpc	r23, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <DIO_Enu_SetPinValue+0x44>
     de8:	41 c0       	rjmp	.+130    	; 0xe6c <DIO_Enu_SetPinValue+0xc6>
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	91 05       	cpc	r25, r1
     df2:	34 f4       	brge	.+12     	; 0xe00 <DIO_Enu_SetPinValue+0x5a>
     df4:	2d 81       	ldd	r18, Y+5	; 0x05
     df6:	3e 81       	ldd	r19, Y+6	; 0x06
     df8:	21 15       	cp	r18, r1
     dfa:	31 05       	cpc	r19, r1
     dfc:	71 f0       	breq	.+28     	; 0xe1a <DIO_Enu_SetPinValue+0x74>
     dfe:	b0 c0       	rjmp	.+352    	; 0xf60 <DIO_Enu_SetPinValue+0x1ba>
     e00:	6d 81       	ldd	r22, Y+5	; 0x05
     e02:	7e 81       	ldd	r23, Y+6	; 0x06
     e04:	62 30       	cpi	r22, 0x02	; 2
     e06:	71 05       	cpc	r23, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <DIO_Enu_SetPinValue+0x66>
     e0a:	59 c0       	rjmp	.+178    	; 0xebe <DIO_Enu_SetPinValue+0x118>
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_Enu_SetPinValue+0x72>
     e16:	7c c0       	rjmp	.+248    	; 0xf10 <DIO_Enu_SetPinValue+0x16a>
     e18:	a3 c0       	rjmp	.+326    	; 0xf60 <DIO_Enu_SetPinValue+0x1ba>
        {
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
     e1a:	ab e3       	ldi	r26, 0x3B	; 59
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e3       	ldi	r30, 0x3B	; 59
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_Enu_SetPinValue+0x90>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	2a 95       	dec	r18
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_Enu_SetPinValue+0x8c>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
            PORTA |= (Copy_u8Value << Copy_u8PinID);
     e40:	ab e3       	ldi	r26, 0x3B	; 59
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	eb e3       	ldi	r30, 0x3B	; 59
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	b9 01       	movw	r22, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_Enu_SetPinValue+0xba>
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	8a 95       	dec	r24
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_Enu_SetPinValue+0xb6>
     e64:	cb 01       	movw	r24, r22
     e66:	84 2b       	or	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	7a c0       	rjmp	.+244    	; 0xf60 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
     e6c:	a8 e3       	ldi	r26, 0x38	; 56
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e8 e3       	ldi	r30, 0x38	; 56
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_Enu_SetPinValue+0xe2>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	2a 95       	dec	r18
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_Enu_SetPinValue+0xde>
     e8c:	80 95       	com	r24
     e8e:	84 23       	and	r24, r20
     e90:	8c 93       	st	X, r24
            PORTB |= (Copy_u8Value << Copy_u8PinID);
     e92:	a8 e3       	ldi	r26, 0x38	; 56
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e8 e3       	ldi	r30, 0x38	; 56
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b9 01       	movw	r22, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_Enu_SetPinValue+0x10c>
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	8a 95       	dec	r24
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_Enu_SetPinValue+0x108>
     eb6:	cb 01       	movw	r24, r22
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	51 c0       	rjmp	.+162    	; 0xf60 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
     ebe:	a5 e3       	ldi	r26, 0x35	; 53
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e3       	ldi	r30, 0x35	; 53
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_Enu_SetPinValue+0x134>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	2a 95       	dec	r18
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_Enu_SetPinValue+0x130>
     ede:	80 95       	com	r24
     ee0:	84 23       	and	r24, r20
     ee2:	8c 93       	st	X, r24
            PORTC |= (Copy_u8Value << Copy_u8PinID);
     ee4:	a5 e3       	ldi	r26, 0x35	; 53
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e5 e3       	ldi	r30, 0x35	; 53
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	b9 01       	movw	r22, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_Enu_SetPinValue+0x15e>
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	8a 95       	dec	r24
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_Enu_SetPinValue+0x15a>
     f08:	cb 01       	movw	r24, r22
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	28 c0       	rjmp	.+80     	; 0xf60 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
     f10:	a2 e3       	ldi	r26, 0x32	; 50
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e2 e3       	ldi	r30, 0x32	; 50
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_Enu_SetPinValue+0x186>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	2a 95       	dec	r18
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_Enu_SetPinValue+0x182>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
            PORTD |= (Copy_u8Value << Copy_u8PinID);
     f36:	a2 e3       	ldi	r26, 0x32	; 50
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e2 e3       	ldi	r30, 0x32	; 50
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	b9 01       	movw	r22, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_Enu_SetPinValue+0x1b0>
     f52:	66 0f       	add	r22, r22
     f54:	77 1f       	adc	r23, r23
     f56:	8a 95       	dec	r24
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_Enu_SetPinValue+0x1ac>
     f5a:	cb 01       	movw	r24, r22
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_Enu_SetPinValue+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f6c:	26 96       	adiw	r28, 0x06	; 6
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <DIO_Enu_TogPortValue>:

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <DIO_Enu_TogPortValue+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <DIO_Enu_TogPortValue+0x8>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_EnuErrorState = ES_NOT_OK;
     f8c:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	84 30       	cpi	r24, 0x04	; 4
     f92:	08 f0       	brcs	.+2      	; 0xf96 <DIO_Enu_TogPortValue+0x18>
     f94:	41 c0       	rjmp	.+130    	; 0x1018 <DIO_Enu_TogPortValue+0x9a>
    {
        switch (Copy_u8PortID)
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3c 83       	std	Y+4, r19	; 0x04
     f9e:	2b 83       	std	Y+3, r18	; 0x03
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	e9 f0       	breq	.+58     	; 0xfe4 <DIO_Enu_TogPortValue+0x66>
     faa:	2b 81       	ldd	r18, Y+3	; 0x03
     fac:	3c 81       	ldd	r19, Y+4	; 0x04
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	2c f4       	brge	.+10     	; 0xfbe <DIO_Enu_TogPortValue+0x40>
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	61 f0       	breq	.+24     	; 0xfd4 <DIO_Enu_TogPortValue+0x56>
     fbc:	2a c0       	rjmp	.+84     	; 0x1012 <DIO_Enu_TogPortValue+0x94>
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	3c 81       	ldd	r19, Y+4	; 0x04
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	b1 f0       	breq	.+44     	; 0xff4 <DIO_Enu_TogPortValue+0x76>
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	c9 f0       	breq	.+50     	; 0x1004 <DIO_Enu_TogPortValue+0x86>
     fd2:	1f c0       	rjmp	.+62     	; 0x1012 <DIO_Enu_TogPortValue+0x94>
        {
        case DIO_PORTA:
            PORTA = ~PORTA;
     fd4:	ab e3       	ldi	r26, 0x3B	; 59
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	eb e3       	ldi	r30, 0x3B	; 59
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 95       	com	r24
     fe0:	8c 93       	st	X, r24
     fe2:	17 c0       	rjmp	.+46     	; 0x1012 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
     fe4:	a8 e3       	ldi	r26, 0x38	; 56
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 e3       	ldi	r30, 0x38	; 56
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	80 95       	com	r24
     ff0:	8c 93       	st	X, r24
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
     ff4:	a5 e3       	ldi	r26, 0x35	; 53
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e5 e3       	ldi	r30, 0x35	; 53
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 95       	com	r24
    1000:	8c 93       	st	X, r24
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTD:
            PORTD = ~PORTD;
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 95       	com	r24
    1010:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_Enu_TogPortValue+0x9e>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_Enu_TogPinValue+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_Enu_TogPinValue+0x8>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    103e:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	08 f0       	brcs	.+2      	; 0x1048 <DIO_Enu_TogPinValue+0x1c>
    1046:	75 c0       	rjmp	.+234    	; 0x1132 <DIO_Enu_TogPinValue+0x106>
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_Enu_TogPinValue+0x24>
    104e:	71 c0       	rjmp	.+226    	; 0x1132 <DIO_Enu_TogPinValue+0x106>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3d 83       	std	Y+5, r19	; 0x05
    1058:	2c 83       	std	Y+4, r18	; 0x04
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	49 f1       	breq	.+82     	; 0x10b6 <DIO_Enu_TogPinValue+0x8a>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_Enu_TogPinValue+0x4c>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <DIO_Enu_TogPinValue+0x62>
    1076:	5a c0       	rjmp	.+180    	; 0x112c <DIO_Enu_TogPinValue+0x100>
    1078:	2c 81       	ldd	r18, Y+4	; 0x04
    107a:	3d 81       	ldd	r19, Y+5	; 0x05
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	71 f1       	breq	.+92     	; 0x10de <DIO_Enu_TogPinValue+0xb2>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	e9 f1       	breq	.+122    	; 0x1106 <DIO_Enu_TogPinValue+0xda>
    108c:	4f c0       	rjmp	.+158    	; 0x112c <DIO_Enu_TogPinValue+0x100>
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
    108e:	ab e3       	ldi	r26, 0x3B	; 59
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e3       	ldi	r30, 0x3B	; 59
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_Enu_TogPinValue+0x80>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_Enu_TogPinValue+0x7c>
    10b0:	84 27       	eor	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	3b c0       	rjmp	.+118    	; 0x112c <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_Enu_TogPinValue+0xa8>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_Enu_TogPinValue+0xa4>
    10d8:	84 27       	eor	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	27 c0       	rjmp	.+78     	; 0x112c <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
    10de:	a5 e3       	ldi	r26, 0x35	; 53
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e3       	ldi	r30, 0x35	; 53
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_Enu_TogPinValue+0xd0>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_Enu_TogPinValue+0xcc>
    1100:	84 27       	eor	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	13 c0       	rjmp	.+38     	; 0x112c <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_Enu_TogPinValue+0xf8>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_Enu_TogPinValue+0xf4>
    1128:	84 27       	eor	r24, r20
    112a:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_Enu_TogPinValue+0x10a>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_Enu_GetPortValue>:

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_Enu_GetPortValue+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_Enu_GetPortValue+0x8>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_Enu_GetPortValue+0xa>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	7c 83       	std	Y+4, r23	; 0x04
    115a:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    115c:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_Enu_GetPortValue+0x20>
    1166:	43 c0       	rjmp	.+134    	; 0x11ee <DIO_Enu_GetPortValue+0xa6>
    {
        if (Copy_u8PortID <= DIO_PORTD)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	e8 f5       	brcc	.+122    	; 0x11e8 <DIO_Enu_GetPortValue+0xa0>
        {
            switch (Copy_u8PortID)
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3e 83       	std	Y+6, r19	; 0x06
    1176:	2d 83       	std	Y+5, r18	; 0x05
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	e1 f0       	breq	.+56     	; 0x11ba <DIO_Enu_GetPortValue+0x72>
    1182:	2d 81       	ldd	r18, Y+5	; 0x05
    1184:	3e 81       	ldd	r19, Y+6	; 0x06
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	2c f4       	brge	.+10     	; 0x1196 <DIO_Enu_GetPortValue+0x4e>
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	61 f0       	breq	.+24     	; 0x11ac <DIO_Enu_GetPortValue+0x64>
    1194:	26 c0       	rjmp	.+76     	; 0x11e2 <DIO_Enu_GetPortValue+0x9a>
    1196:	2d 81       	ldd	r18, Y+5	; 0x05
    1198:	3e 81       	ldd	r19, Y+6	; 0x06
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	a1 f0       	breq	.+40     	; 0x11c8 <DIO_Enu_GetPortValue+0x80>
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	b1 f0       	breq	.+44     	; 0x11d6 <DIO_Enu_GetPortValue+0x8e>
    11aa:	1b c0       	rjmp	.+54     	; 0x11e2 <DIO_Enu_GetPortValue+0x9a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
    11ac:	e9 e3       	ldi	r30, 0x39	; 57
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	eb 81       	ldd	r30, Y+3	; 0x03
    11b4:	fc 81       	ldd	r31, Y+4	; 0x04
    11b6:	80 83       	st	Z, r24
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
    11ba:	e6 e3       	ldi	r30, 0x36	; 54
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	eb 81       	ldd	r30, Y+3	; 0x03
    11c2:	fc 81       	ldd	r31, Y+4	; 0x04
    11c4:	80 83       	st	Z, r24
    11c6:	0d c0       	rjmp	.+26     	; 0x11e2 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    11c8:	e3 e3       	ldi	r30, 0x33	; 51
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	eb 81       	ldd	r30, Y+3	; 0x03
    11d0:	fc 81       	ldd	r31, Y+4	; 0x04
    11d2:	80 83       	st	Z, r24
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = PIND;
    11d6:	e0 e3       	ldi	r30, 0x30	; 48
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	eb 81       	ldd	r30, Y+3	; 0x03
    11de:	fc 81       	ldd	r31, Y+4	; 0x04
    11e0:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <DIO_Enu_GetPortValue+0xaa>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_Enu_GetPortValue+0xaa>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	26 96       	adiw	r28, 0x06	; 6
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	27 97       	sbiw	r28, 0x07	; 7
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	6b 83       	std	Y+3, r22	; 0x03
    121e:	5d 83       	std	Y+5, r21	; 0x05
    1220:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1222:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <DIO_Enu_GetPinValue+0x28>
    122c:	7e c0       	rjmp	.+252    	; 0x132a <DIO_Enu_GetPinValue+0x124>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	08 f0       	brcs	.+2      	; 0x1236 <DIO_Enu_GetPinValue+0x30>
    1234:	77 c0       	rjmp	.+238    	; 0x1324 <DIO_Enu_GetPinValue+0x11e>
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	88 30       	cpi	r24, 0x08	; 8
    123a:	08 f0       	brcs	.+2      	; 0x123e <DIO_Enu_GetPinValue+0x38>
    123c:	73 c0       	rjmp	.+230    	; 0x1324 <DIO_Enu_GetPinValue+0x11e>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3f 83       	std	Y+7, r19	; 0x07
    1246:	2e 83       	std	Y+6, r18	; 0x06
    1248:	4e 81       	ldd	r20, Y+6	; 0x06
    124a:	5f 81       	ldd	r21, Y+7	; 0x07
    124c:	41 30       	cpi	r20, 0x01	; 1
    124e:	51 05       	cpc	r21, r1
    1250:	59 f1       	breq	.+86     	; 0x12a8 <DIO_Enu_GetPinValue+0xa2>
    1252:	8e 81       	ldd	r24, Y+6	; 0x06
    1254:	9f 81       	ldd	r25, Y+7	; 0x07
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	91 05       	cpc	r25, r1
    125a:	34 f4       	brge	.+12     	; 0x1268 <DIO_Enu_GetPinValue+0x62>
    125c:	2e 81       	ldd	r18, Y+6	; 0x06
    125e:	3f 81       	ldd	r19, Y+7	; 0x07
    1260:	21 15       	cp	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	69 f0       	breq	.+26     	; 0x1280 <DIO_Enu_GetPinValue+0x7a>
    1266:	5b c0       	rjmp	.+182    	; 0x131e <DIO_Enu_GetPinValue+0x118>
    1268:	4e 81       	ldd	r20, Y+6	; 0x06
    126a:	5f 81       	ldd	r21, Y+7	; 0x07
    126c:	42 30       	cpi	r20, 0x02	; 2
    126e:	51 05       	cpc	r21, r1
    1270:	79 f1       	breq	.+94     	; 0x12d0 <DIO_Enu_GetPinValue+0xca>
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <DIO_Enu_GetPinValue+0x78>
    127c:	3d c0       	rjmp	.+122    	; 0x12f8 <DIO_Enu_GetPinValue+0xf2>
    127e:	4f c0       	rjmp	.+158    	; 0x131e <DIO_Enu_GetPinValue+0x118>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_Enu_GetPinValue+0x92>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_Enu_GetPinValue+0x8e>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	ec 81       	ldd	r30, Y+4	; 0x04
    12a2:	fd 81       	ldd	r31, Y+5	; 0x05
    12a4:	80 83       	st	Z, r24
    12a6:	3b c0       	rjmp	.+118    	; 0x131e <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    12a8:	e6 e3       	ldi	r30, 0x36	; 54
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_Enu_GetPinValue+0xba>
    12bc:	55 95       	asr	r21
    12be:	47 95       	ror	r20
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_Enu_GetPinValue+0xb6>
    12c4:	ca 01       	movw	r24, r20
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ca:	fd 81       	ldd	r31, Y+5	; 0x05
    12cc:	80 83       	st	Z, r24
    12ce:	27 c0       	rjmp	.+78     	; 0x131e <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
    12d0:	e3 e3       	ldi	r30, 0x33	; 51
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_Enu_GetPinValue+0xe2>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_Enu_GetPinValue+0xde>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	ec 81       	ldd	r30, Y+4	; 0x04
    12f2:	fd 81       	ldd	r31, Y+5	; 0x05
    12f4:	80 83       	st	Z, r24
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    12f8:	e0 e3       	ldi	r30, 0x30	; 48
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_Enu_GetPinValue+0x10a>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_Enu_GetPinValue+0x106>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	05 c0       	rjmp	.+10     	; 0x132e <DIO_Enu_GetPinValue+0x128>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    1324:	83 e0       	ldi	r24, 0x03	; 3
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_Enu_GetPinValue+0x128>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1330:	27 96       	adiw	r28, 0x07	; 7
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <DIO_Enu_WriteHighNibbles>:

ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <DIO_Enu_WriteHighNibbles+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <DIO_Enu_WriteHighNibbles+0x8>
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	6b 83       	std	Y+3, r22	; 0x03

    ES_t Local_EnuErrorState = ES_NOT_OK;
    1354:	19 82       	std	Y+1, r1	; 0x01

	if ( (Copy_u8PortID <= DIO_PORTD))
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	08 f0       	brcs	.+2      	; 0x135e <DIO_Enu_WriteHighNibbles+0x1c>
    135c:	65 c0       	rjmp	.+202    	; 0x1428 <DIO_Enu_WriteHighNibbles+0xe6>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	82 95       	swap	r24
    1362:	80 7f       	andi	r24, 0xF0	; 240
    1364:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PortID)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	3d 83       	std	Y+5, r19	; 0x05
    136e:	2c 83       	std	Y+4, r18	; 0x04
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	29 f1       	breq	.+74     	; 0x13c4 <DIO_Enu_WriteHighNibbles+0x82>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	2c f4       	brge	.+10     	; 0x138e <DIO_Enu_WriteHighNibbles+0x4c>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	61 f0       	breq	.+24     	; 0x13a4 <DIO_Enu_WriteHighNibbles+0x62>
    138c:	4a c0       	rjmp	.+148    	; 0x1422 <DIO_Enu_WriteHighNibbles+0xe0>
    138e:	2c 81       	ldd	r18, Y+4	; 0x04
    1390:	3d 81       	ldd	r19, Y+5	; 0x05
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	31 f1       	breq	.+76     	; 0x13e4 <DIO_Enu_WriteHighNibbles+0xa2>
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	89 f1       	breq	.+98     	; 0x1404 <DIO_Enu_WriteHighNibbles+0xc2>
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <DIO_Enu_WriteHighNibbles+0xe0>
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
    13a4:	ab e3       	ldi	r26, 0x3B	; 59
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e3       	ldi	r30, 0x3B	; 59
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 70       	andi	r24, 0x0F	; 15
    13b0:	8c 93       	st	X, r24
			PORTA |=Copy_u8Value;			
    13b2:	ab e3       	ldi	r26, 0x3B	; 59
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	90 81       	ld	r25, Z
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	89 2b       	or	r24, r25
    13c0:	8c 93       	st	X, r24
    13c2:	2f c0       	rjmp	.+94     	; 0x1422 <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
    13c4:	a8 e3       	ldi	r26, 0x38	; 56
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e3       	ldi	r30, 0x38	; 56
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 70       	andi	r24, 0x0F	; 15
    13d0:	8c 93       	st	X, r24
			PORTB |=Copy_u8Value;
    13d2:	a8 e3       	ldi	r26, 0x38	; 56
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e8 e3       	ldi	r30, 0x38	; 56
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	90 81       	ld	r25, Z
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	89 2b       	or	r24, r25
    13e0:	8c 93       	st	X, r24
    13e2:	1f c0       	rjmp	.+62     	; 0x1422 <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 70       	andi	r24, 0x0F	; 15
    13f0:	8c 93       	st	X, r24
			PORTC |=Copy_u8Value;
    13f2:	a5 e3       	ldi	r26, 0x35	; 53
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	90 81       	ld	r25, Z
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	89 2b       	or	r24, r25
    1400:	8c 93       	st	X, r24
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
    1404:	a2 e3       	ldi	r26, 0x32	; 50
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e2 e3       	ldi	r30, 0x32	; 50
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8f 70       	andi	r24, 0x0F	; 15
    1410:	8c 93       	st	X, r24
			PORTD |=Copy_u8Value;
    1412:	a2 e3       	ldi	r26, 0x32	; 50
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e2 e3       	ldi	r30, 0x32	; 50
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	90 81       	ld	r25, Z
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	89 2b       	or	r24, r25
    1420:	8c 93       	st	X, r24
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_Enu_WriteHighNibbles+0xea>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	89 83       	std	Y+1, r24	; 0x01
    }

	return Local_EnuErrorState ;
    142c:	89 81       	ldd	r24, Y+1	; 0x01

}
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <DIO_Enu_WriteLowNibbles>:

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_Enu_WriteLowNibbles+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_Enu_WriteLowNibbles+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1450:	19 82       	std	Y+1, r1	; 0x01

	if ( (Copy_u8PortID <= DIO_PORTD))
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	84 30       	cpi	r24, 0x04	; 4
    1456:	08 f0       	brcs	.+2      	; 0x145a <DIO_Enu_WriteLowNibbles+0x1c>
    1458:	64 c0       	rjmp	.+200    	; 0x1522 <DIO_Enu_WriteLowNibbles+0xe4>
	{
		Copy_u8Value&=0x0f;
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	8f 70       	andi	r24, 0x0F	; 15
    145e:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PortID)
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	29 f1       	breq	.+74     	; 0x14be <DIO_Enu_WriteLowNibbles+0x80>
    1474:	2c 81       	ldd	r18, Y+4	; 0x04
    1476:	3d 81       	ldd	r19, Y+5	; 0x05
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	2c f4       	brge	.+10     	; 0x1488 <DIO_Enu_WriteLowNibbles+0x4a>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	61 f0       	breq	.+24     	; 0x149e <DIO_Enu_WriteLowNibbles+0x60>
    1486:	4a c0       	rjmp	.+148    	; 0x151c <DIO_Enu_WriteLowNibbles+0xde>
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	31 f1       	breq	.+76     	; 0x14de <DIO_Enu_WriteLowNibbles+0xa0>
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	91 05       	cpc	r25, r1
    149a:	89 f1       	breq	.+98     	; 0x14fe <DIO_Enu_WriteLowNibbles+0xc0>
    149c:	3f c0       	rjmp	.+126    	; 0x151c <DIO_Enu_WriteLowNibbles+0xde>
		{
		case DIO_PORTA :
			PORTA &=0xf0;                   
    149e:	ab e3       	ldi	r26, 0x3B	; 59
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	eb e3       	ldi	r30, 0x3B	; 59
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 7f       	andi	r24, 0xF0	; 240
    14aa:	8c 93       	st	X, r24
			PORTA |=Copy_u8Value;			
    14ac:	ab e3       	ldi	r26, 0x3B	; 59
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	90 81       	ld	r25, Z
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	89 2b       	or	r24, r25
    14ba:	8c 93       	st	X, r24
    14bc:	2f c0       	rjmp	.+94     	; 0x151c <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTB:
			PORTB &=0xf0;                 
    14be:	a8 e3       	ldi	r26, 0x38	; 56
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e8 e3       	ldi	r30, 0x38	; 56
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 7f       	andi	r24, 0xF0	; 240
    14ca:	8c 93       	st	X, r24
			PORTB |=Copy_u8Value;
    14cc:	a8 e3       	ldi	r26, 0x38	; 56
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e8 e3       	ldi	r30, 0x38	; 56
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	90 81       	ld	r25, Z
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	89 2b       	or	r24, r25
    14da:	8c 93       	st	X, r24
    14dc:	1f c0       	rjmp	.+62     	; 0x151c <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
    14de:	a5 e3       	ldi	r26, 0x35	; 53
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e3       	ldi	r30, 0x35	; 53
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 7f       	andi	r24, 0xF0	; 240
    14ea:	8c 93       	st	X, r24
			PORTC |=Copy_u8Value;
    14ec:	a5 e3       	ldi	r26, 0x35	; 53
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e5 e3       	ldi	r30, 0x35	; 53
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	90 81       	ld	r25, Z
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	89 2b       	or	r24, r25
    14fa:	8c 93       	st	X, r24
    14fc:	0f c0       	rjmp	.+30     	; 0x151c <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTD:
			PORTD &=0xf0;                 
    14fe:	a2 e3       	ldi	r26, 0x32	; 50
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e2 e3       	ldi	r30, 0x32	; 50
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 7f       	andi	r24, 0xF0	; 240
    150a:	8c 93       	st	X, r24
			PORTD |=Copy_u8Value;
    150c:	a2 e3       	ldi	r26, 0x32	; 50
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e2 e3       	ldi	r30, 0x32	; 50
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	90 81       	ld	r25, Z
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	89 2b       	or	r24, r25
    151a:	8c 93       	st	X, r24
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_Enu_WriteLowNibbles+0xe8>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	89 83       	std	Y+1, r24	; 0x01
    }

	return Local_EnuErrorState ;
    1526:	89 81       	ldd	r24, Y+1	; 0x01

}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <_exit>:
    1538:	f8 94       	cli

0000153a <__stop_program>:
    153a:	ff cf       	rjmp	.-2      	; 0x153a <__stop_program>
