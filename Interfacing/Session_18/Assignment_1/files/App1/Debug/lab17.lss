
lab17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002050  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000033  00800060  00800060  000020c4  2**0
                  ALLOC
  2 .stab         00002b20  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001311  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_1>
       8:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__vector_2>
       c:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_3>
      10:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_4>
      14:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_5>
      18:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_6>
      1c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_7>
      20:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__vector_8>
      24:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_9>
      28:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_10>
      2c:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 39       	cpi	r26, 0x93	; 147
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
      74:	0c 94 26 10 	jmp	0x204c	; 0x204c <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer1_SetInterruptTime_ms>:
volatile u16 t1,t2,t3,flag=0;

/******************************************Set Interrupt Time******************************************************/

void Timer1_SetInterruptTime_ms (u16 time,void(*LocalFptr)(void))
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <Timer1_SetInterruptTime_ms+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <Timer1_SetInterruptTime_ms+0x8>
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	9a 83       	std	Y+2, r25	; 0x02
      8a:	89 83       	std	Y+1, r24	; 0x01
      8c:	7c 83       	std	Y+4, r23	; 0x04
      8e:	6b 83       	std	Y+3, r22	; 0x03
	TIMER1_voidInit();
      90:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER1_voidInit>
	TIMER1_voidSetCTCA((time*1000)-1);
      94:	29 81       	ldd	r18, Y+1	; 0x01
      96:	3a 81       	ldd	r19, Y+2	; 0x02
      98:	88 ee       	ldi	r24, 0xE8	; 232
      9a:	93 e0       	ldi	r25, 0x03	; 3
      9c:	ac 01       	movw	r20, r24
      9e:	24 9f       	mul	r18, r20
      a0:	c0 01       	movw	r24, r0
      a2:	25 9f       	mul	r18, r21
      a4:	90 0d       	add	r25, r0
      a6:	34 9f       	mul	r19, r20
      a8:	90 0d       	add	r25, r0
      aa:	11 24       	eor	r1, r1
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	0e 94 e7 03 	call	0x7ce	; 0x7ce <TIMER1_voidSetCTCA>
	TIMER_u8SetCallBack(LocalFptr,TIMER1_CTCA_VECTOR_ID);
      b2:	8b 81       	ldd	r24, Y+3	; 0x03
      b4:	9c 81       	ldd	r25, Y+4	; 0x04
      b6:	67 e0       	ldi	r22, 0x07	; 7
      b8:	0e 94 37 06 	call	0xc6e	; 0xc6e <TIMER_u8SetCallBack>
	Timer1_OCA_InterruptEnable();	
      bc:	0e 94 88 05 	call	0xb10	; 0xb10 <Timer1_OCA_InterruptEnable>
}
      c0:	0f 90       	pop	r0
      c2:	0f 90       	pop	r0
      c4:	0f 90       	pop	r0
      c6:	0f 90       	pop	r0
      c8:	cf 91       	pop	r28
      ca:	df 91       	pop	r29
      cc:	08 95       	ret

000000ce <Timer1_SetInterruptTime_us>:

void Timer1_SetInterruptTime_us (u16 time,void(*LocalFptr)(void))
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <Timer1_SetInterruptTime_us+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <Timer1_SetInterruptTime_us+0x8>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	9a 83       	std	Y+2, r25	; 0x02
      dc:	89 83       	std	Y+1, r24	; 0x01
      de:	7c 83       	std	Y+4, r23	; 0x04
      e0:	6b 83       	std	Y+3, r22	; 0x03
	TIMER1_voidInit();
      e2:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER1_voidInit>
	TIMER1_voidSetCTCA((time)-1);
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	9a 81       	ldd	r25, Y+2	; 0x02
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	0e 94 e7 03 	call	0x7ce	; 0x7ce <TIMER1_voidSetCTCA>
	TIMER_u8SetCallBack(LocalFptr,TIMER1_CTCA_VECTOR_ID);
      f0:	8b 81       	ldd	r24, Y+3	; 0x03
      f2:	9c 81       	ldd	r25, Y+4	; 0x04
      f4:	67 e0       	ldi	r22, 0x07	; 7
      f6:	0e 94 37 06 	call	0xc6e	; 0xc6e <TIMER_u8SetCallBack>
	Timer1_OCA_InterruptEnable();
      fa:	0e 94 88 05 	call	0xb10	; 0xb10 <Timer1_OCA_InterruptEnable>
}
      fe:	0f 90       	pop	r0
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	cf 91       	pop	r28
     108:	df 91       	pop	r29
     10a:	08 95       	ret

0000010c <PWM_Measure_SW>:

/**********************************************Measure PWM SW*********************************************************/
void PWM_Measure_SW(u32* Pfreq,u8* Pduty){
     10c:	df 93       	push	r29
     10e:	cf 93       	push	r28
     110:	00 d0       	rcall	.+0      	; 0x112 <PWM_Measure_SW+0x6>
     112:	00 d0       	rcall	.+0      	; 0x114 <PWM_Measure_SW+0x8>
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	9a 83       	std	Y+2, r25	; 0x02
     11a:	89 83       	std	Y+1, r24	; 0x01
     11c:	7c 83       	std	Y+4, r23	; 0x04
     11e:	6b 83       	std	Y+3, r22	; 0x03
	ICU_Init();
     120:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ICU_Init>
	while(period==0&&t_on==0);
     124:	80 91 62 00 	lds	r24, 0x0062
     128:	90 91 63 00 	lds	r25, 0x0063
     12c:	00 97       	sbiw	r24, 0x00	; 0
     12e:	31 f4       	brne	.+12     	; 0x13c <PWM_Measure_SW+0x30>
     130:	80 91 60 00 	lds	r24, 0x0060
     134:	90 91 61 00 	lds	r25, 0x0061
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	a1 f3       	breq	.-24     	; 0x124 <PWM_Measure_SW+0x18>
	*Pfreq=1000000/period;
     13c:	80 91 62 00 	lds	r24, 0x0062
     140:	90 91 63 00 	lds	r25, 0x0063
     144:	9c 01       	movw	r18, r24
     146:	40 e0       	ldi	r20, 0x00	; 0
     148:	50 e0       	ldi	r21, 0x00	; 0
     14a:	80 e4       	ldi	r24, 0x40	; 64
     14c:	92 e4       	ldi	r25, 0x42	; 66
     14e:	af e0       	ldi	r26, 0x0F	; 15
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	bc 01       	movw	r22, r24
     154:	cd 01       	movw	r24, r26
     156:	0e 94 0b 10 	call	0x2016	; 0x2016 <__divmodsi4>
     15a:	da 01       	movw	r26, r20
     15c:	c9 01       	movw	r24, r18
     15e:	e9 81       	ldd	r30, Y+1	; 0x01
     160:	fa 81       	ldd	r31, Y+2	; 0x02
     162:	80 83       	st	Z, r24
     164:	91 83       	std	Z+1, r25	; 0x01
     166:	a2 83       	std	Z+2, r26	; 0x02
     168:	b3 83       	std	Z+3, r27	; 0x03
	*Pduty=(t_on*100)/period;
     16a:	20 91 60 00 	lds	r18, 0x0060
     16e:	30 91 61 00 	lds	r19, 0x0061
     172:	84 e6       	ldi	r24, 0x64	; 100
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	ac 01       	movw	r20, r24
     178:	24 9f       	mul	r18, r20
     17a:	c0 01       	movw	r24, r0
     17c:	25 9f       	mul	r18, r21
     17e:	90 0d       	add	r25, r0
     180:	34 9f       	mul	r19, r20
     182:	90 0d       	add	r25, r0
     184:	11 24       	eor	r1, r1
     186:	20 91 62 00 	lds	r18, 0x0062
     18a:	30 91 63 00 	lds	r19, 0x0063
     18e:	b9 01       	movw	r22, r18
     190:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__udivmodhi4>
     194:	cb 01       	movw	r24, r22
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	80 83       	st	Z, r24
}
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	cf 91       	pop	r28
     1a6:	df 91       	pop	r29
     1a8:	08 95       	ret

000001aa <ICU_Init>:

static void ICU_Init(void)
{
     1aa:	df 93       	push	r29
     1ac:	cf 93       	push	r28
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
#if ICU_EXTI_CHANNEL == EX_INT0
	DIO_Enu_SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8INPUT);
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	62 e0       	ldi	r22, 0x02	; 2
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	0e 94 01 0b 	call	0x1602	; 0x1602 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8INPUT);
#elif ICU_EXTI_CHANNEL == EX_INT2
	DIO_Enu_SetPinDirection(DIO_u8PORTB,DIO_u8PIN2,DIO_u8INPUT);
#endif

	EXI_TriggerEdge(ICU_EXTI_CHANNEL, RISING_EDGE);
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	63 e0       	ldi	r22, 0x03	; 3
     1c0:	0e 94 9c 08 	call	0x1138	; 0x1138 <EXI_TriggerEdge>
	EXI_SetCallBack(ICU_EXTI_CHANNEL, EXTI_Callback);
     1c4:	24 ef       	ldi	r18, 0xF4	; 244
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	b9 01       	movw	r22, r18
     1cc:	0e 94 f5 07 	call	0xfea	; 0xfea <EXI_SetCallBack>
	EXI_Enable(ICU_EXTI_CHANNEL);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	0e 94 2e 08 	call	0x105c	; 0x105c <EXI_Enable>
	TIMER1_voidInit();
     1d6:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER1_voidInit>
	TIMER1_voidSetPreload(0);
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 b9 03 	call	0x772	; 0x772 <TIMER1_voidSetPreload>
}
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	08 95       	ret

000001e8 <EXTI_Callback>:
static void EXTI_Callback(void)
{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <EXTI_Callback+0x6>
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
	static u8 state = ICU_STATE_WAIT_FOR_RISINGEDGE1;

	switch(state)
     1f2:	80 91 66 00 	lds	r24, 0x0066
     1f6:	28 2f       	mov	r18, r24
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	3a 83       	std	Y+2, r19	; 0x02
     1fc:	29 83       	std	Y+1, r18	; 0x01
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	a9 f0       	breq	.+42     	; 0x232 <EXTI_Callback+0x4a>
     208:	29 81       	ldd	r18, Y+1	; 0x01
     20a:	3a 81       	ldd	r19, Y+2	; 0x02
     20c:	22 30       	cpi	r18, 0x02	; 2
     20e:	31 05       	cpc	r19, r1
     210:	f1 f0       	breq	.+60     	; 0x24e <EXTI_Callback+0x66>
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	00 97       	sbiw	r24, 0x00	; 0
     218:	31 f5       	brne	.+76     	; 0x266 <EXTI_Callback+0x7e>
	{
	case ICU_STATE_WAIT_FOR_RISINGEDGE1:
		TIMER1_voidSetPreload(0);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 b9 03 	call	0x772	; 0x772 <TIMER1_voidSetPreload>
		EXI_TriggerEdge(ICU_EXTI_CHANNEL,FALLING_EDGE);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	0e 94 9c 08 	call	0x1138	; 0x1138 <EXI_TriggerEdge>
		state = ICU_STATE_WAIT_FOR_FALLINGEDGE;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	80 93 66 00 	sts	0x0066, r24
     230:	1a c0       	rjmp	.+52     	; 0x266 <EXTI_Callback+0x7e>
		break;
	case ICU_STATE_WAIT_FOR_FALLINGEDGE:
		EXI_TriggerEdge(ICU_EXTI_CHANNEL,RISING_EDGE);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	63 e0       	ldi	r22, 0x03	; 3
     236:	0e 94 9c 08 	call	0x1138	; 0x1138 <EXI_TriggerEdge>
		t_on = TIMER1_u16GetTimerCounterValue();
     23a:	0e 94 35 04 	call	0x86a	; 0x86a <TIMER1_u16GetTimerCounterValue>
     23e:	90 93 61 00 	sts	0x0061, r25
     242:	80 93 60 00 	sts	0x0060, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE2;
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	80 93 66 00 	sts	0x0066, r24
     24c:	0c c0       	rjmp	.+24     	; 0x266 <EXTI_Callback+0x7e>
		break;
	case ICU_STATE_WAIT_FOR_RISINGEDGE2:
		EXI_TriggerEdge(ICU_EXTI_CHANNEL,RISING_EDGE);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	63 e0       	ldi	r22, 0x03	; 3
     252:	0e 94 9c 08 	call	0x1138	; 0x1138 <EXI_TriggerEdge>
		period = TIMER1_u16GetTimerCounterValue();
     256:	0e 94 35 04 	call	0x86a	; 0x86a <TIMER1_u16GetTimerCounterValue>
     25a:	90 93 63 00 	sts	0x0063, r25
     25e:	80 93 62 00 	sts	0x0062, r24
		state = ICU_STATE_WAIT_FOR_RISINGEDGE1;
     262:	10 92 66 00 	sts	0x0066, r1
		break;
	}
}
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <PWM_Measure2>:

void PWM_Measure2(u32* Pfreq,u8* Pduty)
{
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	29 97       	sbiw	r28, 0x09	; 9
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	9f 83       	std	Y+7, r25	; 0x07
     28e:	8e 83       	std	Y+6, r24	; 0x06
     290:	79 87       	std	Y+9, r23	; 0x09
     292:	68 87       	std	Y+8, r22	; 0x08
	u16 Ton,Toff;
	u8 signal;
	TIMER1_voidSetPreload(0);
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 b9 03 	call	0x772	; 0x772 <TIMER1_voidSetPreload>
	do{
	DIO_Enu_GetPinValue(SIGNAL_PORT,SIGNAL_PIN,&signal);
     29c:	9e 01       	movw	r18, r28
     29e:	2b 5f       	subi	r18, 0xFB	; 251
     2a0:	3f 4f       	sbci	r19, 0xFF	; 255
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	66 e0       	ldi	r22, 0x06	; 6
     2a6:	a9 01       	movw	r20, r18
     2a8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <DIO_Enu_GetPinValue>
	}while(signal!=0);
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	88 23       	and	r24, r24
     2b0:	a9 f7       	brne	.-22     	; 0x29c <PWM_Measure2+0x2c>
	do{
	DIO_Enu_GetPinValue(SIGNAL_PORT,SIGNAL_PIN,&signal);
     2b2:	9e 01       	movw	r18, r28
     2b4:	2b 5f       	subi	r18, 0xFB	; 251
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	66 e0       	ldi	r22, 0x06	; 6
     2bc:	a9 01       	movw	r20, r18
     2be:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <DIO_Enu_GetPinValue>
	}while(signal!=1);
     2c2:	8d 81       	ldd	r24, Y+5	; 0x05
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	a9 f7       	brne	.-22     	; 0x2b2 <PWM_Measure2+0x42>
	TIMER1_voidSetPreload(0);
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 b9 03 	call	0x772	; 0x772 <TIMER1_voidSetPreload>
	do{
	DIO_Enu_GetPinValue(SIGNAL_PORT,SIGNAL_PIN,&signal);
     2d0:	9e 01       	movw	r18, r28
     2d2:	2b 5f       	subi	r18, 0xFB	; 251
     2d4:	3f 4f       	sbci	r19, 0xFF	; 255
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	66 e0       	ldi	r22, 0x06	; 6
     2da:	a9 01       	movw	r20, r18
     2dc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <DIO_Enu_GetPinValue>
	}while(signal==1);
     2e0:	8d 81       	ldd	r24, Y+5	; 0x05
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	a9 f3       	breq	.-22     	; 0x2d0 <PWM_Measure2+0x60>
	Ton=TIMER1_u16GetTimerCounterValue();
     2e6:	0e 94 35 04 	call	0x86a	; 0x86a <TIMER1_u16GetTimerCounterValue>
     2ea:	9c 83       	std	Y+4, r25	; 0x04
     2ec:	8b 83       	std	Y+3, r24	; 0x03
	TIMER1_voidSetPreload(0);
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 b9 03 	call	0x772	; 0x772 <TIMER1_voidSetPreload>
	do{
	DIO_Enu_GetPinValue(SIGNAL_PORT,SIGNAL_PIN,&signal);
     2f6:	9e 01       	movw	r18, r28
     2f8:	2b 5f       	subi	r18, 0xFB	; 251
     2fa:	3f 4f       	sbci	r19, 0xFF	; 255
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	66 e0       	ldi	r22, 0x06	; 6
     300:	a9 01       	movw	r20, r18
     302:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <DIO_Enu_GetPinValue>
	}while(signal!=1);
     306:	8d 81       	ldd	r24, Y+5	; 0x05
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	a9 f7       	brne	.-22     	; 0x2f6 <PWM_Measure2+0x86>
	Toff=TIMER1_u16GetTimerCounterValue();
     30c:	0e 94 35 04 	call	0x86a	; 0x86a <TIMER1_u16GetTimerCounterValue>
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	89 83       	std	Y+1, r24	; 0x01
	*Pduty=((u32)Ton*100)/(Ton+Toff);
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	9c 81       	ldd	r25, Y+4	; 0x04
     318:	cc 01       	movw	r24, r24
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b0 e0       	ldi	r27, 0x00	; 0
     31e:	24 e6       	ldi	r18, 0x64	; 100
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	bc 01       	movw	r22, r24
     328:	cd 01       	movw	r24, r26
     32a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulsi3>
     32e:	7b 01       	movw	r14, r22
     330:	8c 01       	movw	r16, r24
     332:	2b 81       	ldd	r18, Y+3	; 0x03
     334:	3c 81       	ldd	r19, Y+4	; 0x04
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	82 0f       	add	r24, r18
     33c:	93 1f       	adc	r25, r19
     33e:	9c 01       	movw	r18, r24
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	c8 01       	movw	r24, r16
     346:	b7 01       	movw	r22, r14
     348:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     34c:	da 01       	movw	r26, r20
     34e:	c9 01       	movw	r24, r18
     350:	e8 85       	ldd	r30, Y+8	; 0x08
     352:	f9 85       	ldd	r31, Y+9	; 0x09
     354:	80 83       	st	Z, r24
	*Pfreq=(u32)1000000/((u32)Toff+Ton);
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	9c 01       	movw	r18, r24
     35c:	40 e0       	ldi	r20, 0x00	; 0
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	9c 81       	ldd	r25, Y+4	; 0x04
     364:	cc 01       	movw	r24, r24
     366:	a0 e0       	ldi	r26, 0x00	; 0
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	28 0f       	add	r18, r24
     36c:	39 1f       	adc	r19, r25
     36e:	4a 1f       	adc	r20, r26
     370:	5b 1f       	adc	r21, r27
     372:	80 e4       	ldi	r24, 0x40	; 64
     374:	92 e4       	ldi	r25, 0x42	; 66
     376:	af e0       	ldi	r26, 0x0F	; 15
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	bc 01       	movw	r22, r24
     37c:	cd 01       	movw	r24, r26
     37e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     382:	da 01       	movw	r26, r20
     384:	c9 01       	movw	r24, r18
     386:	ee 81       	ldd	r30, Y+6	; 0x06
     388:	ff 81       	ldd	r31, Y+7	; 0x07
     38a:	80 83       	st	Z, r24
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	a2 83       	std	Z+2, r26	; 0x02
     390:	b3 83       	std	Z+3, r27	; 0x03
}
     392:	29 96       	adiw	r28, 0x09	; 9
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	cf 91       	pop	r28
     3a0:	df 91       	pop	r29
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	08 95       	ret

000003ac <PWM_Measure_HW>:

/**********************************************Measure PWM HW*********************************************************/

void PWM_Measure_HW(u32* Pfreq,u8* Pduty)
{
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	28 97       	sbiw	r28, 0x08	; 8
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	9e 83       	std	Y+6, r25	; 0x06
     3ca:	8d 83       	std	Y+5, r24	; 0x05
     3cc:	78 87       	std	Y+8, r23	; 0x08
     3ce:	6f 83       	std	Y+7, r22	; 0x07
	u16 Ton,Toff;
	TIMER1_voidSetPreload(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 b9 03 	call	0x772	; 0x772 <TIMER1_voidSetPreload>
	TIMER_u8SetCallBack(Func_ICU_HW,TIMER1_ICU_VECTOR_ID);
     3d8:	8e e6       	ldi	r24, 0x6E	; 110
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	66 e0       	ldi	r22, 0x06	; 6
     3de:	0e 94 37 06 	call	0xc6e	; 0xc6e <TIMER_u8SetCallBack>
	TIMER_voidICUSetTriggerEdge(ICP_RAISING_EDGE);
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <TIMER_voidICUSetTriggerEdge>
	TIMER_voidICUEnableInterrupt();
     3e8:	0e 94 18 05 	call	0xa30	; 0xa30 <TIMER_voidICUEnableInterrupt>
	flag=0;
     3ec:	10 92 65 00 	sts	0x0065, r1
     3f0:	10 92 64 00 	sts	0x0064, r1
	while(flag<3);
     3f4:	80 91 64 00 	lds	r24, 0x0064
     3f8:	90 91 65 00 	lds	r25, 0x0065
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	91 05       	cpc	r25, r1
     400:	c8 f3       	brcs	.-14     	; 0x3f4 <PWM_Measure_HW+0x48>
	Ton=t2-t1;
     402:	20 91 8f 00 	lds	r18, 0x008F
     406:	30 91 90 00 	lds	r19, 0x0090
     40a:	80 91 91 00 	lds	r24, 0x0091
     40e:	90 91 92 00 	lds	r25, 0x0092
     412:	a9 01       	movw	r20, r18
     414:	48 1b       	sub	r20, r24
     416:	59 0b       	sbc	r21, r25
     418:	ca 01       	movw	r24, r20
     41a:	9c 83       	std	Y+4, r25	; 0x04
     41c:	8b 83       	std	Y+3, r24	; 0x03
	Toff=t3-t2;
     41e:	20 91 8d 00 	lds	r18, 0x008D
     422:	30 91 8e 00 	lds	r19, 0x008E
     426:	80 91 8f 00 	lds	r24, 0x008F
     42a:	90 91 90 00 	lds	r25, 0x0090
     42e:	a9 01       	movw	r20, r18
     430:	48 1b       	sub	r20, r24
     432:	59 0b       	sbc	r21, r25
     434:	ca 01       	movw	r24, r20
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	89 83       	std	Y+1, r24	; 0x01
	*Pduty=((u32)Ton*100)/((u32)Ton+Toff);
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	9c 81       	ldd	r25, Y+4	; 0x04
     43e:	cc 01       	movw	r24, r24
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	24 e6       	ldi	r18, 0x64	; 100
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulsi3>
     454:	7b 01       	movw	r14, r22
     456:	8c 01       	movw	r16, r24
     458:	8b 81       	ldd	r24, Y+3	; 0x03
     45a:	9c 81       	ldd	r25, Y+4	; 0x04
     45c:	9c 01       	movw	r18, r24
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	cc 01       	movw	r24, r24
     468:	a0 e0       	ldi	r26, 0x00	; 0
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	28 0f       	add	r18, r24
     46e:	39 1f       	adc	r19, r25
     470:	4a 1f       	adc	r20, r26
     472:	5b 1f       	adc	r21, r27
     474:	c8 01       	movw	r24, r16
     476:	b7 01       	movw	r22, r14
     478:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     47c:	da 01       	movw	r26, r20
     47e:	c9 01       	movw	r24, r18
     480:	ef 81       	ldd	r30, Y+7	; 0x07
     482:	f8 85       	ldd	r31, Y+8	; 0x08
     484:	80 83       	st	Z, r24
	*Pfreq=(u32)1000000/((u32)Toff+Ton);
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	9c 01       	movw	r18, r24
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	8b 81       	ldd	r24, Y+3	; 0x03
     492:	9c 81       	ldd	r25, Y+4	; 0x04
     494:	cc 01       	movw	r24, r24
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	28 0f       	add	r18, r24
     49c:	39 1f       	adc	r19, r25
     49e:	4a 1f       	adc	r20, r26
     4a0:	5b 1f       	adc	r21, r27
     4a2:	80 e4       	ldi	r24, 0x40	; 64
     4a4:	92 e4       	ldi	r25, 0x42	; 66
     4a6:	af e0       	ldi	r26, 0x0F	; 15
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	bc 01       	movw	r22, r24
     4ac:	cd 01       	movw	r24, r26
     4ae:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     4b2:	da 01       	movw	r26, r20
     4b4:	c9 01       	movw	r24, r18
     4b6:	ed 81       	ldd	r30, Y+5	; 0x05
     4b8:	fe 81       	ldd	r31, Y+6	; 0x06
     4ba:	80 83       	st	Z, r24
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	a2 83       	std	Z+2, r26	; 0x02
     4c0:	b3 83       	std	Z+3, r27	; 0x03

}
     4c2:	28 96       	adiw	r28, 0x08	; 8
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <Func_ICU_HW>:

static void Func_ICU_HW(void)
{
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
     4e4:	80 91 64 00 	lds	r24, 0x0064
     4e8:	90 91 65 00 	lds	r25, 0x0065
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	81 f4       	brne	.+32     	; 0x510 <Func_ICU_HW+0x34>
	{
		t1=TIMER_u16GetICR();
     4f0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TIMER_u16GetICR>
     4f4:	90 93 92 00 	sts	0x0092, r25
     4f8:	80 93 91 00 	sts	0x0091, r24
		TIMER_voidICUSetTriggerEdge(ICP_FALLING_EDGE);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <TIMER_voidICUSetTriggerEdge>
		flag=1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 65 00 	sts	0x0065, r25
     50a:	80 93 64 00 	sts	0x0064, r24
     50e:	2c c0       	rjmp	.+88     	; 0x568 <Func_ICU_HW+0x8c>
	}
	else if (flag==1)
     510:	80 91 64 00 	lds	r24, 0x0064
     514:	90 91 65 00 	lds	r25, 0x0065
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	91 05       	cpc	r25, r1
     51c:	81 f4       	brne	.+32     	; 0x53e <Func_ICU_HW+0x62>
	{
		t2=TIMER_u16GetICR();
     51e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TIMER_u16GetICR>
     522:	90 93 90 00 	sts	0x0090, r25
     526:	80 93 8f 00 	sts	0x008F, r24
		TIMER_voidICUSetTriggerEdge(ICP_RAISING_EDGE);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <TIMER_voidICUSetTriggerEdge>
		flag=2;		
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	90 93 65 00 	sts	0x0065, r25
     538:	80 93 64 00 	sts	0x0064, r24
     53c:	15 c0       	rjmp	.+42     	; 0x568 <Func_ICU_HW+0x8c>
	}
	else if (flag==2)
     53e:	80 91 64 00 	lds	r24, 0x0064
     542:	90 91 65 00 	lds	r25, 0x0065
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	91 05       	cpc	r25, r1
     54a:	71 f4       	brne	.+28     	; 0x568 <Func_ICU_HW+0x8c>
	{
		t3=TIMER_u16GetICR();
     54c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TIMER_u16GetICR>
     550:	90 93 8e 00 	sts	0x008E, r25
     554:	80 93 8d 00 	sts	0x008D, r24
		TIMER_voidICUDisableInterrupt();
     558:	0e 94 26 05 	call	0xa4c	; 0xa4c <TIMER_voidICUDisableInterrupt>
		flag=3;
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 65 00 	sts	0x0065, r25
     564:	80 93 64 00 	sts	0x0064, r24
	}	
}
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <main>:
#include"../../4_LIB/STD_TYPES.h"
#include"../../4_LIB/ERROR_STATES.h"
#include "../../1_MCAL/DIO/DIO_INTERFACE.h"
#include"../../1_MCAL/TIMER/TIMER_interface.h"
int main(void) {
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
	DIO_Enu_Init();
     576:	0e 94 3d 0a 	call	0x147a	; 0x147a <DIO_Enu_Init>
	TIMER1_voidInit();
     57a:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER1_voidInit>
	SGI();
     57e:	78 94       	sei
     580:	ff cf       	rjmp	.-2      	; 0x580 <main+0x12>

00000582 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
     58a:	a3 e5       	ldi	r26, 0x53	; 83
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	e3 e5       	ldi	r30, 0x53	; 83
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	8f 7b       	andi	r24, 0xBF	; 191
     596:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
     598:	a3 e5       	ldi	r26, 0x53	; 83
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	e3 e5       	ldi	r30, 0x53	; 83
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	87 7f       	andi	r24, 0xF7	; 247
     5a4:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
     5a6:	e2 e5       	ldi	r30, 0x52	; 82
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	88 e3       	ldi	r24, 0x38	; 56
     5ac:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
     5ae:	a9 e5       	ldi	r26, 0x59	; 89
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	e9 e5       	ldi	r30, 0x59	; 89
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	81 60       	ori	r24, 0x01	; 1
     5ba:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
     5bc:	a3 e5       	ldi	r26, 0x53	; 83
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e3 e5       	ldi	r30, 0x53	; 83
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	88 7f       	andi	r24, 0xF8	; 248
     5c8:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
     5ca:	a3 e5       	ldi	r26, 0x53	; 83
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e3 e5       	ldi	r30, 0x53	; 83
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	82 60       	ori	r24, 0x02	; 2
     5d6:	8c 93       	st	X, r24
}
     5d8:	cf 91       	pop	r28
     5da:	df 91       	pop	r29
     5dc:	08 95       	ret

000005de <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     5de:	df 93       	push	r29
     5e0:	cf 93       	push	r28
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
     5e6:	af e4       	ldi	r26, 0x4F	; 79
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	ef e4       	ldi	r30, 0x4F	; 79
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8e 7f       	andi	r24, 0xFE	; 254
     5f2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
     5f4:	af e4       	ldi	r26, 0x4F	; 79
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	ef e4       	ldi	r30, 0x4F	; 79
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	82 60       	ori	r24, 0x02	; 2
     600:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
     602:	ae e4       	ldi	r26, 0x4E	; 78
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	ee e4       	ldi	r30, 0x4E	; 78
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	88 60       	ori	r24, 0x08	; 8
     60e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
     610:	ae e4       	ldi	r26, 0x4E	; 78
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	ee e4       	ldi	r30, 0x4E	; 78
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	80 61       	ori	r24, 0x10	; 16
     61c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
     61e:	ea e4       	ldi	r30, 0x4A	; 74
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 e9       	ldi	r24, 0x90	; 144
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
     62a:	e8 e4       	ldi	r30, 0x48	; 72
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	11 82       	std	Z+1, r1	; 0x01
     630:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
     632:	e6 e4       	ldi	r30, 0x46	; 70
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	87 ee       	ldi	r24, 0xE7	; 231
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	91 83       	std	Z+1, r25	; 0x01
     63c:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
				#elif TIMER1_ICR_EDGE == FALLING_EDGE
					CLR_BIT(TCCR1B , TCCR1B_ICES1) ;
     63e:	ae e4       	ldi	r26, 0x4E	; 78
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	ee e4       	ldi	r30, 0x4E	; 78
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	8f 7b       	andi	r24, 0xBF	; 191
     64a:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
     64c:	af e4       	ldi	r26, 0x4F	; 79
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	ef e4       	ldi	r30, 0x4F	; 79
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	8f 7b       	andi	r24, 0xBF	; 191
     658:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
     65a:	af e4       	ldi	r26, 0x4F	; 79
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	ef e4       	ldi	r30, 0x4F	; 79
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	80 68       	ori	r24, 0x80	; 128
     666:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1A_MODE Config"
			#endif

			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
     668:	af e4       	ldi	r26, 0x4F	; 79
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	ef e4       	ldi	r30, 0x4F	; 79
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	8f 7e       	andi	r24, 0xEF	; 239
     674:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
     676:	af e4       	ldi	r26, 0x4F	; 79
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	ef e4       	ldi	r30, 0x4F	; 79
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	8f 7d       	andi	r24, 0xDF	; 223
     682:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
     684:	a9 e5       	ldi	r26, 0x59	; 89
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	e9 e5       	ldi	r30, 0x59	; 89
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	8b 7f       	andi	r24, 0xFB	; 251
     690:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
     692:	a9 e5       	ldi	r26, 0x59	; 89
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	e9 e5       	ldi	r30, 0x59	; 89
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7e       	andi	r24, 0xEF	; 239
     69e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
     6a0:	a9 e5       	ldi	r26, 0x59	; 89
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	e9 e5       	ldi	r30, 0x59	; 89
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	87 7f       	andi	r24, 0xF7	; 247
     6ac:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
     6ae:	a9 e5       	ldi	r26, 0x59	; 89
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	e9 e5       	ldi	r30, 0x59	; 89
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	8f 7d       	andi	r24, 0xDF	; 223
     6ba:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
     6bc:	ae e4       	ldi	r26, 0x4E	; 78
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	ee e4       	ldi	r30, 0x4E	; 78
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	88 7f       	andi	r24, 0xF8	; 248
     6c8:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
     6ca:	ae e4       	ldi	r26, 0x4E	; 78
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	ee e4       	ldi	r30, 0x4E	; 78
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	82 60       	ori	r24, 0x02	; 2
     6d6:	8c 93       	st	X, r24


}
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
     6e6:	a5 e4       	ldi	r26, 0x45	; 69
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	e5 e4       	ldi	r30, 0x45	; 69
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	8f 7b       	andi	r24, 0xBF	; 191
     6f2:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
     6f4:	a5 e4       	ldi	r26, 0x45	; 69
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e5 e4       	ldi	r30, 0x45	; 69
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	88 60       	ori	r24, 0x08	; 8
     700:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
     702:	e3 e4       	ldi	r30, 0x43	; 67
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	8a ef       	ldi	r24, 0xFA	; 250
     708:	80 83       	st	Z, r24
            /*Set OCR2 mode*/
            #if TIMER2_OC2_MODE == TIMER_OC_DISCONNECTED
            CLR_BIT(TCCR2 , TCCR2_COM20) ;
     70a:	a5 e4       	ldi	r26, 0x45	; 69
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	e5 e4       	ldi	r30, 0x45	; 69
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	8f 7e       	andi	r24, 0xEF	; 239
     716:	8c 93       	st	X, r24
            CLR_BIT(TCCR2 , TCCR2_COM21) ;
     718:	a5 e4       	ldi	r26, 0x45	; 69
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	e5 e4       	ldi	r30, 0x45	; 69
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	8f 7d       	andi	r24, 0xDF	; 223
     724:	8c 93       	st	X, r24
            #endif
			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
     726:	a9 e5       	ldi	r26, 0x59	; 89
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e9 e5       	ldi	r30, 0x59	; 89
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	80 68       	ori	r24, 0x80	; 128
     732:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
     734:	a5 e4       	ldi	r26, 0x45	; 69
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	e5 e4       	ldi	r30, 0x45	; 69
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	80 81       	ld	r24, Z
     73e:	88 7f       	andi	r24, 0xF8	; 248
     740:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
     742:	a5 e4       	ldi	r26, 0x45	; 69
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e5 e4       	ldi	r30, 0x45	; 69
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	82 60       	ori	r24, 0x02	; 2
     74e:	8c 93       	st	X, r24
}
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	0f 92       	push	r0
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
     762:	e2 e5       	ldi	r30, 0x52	; 82
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	80 83       	st	Z, r24
}
     76a:	0f 90       	pop	r0
     76c:	cf 91       	pop	r28
     76e:	df 91       	pop	r29
     770:	08 95       	ret

00000772 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
     772:	df 93       	push	r29
     774:	cf 93       	push	r28
     776:	00 d0       	rcall	.+0      	; 0x778 <TIMER1_voidSetPreload+0x6>
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	9a 83       	std	Y+2, r25	; 0x02
     77e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
     780:	ec e4       	ldi	r30, 0x4C	; 76
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	80 83       	st	Z, r24
}
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	cf 91       	pop	r28
     792:	df 91       	pop	r29
     794:	08 95       	ret

00000796 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
     796:	df 93       	push	r29
     798:	cf 93       	push	r28
     79a:	0f 92       	push	r0
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
     7a2:	e4 e4       	ldi	r30, 0x44	; 68
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	80 83       	st	Z, r24
}
     7aa:	0f 90       	pop	r0
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	08 95       	ret

000007b2 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	0f 92       	push	r0
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
     7be:	ec e5       	ldi	r30, 0x5C	; 92
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	80 83       	st	Z, r24
}
     7c6:	0f 90       	pop	r0
     7c8:	cf 91       	pop	r28
     7ca:	df 91       	pop	r29
     7cc:	08 95       	ret

000007ce <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)//ton
{
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <TIMER1_voidSetCTCA+0x6>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
     7dc:	ea e4       	ldi	r30, 0x4A	; 74
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	80 83       	st	Z, r24
}
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <TIMER1_voidSetCTCB+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
     800:	e8 e4       	ldi	r30, 0x48	; 72
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	80 83       	st	Z, r24
}
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	cf 91       	pop	r28
     812:	df 91       	pop	r29
     814:	08 95       	ret

00000816 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
     816:	df 93       	push	r29
     818:	cf 93       	push	r28
     81a:	0f 92       	push	r0
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
     822:	e3 e4       	ldi	r30, 0x43	; 67
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	80 83       	st	Z, r24
}
     82a:	0f 90       	pop	r0
     82c:	cf 91       	pop	r28
     82e:	df 91       	pop	r29
     830:	08 95       	ret

00000832 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)//period
{
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	00 d0       	rcall	.+0      	; 0x838 <TIMER1_voidSetICR1+0x6>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	9a 83       	std	Y+2, r25	; 0x02
     83e:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
     840:	e6 e4       	ldi	r30, 0x46	; 70
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	91 83       	std	Z+1, r25	; 0x01
     84a:	80 83       	st	Z, r24
}
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	cf 91       	pop	r28
     852:	df 91       	pop	r29
     854:	08 95       	ret

00000856 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
     85e:	e2 e5       	ldi	r30, 0x52	; 82
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
}
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	08 95       	ret

0000086a <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     872:	ec e4       	ldi	r30, 0x4C	; 76
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
}
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	08 95       	ret

00000880 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
     888:	e4 e4       	ldi	r30, 0x44	; 68
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
}
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	08 95       	ret

00000894 <GET_PERSCALER_SELECT>:

/*******************************************************************************************************************/
u8 GET_PERSCALER_SELECT(u8 TIMER_NUM){
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	00 d0       	rcall	.+0      	; 0x89a <GET_PERSCALER_SELECT+0x6>
     89a:	0f 92       	push	r0
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	8b 83       	std	Y+3, r24	; 0x03
	u16 prescaler=0;
     8a2:	1a 82       	std	Y+2, r1	; 0x02
     8a4:	19 82       	std	Y+1, r1	; 0x01
#if TIMER0_PRESCALER == TIMER_NO_CLOCK_SOURCE
	prescaler=0;
#elif TIMER0_PRESCALER ==TIMER_NO_PRESCALER_FACTOR
	prescaler=0;
#elif TIMER0_PRESCALER ==TIMER_DIVISION_FACTOR_8
	prescaler=8;
     8a6:	88 e0       	ldi	r24, 0x08	; 8
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
#elif TIMER2_PRESCALER ==TIMER_DIVISION_FACTOR_1024
	prescaler=1024;
#endif

#endif
return prescaler;
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	cf 91       	pop	r28
     8b8:	df 91       	pop	r29
     8ba:	08 95       	ret

000008bc <Generate_PWM_SW>:

void Generate_PWM_SW(u32 freq,u8 duty){
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	2b 97       	sbiw	r28, 0x0b	; 11
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	6f 83       	std	Y+7, r22	; 0x07
     8da:	78 87       	std	Y+8, r23	; 0x08
     8dc:	89 87       	std	Y+9, r24	; 0x09
     8de:	9a 87       	std	Y+10, r25	; 0x0a
     8e0:	4b 87       	std	Y+11, r20	; 0x0b
	u32 top ;
	u16 temp_OCR;
#if GENERATE_PWM_PIN == OC1A
	TIMER1_voidInit();
     8e2:	0e 94 ef 02 	call	0x5de	; 0x5de <TIMER1_voidInit>
	top = (F_CPU / (freq * GET_PERSCALER_SELECT(TIMER1))) - 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0e 94 4a 04 	call	0x894	; 0x894 <GET_PERSCALER_SELECT>
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	2f 81       	ldd	r18, Y+7	; 0x07
     8f6:	38 85       	ldd	r19, Y+8	; 0x08
     8f8:	49 85       	ldd	r20, Y+9	; 0x09
     8fa:	5a 85       	ldd	r21, Y+10	; 0x0a
     8fc:	bc 01       	movw	r22, r24
     8fe:	cd 01       	movw	r24, r26
     900:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulsi3>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	92 e1       	ldi	r25, 0x12	; 18
     90c:	aa e7       	ldi	r26, 0x7A	; 122
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	bc 01       	movw	r22, r24
     912:	cd 01       	movw	r24, r26
     914:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     918:	da 01       	movw	r26, r20
     91a:	c9 01       	movw	r24, r18
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	a1 09       	sbc	r26, r1
     920:	b1 09       	sbc	r27, r1
     922:	8b 83       	std	Y+3, r24	; 0x03
     924:	9c 83       	std	Y+4, r25	; 0x04
     926:	ad 83       	std	Y+5, r26	; 0x05
     928:	be 83       	std	Y+6, r27	; 0x06
	temp_OCR=(duty * (top + 1)) / 100 - 1;
     92a:	8b 85       	ldd	r24, Y+11	; 0x0b
     92c:	e8 2e       	mov	r14, r24
     92e:	ff 24       	eor	r15, r15
     930:	00 e0       	ldi	r16, 0x00	; 0
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9c 81       	ldd	r25, Y+4	; 0x04
     938:	ad 81       	ldd	r26, Y+5	; 0x05
     93a:	be 81       	ldd	r27, Y+6	; 0x06
     93c:	9c 01       	movw	r18, r24
     93e:	ad 01       	movw	r20, r26
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	4f 4f       	sbci	r20, 0xFF	; 255
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	c8 01       	movw	r24, r16
     94a:	b7 01       	movw	r22, r14
     94c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulsi3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	24 e6       	ldi	r18, 0x64	; 100
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     964:	da 01       	movw	r26, r20
     966:	c9 01       	movw	r24, r18
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidSetICR1(top);
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	0e 94 19 04 	call	0x832	; 0x832 <TIMER1_voidSetICR1>
	TIMER1_voidSetCTCA(temp_OCR);
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <TIMER1_voidSetCTCA>
	top = (F_CPU / (freq * GET_PERSCALER_SELECT(TIMER1))) - 1;
	temp_OCR=(duty * (top + 1)) / 100 - 1;
	TIMER1_voidSetICR1(top);
	TIMER1_voidSetCTCB(temp_OCR);
#endif
}
     97e:	2b 96       	adiw	r28, 0x0b	; 11
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	cf 91       	pop	r28
     98c:	df 91       	pop	r29
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret

00000998 <TIMER_voidSetPWM>:

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	00 d0       	rcall	.+0      	; 0x99e <TIMER_voidSetPWM+0x6>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	9a 83       	std	Y+2, r25	; 0x02
     9a4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
     9a6:	ea e4       	ldi	r30, 0x4A	; 74
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	91 83       	std	Z+1, r25	; 0x01
     9b0:	80 83       	st	Z, r24
}
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	08 95       	ret

000009bc <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     9c4:	ae e4       	ldi	r26, 0x4E	; 78
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	ee e4       	ldi	r30, 0x4E	; 78
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	80 64       	ori	r24, 0x40	; 64
     9d0:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
     9d2:	a9 e5       	ldi	r26, 0x59	; 89
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e9 e5       	ldi	r30, 0x59	; 89
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	80 62       	ori	r24, 0x20	; 32
     9de:	8c 93       	st	X, r24
}
     9e0:	cf 91       	pop	r28
     9e2:	df 91       	pop	r29
     9e4:	08 95       	ret

000009e6 <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
ES_t TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
     9e6:	df 93       	push	r29
     9e8:	cf 93       	push	r28
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <TIMER_voidICUSetTriggerEdge+0x6>
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorStatus = ES_OK ;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	89 83       	std	Y+1, r24	; 0x01

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	41 f4       	brne	.+16     	; 0xa0c <TIMER_voidICUSetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     9fc:	ae e4       	ldi	r26, 0x4E	; 78
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	ee e4       	ldi	r30, 0x4E	; 78
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	80 64       	ori	r24, 0x40	; 64
     a08:	8c 93       	st	X, r24
     a0a:	0c c0       	rjmp	.+24     	; 0xa24 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	88 23       	and	r24, r24
     a10:	41 f4       	brne	.+16     	; 0xa22 <TIMER_voidICUSetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
     a12:	ae e4       	ldi	r26, 0x4E	; 78
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ee e4       	ldi	r30, 0x4E	; 78
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	8f 7b       	andi	r24, 0xBF	; 191
     a1e:	8c 93       	st	X, r24
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = ES_NOT_OK ;
     a22:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
     a24:	89 81       	ldd	r24, Y+1	; 0x01

}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	cf 91       	pop	r28
     a2c:	df 91       	pop	r29
     a2e:	08 95       	ret

00000a30 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
     a30:	df 93       	push	r29
     a32:	cf 93       	push	r28
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
     a38:	a9 e5       	ldi	r26, 0x59	; 89
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e9 e5       	ldi	r30, 0x59	; 89
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	80 62       	ori	r24, 0x20	; 32
     a44:	8c 93       	st	X, r24
}
     a46:	cf 91       	pop	r28
     a48:	df 91       	pop	r29
     a4a:	08 95       	ret

00000a4c <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
     a54:	a9 e5       	ldi	r26, 0x59	; 89
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e9 e5       	ldi	r30, 0x59	; 89
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	8f 7d       	andi	r24, 0xDF	; 223
     a60:	8c 93       	st	X, r24
}
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	08 95       	ret

00000a68 <Timer0_OV_InterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Timer0_OV_InterruptEnable(void)
{
     a68:	df 93       	push	r29
     a6a:	cf 93       	push	r28
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
     a70:	a9 e5       	ldi	r26, 0x59	; 89
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e9 e5       	ldi	r30, 0x59	; 89
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	8c 93       	st	X, r24
}
     a7e:	cf 91       	pop	r28
     a80:	df 91       	pop	r29
     a82:	08 95       	ret

00000a84 <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
     a8c:	a9 e5       	ldi	r26, 0x59	; 89
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e9 e5       	ldi	r30, 0x59	; 89
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	8e 7f       	andi	r24, 0xFE	; 254
     a98:	8c 93       	st	X, r24
}
     a9a:	cf 91       	pop	r28
     a9c:	df 91       	pop	r29
     a9e:	08 95       	ret

00000aa0 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE0);
     aa8:	a9 e5       	ldi	r26, 0x59	; 89
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e9 e5       	ldi	r30, 0x59	; 89
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	8c 93       	st	X, r24
}
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE0);
     ac4:	a9 e5       	ldi	r26, 0x59	; 89
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e9 e5       	ldi	r30, 0x59	; 89
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	8d 7f       	andi	r24, 0xFD	; 253
     ad0:	8c 93       	st	X, r24
}
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <Timer1_OVF_InterruptEnable>:

void Timer1_OVF_InterruptEnable(void)
{
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE1);
     ae0:	a9 e5       	ldi	r26, 0x59	; 89
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e9 e5       	ldi	r30, 0x59	; 89
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	84 60       	ori	r24, 0x04	; 4
     aec:	8c 93       	st	X, r24
}
     aee:	cf 91       	pop	r28
     af0:	df 91       	pop	r29
     af2:	08 95       	ret

00000af4 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE1);
     afc:	a9 e5       	ldi	r26, 0x59	; 89
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e9 e5       	ldi	r30, 0x59	; 89
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8b 7f       	andi	r24, 0xFB	; 251
     b08:	8c 93       	st	X, r24
}
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	08 95       	ret

00000b10 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE1A);
     b18:	a9 e5       	ldi	r26, 0x59	; 89
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e9 e5       	ldi	r30, 0x59	; 89
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	80 61       	ori	r24, 0x10	; 16
     b24:	8c 93       	st	X, r24
}
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
     b34:	a9 e5       	ldi	r26, 0x59	; 89
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e9 e5       	ldi	r30, 0x59	; 89
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	8f 7e       	andi	r24, 0xEF	; 239
     b40:	8c 93       	st	X, r24
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE1B);
     b50:	a9 e5       	ldi	r26, 0x59	; 89
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e9 e5       	ldi	r30, 0x59	; 89
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	88 60       	ori	r24, 0x08	; 8
     b5c:	8c 93       	st	X, r24
}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
     b6c:	a9 e5       	ldi	r26, 0x59	; 89
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e9 e5       	ldi	r30, 0x59	; 89
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	87 7f       	andi	r24, 0xF7	; 247
     b78:	8c 93       	st	X, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Timer2_OV_InterruptEnable>:

void Timer2_OV_InterruptEnable(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
     b88:	a9 e5       	ldi	r26, 0x59	; 89
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e9 e5       	ldi	r30, 0x59	; 89
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 64       	ori	r24, 0x40	; 64
     b94:	8c 93       	st	X, r24
}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <Timer2_OV_InterruptDisable>:
void Timer2_OV_InterruptDisable(void)
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE2);
     ba4:	a9 e5       	ldi	r26, 0x59	; 89
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e9 e5       	ldi	r30, 0x59	; 89
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	8f 7b       	andi	r24, 0xBF	; 191
     bb0:	8c 93       	st	X, r24
}
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Timer2_OC_InterruptEnable>:
void Timer2_OC_InterruptEnable(void)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE2);
     bc0:	a9 e5       	ldi	r26, 0x59	; 89
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e9 e5       	ldi	r30, 0x59	; 89
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	80 68       	ori	r24, 0x80	; 128
     bcc:	8c 93       	st	X, r24
}
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <Timer2_OC_InterruptDisable>:

void Timer2_OC_InterruptDisable(void)
{
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE2);
     bdc:	a9 e5       	ldi	r26, 0x59	; 89
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e9 e5       	ldi	r30, 0x59	; 89
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8f 77       	andi	r24, 0x7F	; 127
     be8:	8c 93       	st	X, r24
}
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <TIMER_u16GetICR>:



u16 TIMER_u16GetICR(void)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     bf8:	e6 e4       	ldi	r30, 0x46	; 70
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
}
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <TIMER_voidWDTSleep>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
     c0e:	a1 e4       	ldi	r26, 0x41	; 65
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e4       	ldi	r30, 0x41	; 65
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	88 7f       	andi	r24, 0xF8	; 248
     c1a:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
     c1c:	a1 e4       	ldi	r26, 0x41	; 65
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e1 e4       	ldi	r30, 0x41	; 65
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	86 60       	ori	r24, 0x06	; 6
     c28:	8c 93       	st	X, r24
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
     c38:	a1 e4       	ldi	r26, 0x41	; 65
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e1 e4       	ldi	r30, 0x41	; 65
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	88 60       	ori	r24, 0x08	; 8
     c44:	8c 93       	st	X, r24
}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
     c54:	a1 e4       	ldi	r26, 0x41	; 65
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e1 e4       	ldi	r30, 0x41	; 65
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	88 61       	ori	r24, 0x18	; 24
     c60:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
     c62:	e1 e4       	ldi	r30, 0x41	; 65
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	10 82       	st	Z, r1
}
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

ES_t TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <TIMER_u8SetCallBack+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <TIMER_u8SetCallBack+0x8>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	9b 83       	std	Y+3, r25	; 0x03
     c7c:	8a 83       	std	Y+2, r24	; 0x02
     c7e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_u8ErrorState = ES_OK ;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	9b 81       	ldd	r25, Y+3	; 0x03
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	69 f0       	breq	.+26     	; 0xca6 <TIMER_u8SetCallBack+0x38>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	fc 01       	movw	r30, r24
     c98:	e9 59       	subi	r30, 0x99	; 153
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	80 83       	st	Z, r24
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <TIMER_u8SetCallBack+0x3c>
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
     cba:	1f 92       	push	r1
     cbc:	0f 92       	push	r0
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
     ce4:	80 91 7d 00 	lds	r24, 0x007D
     ce8:	90 91 7e 00 	lds	r25, 0x007E
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	29 f0       	breq	.+10     	; 0xcfa <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
     cf0:	e0 91 7d 00 	lds	r30, 0x007D
     cf4:	f0 91 7e 00 	lds	r31, 0x007E
     cf8:	09 95       	icall
	}
}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
     d4a:	80 91 7b 00 	lds	r24, 0x007B
     d4e:	90 91 7c 00 	lds	r25, 0x007C
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	29 f0       	breq	.+10     	; 0xd60 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
     d56:	e0 91 7b 00 	lds	r30, 0x007B
     d5a:	f0 91 7c 00 	lds	r31, 0x007C
     d5e:	09 95       	icall
	}
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	ff 91       	pop	r31
     d66:	ef 91       	pop	r30
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	0f 90       	pop	r0
     d82:	1f 90       	pop	r1
     d84:	18 95       	reti

00000d86 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
     db0:	80 91 79 00 	lds	r24, 0x0079
     db4:	90 91 7a 00 	lds	r25, 0x007A
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	29 f0       	breq	.+10     	; 0xdc6 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
     dbc:	e0 91 79 00 	lds	r30, 0x0079
     dc0:	f0 91 7a 00 	lds	r31, 0x007A
     dc4:	09 95       	icall
	}
}
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	ff 91       	pop	r31
     dcc:	ef 91       	pop	r30
     dce:	bf 91       	pop	r27
     dd0:	af 91       	pop	r26
     dd2:	9f 91       	pop	r25
     dd4:	8f 91       	pop	r24
     dd6:	7f 91       	pop	r23
     dd8:	6f 91       	pop	r22
     dda:	5f 91       	pop	r21
     ddc:	4f 91       	pop	r20
     dde:	3f 91       	pop	r19
     de0:	2f 91       	pop	r18
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
     e16:	80 91 77 00 	lds	r24, 0x0077
     e1a:	90 91 78 00 	lds	r25, 0x0078
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	29 f0       	breq	.+10     	; 0xe2c <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
     e22:	e0 91 77 00 	lds	r30, 0x0077
     e26:	f0 91 78 00 	lds	r31, 0x0078
     e2a:	09 95       	icall
	}
}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
     e7c:	80 91 75 00 	lds	r24, 0x0075
     e80:	90 91 76 00 	lds	r25, 0x0076
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	29 f0       	breq	.+10     	; 0xe92 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
     e88:	e0 91 75 00 	lds	r30, 0x0075
     e8c:	f0 91 76 00 	lds	r31, 0x0076
     e90:	09 95       	icall
	}
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
     ee2:	80 91 73 00 	lds	r24, 0x0073
     ee6:	90 91 74 00 	lds	r25, 0x0074
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	29 f0       	breq	.+10     	; 0xef8 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
     eee:	e0 91 73 00 	lds	r30, 0x0073
     ef2:	f0 91 74 00 	lds	r31, 0x0074
     ef6:	09 95       	icall
	}
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
     f48:	80 91 71 00 	lds	r24, 0x0071
     f4c:	90 91 72 00 	lds	r25, 0x0072
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	29 f0       	breq	.+10     	; 0xf5e <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
     f54:	e0 91 71 00 	lds	r30, 0x0071
     f58:	f0 91 72 00 	lds	r31, 0x0072
     f5c:	09 95       	icall
	}
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
     fae:	80 91 6f 00 	lds	r24, 0x006F
     fb2:	90 91 70 00 	lds	r25, 0x0070
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
     fba:	e0 91 6f 00 	lds	r30, 0x006F
     fbe:	f0 91 70 00 	lds	r31, 0x0070
     fc2:	09 95       	icall
	}
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	bf 91       	pop	r27
     fce:	af 91       	pop	r26
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	7f 91       	pop	r23
     fd6:	6f 91       	pop	r22
     fd8:	5f 91       	pop	r21
     fda:	4f 91       	pop	r20
     fdc:	3f 91       	pop	r19
     fde:	2f 91       	pop	r18
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <EXI_SetCallBack>:
static void (*INT1_Fptr) (void)=NULL;
static void (*INT2_Fptr) (void)=NULL;

/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <EXI_SetCallBack+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <EXI_SetCallBack+0x8>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	7b 83       	std	Y+3, r23	; 0x03
     ffc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	3d 83       	std	Y+5, r19	; 0x05
    1006:	2c 83       	std	Y+4, r18	; 0x04
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	91 05       	cpc	r25, r1
    1010:	81 f0       	breq	.+32     	; 0x1032 <EXI_SetCallBack+0x48>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	91 f0       	breq	.+36     	; 0x1040 <EXI_SetCallBack+0x56>
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	a1 f4       	brne	.+40     	; 0x104c <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	90 93 88 00 	sts	0x0088, r25
    102c:	80 93 87 00 	sts	0x0087, r24
    1030:	0d c0       	rjmp	.+26     	; 0x104c <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	9b 81       	ldd	r25, Y+3	; 0x03
    1036:	90 93 8a 00 	sts	0x008A, r25
    103a:	80 93 89 00 	sts	0x0089, r24
    103e:	06 c0       	rjmp	.+12     	; 0x104c <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	90 93 8c 00 	sts	0x008C, r25
    1048:	80 93 8b 00 	sts	0x008B, r24
		break;
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <EXI_Enable>:
/************************************Enable/Disable functions***********************************/
void EXI_Enable(ExInterruptSource_type Interrupt)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <EXI_Enable+0x6>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3b 83       	std	Y+3, r19	; 0x03
    1072:	2a 83       	std	Y+2, r18	; 0x02
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	89 f0       	breq	.+34     	; 0x10a0 <EXI_Enable+0x44>
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	a1 f0       	breq	.+40     	; 0x10b0 <EXI_Enable+0x54>
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	b9 f4       	brne	.+46     	; 0x10be <EXI_Enable+0x62>
		case EX_INT0:
		SET_BIT(GICR,INT0);
    1090:	ab e5       	ldi	r26, 0x5B	; 91
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	eb e5       	ldi	r30, 0x5B	; 91
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	8c 93       	st	X, r24
    109e:	0f c0       	rjmp	.+30     	; 0x10be <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
    10a0:	ab e5       	ldi	r26, 0x5B	; 91
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e5       	ldi	r30, 0x5B	; 91
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
    10b0:	ab e5       	ldi	r26, 0x5B	; 91
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	eb e5       	ldi	r30, 0x5B	; 91
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 62       	ori	r24, 0x20	; 32
    10bc:	8c 93       	st	X, r24
		break;
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <EXI_Disable>:

void EXI_Disable(ExInterruptSource_type Interrupt)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <EXI_Disable+0x6>
    10d0:	0f 92       	push	r0
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3b 83       	std	Y+3, r19	; 0x03
    10e0:	2a 83       	std	Y+2, r18	; 0x02
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	91 05       	cpc	r25, r1
    10ea:	89 f0       	breq	.+34     	; 0x110e <EXI_Disable+0x44>
    10ec:	2a 81       	ldd	r18, Y+2	; 0x02
    10ee:	3b 81       	ldd	r19, Y+3	; 0x03
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	a1 f0       	breq	.+40     	; 0x111e <EXI_Disable+0x54>
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	9b 81       	ldd	r25, Y+3	; 0x03
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	b9 f4       	brne	.+46     	; 0x112c <EXI_Disable+0x62>
		case EX_INT0:
		CLR_BIT(GICR,INT0);
    10fe:	ab e5       	ldi	r26, 0x5B	; 91
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e5       	ldi	r30, 0x5B	; 91
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	8c 93       	st	X, r24
    110c:	0f c0       	rjmp	.+30     	; 0x112c <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLR_BIT(GICR,INT1);
    110e:	ab e5       	ldi	r26, 0x5B	; 91
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	eb e5       	ldi	r30, 0x5B	; 91
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	8c 93       	st	X, r24
    111c:	07 c0       	rjmp	.+14     	; 0x112c <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLR_BIT(GICR,INT2);
    111e:	ab e5       	ldi	r26, 0x5B	; 91
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e5       	ldi	r30, 0x5B	; 91
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 7d       	andi	r24, 0xDF	; 223
    112a:	8c 93       	st	X, r24
		break;
	}
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <EXI_TriggerEdge>:
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	2a 97       	sbiw	r28, 0x0a	; 10
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3a 87       	std	Y+10, r19	; 0x0a
    1158:	29 87       	std	Y+9, r18	; 0x09
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	09 f4       	brne	.+2      	; 0x1166 <EXI_TriggerEdge+0x2e>
    1164:	66 c0       	rjmp	.+204    	; 0x1232 <EXI_TriggerEdge+0xfa>
    1166:	29 85       	ldd	r18, Y+9	; 0x09
    1168:	3a 85       	ldd	r19, Y+10	; 0x0a
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <EXI_TriggerEdge+0x3a>
    1170:	bb c0       	rjmp	.+374    	; 0x12e8 <EXI_TriggerEdge+0x1b0>
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	09 f0       	breq	.+2      	; 0x117c <EXI_TriggerEdge+0x44>
    117a:	dd c0       	rjmp	.+442    	; 0x1336 <EXI_TriggerEdge+0x1fe>
		case EX_INT0:
		switch(Edge){
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	38 87       	std	Y+8, r19	; 0x08
    1184:	2f 83       	std	Y+7, r18	; 0x07
    1186:	8f 81       	ldd	r24, Y+7	; 0x07
    1188:	98 85       	ldd	r25, Y+8	; 0x08
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	21 f1       	breq	.+72     	; 0x11d8 <EXI_TriggerEdge+0xa0>
    1190:	2f 81       	ldd	r18, Y+7	; 0x07
    1192:	38 85       	ldd	r19, Y+8	; 0x08
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	2c f4       	brge	.+10     	; 0x11a4 <EXI_TriggerEdge+0x6c>
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	98 85       	ldd	r25, Y+8	; 0x08
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	61 f0       	breq	.+24     	; 0x11ba <EXI_TriggerEdge+0x82>
    11a2:	c9 c0       	rjmp	.+402    	; 0x1336 <EXI_TriggerEdge+0x1fe>
    11a4:	2f 81       	ldd	r18, Y+7	; 0x07
    11a6:	38 85       	ldd	r19, Y+8	; 0x08
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	21 f1       	breq	.+72     	; 0x11f6 <EXI_TriggerEdge+0xbe>
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	98 85       	ldd	r25, Y+8	; 0x08
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	91 05       	cpc	r25, r1
    11b6:	71 f1       	breq	.+92     	; 0x1214 <EXI_TriggerEdge+0xdc>
    11b8:	be c0       	rjmp	.+380    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
    11ba:	a5 e5       	ldi	r26, 0x55	; 85
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e5 e5       	ldi	r30, 0x55	; 85
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    11c8:	a5 e5       	ldi	r26, 0x55	; 85
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e5 e5       	ldi	r30, 0x55	; 85
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8d 7f       	andi	r24, 0xFD	; 253
    11d4:	8c 93       	st	X, r24
    11d6:	af c0       	rjmp	.+350    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    11d8:	a5 e5       	ldi	r26, 0x55	; 85
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e5       	ldi	r30, 0x55	; 85
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	81 60       	ori	r24, 0x01	; 1
    11e4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01);
    11e6:	a5 e5       	ldi	r26, 0x55	; 85
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e5       	ldi	r30, 0x55	; 85
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8d 7f       	andi	r24, 0xFD	; 253
    11f2:	8c 93       	st	X, r24
    11f4:	a0 c0       	rjmp	.+320    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
    11f6:	a5 e5       	ldi	r26, 0x55	; 85
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e5       	ldi	r30, 0x55	; 85
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8e 7f       	andi	r24, 0xFE	; 254
    1202:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1204:	a5 e5       	ldi	r26, 0x55	; 85
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e5 e5       	ldi	r30, 0x55	; 85
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	82 60       	ori	r24, 0x02	; 2
    1210:	8c 93       	st	X, r24
    1212:	91 c0       	rjmp	.+290    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    1214:	a5 e5       	ldi	r26, 0x55	; 85
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e5       	ldi	r30, 0x55	; 85
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    1222:	a5 e5       	ldi	r26, 0x55	; 85
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e5       	ldi	r30, 0x55	; 85
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8c 93       	st	X, r24
    1230:	82 c0       	rjmp	.+260    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT1:
		switch(Edge){
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3e 83       	std	Y+6, r19	; 0x06
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	21 f1       	breq	.+72     	; 0x128e <EXI_TriggerEdge+0x156>
    1246:	2d 81       	ldd	r18, Y+5	; 0x05
    1248:	3e 81       	ldd	r19, Y+6	; 0x06
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <EXI_TriggerEdge+0x122>
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	61 f0       	breq	.+24     	; 0x1270 <EXI_TriggerEdge+0x138>
    1258:	6e c0       	rjmp	.+220    	; 0x1336 <EXI_TriggerEdge+0x1fe>
    125a:	2d 81       	ldd	r18, Y+5	; 0x05
    125c:	3e 81       	ldd	r19, Y+6	; 0x06
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	21 f1       	breq	.+72     	; 0x12ac <EXI_TriggerEdge+0x174>
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	71 f1       	breq	.+92     	; 0x12ca <EXI_TriggerEdge+0x192>
    126e:	63 c0       	rjmp	.+198    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
    1270:	a5 e5       	ldi	r26, 0x55	; 85
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e5 e5       	ldi	r30, 0x55	; 85
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8b 7f       	andi	r24, 0xFB	; 251
    127c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
    127e:	a5 e5       	ldi	r26, 0x55	; 85
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e5       	ldi	r30, 0x55	; 85
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	87 7f       	andi	r24, 0xF7	; 247
    128a:	8c 93       	st	X, r24
    128c:	54 c0       	rjmp	.+168    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
    128e:	a5 e5       	ldi	r26, 0x55	; 85
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e5       	ldi	r30, 0x55	; 85
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	84 60       	ori	r24, 0x04	; 4
    129a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC11);
    129c:	a5 e5       	ldi	r26, 0x55	; 85
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e5       	ldi	r30, 0x55	; 85
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	87 7f       	andi	r24, 0xF7	; 247
    12a8:	8c 93       	st	X, r24
    12aa:	45 c0       	rjmp	.+138    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
    12ac:	a5 e5       	ldi	r26, 0x55	; 85
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e5       	ldi	r30, 0x55	; 85
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8b 7f       	andi	r24, 0xFB	; 251
    12b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    12ba:	a5 e5       	ldi	r26, 0x55	; 85
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e5       	ldi	r30, 0x55	; 85
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 60       	ori	r24, 0x08	; 8
    12c6:	8c 93       	st	X, r24
    12c8:	36 c0       	rjmp	.+108    	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    12ca:	a5 e5       	ldi	r26, 0x55	; 85
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e5       	ldi	r30, 0x55	; 85
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	84 60       	ori	r24, 0x04	; 4
    12d6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    12d8:	a5 e5       	ldi	r26, 0x55	; 85
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e5       	ldi	r30, 0x55	; 85
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
    12e6:	27 c0       	rjmp	.+78     	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT2:
		switch(Edge){
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3c 83       	std	Y+4, r19	; 0x04
    12f0:	2b 83       	std	Y+3, r18	; 0x03
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	91 05       	cpc	r25, r1
    12fa:	31 f0       	breq	.+12     	; 0x1308 <EXI_TriggerEdge+0x1d0>
    12fc:	2b 81       	ldd	r18, Y+3	; 0x03
    12fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1300:	23 30       	cpi	r18, 0x03	; 3
    1302:	31 05       	cpc	r19, r1
    1304:	49 f0       	breq	.+18     	; 0x1318 <EXI_TriggerEdge+0x1e0>
    1306:	10 c0       	rjmp	.+32     	; 0x1328 <EXI_TriggerEdge+0x1f0>
			case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
    1308:	a4 e5       	ldi	r26, 0x54	; 84
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e4 e5       	ldi	r30, 0x54	; 84
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7b       	andi	r24, 0xBF	; 191
    1314:	8c 93       	st	X, r24
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    1318:	a4 e5       	ldi	r26, 0x54	; 84
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e4 e5       	ldi	r30, 0x54	; 84
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 64       	ori	r24, 0x40	; 64
    1324:	8c 93       	st	X, r24
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <EXI_TriggerEdge+0x1fe>
			break;
			default:
			CLR_BIT(MCUCSR,ISC2);	
    1328:	a4 e5       	ldi	r26, 0x54	; 84
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e4 e5       	ldi	r30, 0x54	; 84
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7b       	andi	r24, 0xBF	; 191
    1334:	8c 93       	st	X, r24
		}
		break;
	}
}
    1336:	2a 96       	adiw	r28, 0x0a	; 10
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <__vector_1>:
/*******************************ISR********************************/
ISR(INT0_vect)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if (INT0_Fptr!=NULL)
    1372:	80 91 87 00 	lds	r24, 0x0087
    1376:	90 91 88 00 	lds	r25, 0x0088
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_1+0x40>
	{
		INT0_Fptr();
    137e:	e0 91 87 00 	lds	r30, 0x0087
    1382:	f0 91 88 00 	lds	r31, 0x0088
    1386:	09 95       	icall
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <__vector_2>:
ISR(INT1_vect)
{
    13ae:	1f 92       	push	r1
    13b0:	0f 92       	push	r0
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	0f 92       	push	r0
    13b6:	11 24       	eor	r1, r1
    13b8:	2f 93       	push	r18
    13ba:	3f 93       	push	r19
    13bc:	4f 93       	push	r20
    13be:	5f 93       	push	r21
    13c0:	6f 93       	push	r22
    13c2:	7f 93       	push	r23
    13c4:	8f 93       	push	r24
    13c6:	9f 93       	push	r25
    13c8:	af 93       	push	r26
    13ca:	bf 93       	push	r27
    13cc:	ef 93       	push	r30
    13ce:	ff 93       	push	r31
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULL)
    13d8:	80 91 89 00 	lds	r24, 0x0089
    13dc:	90 91 8a 00 	lds	r25, 0x008A
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	29 f0       	breq	.+10     	; 0x13ee <__vector_2+0x40>
	{
		INT1_Fptr();
    13e4:	e0 91 89 00 	lds	r30, 0x0089
    13e8:	f0 91 8a 00 	lds	r31, 0x008A
    13ec:	09 95       	icall
	}
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <__vector_3>:
ISR(INT2_vect)
{
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULL)
    143e:	80 91 8b 00 	lds	r24, 0x008B
    1442:	90 91 8c 00 	lds	r25, 0x008C
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	29 f0       	breq	.+10     	; 0x1454 <__vector_3+0x40>
	{
		INT2_Fptr();
    144a:	e0 91 8b 00 	lds	r30, 0x008B
    144e:	f0 91 8c 00 	lds	r31, 0x008C
    1452:	09 95       	icall
	}	
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <DIO_Enu_Init>:
#include "DIO_PRIVATE.h"
#include "DIO_CONFIG.h"
#include "DIO_INTERFACE.h"

ES_t DIO_Enu_Init(void)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1484:	19 82       	std	Y+1, r1	; 0x01

    DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    1486:	ea e3       	ldi	r30, 0x3A	; 58
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 ef       	ldi	r24, 0xF0	; 240
    148c:	80 83       	st	Z, r24
    DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    148e:	e7 e3       	ldi	r30, 0x37	; 55
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8b ef       	ldi	r24, 0xFB	; 251
    1494:	80 83       	st	Z, r24
    DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    1496:	e4 e3       	ldi	r30, 0x34	; 52
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	80 83       	st	Z, r24
    DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    149e:	e1 e3       	ldi	r30, 0x31	; 49
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	83 ef       	ldi	r24, 0xF3	; 243
    14a4:	80 83       	st	Z, r24

    PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    14a6:	eb e3       	ldi	r30, 0x3B	; 59
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	80 83       	st	Z, r24
    PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    14ae:	e8 e3       	ldi	r30, 0x38	; 56
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	10 82       	st	Z, r1
    PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    14b4:	e5 e3       	ldi	r30, 0x35	; 53
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	10 82       	st	Z, r1
    PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    14ba:	e2 e3       	ldi	r30, 0x32	; 50
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	10 82       	st	Z, r1

    Local_EnuErrorState = ES_OK;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01

    return Local_EnuErrorState;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_Enu_SetPortDirection>:

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_Enu_SetPortDirection+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_Enu_SetPortDirection+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    14e0:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	a8 f5       	brcc	.+106    	; 0x1552 <DIO_Enu_SetPortDirection+0x84>
    {
        switch (Copy_u8PortID)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	d1 f0       	breq	.+52     	; 0x1530 <DIO_Enu_SetPortDirection+0x62>
    14fc:	2c 81       	ldd	r18, Y+4	; 0x04
    14fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	2c f4       	brge	.+10     	; 0x1510 <DIO_Enu_SetPortDirection+0x42>
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 f0       	breq	.+24     	; 0x1526 <DIO_Enu_SetPortDirection+0x58>
    150e:	1e c0       	rjmp	.+60     	; 0x154c <DIO_Enu_SetPortDirection+0x7e>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <DIO_Enu_SetPortDirection+0x6c>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	91 05       	cpc	r25, r1
    1522:	81 f0       	breq	.+32     	; 0x1544 <DIO_Enu_SetPortDirection+0x76>
    1524:	13 c0       	rjmp	.+38     	; 0x154c <DIO_Enu_SetPortDirection+0x7e>
        {
        case DIO_PORTA:
            DDRA = Copy_u8Value;
    1526:	ea e3       	ldi	r30, 0x3A	; 58
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	80 83       	st	Z, r24
    152e:	0e c0       	rjmp	.+28     	; 0x154c <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
    1530:	e7 e3       	ldi	r30, 0x37	; 55
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	80 83       	st	Z, r24
    1538:	09 c0       	rjmp	.+18     	; 0x154c <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
    153a:	e4 e3       	ldi	r30, 0x34	; 52
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	80 83       	st	Z, r24
    1542:	04 c0       	rjmp	.+8      	; 0x154c <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTD:
            DDRD = Copy_u8Value;
    1544:	e1 e3       	ldi	r30, 0x31	; 49
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_Enu_SetPortDirection+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_EnuErrorState;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_Enu_SetPortValue>:

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_Enu_SetPortValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_Enu_SetPortValue+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    157a:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	a8 f5       	brcc	.+106    	; 0x15ec <DIO_Enu_SetPortValue+0x84>
    {
        switch (Copy_u8PortID)
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3d 83       	std	Y+5, r19	; 0x05
    158a:	2c 83       	std	Y+4, r18	; 0x04
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	91 05       	cpc	r25, r1
    1594:	d1 f0       	breq	.+52     	; 0x15ca <DIO_Enu_SetPortValue+0x62>
    1596:	2c 81       	ldd	r18, Y+4	; 0x04
    1598:	3d 81       	ldd	r19, Y+5	; 0x05
    159a:	22 30       	cpi	r18, 0x02	; 2
    159c:	31 05       	cpc	r19, r1
    159e:	2c f4       	brge	.+10     	; 0x15aa <DIO_Enu_SetPortValue+0x42>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <DIO_Enu_SetPortValue+0x58>
    15a8:	1e c0       	rjmp	.+60     	; 0x15e6 <DIO_Enu_SetPortValue+0x7e>
    15aa:	2c 81       	ldd	r18, Y+4	; 0x04
    15ac:	3d 81       	ldd	r19, Y+5	; 0x05
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <DIO_Enu_SetPortValue+0x6c>
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	83 30       	cpi	r24, 0x03	; 3
    15ba:	91 05       	cpc	r25, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <DIO_Enu_SetPortValue+0x76>
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <DIO_Enu_SetPortValue+0x7e>
        {
        case DIO_PORTA:
            PORTA = Copy_u8Value;
    15c0:	eb e3       	ldi	r30, 0x3B	; 59
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	80 83       	st	Z, r24
    15c8:	0e c0       	rjmp	.+28     	; 0x15e6 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
    15ca:	e8 e3       	ldi	r30, 0x38	; 56
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	80 83       	st	Z, r24
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	80 83       	st	Z, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTD:
            PORTD = Copy_u8Value;
    15de:	e2 e3       	ldi	r30, 0x32	; 50
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_Enu_SetPortValue+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_Enu_SetPinDirection>:

ES_t DIO_Enu_SetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_Enu_SetPinDirection+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_Enu_SetPinDirection+0x8>
    160a:	00 d0       	rcall	.+0      	; 0x160c <DIO_Enu_SetPinDirection+0xa>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	6b 83       	std	Y+3, r22	; 0x03
    1614:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1616:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8PortID <= DIO_PORTD &&
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	08 f0       	brcs	.+2      	; 0x1620 <DIO_Enu_SetPinDirection+0x1e>
    161e:	d1 c0       	rjmp	.+418    	; 0x17c2 <DIO_Enu_SetPinDirection+0x1c0>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 30       	cpi	r24, 0x08	; 8
    1624:	08 f0       	brcs	.+2      	; 0x1628 <DIO_Enu_SetPinDirection+0x26>
    1626:	cd c0       	rjmp	.+410    	; 0x17c2 <DIO_Enu_SetPinDirection+0x1c0>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	08 f0       	brcs	.+2      	; 0x1630 <DIO_Enu_SetPinDirection+0x2e>
    162e:	c9 c0       	rjmp	.+402    	; 0x17c2 <DIO_Enu_SetPinDirection+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3e 83       	std	Y+6, r19	; 0x06
    1638:	2d 83       	std	Y+5, r18	; 0x05
    163a:	6d 81       	ldd	r22, Y+5	; 0x05
    163c:	7e 81       	ldd	r23, Y+6	; 0x06
    163e:	61 30       	cpi	r22, 0x01	; 1
    1640:	71 05       	cpc	r23, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <DIO_Enu_SetPinDirection+0x44>
    1644:	41 c0       	rjmp	.+130    	; 0x16c8 <DIO_Enu_SetPinDirection+0xc6>
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	91 05       	cpc	r25, r1
    164e:	34 f4       	brge	.+12     	; 0x165c <DIO_Enu_SetPinDirection+0x5a>
    1650:	2d 81       	ldd	r18, Y+5	; 0x05
    1652:	3e 81       	ldd	r19, Y+6	; 0x06
    1654:	21 15       	cp	r18, r1
    1656:	31 05       	cpc	r19, r1
    1658:	71 f0       	breq	.+28     	; 0x1676 <DIO_Enu_SetPinDirection+0x74>
    165a:	b0 c0       	rjmp	.+352    	; 0x17bc <DIO_Enu_SetPinDirection+0x1ba>
    165c:	6d 81       	ldd	r22, Y+5	; 0x05
    165e:	7e 81       	ldd	r23, Y+6	; 0x06
    1660:	62 30       	cpi	r22, 0x02	; 2
    1662:	71 05       	cpc	r23, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <DIO_Enu_SetPinDirection+0x66>
    1666:	59 c0       	rjmp	.+178    	; 0x171a <DIO_Enu_SetPinDirection+0x118>
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <DIO_Enu_SetPinDirection+0x72>
    1672:	7c c0       	rjmp	.+248    	; 0x176c <DIO_Enu_SetPinDirection+0x16a>
    1674:	a3 c0       	rjmp	.+326    	; 0x17bc <DIO_Enu_SetPinDirection+0x1ba>
        {
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1676:	aa e3       	ldi	r26, 0x3A	; 58
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	ea e3       	ldi	r30, 0x3A	; 58
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_Enu_SetPinDirection+0x90>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	2a 95       	dec	r18
    1694:	e2 f7       	brpl	.-8      	; 0x168e <DIO_Enu_SetPinDirection+0x8c>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
            DDRA |= (Copy_u8Value << Copy_u8PinID);
    169c:	aa e3       	ldi	r26, 0x3A	; 58
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ea e3       	ldi	r30, 0x3A	; 58
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b9 01       	movw	r22, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_Enu_SetPinDirection+0xba>
    16b8:	66 0f       	add	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	8a 95       	dec	r24
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_Enu_SetPinDirection+0xb6>
    16c0:	cb 01       	movw	r24, r22
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	7a c0       	rjmp	.+244    	; 0x17bc <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    16c8:	a7 e3       	ldi	r26, 0x37	; 55
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e7 e3       	ldi	r30, 0x37	; 55
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_Enu_SetPinDirection+0xe2>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_Enu_SetPinDirection+0xde>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
            DDRB |= (Copy_u8Value << Copy_u8PinID);
    16ee:	a7 e3       	ldi	r26, 0x37	; 55
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e7 e3       	ldi	r30, 0x37	; 55
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b9 01       	movw	r22, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_Enu_SetPinDirection+0x10c>
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_Enu_SetPinDirection+0x108>
    1712:	cb 01       	movw	r24, r22
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	51 c0       	rjmp	.+162    	; 0x17bc <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    171a:	a4 e3       	ldi	r26, 0x34	; 52
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e4 e3       	ldi	r30, 0x34	; 52
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_Enu_SetPinDirection+0x134>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	2a 95       	dec	r18
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_Enu_SetPinDirection+0x130>
    173a:	80 95       	com	r24
    173c:	84 23       	and	r24, r20
    173e:	8c 93       	st	X, r24
            DDRC |= (Copy_u8Value << Copy_u8PinID);
    1740:	a4 e3       	ldi	r26, 0x34	; 52
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e4 e3       	ldi	r30, 0x34	; 52
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	b9 01       	movw	r22, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_Enu_SetPinDirection+0x15e>
    175c:	66 0f       	add	r22, r22
    175e:	77 1f       	adc	r23, r23
    1760:	8a 95       	dec	r24
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_Enu_SetPinDirection+0x15a>
    1764:	cb 01       	movw	r24, r22
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	28 c0       	rjmp	.+80     	; 0x17bc <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    176c:	a1 e3       	ldi	r26, 0x31	; 49
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e1 e3       	ldi	r30, 0x31	; 49
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_Enu_SetPinDirection+0x186>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	2a 95       	dec	r18
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_Enu_SetPinDirection+0x182>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    1792:	a1 e3       	ldi	r26, 0x31	; 49
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e1 e3       	ldi	r30, 0x31	; 49
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	b9 01       	movw	r22, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <DIO_Enu_SetPinDirection+0x1b0>
    17ae:	66 0f       	add	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	8a 95       	dec	r24
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <DIO_Enu_SetPinDirection+0x1ac>
    17b6:	cb 01       	movw	r24, r22
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_Enu_SetPinDirection+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c8:	26 96       	adiw	r28, 0x06	; 6
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <DIO_Enu_SetPinValue>:

ES_t DIO_Enu_SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <DIO_Enu_SetPinValue+0x6>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <DIO_Enu_SetPinValue+0x8>
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <DIO_Enu_SetPinValue+0xa>
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
    17ec:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    17ee:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	08 f0       	brcs	.+2      	; 0x17f8 <DIO_Enu_SetPinValue+0x1e>
    17f6:	d1 c0       	rjmp	.+418    	; 0x199a <DIO_Enu_SetPinValue+0x1c0>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <DIO_Enu_SetPinValue+0x26>
    17fe:	cd c0       	rjmp	.+410    	; 0x199a <DIO_Enu_SetPinValue+0x1c0>
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	08 f0       	brcs	.+2      	; 0x1808 <DIO_Enu_SetPinValue+0x2e>
    1806:	c9 c0       	rjmp	.+402    	; 0x199a <DIO_Enu_SetPinValue+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3e 83       	std	Y+6, r19	; 0x06
    1810:	2d 83       	std	Y+5, r18	; 0x05
    1812:	6d 81       	ldd	r22, Y+5	; 0x05
    1814:	7e 81       	ldd	r23, Y+6	; 0x06
    1816:	61 30       	cpi	r22, 0x01	; 1
    1818:	71 05       	cpc	r23, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <DIO_Enu_SetPinValue+0x44>
    181c:	41 c0       	rjmp	.+130    	; 0x18a0 <DIO_Enu_SetPinValue+0xc6>
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	91 05       	cpc	r25, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <DIO_Enu_SetPinValue+0x5a>
    1828:	2d 81       	ldd	r18, Y+5	; 0x05
    182a:	3e 81       	ldd	r19, Y+6	; 0x06
    182c:	21 15       	cp	r18, r1
    182e:	31 05       	cpc	r19, r1
    1830:	71 f0       	breq	.+28     	; 0x184e <DIO_Enu_SetPinValue+0x74>
    1832:	b0 c0       	rjmp	.+352    	; 0x1994 <DIO_Enu_SetPinValue+0x1ba>
    1834:	6d 81       	ldd	r22, Y+5	; 0x05
    1836:	7e 81       	ldd	r23, Y+6	; 0x06
    1838:	62 30       	cpi	r22, 0x02	; 2
    183a:	71 05       	cpc	r23, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <DIO_Enu_SetPinValue+0x66>
    183e:	59 c0       	rjmp	.+178    	; 0x18f2 <DIO_Enu_SetPinValue+0x118>
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <DIO_Enu_SetPinValue+0x72>
    184a:	7c c0       	rjmp	.+248    	; 0x1944 <DIO_Enu_SetPinValue+0x16a>
    184c:	a3 c0       	rjmp	.+326    	; 0x1994 <DIO_Enu_SetPinValue+0x1ba>
        {
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    184e:	ab e3       	ldi	r26, 0x3B	; 59
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	eb e3       	ldi	r30, 0x3B	; 59
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_Enu_SetPinValue+0x90>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	2a 95       	dec	r18
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <DIO_Enu_SetPinValue+0x8c>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
            PORTA |= (Copy_u8Value << Copy_u8PinID);
    1874:	ab e3       	ldi	r26, 0x3B	; 59
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	eb e3       	ldi	r30, 0x3B	; 59
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b9 01       	movw	r22, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_Enu_SetPinValue+0xba>
    1890:	66 0f       	add	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	8a 95       	dec	r24
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_Enu_SetPinValue+0xb6>
    1898:	cb 01       	movw	r24, r22
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	7a c0       	rjmp	.+244    	; 0x1994 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_Enu_SetPinValue+0xe2>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	2a 95       	dec	r18
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_Enu_SetPinValue+0xde>
    18c0:	80 95       	com	r24
    18c2:	84 23       	and	r24, r20
    18c4:	8c 93       	st	X, r24
            PORTB |= (Copy_u8Value << Copy_u8PinID);
    18c6:	a8 e3       	ldi	r26, 0x38	; 56
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e8 e3       	ldi	r30, 0x38	; 56
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	48 2f       	mov	r20, r24
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	b9 01       	movw	r22, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_Enu_SetPinValue+0x10c>
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	8a 95       	dec	r24
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_Enu_SetPinValue+0x108>
    18ea:	cb 01       	movw	r24, r22
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	51 c0       	rjmp	.+162    	; 0x1994 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    18f2:	a5 e3       	ldi	r26, 0x35	; 53
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e3       	ldi	r30, 0x35	; 53
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_Enu_SetPinValue+0x134>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_Enu_SetPinValue+0x130>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
            PORTC |= (Copy_u8Value << Copy_u8PinID);
    1918:	a5 e3       	ldi	r26, 0x35	; 53
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e3       	ldi	r30, 0x35	; 53
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	b9 01       	movw	r22, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_Enu_SetPinValue+0x15e>
    1934:	66 0f       	add	r22, r22
    1936:	77 1f       	adc	r23, r23
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_Enu_SetPinValue+0x15a>
    193c:	cb 01       	movw	r24, r22
    193e:	84 2b       	or	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	28 c0       	rjmp	.+80     	; 0x1994 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1944:	a2 e3       	ldi	r26, 0x32	; 50
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e2 e3       	ldi	r30, 0x32	; 50
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_Enu_SetPinValue+0x186>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	2a 95       	dec	r18
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_Enu_SetPinValue+0x182>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    196a:	a2 e3       	ldi	r26, 0x32	; 50
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e2 e3       	ldi	r30, 0x32	; 50
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	b9 01       	movw	r22, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_Enu_SetPinValue+0x1b0>
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_Enu_SetPinValue+0x1ac>
    198e:	cb 01       	movw	r24, r22
    1990:	84 2b       	or	r24, r20
    1992:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_Enu_SetPinValue+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a0:	26 96       	adiw	r28, 0x06	; 6
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <DIO_Enu_TogPortValue>:

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <DIO_Enu_TogPortValue+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <DIO_Enu_TogPortValue+0x8>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_EnuErrorState = ES_NOT_OK;
    19c0:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	84 30       	cpi	r24, 0x04	; 4
    19c6:	08 f0       	brcs	.+2      	; 0x19ca <DIO_Enu_TogPortValue+0x18>
    19c8:	41 c0       	rjmp	.+130    	; 0x1a4c <DIO_Enu_TogPortValue+0x9a>
    {
        switch (Copy_u8PortID)
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	3c 83       	std	Y+4, r19	; 0x04
    19d2:	2b 83       	std	Y+3, r18	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	91 05       	cpc	r25, r1
    19dc:	e9 f0       	breq	.+58     	; 0x1a18 <DIO_Enu_TogPortValue+0x66>
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	3c 81       	ldd	r19, Y+4	; 0x04
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <DIO_Enu_TogPortValue+0x40>
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	61 f0       	breq	.+24     	; 0x1a08 <DIO_Enu_TogPortValue+0x56>
    19f0:	2a c0       	rjmp	.+84     	; 0x1a46 <DIO_Enu_TogPortValue+0x94>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	b1 f0       	breq	.+44     	; 0x1a28 <DIO_Enu_TogPortValue+0x76>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	91 05       	cpc	r25, r1
    1a04:	c9 f0       	breq	.+50     	; 0x1a38 <DIO_Enu_TogPortValue+0x86>
    1a06:	1f c0       	rjmp	.+62     	; 0x1a46 <DIO_Enu_TogPortValue+0x94>
        {
        case DIO_PORTA:
            PORTA = ~PORTA;
    1a08:	ab e3       	ldi	r26, 0x3B	; 59
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 95       	com	r24
    1a14:	8c 93       	st	X, r24
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
    1a18:	a8 e3       	ldi	r26, 0x38	; 56
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e8 e3       	ldi	r30, 0x38	; 56
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 95       	com	r24
    1a24:	8c 93       	st	X, r24
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    1a28:	a5 e3       	ldi	r26, 0x35	; 53
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e5 e3       	ldi	r30, 0x35	; 53
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 95       	com	r24
    1a34:	8c 93       	st	X, r24
    1a36:	07 c0       	rjmp	.+14     	; 0x1a46 <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTD:
            PORTD = ~PORTD;
    1a38:	a2 e3       	ldi	r26, 0x32	; 50
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e2 e3       	ldi	r30, 0x32	; 50
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 95       	com	r24
    1a44:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_Enu_TogPortValue+0x9e>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <DIO_Enu_TogPinValue+0x6>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <DIO_Enu_TogPinValue+0x8>
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    1a70:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1a72:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <DIO_Enu_TogPinValue+0x1c>
    1a7a:	75 c0       	rjmp	.+234    	; 0x1b66 <DIO_Enu_TogPinValue+0x106>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	88 30       	cpi	r24, 0x08	; 8
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <DIO_Enu_TogPinValue+0x24>
    1a82:	71 c0       	rjmp	.+226    	; 0x1b66 <DIO_Enu_TogPinValue+0x106>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3d 83       	std	Y+5, r19	; 0x05
    1a8c:	2c 83       	std	Y+4, r18	; 0x04
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	9d 81       	ldd	r25, Y+5	; 0x05
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	91 05       	cpc	r25, r1
    1a96:	49 f1       	breq	.+82     	; 0x1aea <DIO_Enu_TogPinValue+0x8a>
    1a98:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <DIO_Enu_TogPinValue+0x4c>
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <DIO_Enu_TogPinValue+0x62>
    1aaa:	5a c0       	rjmp	.+180    	; 0x1b60 <DIO_Enu_TogPinValue+0x100>
    1aac:	2c 81       	ldd	r18, Y+4	; 0x04
    1aae:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	71 f1       	breq	.+92     	; 0x1b12 <DIO_Enu_TogPinValue+0xb2>
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	e9 f1       	breq	.+122    	; 0x1b3a <DIO_Enu_TogPinValue+0xda>
    1ac0:	4f c0       	rjmp	.+158    	; 0x1b60 <DIO_Enu_TogPinValue+0x100>
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_Enu_TogPinValue+0x80>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_Enu_TogPinValue+0x7c>
    1ae4:	84 27       	eor	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	3b c0       	rjmp	.+118    	; 0x1b60 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_Enu_TogPinValue+0xa8>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_Enu_TogPinValue+0xa4>
    1b0c:	84 27       	eor	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	27 c0       	rjmp	.+78     	; 0x1b60 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
    1b12:	a5 e3       	ldi	r26, 0x35	; 53
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e3       	ldi	r30, 0x35	; 53
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_Enu_TogPinValue+0xd0>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_Enu_TogPinValue+0xcc>
    1b34:	84 27       	eor	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	13 c0       	rjmp	.+38     	; 0x1b60 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
    1b3a:	a2 e3       	ldi	r26, 0x32	; 50
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 e3       	ldi	r30, 0x32	; 50
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_Enu_TogPinValue+0xf8>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_Enu_TogPinValue+0xf4>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <DIO_Enu_TogPinValue+0x10a>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <DIO_Enu_GetPortValue>:

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <DIO_Enu_GetPortValue+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <DIO_Enu_GetPortValue+0x8>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <DIO_Enu_GetPortValue+0xa>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
    1b8c:	7c 83       	std	Y+4, r23	; 0x04
    1b8e:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1b90:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <DIO_Enu_GetPortValue+0x20>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <DIO_Enu_GetPortValue+0xa6>
    {
        if (Copy_u8PortID <= DIO_PORTD)
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	e8 f5       	brcc	.+122    	; 0x1c1c <DIO_Enu_GetPortValue+0xa0>
        {
            switch (Copy_u8PortID)
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3e 83       	std	Y+6, r19	; 0x06
    1baa:	2d 83       	std	Y+5, r18	; 0x05
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	e1 f0       	breq	.+56     	; 0x1bee <DIO_Enu_GetPortValue+0x72>
    1bb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <DIO_Enu_GetPortValue+0x4e>
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	61 f0       	breq	.+24     	; 0x1be0 <DIO_Enu_GetPortValue+0x64>
    1bc8:	26 c0       	rjmp	.+76     	; 0x1c16 <DIO_Enu_GetPortValue+0x9a>
    1bca:	2d 81       	ldd	r18, Y+5	; 0x05
    1bcc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	a1 f0       	breq	.+40     	; 0x1bfc <DIO_Enu_GetPortValue+0x80>
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	91 05       	cpc	r25, r1
    1bdc:	b1 f0       	breq	.+44     	; 0x1c0a <DIO_Enu_GetPortValue+0x8e>
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <DIO_Enu_GetPortValue+0x9a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
    1be0:	e9 e3       	ldi	r30, 0x39	; 57
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	eb 81       	ldd	r30, Y+3	; 0x03
    1be8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bea:	80 83       	st	Z, r24
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
    1bee:	e6 e3       	ldi	r30, 0x36	; 54
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf8:	80 83       	st	Z, r24
    1bfa:	0d c0       	rjmp	.+26     	; 0x1c16 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    1bfc:	e3 e3       	ldi	r30, 0x33	; 51
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	eb 81       	ldd	r30, Y+3	; 0x03
    1c04:	fc 81       	ldd	r31, Y+4	; 0x04
    1c06:	80 83       	st	Z, r24
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = PIND;
    1c0a:	e0 e3       	ldi	r30, 0x30	; 48
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	eb 81       	ldd	r30, Y+3	; 0x03
    1c12:	fc 81       	ldd	r31, Y+4	; 0x04
    1c14:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <DIO_Enu_GetPortValue+0xaa>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_Enu_GetPortValue+0xaa>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c28:	26 96       	adiw	r28, 0x06	; 6
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	27 97       	sbiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	6b 83       	std	Y+3, r22	; 0x03
    1c52:	5d 83       	std	Y+5, r21	; 0x05
    1c54:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1c56:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <DIO_Enu_GetPinValue+0x28>
    1c60:	7e c0       	rjmp	.+252    	; 0x1d5e <DIO_Enu_GetPinValue+0x124>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	84 30       	cpi	r24, 0x04	; 4
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <DIO_Enu_GetPinValue+0x30>
    1c68:	77 c0       	rjmp	.+238    	; 0x1d58 <DIO_Enu_GetPinValue+0x11e>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	88 30       	cpi	r24, 0x08	; 8
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <DIO_Enu_GetPinValue+0x38>
    1c70:	73 c0       	rjmp	.+230    	; 0x1d58 <DIO_Enu_GetPinValue+0x11e>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3f 83       	std	Y+7, r19	; 0x07
    1c7a:	2e 83       	std	Y+6, r18	; 0x06
    1c7c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c7e:	5f 81       	ldd	r21, Y+7	; 0x07
    1c80:	41 30       	cpi	r20, 0x01	; 1
    1c82:	51 05       	cpc	r21, r1
    1c84:	59 f1       	breq	.+86     	; 0x1cdc <DIO_Enu_GetPinValue+0xa2>
    1c86:	8e 81       	ldd	r24, Y+6	; 0x06
    1c88:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8a:	82 30       	cpi	r24, 0x02	; 2
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	34 f4       	brge	.+12     	; 0x1c9c <DIO_Enu_GetPinValue+0x62>
    1c90:	2e 81       	ldd	r18, Y+6	; 0x06
    1c92:	3f 81       	ldd	r19, Y+7	; 0x07
    1c94:	21 15       	cp	r18, r1
    1c96:	31 05       	cpc	r19, r1
    1c98:	69 f0       	breq	.+26     	; 0x1cb4 <DIO_Enu_GetPinValue+0x7a>
    1c9a:	5b c0       	rjmp	.+182    	; 0x1d52 <DIO_Enu_GetPinValue+0x118>
    1c9c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c9e:	5f 81       	ldd	r21, Y+7	; 0x07
    1ca0:	42 30       	cpi	r20, 0x02	; 2
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	79 f1       	breq	.+94     	; 0x1d04 <DIO_Enu_GetPinValue+0xca>
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_Enu_GetPinValue+0x78>
    1cb0:	3d c0       	rjmp	.+122    	; 0x1d2c <DIO_Enu_GetPinValue+0xf2>
    1cb2:	4f c0       	rjmp	.+158    	; 0x1d52 <DIO_Enu_GetPinValue+0x118>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
    1cb4:	e9 e3       	ldi	r30, 0x39	; 57
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a9 01       	movw	r20, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_Enu_GetPinValue+0x92>
    1cc8:	55 95       	asr	r21
    1cca:	47 95       	ror	r20
    1ccc:	8a 95       	dec	r24
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_Enu_GetPinValue+0x8e>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cd6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd8:	80 83       	st	Z, r24
    1cda:	3b c0       	rjmp	.+118    	; 0x1d52 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    1cdc:	e6 e3       	ldi	r30, 0x36	; 54
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a9 01       	movw	r20, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_Enu_GetPinValue+0xba>
    1cf0:	55 95       	asr	r21
    1cf2:	47 95       	ror	r20
    1cf4:	8a 95       	dec	r24
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <DIO_Enu_GetPinValue+0xb6>
    1cf8:	ca 01       	movw	r24, r20
    1cfa:	81 70       	andi	r24, 0x01	; 1
    1cfc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cfe:	fd 81       	ldd	r31, Y+5	; 0x05
    1d00:	80 83       	st	Z, r24
    1d02:	27 c0       	rjmp	.+78     	; 0x1d52 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
    1d04:	e3 e3       	ldi	r30, 0x33	; 51
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a9 01       	movw	r20, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_Enu_GetPinValue+0xe2>
    1d18:	55 95       	asr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	8a 95       	dec	r24
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_Enu_GetPinValue+0xde>
    1d20:	ca 01       	movw	r24, r20
    1d22:	81 70       	andi	r24, 0x01	; 1
    1d24:	ec 81       	ldd	r30, Y+4	; 0x04
    1d26:	fd 81       	ldd	r31, Y+5	; 0x05
    1d28:	80 83       	st	Z, r24
    1d2a:	13 c0       	rjmp	.+38     	; 0x1d52 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    1d2c:	e0 e3       	ldi	r30, 0x30	; 48
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_Enu_GetPinValue+0x10a>
    1d40:	55 95       	asr	r21
    1d42:	47 95       	ror	r20
    1d44:	8a 95       	dec	r24
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_Enu_GetPinValue+0x106>
    1d48:	ca 01       	movw	r24, r20
    1d4a:	81 70       	andi	r24, 0x01	; 1
    1d4c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d4e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d50:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <DIO_Enu_GetPinValue+0x128>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_Enu_GetPinValue+0x128>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d64:	27 96       	adiw	r28, 0x07	; 7
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <DIO_Enu_WriteHighNibbles>:

ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <DIO_Enu_WriteHighNibbles+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <DIO_Enu_WriteHighNibbles+0x8>
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	8a 83       	std	Y+2, r24	; 0x02
    1d86:	6b 83       	std	Y+3, r22	; 0x03

    ES_t Local_EnuErrorState = ES_NOT_OK;
    1d88:	19 82       	std	Y+1, r1	; 0x01

	if ( (Copy_u8PortID <= DIO_PORTD))
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	84 30       	cpi	r24, 0x04	; 4
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <DIO_Enu_WriteHighNibbles+0x1c>
    1d90:	65 c0       	rjmp	.+202    	; 0x1e5c <DIO_Enu_WriteHighNibbles+0xe6>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	82 95       	swap	r24
    1d96:	80 7f       	andi	r24, 0xF0	; 240
    1d98:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PortID)
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3d 83       	std	Y+5, r19	; 0x05
    1da2:	2c 83       	std	Y+4, r18	; 0x04
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	29 f1       	breq	.+74     	; 0x1df8 <DIO_Enu_WriteHighNibbles+0x82>
    1dae:	2c 81       	ldd	r18, Y+4	; 0x04
    1db0:	3d 81       	ldd	r19, Y+5	; 0x05
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <DIO_Enu_WriteHighNibbles+0x4c>
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	61 f0       	breq	.+24     	; 0x1dd8 <DIO_Enu_WriteHighNibbles+0x62>
    1dc0:	4a c0       	rjmp	.+148    	; 0x1e56 <DIO_Enu_WriteHighNibbles+0xe0>
    1dc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	31 f1       	breq	.+76     	; 0x1e18 <DIO_Enu_WriteHighNibbles+0xa2>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	83 30       	cpi	r24, 0x03	; 3
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	89 f1       	breq	.+98     	; 0x1e38 <DIO_Enu_WriteHighNibbles+0xc2>
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <DIO_Enu_WriteHighNibbles+0xe0>
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
    1dd8:	ab e3       	ldi	r26, 0x3B	; 59
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	eb e3       	ldi	r30, 0x3B	; 59
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8f 70       	andi	r24, 0x0F	; 15
    1de4:	8c 93       	st	X, r24
			PORTA |=Copy_u8Value;			
    1de6:	ab e3       	ldi	r26, 0x3B	; 59
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	eb e3       	ldi	r30, 0x3B	; 59
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	90 81       	ld	r25, Z
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	89 2b       	or	r24, r25
    1df4:	8c 93       	st	X, r24
    1df6:	2f c0       	rjmp	.+94     	; 0x1e56 <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
    1df8:	a8 e3       	ldi	r26, 0x38	; 56
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e8 e3       	ldi	r30, 0x38	; 56
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 70       	andi	r24, 0x0F	; 15
    1e04:	8c 93       	st	X, r24
			PORTB |=Copy_u8Value;
    1e06:	a8 e3       	ldi	r26, 0x38	; 56
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e8 e3       	ldi	r30, 0x38	; 56
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	90 81       	ld	r25, Z
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	89 2b       	or	r24, r25
    1e14:	8c 93       	st	X, r24
    1e16:	1f c0       	rjmp	.+62     	; 0x1e56 <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
    1e18:	a5 e3       	ldi	r26, 0x35	; 53
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e3       	ldi	r30, 0x35	; 53
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 70       	andi	r24, 0x0F	; 15
    1e24:	8c 93       	st	X, r24
			PORTC |=Copy_u8Value;
    1e26:	a5 e3       	ldi	r26, 0x35	; 53
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e5 e3       	ldi	r30, 0x35	; 53
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	90 81       	ld	r25, Z
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	89 2b       	or	r24, r25
    1e34:	8c 93       	st	X, r24
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
    1e38:	a2 e3       	ldi	r26, 0x32	; 50
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e2 e3       	ldi	r30, 0x32	; 50
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8f 70       	andi	r24, 0x0F	; 15
    1e44:	8c 93       	st	X, r24
			PORTD |=Copy_u8Value;
    1e46:	a2 e3       	ldi	r26, 0x32	; 50
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e2 e3       	ldi	r30, 0x32	; 50
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	90 81       	ld	r25, Z
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	89 2b       	or	r24, r25
    1e54:	8c 93       	st	X, r24
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_Enu_WriteHighNibbles+0xea>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    }

	return Local_EnuErrorState ;
    1e60:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <DIO_Enu_WriteLowNibbles>:

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <DIO_Enu_WriteLowNibbles+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <DIO_Enu_WriteLowNibbles+0x8>
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1e84:	19 82       	std	Y+1, r1	; 0x01

	if ( (Copy_u8PortID <= DIO_PORTD))
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	84 30       	cpi	r24, 0x04	; 4
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <DIO_Enu_WriteLowNibbles+0x1c>
    1e8c:	64 c0       	rjmp	.+200    	; 0x1f56 <DIO_Enu_WriteLowNibbles+0xe4>
	{
		Copy_u8Value&=0x0f;
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	8f 70       	andi	r24, 0x0F	; 15
    1e92:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PortID)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	3d 83       	std	Y+5, r19	; 0x05
    1e9c:	2c 83       	std	Y+4, r18	; 0x04
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	29 f1       	breq	.+74     	; 0x1ef2 <DIO_Enu_WriteLowNibbles+0x80>
    1ea8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <DIO_Enu_WriteLowNibbles+0x4a>
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	61 f0       	breq	.+24     	; 0x1ed2 <DIO_Enu_WriteLowNibbles+0x60>
    1eba:	4a c0       	rjmp	.+148    	; 0x1f50 <DIO_Enu_WriteLowNibbles+0xde>
    1ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	31 f1       	breq	.+76     	; 0x1f12 <DIO_Enu_WriteLowNibbles+0xa0>
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	91 05       	cpc	r25, r1
    1ece:	89 f1       	breq	.+98     	; 0x1f32 <DIO_Enu_WriteLowNibbles+0xc0>
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <DIO_Enu_WriteLowNibbles+0xde>
		{
		case DIO_PORTA :
			PORTA &=0xf0;                   
    1ed2:	ab e3       	ldi	r26, 0x3B	; 59
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	eb e3       	ldi	r30, 0x3B	; 59
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 7f       	andi	r24, 0xF0	; 240
    1ede:	8c 93       	st	X, r24
			PORTA |=Copy_u8Value;			
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	90 81       	ld	r25, Z
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	89 2b       	or	r24, r25
    1eee:	8c 93       	st	X, r24
    1ef0:	2f c0       	rjmp	.+94     	; 0x1f50 <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTB:
			PORTB &=0xf0;                 
    1ef2:	a8 e3       	ldi	r26, 0x38	; 56
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e8 e3       	ldi	r30, 0x38	; 56
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 7f       	andi	r24, 0xF0	; 240
    1efe:	8c 93       	st	X, r24
			PORTB |=Copy_u8Value;
    1f00:	a8 e3       	ldi	r26, 0x38	; 56
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e8 e3       	ldi	r30, 0x38	; 56
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	90 81       	ld	r25, Z
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	89 2b       	or	r24, r25
    1f0e:	8c 93       	st	X, r24
    1f10:	1f c0       	rjmp	.+62     	; 0x1f50 <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
    1f12:	a5 e3       	ldi	r26, 0x35	; 53
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e5 e3       	ldi	r30, 0x35	; 53
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 7f       	andi	r24, 0xF0	; 240
    1f1e:	8c 93       	st	X, r24
			PORTC |=Copy_u8Value;
    1f20:	a5 e3       	ldi	r26, 0x35	; 53
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e5 e3       	ldi	r30, 0x35	; 53
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	90 81       	ld	r25, Z
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	89 2b       	or	r24, r25
    1f2e:	8c 93       	st	X, r24
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTD:
			PORTD &=0xf0;                 
    1f32:	a2 e3       	ldi	r26, 0x32	; 50
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e2 e3       	ldi	r30, 0x32	; 50
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 7f       	andi	r24, 0xF0	; 240
    1f3e:	8c 93       	st	X, r24
			PORTD |=Copy_u8Value;
    1f40:	a2 e3       	ldi	r26, 0x32	; 50
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e2 e3       	ldi	r30, 0x32	; 50
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	90 81       	ld	r25, Z
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	89 2b       	or	r24, r25
    1f4e:	8c 93       	st	X, r24
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_Enu_WriteLowNibbles+0xe8>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	89 83       	std	Y+1, r24	; 0x01
    }

	return Local_EnuErrorState ;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <__mulsi3>:
    1f6c:	62 9f       	mul	r22, r18
    1f6e:	d0 01       	movw	r26, r0
    1f70:	73 9f       	mul	r23, r19
    1f72:	f0 01       	movw	r30, r0
    1f74:	82 9f       	mul	r24, r18
    1f76:	e0 0d       	add	r30, r0
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	64 9f       	mul	r22, r20
    1f7c:	e0 0d       	add	r30, r0
    1f7e:	f1 1d       	adc	r31, r1
    1f80:	92 9f       	mul	r25, r18
    1f82:	f0 0d       	add	r31, r0
    1f84:	83 9f       	mul	r24, r19
    1f86:	f0 0d       	add	r31, r0
    1f88:	74 9f       	mul	r23, r20
    1f8a:	f0 0d       	add	r31, r0
    1f8c:	65 9f       	mul	r22, r21
    1f8e:	f0 0d       	add	r31, r0
    1f90:	99 27       	eor	r25, r25
    1f92:	72 9f       	mul	r23, r18
    1f94:	b0 0d       	add	r27, r0
    1f96:	e1 1d       	adc	r30, r1
    1f98:	f9 1f       	adc	r31, r25
    1f9a:	63 9f       	mul	r22, r19
    1f9c:	b0 0d       	add	r27, r0
    1f9e:	e1 1d       	adc	r30, r1
    1fa0:	f9 1f       	adc	r31, r25
    1fa2:	bd 01       	movw	r22, r26
    1fa4:	cf 01       	movw	r24, r30
    1fa6:	11 24       	eor	r1, r1
    1fa8:	08 95       	ret

00001faa <__udivmodhi4>:
    1faa:	aa 1b       	sub	r26, r26
    1fac:	bb 1b       	sub	r27, r27
    1fae:	51 e1       	ldi	r21, 0x11	; 17
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <__udivmodhi4_ep>

00001fb2 <__udivmodhi4_loop>:
    1fb2:	aa 1f       	adc	r26, r26
    1fb4:	bb 1f       	adc	r27, r27
    1fb6:	a6 17       	cp	r26, r22
    1fb8:	b7 07       	cpc	r27, r23
    1fba:	10 f0       	brcs	.+4      	; 0x1fc0 <__udivmodhi4_ep>
    1fbc:	a6 1b       	sub	r26, r22
    1fbe:	b7 0b       	sbc	r27, r23

00001fc0 <__udivmodhi4_ep>:
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	5a 95       	dec	r21
    1fc6:	a9 f7       	brne	.-22     	; 0x1fb2 <__udivmodhi4_loop>
    1fc8:	80 95       	com	r24
    1fca:	90 95       	com	r25
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	08 95       	ret

00001fd2 <__udivmodsi4>:
    1fd2:	a1 e2       	ldi	r26, 0x21	; 33
    1fd4:	1a 2e       	mov	r1, r26
    1fd6:	aa 1b       	sub	r26, r26
    1fd8:	bb 1b       	sub	r27, r27
    1fda:	fd 01       	movw	r30, r26
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <__udivmodsi4_ep>

00001fde <__udivmodsi4_loop>:
    1fde:	aa 1f       	adc	r26, r26
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	ee 1f       	adc	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	a2 17       	cp	r26, r18
    1fe8:	b3 07       	cpc	r27, r19
    1fea:	e4 07       	cpc	r30, r20
    1fec:	f5 07       	cpc	r31, r21
    1fee:	20 f0       	brcs	.+8      	; 0x1ff8 <__udivmodsi4_ep>
    1ff0:	a2 1b       	sub	r26, r18
    1ff2:	b3 0b       	sbc	r27, r19
    1ff4:	e4 0b       	sbc	r30, r20
    1ff6:	f5 0b       	sbc	r31, r21

00001ff8 <__udivmodsi4_ep>:
    1ff8:	66 1f       	adc	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	1a 94       	dec	r1
    2002:	69 f7       	brne	.-38     	; 0x1fde <__udivmodsi4_loop>
    2004:	60 95       	com	r22
    2006:	70 95       	com	r23
    2008:	80 95       	com	r24
    200a:	90 95       	com	r25
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	bd 01       	movw	r22, r26
    2012:	cf 01       	movw	r24, r30
    2014:	08 95       	ret

00002016 <__divmodsi4>:
    2016:	97 fb       	bst	r25, 7
    2018:	09 2e       	mov	r0, r25
    201a:	05 26       	eor	r0, r21
    201c:	0e d0       	rcall	.+28     	; 0x203a <__divmodsi4_neg1>
    201e:	57 fd       	sbrc	r21, 7
    2020:	04 d0       	rcall	.+8      	; 0x202a <__divmodsi4_neg2>
    2022:	d7 df       	rcall	.-82     	; 0x1fd2 <__udivmodsi4>
    2024:	0a d0       	rcall	.+20     	; 0x203a <__divmodsi4_neg1>
    2026:	00 1c       	adc	r0, r0
    2028:	38 f4       	brcc	.+14     	; 0x2038 <__divmodsi4_exit>

0000202a <__divmodsi4_neg2>:
    202a:	50 95       	com	r21
    202c:	40 95       	com	r20
    202e:	30 95       	com	r19
    2030:	21 95       	neg	r18
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	4f 4f       	sbci	r20, 0xFF	; 255
    2036:	5f 4f       	sbci	r21, 0xFF	; 255

00002038 <__divmodsi4_exit>:
    2038:	08 95       	ret

0000203a <__divmodsi4_neg1>:
    203a:	f6 f7       	brtc	.-4      	; 0x2038 <__divmodsi4_exit>
    203c:	90 95       	com	r25
    203e:	80 95       	com	r24
    2040:	70 95       	com	r23
    2042:	61 95       	neg	r22
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	08 95       	ret

0000204c <_exit>:
    204c:	f8 94       	cli

0000204e <__stop_program>:
    204e:	ff cf       	rjmp	.-2      	; 0x204e <__stop_program>
