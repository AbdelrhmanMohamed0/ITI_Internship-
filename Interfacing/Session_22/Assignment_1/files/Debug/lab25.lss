
lab25.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006858  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00800060  00006858  000068ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800200  00800200  00006a8c  2**0
                  ALLOC
  3 .debug_aranges 00000450  00000000  00000000  00006a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000a78  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005fd2  00000000  00000000  00007954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000119e  00000000  00000000  0000d926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003f49  00000000  00000000  0000eac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000700  00000000  00000000  00012a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000eb7  00000000  00000000  00013110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005748  00000000  00000000  00013fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014c0  00000000  00000000  0001970f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 6a 31 	jmp	0x62d4	; 0x62d4 <__vector_4>
      14:	0c 94 41 31 	jmp	0x6282	; 0x6282 <__vector_5>
      18:	0c 94 18 31 	jmp	0x6230	; 0x6230 <__vector_6>
      1c:	0c 94 ef 30 	jmp	0x61de	; 0x61de <__vector_7>
      20:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__vector_8>
      24:	0c 94 9d 30 	jmp	0x613a	; 0x613a <__vector_9>
      28:	0c 94 74 30 	jmp	0x60e8	; 0x60e8 <__vector_10>
      2c:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f8 e6       	ldi	r31, 0x68	; 104
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <main>
      8a:	0c 94 2a 34 	jmp	0x6854	; 0x6854 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__divdi3>:
     190:	a2 e7       	ldi	r26, 0x72	; 114
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 de 33 	jmp	0x67bc	; 0x67bc <__prologue_saves__>
     19c:	98 2e       	mov	r9, r24
     19e:	89 2e       	mov	r8, r25
     1a0:	71 2e       	mov	r7, r17
     1a2:	88 e0       	ldi	r24, 0x08	; 8
     1a4:	fe 01       	movw	r30, r28
     1a6:	31 96       	adiw	r30, 0x01	; 1
     1a8:	df 01       	movw	r26, r30
     1aa:	68 2e       	mov	r6, r24
     1ac:	1d 92       	st	X+, r1
     1ae:	6a 94       	dec	r6
     1b0:	e9 f7       	brne	.-6      	; 0x1ac <__divdi3+0x1c>
     1b2:	29 83       	std	Y+1, r18	; 0x01
     1b4:	3a 83       	std	Y+2, r19	; 0x02
     1b6:	4b 83       	std	Y+3, r20	; 0x03
     1b8:	5c 83       	std	Y+4, r21	; 0x04
     1ba:	6d 83       	std	Y+5, r22	; 0x05
     1bc:	7e 83       	std	Y+6, r23	; 0x06
     1be:	9f 82       	std	Y+7, r9	; 0x07
     1c0:	98 87       	std	Y+8, r25	; 0x08
     1c2:	fe 01       	movw	r30, r28
     1c4:	39 96       	adiw	r30, 0x09	; 9
     1c6:	df 01       	movw	r26, r30
     1c8:	1d 92       	st	X+, r1
     1ca:	8a 95       	dec	r24
     1cc:	e9 f7       	brne	.-6      	; 0x1c8 <__divdi3+0x38>
     1ce:	a9 86       	std	Y+9, r10	; 0x09
     1d0:	ba 86       	std	Y+10, r11	; 0x0a
     1d2:	cb 86       	std	Y+11, r12	; 0x0b
     1d4:	dc 86       	std	Y+12, r13	; 0x0c
     1d6:	ed 86       	std	Y+13, r14	; 0x0d
     1d8:	fe 86       	std	Y+14, r15	; 0x0e
     1da:	0f 87       	std	Y+15, r16	; 0x0f
     1dc:	18 8b       	std	Y+16, r17	; 0x10
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	af 81       	ldd	r26, Y+7	; 0x07
     1e4:	b8 85       	ldd	r27, Y+8	; 0x08
     1e6:	b7 fd       	sbrc	r27, 7
     1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <__divdi3+0x68>
     1ea:	e1 96       	adiw	r28, 0x31	; 49
     1ec:	1c ae       	std	Y+60, r1	; 0x3c
     1ee:	1d ae       	std	Y+61, r1	; 0x3d
     1f0:	1e ae       	std	Y+62, r1	; 0x3e
     1f2:	1f ae       	std	Y+63, r1	; 0x3f
     1f4:	e1 97       	sbiw	r28, 0x31	; 49
     1f6:	64 c0       	rjmp	.+200    	; 0x2c0 <__divdi3+0x130>
     1f8:	21 95       	neg	r18
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	12 16       	cp	r1, r18
     1fe:	08 f0       	brcs	.+2      	; 0x202 <__divdi3+0x72>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	31 95       	neg	r19
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	13 16       	cp	r1, r19
     208:	08 f0       	brcs	.+2      	; 0x20c <__divdi3+0x7c>
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	b3 2f       	mov	r27, r19
     20e:	b8 1b       	sub	r27, r24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	3b 17       	cp	r19, r27
     214:	08 f0       	brcs	.+2      	; 0x218 <__divdi3+0x88>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	98 2b       	or	r25, r24
     21a:	41 95       	neg	r20
     21c:	31 e0       	ldi	r19, 0x01	; 1
     21e:	14 16       	cp	r1, r20
     220:	08 f0       	brcs	.+2      	; 0x224 <__divdi3+0x94>
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	a4 2f       	mov	r26, r20
     226:	a9 1b       	sub	r26, r25
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	4a 17       	cp	r20, r26
     22c:	08 f0       	brcs	.+2      	; 0x230 <__divdi3+0xa0>
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	38 2b       	or	r19, r24
     232:	51 95       	neg	r21
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	15 16       	cp	r1, r21
     238:	08 f0       	brcs	.+2      	; 0x23c <__divdi3+0xac>
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	f5 2f       	mov	r31, r21
     23e:	f3 1b       	sub	r31, r19
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	5f 17       	cp	r21, r31
     244:	08 f0       	brcs	.+2      	; 0x248 <__divdi3+0xb8>
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	98 2b       	or	r25, r24
     24a:	61 95       	neg	r22
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	16 16       	cp	r1, r22
     250:	08 f0       	brcs	.+2      	; 0x254 <__divdi3+0xc4>
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	e6 2f       	mov	r30, r22
     256:	e9 1b       	sub	r30, r25
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	6e 17       	cp	r22, r30
     25c:	08 f0       	brcs	.+2      	; 0x260 <__divdi3+0xd0>
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	38 2b       	or	r19, r24
     262:	71 95       	neg	r23
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	17 16       	cp	r1, r23
     268:	08 f0       	brcs	.+2      	; 0x26c <__divdi3+0xdc>
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	57 2f       	mov	r21, r23
     26e:	53 1b       	sub	r21, r19
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	75 17       	cp	r23, r21
     274:	08 f0       	brcs	.+2      	; 0x278 <__divdi3+0xe8>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	48 2b       	or	r20, r24
     27a:	89 2d       	mov	r24, r9
     27c:	81 95       	neg	r24
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	18 16       	cp	r1, r24
     282:	08 f0       	brcs	.+2      	; 0x286 <__divdi3+0xf6>
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	68 2e       	mov	r6, r24
     288:	64 1a       	sub	r6, r20
     28a:	46 2d       	mov	r20, r6
     28c:	31 e0       	ldi	r19, 0x01	; 1
     28e:	86 15       	cp	r24, r6
     290:	08 f0       	brcs	.+2      	; 0x294 <__divdi3+0x104>
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	93 2b       	or	r25, r19
     296:	88 2d       	mov	r24, r8
     298:	81 95       	neg	r24
     29a:	89 1b       	sub	r24, r25
     29c:	29 83       	std	Y+1, r18	; 0x01
     29e:	ba 83       	std	Y+2, r27	; 0x02
     2a0:	ab 83       	std	Y+3, r26	; 0x03
     2a2:	fc 83       	std	Y+4, r31	; 0x04
     2a4:	ed 83       	std	Y+5, r30	; 0x05
     2a6:	5e 83       	std	Y+6, r21	; 0x06
     2a8:	4f 83       	std	Y+7, r20	; 0x07
     2aa:	88 87       	std	Y+8, r24	; 0x08
     2ac:	2f ef       	ldi	r18, 0xFF	; 255
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	4f ef       	ldi	r20, 0xFF	; 255
     2b2:	5f ef       	ldi	r21, 0xFF	; 255
     2b4:	e1 96       	adiw	r28, 0x31	; 49
     2b6:	2c af       	std	Y+60, r18	; 0x3c
     2b8:	3d af       	std	Y+61, r19	; 0x3d
     2ba:	4e af       	std	Y+62, r20	; 0x3e
     2bc:	5f af       	std	Y+63, r21	; 0x3f
     2be:	e1 97       	sbiw	r28, 0x31	; 49
     2c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c4:	af 85       	ldd	r26, Y+15	; 0x0f
     2c6:	b8 89       	ldd	r27, Y+16	; 0x10
     2c8:	b7 ff       	sbrs	r27, 7
     2ca:	6a c0       	rjmp	.+212    	; 0x3a0 <__divdi3+0x210>
     2cc:	e1 96       	adiw	r28, 0x31	; 49
     2ce:	4c ad       	ldd	r20, Y+60	; 0x3c
     2d0:	5d ad       	ldd	r21, Y+61	; 0x3d
     2d2:	6e ad       	ldd	r22, Y+62	; 0x3e
     2d4:	7f ad       	ldd	r23, Y+63	; 0x3f
     2d6:	e1 97       	sbiw	r28, 0x31	; 49
     2d8:	40 95       	com	r20
     2da:	50 95       	com	r21
     2dc:	60 95       	com	r22
     2de:	70 95       	com	r23
     2e0:	e1 96       	adiw	r28, 0x31	; 49
     2e2:	4c af       	std	Y+60, r20	; 0x3c
     2e4:	5d af       	std	Y+61, r21	; 0x3d
     2e6:	6e af       	std	Y+62, r22	; 0x3e
     2e8:	7f af       	std	Y+63, r23	; 0x3f
     2ea:	e1 97       	sbiw	r28, 0x31	; 49
     2ec:	a1 94       	neg	r10
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	1a 14       	cp	r1, r10
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <__divdi3+0x166>
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	b1 94       	neg	r11
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	1b 14       	cp	r1, r11
     2fc:	08 f0       	brcs	.+2      	; 0x300 <__divdi3+0x170>
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	6b 2d       	mov	r22, r11
     302:	68 1b       	sub	r22, r24
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	b6 16       	cp	r11, r22
     308:	08 f0       	brcs	.+2      	; 0x30c <__divdi3+0x17c>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	98 2b       	or	r25, r24
     30e:	c1 94       	neg	r12
     310:	21 e0       	ldi	r18, 0x01	; 1
     312:	1c 14       	cp	r1, r12
     314:	08 f0       	brcs	.+2      	; 0x318 <__divdi3+0x188>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	5c 2d       	mov	r21, r12
     31a:	59 1b       	sub	r21, r25
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	c5 16       	cp	r12, r21
     320:	08 f0       	brcs	.+2      	; 0x324 <__divdi3+0x194>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	28 2b       	or	r18, r24
     326:	d1 94       	neg	r13
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	1d 14       	cp	r1, r13
     32c:	08 f0       	brcs	.+2      	; 0x330 <__divdi3+0x1a0>
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	4d 2d       	mov	r20, r13
     332:	42 1b       	sub	r20, r18
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	d4 16       	cp	r13, r20
     338:	08 f0       	brcs	.+2      	; 0x33c <__divdi3+0x1ac>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	98 2b       	or	r25, r24
     33e:	e1 94       	neg	r14
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	1e 14       	cp	r1, r14
     344:	08 f0       	brcs	.+2      	; 0x348 <__divdi3+0x1b8>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	3e 2d       	mov	r19, r14
     34a:	39 1b       	sub	r19, r25
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	e3 16       	cp	r14, r19
     350:	08 f0       	brcs	.+2      	; 0x354 <__divdi3+0x1c4>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	28 2b       	or	r18, r24
     356:	f1 94       	neg	r15
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	1f 14       	cp	r1, r15
     35c:	08 f0       	brcs	.+2      	; 0x360 <__divdi3+0x1d0>
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	7f 2d       	mov	r23, r15
     362:	72 1b       	sub	r23, r18
     364:	27 2f       	mov	r18, r23
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	f7 16       	cp	r15, r23
     36a:	08 f0       	brcs	.+2      	; 0x36e <__divdi3+0x1de>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	98 2b       	or	r25, r24
     370:	01 95       	neg	r16
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	10 16       	cp	r1, r16
     376:	08 f0       	brcs	.+2      	; 0x37a <__divdi3+0x1ea>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	80 2f       	mov	r24, r16
     37c:	89 1b       	sub	r24, r25
     37e:	98 2f       	mov	r25, r24
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	09 17       	cp	r16, r25
     384:	08 f0       	brcs	.+2      	; 0x388 <__divdi3+0x1f8>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	18 2b       	or	r17, r24
     38a:	87 2d       	mov	r24, r7
     38c:	81 95       	neg	r24
     38e:	81 1b       	sub	r24, r17
     390:	a9 86       	std	Y+9, r10	; 0x09
     392:	6a 87       	std	Y+10, r22	; 0x0a
     394:	5b 87       	std	Y+11, r21	; 0x0b
     396:	4c 87       	std	Y+12, r20	; 0x0c
     398:	3d 87       	std	Y+13, r19	; 0x0d
     39a:	2e 87       	std	Y+14, r18	; 0x0e
     39c:	9f 87       	std	Y+15, r25	; 0x0f
     39e:	88 8b       	std	Y+16, r24	; 0x10
     3a0:	99 81       	ldd	r25, Y+1	; 0x01
     3a2:	2a 81       	ldd	r18, Y+2	; 0x02
     3a4:	3b 81       	ldd	r19, Y+3	; 0x03
     3a6:	4c 81       	ldd	r20, Y+4	; 0x04
     3a8:	5d 81       	ldd	r21, Y+5	; 0x05
     3aa:	6e 81       	ldd	r22, Y+6	; 0x06
     3ac:	7f 81       	ldd	r23, Y+7	; 0x07
     3ae:	a8 85       	ldd	r26, Y+8	; 0x08
     3b0:	b9 85       	ldd	r27, Y+9	; 0x09
     3b2:	1a 85       	ldd	r17, Y+10	; 0x0a
     3b4:	0b 85       	ldd	r16, Y+11	; 0x0b
     3b6:	fc 84       	ldd	r15, Y+12	; 0x0c
     3b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     3ba:	de 84       	ldd	r13, Y+14	; 0x0e
     3bc:	cf 84       	ldd	r12, Y+15	; 0x0f
     3be:	b8 88       	ldd	r11, Y+16	; 0x10
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	e1 e1       	ldi	r30, 0x11	; 17
     3c4:	8e 2e       	mov	r8, r30
     3c6:	91 2c       	mov	r9, r1
     3c8:	8c 0e       	add	r8, r28
     3ca:	9d 1e       	adc	r9, r29
     3cc:	f4 01       	movw	r30, r8
     3ce:	68 2e       	mov	r6, r24
     3d0:	11 92       	st	Z+, r1
     3d2:	6a 94       	dec	r6
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <__divdi3+0x240>
     3d6:	99 8b       	std	Y+17, r25	; 0x11
     3d8:	2a 8b       	std	Y+18, r18	; 0x12
     3da:	3b 8b       	std	Y+19, r19	; 0x13
     3dc:	4c 8b       	std	Y+20, r20	; 0x14
     3de:	5d 8b       	std	Y+21, r21	; 0x15
     3e0:	6e 8b       	std	Y+22, r22	; 0x16
     3e2:	7f 8b       	std	Y+23, r23	; 0x17
     3e4:	a8 8f       	std	Y+24, r26	; 0x18
     3e6:	9e 01       	movw	r18, r28
     3e8:	27 5e       	subi	r18, 0xE7	; 231
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	f9 01       	movw	r30, r18
     3ee:	11 92       	st	Z+, r1
     3f0:	8a 95       	dec	r24
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <__divdi3+0x25e>
     3f4:	b9 8f       	std	Y+25, r27	; 0x19
     3f6:	1a 8f       	std	Y+26, r17	; 0x1a
     3f8:	0b 8f       	std	Y+27, r16	; 0x1b
     3fa:	fc 8e       	std	Y+28, r15	; 0x1c
     3fc:	ed 8e       	std	Y+29, r14	; 0x1d
     3fe:	de 8e       	std	Y+30, r13	; 0x1e
     400:	cf 8e       	std	Y+31, r12	; 0x1f
     402:	b8 a2       	std	Y+32, r11	; 0x20
     404:	29 8c       	ldd	r2, Y+25	; 0x19
     406:	3a 8c       	ldd	r3, Y+26	; 0x1a
     408:	4b 8c       	ldd	r4, Y+27	; 0x1b
     40a:	5c 8c       	ldd	r5, Y+28	; 0x1c
     40c:	ed 8c       	ldd	r14, Y+29	; 0x1d
     40e:	fe 8c       	ldd	r15, Y+30	; 0x1e
     410:	0f 8d       	ldd	r16, Y+31	; 0x1f
     412:	18 a1       	ldd	r17, Y+32	; 0x20
     414:	69 88       	ldd	r6, Y+17	; 0x11
     416:	7a 88       	ldd	r7, Y+18	; 0x12
     418:	8b 88       	ldd	r8, Y+19	; 0x13
     41a:	9c 88       	ldd	r9, Y+20	; 0x14
     41c:	21 96       	adiw	r28, 0x01	; 1
     41e:	6c ae       	std	Y+60, r6	; 0x3c
     420:	7d ae       	std	Y+61, r7	; 0x3d
     422:	8e ae       	std	Y+62, r8	; 0x3e
     424:	9f ae       	std	Y+63, r9	; 0x3f
     426:	21 97       	sbiw	r28, 0x01	; 1
     428:	6d 88       	ldd	r6, Y+21	; 0x15
     42a:	7e 88       	ldd	r7, Y+22	; 0x16
     42c:	8f 88       	ldd	r8, Y+23	; 0x17
     42e:	98 8c       	ldd	r9, Y+24	; 0x18
     430:	e1 14       	cp	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	01 05       	cpc	r16, r1
     436:	11 05       	cpc	r17, r1
     438:	09 f0       	breq	.+2      	; 0x43c <__divdi3+0x2ac>
     43a:	d9 c3       	rjmp	.+1970   	; 0xbee <__stack+0x38f>
     43c:	62 14       	cp	r6, r2
     43e:	73 04       	cpc	r7, r3
     440:	84 04       	cpc	r8, r4
     442:	95 04       	cpc	r9, r5
     444:	08 f0       	brcs	.+2      	; 0x448 <__divdi3+0x2b8>
     446:	57 c1       	rjmp	.+686    	; 0x6f6 <__divdi3+0x566>
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	20 16       	cp	r2, r16
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	30 06       	cpc	r3, r16
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	40 06       	cpc	r4, r16
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	50 06       	cpc	r5, r16
     458:	88 f4       	brcc	.+34     	; 0x47c <__divdi3+0x2ec>
     45a:	1f ef       	ldi	r17, 0xFF	; 255
     45c:	21 16       	cp	r2, r17
     45e:	31 04       	cpc	r3, r1
     460:	41 04       	cpc	r4, r1
     462:	51 04       	cpc	r5, r1
     464:	39 f0       	breq	.+14     	; 0x474 <__divdi3+0x2e4>
     466:	30 f0       	brcs	.+12     	; 0x474 <__divdi3+0x2e4>
     468:	48 e0       	ldi	r20, 0x08	; 8
     46a:	e4 2e       	mov	r14, r20
     46c:	f1 2c       	mov	r15, r1
     46e:	01 2d       	mov	r16, r1
     470:	11 2d       	mov	r17, r1
     472:	18 c0       	rjmp	.+48     	; 0x4a4 <__divdi3+0x314>
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15
     478:	87 01       	movw	r16, r14
     47a:	14 c0       	rjmp	.+40     	; 0x4a4 <__divdi3+0x314>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	22 16       	cp	r2, r18
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	32 06       	cpc	r3, r18
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	42 06       	cpc	r4, r18
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	52 06       	cpc	r5, r18
     48c:	30 f0       	brcs	.+12     	; 0x49a <__divdi3+0x30a>
     48e:	38 e1       	ldi	r19, 0x18	; 24
     490:	e3 2e       	mov	r14, r19
     492:	f1 2c       	mov	r15, r1
     494:	01 2d       	mov	r16, r1
     496:	11 2d       	mov	r17, r1
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <__divdi3+0x314>
     49a:	20 e1       	ldi	r18, 0x10	; 16
     49c:	e2 2e       	mov	r14, r18
     49e:	f1 2c       	mov	r15, r1
     4a0:	01 2d       	mov	r16, r1
     4a2:	11 2d       	mov	r17, r1
     4a4:	d2 01       	movw	r26, r4
     4a6:	c1 01       	movw	r24, r2
     4a8:	0e 2c       	mov	r0, r14
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__divdi3+0x324>
     4ac:	b6 95       	lsr	r27
     4ae:	a7 95       	ror	r26
     4b0:	97 95       	ror	r25
     4b2:	87 95       	ror	r24
     4b4:	0a 94       	dec	r0
     4b6:	d2 f7       	brpl	.-12     	; 0x4ac <__divdi3+0x31c>
     4b8:	85 53       	subi	r24, 0x35	; 53
     4ba:	9f 4f       	sbci	r25, 0xFF	; 255
     4bc:	dc 01       	movw	r26, r24
     4be:	2c 91       	ld	r18, X
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	8e 19       	sub	r24, r14
     4ca:	9f 09       	sbc	r25, r15
     4cc:	a0 0b       	sbc	r26, r16
     4ce:	b1 0b       	sbc	r27, r17
     4d0:	7c 01       	movw	r14, r24
     4d2:	8d 01       	movw	r16, r26
     4d4:	e2 1a       	sub	r14, r18
     4d6:	f1 08       	sbc	r15, r1
     4d8:	01 09       	sbc	r16, r1
     4da:	11 09       	sbc	r17, r1
     4dc:	e1 14       	cp	r14, r1
     4de:	f1 04       	cpc	r15, r1
     4e0:	01 05       	cpc	r16, r1
     4e2:	11 05       	cpc	r17, r1
     4e4:	d1 f1       	breq	.+116    	; 0x55a <__divdi3+0x3ca>
     4e6:	0e 2c       	mov	r0, r14
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__divdi3+0x362>
     4ea:	22 0c       	add	r2, r2
     4ec:	33 1c       	adc	r3, r3
     4ee:	44 1c       	adc	r4, r4
     4f0:	55 1c       	adc	r5, r5
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__divdi3+0x35a>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	0e 2c       	mov	r0, r14
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__divdi3+0x376>
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	44 1f       	adc	r20, r20
     504:	55 1f       	adc	r21, r21
     506:	0a 94       	dec	r0
     508:	d2 f7       	brpl	.-12     	; 0x4fe <__divdi3+0x36e>
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8e 19       	sub	r24, r14
     510:	9f 09       	sbc	r25, r15
     512:	21 96       	adiw	r28, 0x01	; 1
     514:	6c ac       	ldd	r6, Y+60	; 0x3c
     516:	7d ac       	ldd	r7, Y+61	; 0x3d
     518:	8e ac       	ldd	r8, Y+62	; 0x3e
     51a:	9f ac       	ldd	r9, Y+63	; 0x3f
     51c:	21 97       	sbiw	r28, 0x01	; 1
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__divdi3+0x398>
     520:	96 94       	lsr	r9
     522:	87 94       	ror	r8
     524:	77 94       	ror	r7
     526:	67 94       	ror	r6
     528:	8a 95       	dec	r24
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__divdi3+0x390>
     52c:	62 2a       	or	r6, r18
     52e:	73 2a       	or	r7, r19
     530:	84 2a       	or	r8, r20
     532:	95 2a       	or	r9, r21
     534:	21 96       	adiw	r28, 0x01	; 1
     536:	ac ac       	ldd	r10, Y+60	; 0x3c
     538:	bd ac       	ldd	r11, Y+61	; 0x3d
     53a:	ce ac       	ldd	r12, Y+62	; 0x3e
     53c:	df ac       	ldd	r13, Y+63	; 0x3f
     53e:	21 97       	sbiw	r28, 0x01	; 1
     540:	04 c0       	rjmp	.+8      	; 0x54a <__divdi3+0x3ba>
     542:	aa 0c       	add	r10, r10
     544:	bb 1c       	adc	r11, r11
     546:	cc 1c       	adc	r12, r12
     548:	dd 1c       	adc	r13, r13
     54a:	ea 94       	dec	r14
     54c:	d2 f7       	brpl	.-12     	; 0x542 <__divdi3+0x3b2>
     54e:	21 96       	adiw	r28, 0x01	; 1
     550:	ac ae       	std	Y+60, r10	; 0x3c
     552:	bd ae       	std	Y+61, r11	; 0x3d
     554:	ce ae       	std	Y+62, r12	; 0x3e
     556:	df ae       	std	Y+63, r13	; 0x3f
     558:	21 97       	sbiw	r28, 0x01	; 1
     55a:	62 01       	movw	r12, r4
     55c:	ee 24       	eor	r14, r14
     55e:	ff 24       	eor	r15, r15
     560:	29 96       	adiw	r28, 0x09	; 9
     562:	cc ae       	std	Y+60, r12	; 0x3c
     564:	dd ae       	std	Y+61, r13	; 0x3d
     566:	ee ae       	std	Y+62, r14	; 0x3e
     568:	ff ae       	std	Y+63, r15	; 0x3f
     56a:	29 97       	sbiw	r28, 0x09	; 9
     56c:	92 01       	movw	r18, r4
     56e:	81 01       	movw	r16, r2
     570:	20 70       	andi	r18, 0x00	; 0
     572:	30 70       	andi	r19, 0x00	; 0
     574:	2d 96       	adiw	r28, 0x0d	; 13
     576:	0c af       	std	Y+60, r16	; 0x3c
     578:	1d af       	std	Y+61, r17	; 0x3d
     57a:	2e af       	std	Y+62, r18	; 0x3e
     57c:	3f af       	std	Y+63, r19	; 0x3f
     57e:	2d 97       	sbiw	r28, 0x0d	; 13
     580:	c4 01       	movw	r24, r8
     582:	b3 01       	movw	r22, r6
     584:	a7 01       	movw	r20, r14
     586:	96 01       	movw	r18, r12
     588:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     58c:	7b 01       	movw	r14, r22
     58e:	8c 01       	movw	r16, r24
     590:	c4 01       	movw	r24, r8
     592:	b3 01       	movw	r22, r6
     594:	29 96       	adiw	r28, 0x09	; 9
     596:	2c ad       	ldd	r18, Y+60	; 0x3c
     598:	3d ad       	ldd	r19, Y+61	; 0x3d
     59a:	4e ad       	ldd	r20, Y+62	; 0x3e
     59c:	5f ad       	ldd	r21, Y+63	; 0x3f
     59e:	29 97       	sbiw	r28, 0x09	; 9
     5a0:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     5a4:	c9 01       	movw	r24, r18
     5a6:	da 01       	movw	r26, r20
     5a8:	3c 01       	movw	r6, r24
     5aa:	4d 01       	movw	r8, r26
     5ac:	c4 01       	movw	r24, r8
     5ae:	b3 01       	movw	r22, r6
     5b0:	2d 96       	adiw	r28, 0x0d	; 13
     5b2:	2c ad       	ldd	r18, Y+60	; 0x3c
     5b4:	3d ad       	ldd	r19, Y+61	; 0x3d
     5b6:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b8:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ba:	2d 97       	sbiw	r28, 0x0d	; 13
     5bc:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	87 01       	movw	r16, r14
     5c6:	ff 24       	eor	r15, r15
     5c8:	ee 24       	eor	r14, r14
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	ac ac       	ldd	r10, Y+60	; 0x3c
     5ce:	bd ac       	ldd	r11, Y+61	; 0x3d
     5d0:	ce ac       	ldd	r12, Y+62	; 0x3e
     5d2:	df ac       	ldd	r13, Y+63	; 0x3f
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	c6 01       	movw	r24, r12
     5d8:	aa 27       	eor	r26, r26
     5da:	bb 27       	eor	r27, r27
     5dc:	57 01       	movw	r10, r14
     5de:	68 01       	movw	r12, r16
     5e0:	a8 2a       	or	r10, r24
     5e2:	b9 2a       	or	r11, r25
     5e4:	ca 2a       	or	r12, r26
     5e6:	db 2a       	or	r13, r27
     5e8:	a2 16       	cp	r10, r18
     5ea:	b3 06       	cpc	r11, r19
     5ec:	c4 06       	cpc	r12, r20
     5ee:	d5 06       	cpc	r13, r21
     5f0:	e0 f4       	brcc	.+56     	; 0x62a <__divdi3+0x49a>
     5f2:	08 94       	sec
     5f4:	61 08       	sbc	r6, r1
     5f6:	71 08       	sbc	r7, r1
     5f8:	81 08       	sbc	r8, r1
     5fa:	91 08       	sbc	r9, r1
     5fc:	a2 0c       	add	r10, r2
     5fe:	b3 1c       	adc	r11, r3
     600:	c4 1c       	adc	r12, r4
     602:	d5 1c       	adc	r13, r5
     604:	a2 14       	cp	r10, r2
     606:	b3 04       	cpc	r11, r3
     608:	c4 04       	cpc	r12, r4
     60a:	d5 04       	cpc	r13, r5
     60c:	70 f0       	brcs	.+28     	; 0x62a <__divdi3+0x49a>
     60e:	a2 16       	cp	r10, r18
     610:	b3 06       	cpc	r11, r19
     612:	c4 06       	cpc	r12, r20
     614:	d5 06       	cpc	r13, r21
     616:	48 f4       	brcc	.+18     	; 0x62a <__divdi3+0x49a>
     618:	08 94       	sec
     61a:	61 08       	sbc	r6, r1
     61c:	71 08       	sbc	r7, r1
     61e:	81 08       	sbc	r8, r1
     620:	91 08       	sbc	r9, r1
     622:	a2 0c       	add	r10, r2
     624:	b3 1c       	adc	r11, r3
     626:	c4 1c       	adc	r12, r4
     628:	d5 1c       	adc	r13, r5
     62a:	a2 1a       	sub	r10, r18
     62c:	b3 0a       	sbc	r11, r19
     62e:	c4 0a       	sbc	r12, r20
     630:	d5 0a       	sbc	r13, r21
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	29 96       	adiw	r28, 0x09	; 9
     638:	2c ad       	ldd	r18, Y+60	; 0x3c
     63a:	3d ad       	ldd	r19, Y+61	; 0x3d
     63c:	4e ad       	ldd	r20, Y+62	; 0x3e
     63e:	5f ad       	ldd	r21, Y+63	; 0x3f
     640:	29 97       	sbiw	r28, 0x09	; 9
     642:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     646:	7b 01       	movw	r14, r22
     648:	8c 01       	movw	r16, r24
     64a:	c6 01       	movw	r24, r12
     64c:	b5 01       	movw	r22, r10
     64e:	29 96       	adiw	r28, 0x09	; 9
     650:	2c ad       	ldd	r18, Y+60	; 0x3c
     652:	3d ad       	ldd	r19, Y+61	; 0x3d
     654:	4e ad       	ldd	r20, Y+62	; 0x3e
     656:	5f ad       	ldd	r21, Y+63	; 0x3f
     658:	29 97       	sbiw	r28, 0x09	; 9
     65a:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     65e:	c9 01       	movw	r24, r18
     660:	da 01       	movw	r26, r20
     662:	5c 01       	movw	r10, r24
     664:	6d 01       	movw	r12, r26
     666:	c6 01       	movw	r24, r12
     668:	b5 01       	movw	r22, r10
     66a:	2d 96       	adiw	r28, 0x0d	; 13
     66c:	2c ad       	ldd	r18, Y+60	; 0x3c
     66e:	3d ad       	ldd	r19, Y+61	; 0x3d
     670:	4e ad       	ldd	r20, Y+62	; 0x3e
     672:	5f ad       	ldd	r21, Y+63	; 0x3f
     674:	2d 97       	sbiw	r28, 0x0d	; 13
     676:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	87 01       	movw	r16, r14
     680:	ff 24       	eor	r15, r15
     682:	ee 24       	eor	r14, r14
     684:	21 96       	adiw	r28, 0x01	; 1
     686:	8c ad       	ldd	r24, Y+60	; 0x3c
     688:	9d ad       	ldd	r25, Y+61	; 0x3d
     68a:	ae ad       	ldd	r26, Y+62	; 0x3e
     68c:	bf ad       	ldd	r27, Y+63	; 0x3f
     68e:	21 97       	sbiw	r28, 0x01	; 1
     690:	a0 70       	andi	r26, 0x00	; 0
     692:	b0 70       	andi	r27, 0x00	; 0
     694:	e8 2a       	or	r14, r24
     696:	f9 2a       	or	r15, r25
     698:	0a 2b       	or	r16, r26
     69a:	1b 2b       	or	r17, r27
     69c:	e2 16       	cp	r14, r18
     69e:	f3 06       	cpc	r15, r19
     6a0:	04 07       	cpc	r16, r20
     6a2:	15 07       	cpc	r17, r21
     6a4:	c0 f4       	brcc	.+48     	; 0x6d6 <__divdi3+0x546>
     6a6:	08 94       	sec
     6a8:	a1 08       	sbc	r10, r1
     6aa:	b1 08       	sbc	r11, r1
     6ac:	c1 08       	sbc	r12, r1
     6ae:	d1 08       	sbc	r13, r1
     6b0:	e2 0c       	add	r14, r2
     6b2:	f3 1c       	adc	r15, r3
     6b4:	04 1d       	adc	r16, r4
     6b6:	15 1d       	adc	r17, r5
     6b8:	e2 14       	cp	r14, r2
     6ba:	f3 04       	cpc	r15, r3
     6bc:	04 05       	cpc	r16, r4
     6be:	15 05       	cpc	r17, r5
     6c0:	50 f0       	brcs	.+20     	; 0x6d6 <__divdi3+0x546>
     6c2:	e2 16       	cp	r14, r18
     6c4:	f3 06       	cpc	r15, r19
     6c6:	04 07       	cpc	r16, r20
     6c8:	15 07       	cpc	r17, r21
     6ca:	28 f4       	brcc	.+10     	; 0x6d6 <__divdi3+0x546>
     6cc:	08 94       	sec
     6ce:	a1 08       	sbc	r10, r1
     6d0:	b1 08       	sbc	r11, r1
     6d2:	c1 08       	sbc	r12, r1
     6d4:	d1 08       	sbc	r13, r1
     6d6:	d3 01       	movw	r26, r6
     6d8:	99 27       	eor	r25, r25
     6da:	88 27       	eor	r24, r24
     6dc:	86 01       	movw	r16, r12
     6de:	75 01       	movw	r14, r10
     6e0:	e8 2a       	or	r14, r24
     6e2:	f9 2a       	or	r15, r25
     6e4:	0a 2b       	or	r16, r26
     6e6:	1b 2b       	or	r17, r27
     6e8:	25 96       	adiw	r28, 0x05	; 5
     6ea:	ec ae       	std	Y+60, r14	; 0x3c
     6ec:	fd ae       	std	Y+61, r15	; 0x3d
     6ee:	0e af       	std	Y+62, r16	; 0x3e
     6f0:	1f af       	std	Y+63, r17	; 0x3f
     6f2:	25 97       	sbiw	r28, 0x05	; 5
     6f4:	eb c4       	rjmp	.+2518   	; 0x10cc <__stack+0x86d>
     6f6:	21 14       	cp	r2, r1
     6f8:	31 04       	cpc	r3, r1
     6fa:	41 04       	cpc	r4, r1
     6fc:	51 04       	cpc	r5, r1
     6fe:	71 f4       	brne	.+28     	; 0x71c <__divdi3+0x58c>
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     714:	c9 01       	movw	r24, r18
     716:	da 01       	movw	r26, r20
     718:	1c 01       	movw	r2, r24
     71a:	2d 01       	movw	r4, r26
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	20 16       	cp	r2, r16
     720:	00 e0       	ldi	r16, 0x00	; 0
     722:	30 06       	cpc	r3, r16
     724:	01 e0       	ldi	r16, 0x01	; 1
     726:	40 06       	cpc	r4, r16
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	50 06       	cpc	r5, r16
     72c:	88 f4       	brcc	.+34     	; 0x750 <__divdi3+0x5c0>
     72e:	1f ef       	ldi	r17, 0xFF	; 255
     730:	21 16       	cp	r2, r17
     732:	31 04       	cpc	r3, r1
     734:	41 04       	cpc	r4, r1
     736:	51 04       	cpc	r5, r1
     738:	31 f0       	breq	.+12     	; 0x746 <__divdi3+0x5b6>
     73a:	28 f0       	brcs	.+10     	; 0x746 <__divdi3+0x5b6>
     73c:	48 e0       	ldi	r20, 0x08	; 8
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	17 c0       	rjmp	.+46     	; 0x774 <__divdi3+0x5e4>
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	12 c0       	rjmp	.+36     	; 0x774 <__divdi3+0x5e4>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	22 16       	cp	r2, r18
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	32 06       	cpc	r3, r18
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	42 06       	cpc	r4, r18
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	52 06       	cpc	r5, r18
     760:	28 f0       	brcs	.+10     	; 0x76c <__divdi3+0x5dc>
     762:	48 e1       	ldi	r20, 0x18	; 24
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	04 c0       	rjmp	.+8      	; 0x774 <__divdi3+0x5e4>
     76c:	40 e1       	ldi	r20, 0x10	; 16
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	d2 01       	movw	r26, r4
     776:	c1 01       	movw	r24, r2
     778:	04 2e       	mov	r0, r20
     77a:	04 c0       	rjmp	.+8      	; 0x784 <__divdi3+0x5f4>
     77c:	b6 95       	lsr	r27
     77e:	a7 95       	ror	r26
     780:	97 95       	ror	r25
     782:	87 95       	ror	r24
     784:	0a 94       	dec	r0
     786:	d2 f7       	brpl	.-12     	; 0x77c <__divdi3+0x5ec>
     788:	85 53       	subi	r24, 0x35	; 53
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	dc 01       	movw	r26, r24
     78e:	2c 91       	ld	r18, X
     790:	e0 e2       	ldi	r30, 0x20	; 32
     792:	ee 2e       	mov	r14, r30
     794:	f1 2c       	mov	r15, r1
     796:	01 2d       	mov	r16, r1
     798:	11 2d       	mov	r17, r1
     79a:	d8 01       	movw	r26, r16
     79c:	c7 01       	movw	r24, r14
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	a6 0b       	sbc	r26, r22
     7a4:	b7 0b       	sbc	r27, r23
     7a6:	82 1b       	sub	r24, r18
     7a8:	91 09       	sbc	r25, r1
     7aa:	a1 09       	sbc	r26, r1
     7ac:	b1 09       	sbc	r27, r1
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	a1 05       	cpc	r26, r1
     7b2:	b1 05       	cpc	r27, r1
     7b4:	61 f4       	brne	.+24     	; 0x7ce <__divdi3+0x63e>
     7b6:	64 01       	movw	r12, r8
     7b8:	53 01       	movw	r10, r6
     7ba:	a2 18       	sub	r10, r2
     7bc:	b3 08       	sbc	r11, r3
     7be:	c4 08       	sbc	r12, r4
     7c0:	d5 08       	sbc	r13, r5
     7c2:	31 e0       	ldi	r19, 0x01	; 1
     7c4:	63 2e       	mov	r6, r19
     7c6:	71 2c       	mov	r7, r1
     7c8:	81 2c       	mov	r8, r1
     7ca:	91 2c       	mov	r9, r1
     7cc:	24 c1       	rjmp	.+584    	; 0xa16 <__stack+0x1b7>
     7ce:	e3 96       	adiw	r28, 0x33	; 51
     7d0:	8f af       	std	Y+63, r24	; 0x3f
     7d2:	e3 97       	sbiw	r28, 0x33	; 51
     7d4:	08 2e       	mov	r0, r24
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <__divdi3+0x650>
     7d8:	22 0c       	add	r2, r2
     7da:	33 1c       	adc	r3, r3
     7dc:	44 1c       	adc	r4, r4
     7de:	55 1c       	adc	r5, r5
     7e0:	0a 94       	dec	r0
     7e2:	d2 f7       	brpl	.-12     	; 0x7d8 <__divdi3+0x648>
     7e4:	ee 2d       	mov	r30, r14
     7e6:	e8 1b       	sub	r30, r24
     7e8:	64 01       	movw	r12, r8
     7ea:	53 01       	movw	r10, r6
     7ec:	0e 2e       	mov	r0, r30
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__divdi3+0x668>
     7f0:	d6 94       	lsr	r13
     7f2:	c7 94       	ror	r12
     7f4:	b7 94       	ror	r11
     7f6:	a7 94       	ror	r10
     7f8:	0a 94       	dec	r0
     7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <__divdi3+0x660>
     7fc:	a4 01       	movw	r20, r8
     7fe:	93 01       	movw	r18, r6
     800:	e3 96       	adiw	r28, 0x33	; 51
     802:	0f ac       	ldd	r0, Y+63	; 0x3f
     804:	e3 97       	sbiw	r28, 0x33	; 51
     806:	04 c0       	rjmp	.+8      	; 0x810 <__divdi3+0x680>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	44 1f       	adc	r20, r20
     80e:	55 1f       	adc	r21, r21
     810:	0a 94       	dec	r0
     812:	d2 f7       	brpl	.-12     	; 0x808 <__divdi3+0x678>
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	6c ac       	ldd	r6, Y+60	; 0x3c
     818:	7d ac       	ldd	r7, Y+61	; 0x3d
     81a:	8e ac       	ldd	r8, Y+62	; 0x3e
     81c:	9f ac       	ldd	r9, Y+63	; 0x3f
     81e:	21 97       	sbiw	r28, 0x01	; 1
     820:	0e 2e       	mov	r0, r30
     822:	04 c0       	rjmp	.+8      	; 0x82c <__divdi3+0x69c>
     824:	96 94       	lsr	r9
     826:	87 94       	ror	r8
     828:	77 94       	ror	r7
     82a:	67 94       	ror	r6
     82c:	0a 94       	dec	r0
     82e:	d2 f7       	brpl	.-12     	; 0x824 <__divdi3+0x694>
     830:	84 01       	movw	r16, r8
     832:	73 01       	movw	r14, r6
     834:	e2 2a       	or	r14, r18
     836:	f3 2a       	or	r15, r19
     838:	04 2b       	or	r16, r20
     83a:	15 2b       	or	r17, r21
     83c:	e9 ae       	std	Y+57, r14	; 0x39
     83e:	fa ae       	std	Y+58, r15	; 0x3a
     840:	0b af       	std	Y+59, r16	; 0x3b
     842:	1c af       	std	Y+60, r17	; 0x3c
     844:	32 01       	movw	r6, r4
     846:	88 24       	eor	r8, r8
     848:	99 24       	eor	r9, r9
     84a:	92 01       	movw	r18, r4
     84c:	81 01       	movw	r16, r2
     84e:	20 70       	andi	r18, 0x00	; 0
     850:	30 70       	andi	r19, 0x00	; 0
     852:	61 96       	adiw	r28, 0x11	; 17
     854:	0c af       	std	Y+60, r16	; 0x3c
     856:	1d af       	std	Y+61, r17	; 0x3d
     858:	2e af       	std	Y+62, r18	; 0x3e
     85a:	3f af       	std	Y+63, r19	; 0x3f
     85c:	61 97       	sbiw	r28, 0x11	; 17
     85e:	c6 01       	movw	r24, r12
     860:	b5 01       	movw	r22, r10
     862:	a4 01       	movw	r20, r8
     864:	93 01       	movw	r18, r6
     866:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     86a:	7b 01       	movw	r14, r22
     86c:	8c 01       	movw	r16, r24
     86e:	c6 01       	movw	r24, r12
     870:	b5 01       	movw	r22, r10
     872:	a4 01       	movw	r20, r8
     874:	93 01       	movw	r18, r6
     876:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     87a:	c9 01       	movw	r24, r18
     87c:	da 01       	movw	r26, r20
     87e:	65 96       	adiw	r28, 0x15	; 21
     880:	8c af       	std	Y+60, r24	; 0x3c
     882:	9d af       	std	Y+61, r25	; 0x3d
     884:	ae af       	std	Y+62, r26	; 0x3e
     886:	bf af       	std	Y+63, r27	; 0x3f
     888:	65 97       	sbiw	r28, 0x15	; 21
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	61 96       	adiw	r28, 0x11	; 17
     890:	2c ad       	ldd	r18, Y+60	; 0x3c
     892:	3d ad       	ldd	r19, Y+61	; 0x3d
     894:	4e ad       	ldd	r20, Y+62	; 0x3e
     896:	5f ad       	ldd	r21, Y+63	; 0x3f
     898:	61 97       	sbiw	r28, 0x11	; 17
     89a:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	87 01       	movw	r16, r14
     8a4:	ff 24       	eor	r15, r15
     8a6:	ee 24       	eor	r14, r14
     8a8:	a9 ac       	ldd	r10, Y+57	; 0x39
     8aa:	ba ac       	ldd	r11, Y+58	; 0x3a
     8ac:	cb ac       	ldd	r12, Y+59	; 0x3b
     8ae:	dc ac       	ldd	r13, Y+60	; 0x3c
     8b0:	c6 01       	movw	r24, r12
     8b2:	aa 27       	eor	r26, r26
     8b4:	bb 27       	eor	r27, r27
     8b6:	5c 01       	movw	r10, r24
     8b8:	6d 01       	movw	r12, r26
     8ba:	ae 28       	or	r10, r14
     8bc:	bf 28       	or	r11, r15
     8be:	c0 2a       	or	r12, r16
     8c0:	d1 2a       	or	r13, r17
     8c2:	a2 16       	cp	r10, r18
     8c4:	b3 06       	cpc	r11, r19
     8c6:	c4 06       	cpc	r12, r20
     8c8:	d5 06       	cpc	r13, r21
     8ca:	60 f5       	brcc	.+88     	; 0x924 <__stack+0xc5>
     8cc:	65 96       	adiw	r28, 0x15	; 21
     8ce:	6c ad       	ldd	r22, Y+60	; 0x3c
     8d0:	7d ad       	ldd	r23, Y+61	; 0x3d
     8d2:	8e ad       	ldd	r24, Y+62	; 0x3e
     8d4:	9f ad       	ldd	r25, Y+63	; 0x3f
     8d6:	65 97       	sbiw	r28, 0x15	; 21
     8d8:	61 50       	subi	r22, 0x01	; 1
     8da:	70 40       	sbci	r23, 0x00	; 0
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	90 40       	sbci	r25, 0x00	; 0
     8e0:	65 96       	adiw	r28, 0x15	; 21
     8e2:	6c af       	std	Y+60, r22	; 0x3c
     8e4:	7d af       	std	Y+61, r23	; 0x3d
     8e6:	8e af       	std	Y+62, r24	; 0x3e
     8e8:	9f af       	std	Y+63, r25	; 0x3f
     8ea:	65 97       	sbiw	r28, 0x15	; 21
     8ec:	a2 0c       	add	r10, r2
     8ee:	b3 1c       	adc	r11, r3
     8f0:	c4 1c       	adc	r12, r4
     8f2:	d5 1c       	adc	r13, r5
     8f4:	a2 14       	cp	r10, r2
     8f6:	b3 04       	cpc	r11, r3
     8f8:	c4 04       	cpc	r12, r4
     8fa:	d5 04       	cpc	r13, r5
     8fc:	98 f0       	brcs	.+38     	; 0x924 <__stack+0xc5>
     8fe:	a2 16       	cp	r10, r18
     900:	b3 06       	cpc	r11, r19
     902:	c4 06       	cpc	r12, r20
     904:	d5 06       	cpc	r13, r21
     906:	70 f4       	brcc	.+28     	; 0x924 <__stack+0xc5>
     908:	61 50       	subi	r22, 0x01	; 1
     90a:	70 40       	sbci	r23, 0x00	; 0
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	65 96       	adiw	r28, 0x15	; 21
     912:	6c af       	std	Y+60, r22	; 0x3c
     914:	7d af       	std	Y+61, r23	; 0x3d
     916:	8e af       	std	Y+62, r24	; 0x3e
     918:	9f af       	std	Y+63, r25	; 0x3f
     91a:	65 97       	sbiw	r28, 0x15	; 21
     91c:	a2 0c       	add	r10, r2
     91e:	b3 1c       	adc	r11, r3
     920:	c4 1c       	adc	r12, r4
     922:	d5 1c       	adc	r13, r5
     924:	a2 1a       	sub	r10, r18
     926:	b3 0a       	sbc	r11, r19
     928:	c4 0a       	sbc	r12, r20
     92a:	d5 0a       	sbc	r13, r21
     92c:	c6 01       	movw	r24, r12
     92e:	b5 01       	movw	r22, r10
     930:	a4 01       	movw	r20, r8
     932:	93 01       	movw	r18, r6
     934:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     938:	7b 01       	movw	r14, r22
     93a:	8c 01       	movw	r16, r24
     93c:	c6 01       	movw	r24, r12
     93e:	b5 01       	movw	r22, r10
     940:	a4 01       	movw	r20, r8
     942:	93 01       	movw	r18, r6
     944:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     948:	c9 01       	movw	r24, r18
     94a:	da 01       	movw	r26, r20
     94c:	3c 01       	movw	r6, r24
     94e:	4d 01       	movw	r8, r26
     950:	c4 01       	movw	r24, r8
     952:	b3 01       	movw	r22, r6
     954:	61 96       	adiw	r28, 0x11	; 17
     956:	2c ad       	ldd	r18, Y+60	; 0x3c
     958:	3d ad       	ldd	r19, Y+61	; 0x3d
     95a:	4e ad       	ldd	r20, Y+62	; 0x3e
     95c:	5f ad       	ldd	r21, Y+63	; 0x3f
     95e:	61 97       	sbiw	r28, 0x11	; 17
     960:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	87 01       	movw	r16, r14
     96a:	ff 24       	eor	r15, r15
     96c:	ee 24       	eor	r14, r14
     96e:	89 ad       	ldd	r24, Y+57	; 0x39
     970:	9a ad       	ldd	r25, Y+58	; 0x3a
     972:	ab ad       	ldd	r26, Y+59	; 0x3b
     974:	bc ad       	ldd	r27, Y+60	; 0x3c
     976:	a0 70       	andi	r26, 0x00	; 0
     978:	b0 70       	andi	r27, 0x00	; 0
     97a:	57 01       	movw	r10, r14
     97c:	68 01       	movw	r12, r16
     97e:	a8 2a       	or	r10, r24
     980:	b9 2a       	or	r11, r25
     982:	ca 2a       	or	r12, r26
     984:	db 2a       	or	r13, r27
     986:	a2 16       	cp	r10, r18
     988:	b3 06       	cpc	r11, r19
     98a:	c4 06       	cpc	r12, r20
     98c:	d5 06       	cpc	r13, r21
     98e:	e0 f4       	brcc	.+56     	; 0x9c8 <__stack+0x169>
     990:	08 94       	sec
     992:	61 08       	sbc	r6, r1
     994:	71 08       	sbc	r7, r1
     996:	81 08       	sbc	r8, r1
     998:	91 08       	sbc	r9, r1
     99a:	a2 0c       	add	r10, r2
     99c:	b3 1c       	adc	r11, r3
     99e:	c4 1c       	adc	r12, r4
     9a0:	d5 1c       	adc	r13, r5
     9a2:	a2 14       	cp	r10, r2
     9a4:	b3 04       	cpc	r11, r3
     9a6:	c4 04       	cpc	r12, r4
     9a8:	d5 04       	cpc	r13, r5
     9aa:	70 f0       	brcs	.+28     	; 0x9c8 <__stack+0x169>
     9ac:	a2 16       	cp	r10, r18
     9ae:	b3 06       	cpc	r11, r19
     9b0:	c4 06       	cpc	r12, r20
     9b2:	d5 06       	cpc	r13, r21
     9b4:	48 f4       	brcc	.+18     	; 0x9c8 <__stack+0x169>
     9b6:	08 94       	sec
     9b8:	61 08       	sbc	r6, r1
     9ba:	71 08       	sbc	r7, r1
     9bc:	81 08       	sbc	r8, r1
     9be:	91 08       	sbc	r9, r1
     9c0:	a2 0c       	add	r10, r2
     9c2:	b3 1c       	adc	r11, r3
     9c4:	c4 1c       	adc	r12, r4
     9c6:	d5 1c       	adc	r13, r5
     9c8:	21 96       	adiw	r28, 0x01	; 1
     9ca:	8c ad       	ldd	r24, Y+60	; 0x3c
     9cc:	9d ad       	ldd	r25, Y+61	; 0x3d
     9ce:	ae ad       	ldd	r26, Y+62	; 0x3e
     9d0:	bf ad       	ldd	r27, Y+63	; 0x3f
     9d2:	21 97       	sbiw	r28, 0x01	; 1
     9d4:	e3 96       	adiw	r28, 0x33	; 51
     9d6:	0f ac       	ldd	r0, Y+63	; 0x3f
     9d8:	e3 97       	sbiw	r28, 0x33	; 51
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__stack+0x185>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	aa 1f       	adc	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	0a 94       	dec	r0
     9e6:	d2 f7       	brpl	.-12     	; 0x9dc <__stack+0x17d>
     9e8:	21 96       	adiw	r28, 0x01	; 1
     9ea:	8c af       	std	Y+60, r24	; 0x3c
     9ec:	9d af       	std	Y+61, r25	; 0x3d
     9ee:	ae af       	std	Y+62, r26	; 0x3e
     9f0:	bf af       	std	Y+63, r27	; 0x3f
     9f2:	21 97       	sbiw	r28, 0x01	; 1
     9f4:	a2 1a       	sub	r10, r18
     9f6:	b3 0a       	sbc	r11, r19
     9f8:	c4 0a       	sbc	r12, r20
     9fa:	d5 0a       	sbc	r13, r21
     9fc:	65 96       	adiw	r28, 0x15	; 21
     9fe:	ec ac       	ldd	r14, Y+60	; 0x3c
     a00:	fd ac       	ldd	r15, Y+61	; 0x3d
     a02:	0e ad       	ldd	r16, Y+62	; 0x3e
     a04:	1f ad       	ldd	r17, Y+63	; 0x3f
     a06:	65 97       	sbiw	r28, 0x15	; 21
     a08:	d7 01       	movw	r26, r14
     a0a:	99 27       	eor	r25, r25
     a0c:	88 27       	eor	r24, r24
     a0e:	68 2a       	or	r6, r24
     a10:	79 2a       	or	r7, r25
     a12:	8a 2a       	or	r8, r26
     a14:	9b 2a       	or	r9, r27
     a16:	82 01       	movw	r16, r4
     a18:	22 27       	eor	r18, r18
     a1a:	33 27       	eor	r19, r19
     a1c:	69 96       	adiw	r28, 0x19	; 25
     a1e:	0c af       	std	Y+60, r16	; 0x3c
     a20:	1d af       	std	Y+61, r17	; 0x3d
     a22:	2e af       	std	Y+62, r18	; 0x3e
     a24:	3f af       	std	Y+63, r19	; 0x3f
     a26:	69 97       	sbiw	r28, 0x19	; 25
     a28:	a2 01       	movw	r20, r4
     a2a:	91 01       	movw	r18, r2
     a2c:	40 70       	andi	r20, 0x00	; 0
     a2e:	50 70       	andi	r21, 0x00	; 0
     a30:	6d 96       	adiw	r28, 0x1d	; 29
     a32:	2c af       	std	Y+60, r18	; 0x3c
     a34:	3d af       	std	Y+61, r19	; 0x3d
     a36:	4e af       	std	Y+62, r20	; 0x3e
     a38:	5f af       	std	Y+63, r21	; 0x3f
     a3a:	6d 97       	sbiw	r28, 0x1d	; 29
     a3c:	c6 01       	movw	r24, r12
     a3e:	b5 01       	movw	r22, r10
     a40:	69 96       	adiw	r28, 0x19	; 25
     a42:	2c ad       	ldd	r18, Y+60	; 0x3c
     a44:	3d ad       	ldd	r19, Y+61	; 0x3d
     a46:	4e ad       	ldd	r20, Y+62	; 0x3e
     a48:	5f ad       	ldd	r21, Y+63	; 0x3f
     a4a:	69 97       	sbiw	r28, 0x19	; 25
     a4c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     a50:	7b 01       	movw	r14, r22
     a52:	8c 01       	movw	r16, r24
     a54:	c6 01       	movw	r24, r12
     a56:	b5 01       	movw	r22, r10
     a58:	69 96       	adiw	r28, 0x19	; 25
     a5a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a5c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a5e:	4e ad       	ldd	r20, Y+62	; 0x3e
     a60:	5f ad       	ldd	r21, Y+63	; 0x3f
     a62:	69 97       	sbiw	r28, 0x19	; 25
     a64:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     a68:	c9 01       	movw	r24, r18
     a6a:	da 01       	movw	r26, r20
     a6c:	a1 96       	adiw	r28, 0x21	; 33
     a6e:	8c af       	std	Y+60, r24	; 0x3c
     a70:	9d af       	std	Y+61, r25	; 0x3d
     a72:	ae af       	std	Y+62, r26	; 0x3e
     a74:	bf af       	std	Y+63, r27	; 0x3f
     a76:	a1 97       	sbiw	r28, 0x21	; 33
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	6d 96       	adiw	r28, 0x1d	; 29
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	6d 97       	sbiw	r28, 0x1d	; 29
     a88:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	87 01       	movw	r16, r14
     a92:	ff 24       	eor	r15, r15
     a94:	ee 24       	eor	r14, r14
     a96:	21 96       	adiw	r28, 0x01	; 1
     a98:	ac ac       	ldd	r10, Y+60	; 0x3c
     a9a:	bd ac       	ldd	r11, Y+61	; 0x3d
     a9c:	ce ac       	ldd	r12, Y+62	; 0x3e
     a9e:	df ac       	ldd	r13, Y+63	; 0x3f
     aa0:	21 97       	sbiw	r28, 0x01	; 1
     aa2:	c6 01       	movw	r24, r12
     aa4:	aa 27       	eor	r26, r26
     aa6:	bb 27       	eor	r27, r27
     aa8:	57 01       	movw	r10, r14
     aaa:	68 01       	movw	r12, r16
     aac:	a8 2a       	or	r10, r24
     aae:	b9 2a       	or	r11, r25
     ab0:	ca 2a       	or	r12, r26
     ab2:	db 2a       	or	r13, r27
     ab4:	a2 16       	cp	r10, r18
     ab6:	b3 06       	cpc	r11, r19
     ab8:	c4 06       	cpc	r12, r20
     aba:	d5 06       	cpc	r13, r21
     abc:	60 f5       	brcc	.+88     	; 0xb16 <__stack+0x2b7>
     abe:	a1 96       	adiw	r28, 0x21	; 33
     ac0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ac2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ac4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ac8:	a1 97       	sbiw	r28, 0x21	; 33
     aca:	61 50       	subi	r22, 0x01	; 1
     acc:	70 40       	sbci	r23, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	a1 96       	adiw	r28, 0x21	; 33
     ad4:	6c af       	std	Y+60, r22	; 0x3c
     ad6:	7d af       	std	Y+61, r23	; 0x3d
     ad8:	8e af       	std	Y+62, r24	; 0x3e
     ada:	9f af       	std	Y+63, r25	; 0x3f
     adc:	a1 97       	sbiw	r28, 0x21	; 33
     ade:	a2 0c       	add	r10, r2
     ae0:	b3 1c       	adc	r11, r3
     ae2:	c4 1c       	adc	r12, r4
     ae4:	d5 1c       	adc	r13, r5
     ae6:	a2 14       	cp	r10, r2
     ae8:	b3 04       	cpc	r11, r3
     aea:	c4 04       	cpc	r12, r4
     aec:	d5 04       	cpc	r13, r5
     aee:	98 f0       	brcs	.+38     	; 0xb16 <__stack+0x2b7>
     af0:	a2 16       	cp	r10, r18
     af2:	b3 06       	cpc	r11, r19
     af4:	c4 06       	cpc	r12, r20
     af6:	d5 06       	cpc	r13, r21
     af8:	70 f4       	brcc	.+28     	; 0xb16 <__stack+0x2b7>
     afa:	61 50       	subi	r22, 0x01	; 1
     afc:	70 40       	sbci	r23, 0x00	; 0
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	a1 96       	adiw	r28, 0x21	; 33
     b04:	6c af       	std	Y+60, r22	; 0x3c
     b06:	7d af       	std	Y+61, r23	; 0x3d
     b08:	8e af       	std	Y+62, r24	; 0x3e
     b0a:	9f af       	std	Y+63, r25	; 0x3f
     b0c:	a1 97       	sbiw	r28, 0x21	; 33
     b0e:	a2 0c       	add	r10, r2
     b10:	b3 1c       	adc	r11, r3
     b12:	c4 1c       	adc	r12, r4
     b14:	d5 1c       	adc	r13, r5
     b16:	a2 1a       	sub	r10, r18
     b18:	b3 0a       	sbc	r11, r19
     b1a:	c4 0a       	sbc	r12, r20
     b1c:	d5 0a       	sbc	r13, r21
     b1e:	c6 01       	movw	r24, r12
     b20:	b5 01       	movw	r22, r10
     b22:	69 96       	adiw	r28, 0x19	; 25
     b24:	2c ad       	ldd	r18, Y+60	; 0x3c
     b26:	3d ad       	ldd	r19, Y+61	; 0x3d
     b28:	4e ad       	ldd	r20, Y+62	; 0x3e
     b2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     b2c:	69 97       	sbiw	r28, 0x19	; 25
     b2e:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     b32:	7b 01       	movw	r14, r22
     b34:	8c 01       	movw	r16, r24
     b36:	c6 01       	movw	r24, r12
     b38:	b5 01       	movw	r22, r10
     b3a:	69 96       	adiw	r28, 0x19	; 25
     b3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     b3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     b40:	4e ad       	ldd	r20, Y+62	; 0x3e
     b42:	5f ad       	ldd	r21, Y+63	; 0x3f
     b44:	69 97       	sbiw	r28, 0x19	; 25
     b46:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     b4a:	c9 01       	movw	r24, r18
     b4c:	da 01       	movw	r26, r20
     b4e:	5c 01       	movw	r10, r24
     b50:	6d 01       	movw	r12, r26
     b52:	c6 01       	movw	r24, r12
     b54:	b5 01       	movw	r22, r10
     b56:	6d 96       	adiw	r28, 0x1d	; 29
     b58:	2c ad       	ldd	r18, Y+60	; 0x3c
     b5a:	3d ad       	ldd	r19, Y+61	; 0x3d
     b5c:	4e ad       	ldd	r20, Y+62	; 0x3e
     b5e:	5f ad       	ldd	r21, Y+63	; 0x3f
     b60:	6d 97       	sbiw	r28, 0x1d	; 29
     b62:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	87 01       	movw	r16, r14
     b6c:	ff 24       	eor	r15, r15
     b6e:	ee 24       	eor	r14, r14
     b70:	21 96       	adiw	r28, 0x01	; 1
     b72:	8c ad       	ldd	r24, Y+60	; 0x3c
     b74:	9d ad       	ldd	r25, Y+61	; 0x3d
     b76:	ae ad       	ldd	r26, Y+62	; 0x3e
     b78:	bf ad       	ldd	r27, Y+63	; 0x3f
     b7a:	21 97       	sbiw	r28, 0x01	; 1
     b7c:	a0 70       	andi	r26, 0x00	; 0
     b7e:	b0 70       	andi	r27, 0x00	; 0
     b80:	e8 2a       	or	r14, r24
     b82:	f9 2a       	or	r15, r25
     b84:	0a 2b       	or	r16, r26
     b86:	1b 2b       	or	r17, r27
     b88:	e2 16       	cp	r14, r18
     b8a:	f3 06       	cpc	r15, r19
     b8c:	04 07       	cpc	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	c0 f4       	brcc	.+48     	; 0xbc2 <__stack+0x363>
     b92:	08 94       	sec
     b94:	a1 08       	sbc	r10, r1
     b96:	b1 08       	sbc	r11, r1
     b98:	c1 08       	sbc	r12, r1
     b9a:	d1 08       	sbc	r13, r1
     b9c:	e2 0c       	add	r14, r2
     b9e:	f3 1c       	adc	r15, r3
     ba0:	04 1d       	adc	r16, r4
     ba2:	15 1d       	adc	r17, r5
     ba4:	e2 14       	cp	r14, r2
     ba6:	f3 04       	cpc	r15, r3
     ba8:	04 05       	cpc	r16, r4
     baa:	15 05       	cpc	r17, r5
     bac:	50 f0       	brcs	.+20     	; 0xbc2 <__stack+0x363>
     bae:	e2 16       	cp	r14, r18
     bb0:	f3 06       	cpc	r15, r19
     bb2:	04 07       	cpc	r16, r20
     bb4:	15 07       	cpc	r17, r21
     bb6:	28 f4       	brcc	.+10     	; 0xbc2 <__stack+0x363>
     bb8:	08 94       	sec
     bba:	a1 08       	sbc	r10, r1
     bbc:	b1 08       	sbc	r11, r1
     bbe:	c1 08       	sbc	r12, r1
     bc0:	d1 08       	sbc	r13, r1
     bc2:	a1 96       	adiw	r28, 0x21	; 33
     bc4:	ec ac       	ldd	r14, Y+60	; 0x3c
     bc6:	fd ac       	ldd	r15, Y+61	; 0x3d
     bc8:	0e ad       	ldd	r16, Y+62	; 0x3e
     bca:	1f ad       	ldd	r17, Y+63	; 0x3f
     bcc:	a1 97       	sbiw	r28, 0x21	; 33
     bce:	d7 01       	movw	r26, r14
     bd0:	99 27       	eor	r25, r25
     bd2:	88 27       	eor	r24, r24
     bd4:	96 01       	movw	r18, r12
     bd6:	85 01       	movw	r16, r10
     bd8:	08 2b       	or	r16, r24
     bda:	19 2b       	or	r17, r25
     bdc:	2a 2b       	or	r18, r26
     bde:	3b 2b       	or	r19, r27
     be0:	25 96       	adiw	r28, 0x05	; 5
     be2:	0c af       	std	Y+60, r16	; 0x3c
     be4:	1d af       	std	Y+61, r17	; 0x3d
     be6:	2e af       	std	Y+62, r18	; 0x3e
     be8:	3f af       	std	Y+63, r19	; 0x3f
     bea:	25 97       	sbiw	r28, 0x05	; 5
     bec:	72 c2       	rjmp	.+1252   	; 0x10d2 <__stack+0x873>
     bee:	6e 14       	cp	r6, r14
     bf0:	7f 04       	cpc	r7, r15
     bf2:	80 06       	cpc	r8, r16
     bf4:	91 06       	cpc	r9, r17
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	5f c2       	rjmp	.+1214   	; 0x10b8 <__stack+0x859>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	e2 16       	cp	r14, r18
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	f2 06       	cpc	r15, r18
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	02 07       	cpc	r16, r18
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	12 07       	cpc	r17, r18
     c0a:	88 f4       	brcc	.+34     	; 0xc2e <__stack+0x3cf>
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	e3 16       	cp	r14, r19
     c10:	f1 04       	cpc	r15, r1
     c12:	01 05       	cpc	r16, r1
     c14:	11 05       	cpc	r17, r1
     c16:	31 f0       	breq	.+12     	; 0xc24 <__stack+0x3c5>
     c18:	28 f0       	brcs	.+10     	; 0xc24 <__stack+0x3c5>
     c1a:	48 e0       	ldi	r20, 0x08	; 8
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	17 c0       	rjmp	.+46     	; 0xc52 <__stack+0x3f3>
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <__stack+0x3f3>
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	e4 16       	cp	r14, r20
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	f4 06       	cpc	r15, r20
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	04 07       	cpc	r16, r20
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	14 07       	cpc	r17, r20
     c3e:	28 f0       	brcs	.+10     	; 0xc4a <__stack+0x3eb>
     c40:	48 e1       	ldi	r20, 0x18	; 24
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <__stack+0x3f3>
     c4a:	40 e1       	ldi	r20, 0x10	; 16
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	d8 01       	movw	r26, r16
     c54:	c7 01       	movw	r24, r14
     c56:	04 2e       	mov	r0, r20
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__stack+0x403>
     c5a:	b6 95       	lsr	r27
     c5c:	a7 95       	ror	r26
     c5e:	97 95       	ror	r25
     c60:	87 95       	ror	r24
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__stack+0x3fb>
     c66:	85 53       	subi	r24, 0x35	; 53
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	dc 01       	movw	r26, r24
     c6c:	2c 91       	ld	r18, X
     c6e:	30 e2       	ldi	r19, 0x20	; 32
     c70:	a3 2e       	mov	r10, r19
     c72:	b1 2c       	mov	r11, r1
     c74:	c1 2c       	mov	r12, r1
     c76:	d1 2c       	mov	r13, r1
     c78:	d6 01       	movw	r26, r12
     c7a:	c5 01       	movw	r24, r10
     c7c:	84 1b       	sub	r24, r20
     c7e:	95 0b       	sbc	r25, r21
     c80:	a6 0b       	sbc	r26, r22
     c82:	b7 0b       	sbc	r27, r23
     c84:	82 1b       	sub	r24, r18
     c86:	91 09       	sbc	r25, r1
     c88:	a1 09       	sbc	r26, r1
     c8a:	b1 09       	sbc	r27, r1
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	a1 05       	cpc	r26, r1
     c90:	b1 05       	cpc	r27, r1
     c92:	99 f4       	brne	.+38     	; 0xcba <__stack+0x45b>
     c94:	e6 14       	cp	r14, r6
     c96:	f7 04       	cpc	r15, r7
     c98:	08 05       	cpc	r16, r8
     c9a:	19 05       	cpc	r17, r9
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <__stack+0x441>
     c9e:	fe c1       	rjmp	.+1020   	; 0x109c <__stack+0x83d>
     ca0:	21 96       	adiw	r28, 0x01	; 1
     ca2:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca4:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca6:	8e ac       	ldd	r8, Y+62	; 0x3e
     ca8:	9f ac       	ldd	r9, Y+63	; 0x3f
     caa:	21 97       	sbiw	r28, 0x01	; 1
     cac:	62 14       	cp	r6, r2
     cae:	73 04       	cpc	r7, r3
     cb0:	84 04       	cpc	r8, r4
     cb2:	95 04       	cpc	r9, r5
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__stack+0x459>
     cb6:	f2 c1       	rjmp	.+996    	; 0x109c <__stack+0x83d>
     cb8:	ff c1       	rjmp	.+1022   	; 0x10b8 <__stack+0x859>
     cba:	e2 96       	adiw	r28, 0x32	; 50
     cbc:	8f af       	std	Y+63, r24	; 0x3f
     cbe:	e2 97       	sbiw	r28, 0x32	; 50
     cc0:	08 2e       	mov	r0, r24
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__stack+0x46d>
     cc4:	ee 0c       	add	r14, r14
     cc6:	ff 1c       	adc	r15, r15
     cc8:	00 1f       	adc	r16, r16
     cca:	11 1f       	adc	r17, r17
     ccc:	0a 94       	dec	r0
     cce:	d2 f7       	brpl	.-12     	; 0xcc4 <__stack+0x465>
     cd0:	6a 2d       	mov	r22, r10
     cd2:	68 1b       	sub	r22, r24
     cd4:	d2 01       	movw	r26, r4
     cd6:	c1 01       	movw	r24, r2
     cd8:	06 2e       	mov	r0, r22
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__stack+0x485>
     cdc:	b6 95       	lsr	r27
     cde:	a7 95       	ror	r26
     ce0:	97 95       	ror	r25
     ce2:	87 95       	ror	r24
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__stack+0x47d>
     ce8:	5c 01       	movw	r10, r24
     cea:	6d 01       	movw	r12, r26
     cec:	ae 28       	or	r10, r14
     cee:	bf 28       	or	r11, r15
     cf0:	c0 2a       	or	r12, r16
     cf2:	d1 2a       	or	r13, r17
     cf4:	ad aa       	std	Y+53, r10	; 0x35
     cf6:	be aa       	std	Y+54, r11	; 0x36
     cf8:	cf aa       	std	Y+55, r12	; 0x37
     cfa:	d8 ae       	std	Y+56, r13	; 0x38
     cfc:	72 01       	movw	r14, r4
     cfe:	61 01       	movw	r12, r2
     d00:	e2 96       	adiw	r28, 0x32	; 50
     d02:	0f ac       	ldd	r0, Y+63	; 0x3f
     d04:	e2 97       	sbiw	r28, 0x32	; 50
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <__stack+0x4b1>
     d08:	cc 0c       	add	r12, r12
     d0a:	dd 1c       	adc	r13, r13
     d0c:	ee 1c       	adc	r14, r14
     d0e:	ff 1c       	adc	r15, r15
     d10:	0a 94       	dec	r0
     d12:	d2 f7       	brpl	.-12     	; 0xd08 <__stack+0x4a9>
     d14:	c9 aa       	std	Y+49, r12	; 0x31
     d16:	da aa       	std	Y+50, r13	; 0x32
     d18:	eb aa       	std	Y+51, r14	; 0x33
     d1a:	fc aa       	std	Y+52, r15	; 0x34
     d1c:	64 01       	movw	r12, r8
     d1e:	53 01       	movw	r10, r6
     d20:	06 2e       	mov	r0, r22
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__stack+0x4cd>
     d24:	d6 94       	lsr	r13
     d26:	c7 94       	ror	r12
     d28:	b7 94       	ror	r11
     d2a:	a7 94       	ror	r10
     d2c:	0a 94       	dec	r0
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <__stack+0x4c5>
     d30:	d4 01       	movw	r26, r8
     d32:	c3 01       	movw	r24, r6
     d34:	e2 96       	adiw	r28, 0x32	; 50
     d36:	0f ac       	ldd	r0, Y+63	; 0x3f
     d38:	e2 97       	sbiw	r28, 0x32	; 50
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__stack+0x4e5>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	0a 94       	dec	r0
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <__stack+0x4dd>
     d48:	21 96       	adiw	r28, 0x01	; 1
     d4a:	ec ac       	ldd	r14, Y+60	; 0x3c
     d4c:	fd ac       	ldd	r15, Y+61	; 0x3d
     d4e:	0e ad       	ldd	r16, Y+62	; 0x3e
     d50:	1f ad       	ldd	r17, Y+63	; 0x3f
     d52:	21 97       	sbiw	r28, 0x01	; 1
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <__stack+0x4ff>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	6a 95       	dec	r22
     d60:	d2 f7       	brpl	.-12     	; 0xd56 <__stack+0x4f7>
     d62:	37 01       	movw	r6, r14
     d64:	48 01       	movw	r8, r16
     d66:	68 2a       	or	r6, r24
     d68:	79 2a       	or	r7, r25
     d6a:	8a 2a       	or	r8, r26
     d6c:	9b 2a       	or	r9, r27
     d6e:	6d a6       	std	Y+45, r6	; 0x2d
     d70:	7e a6       	std	Y+46, r7	; 0x2e
     d72:	8f a6       	std	Y+47, r8	; 0x2f
     d74:	98 aa       	std	Y+48, r9	; 0x30
     d76:	ed a8       	ldd	r14, Y+53	; 0x35
     d78:	fe a8       	ldd	r15, Y+54	; 0x36
     d7a:	0f a9       	ldd	r16, Y+55	; 0x37
     d7c:	18 ad       	ldd	r17, Y+56	; 0x38
     d7e:	38 01       	movw	r6, r16
     d80:	88 24       	eor	r8, r8
     d82:	99 24       	eor	r9, r9
     d84:	98 01       	movw	r18, r16
     d86:	87 01       	movw	r16, r14
     d88:	20 70       	andi	r18, 0x00	; 0
     d8a:	30 70       	andi	r19, 0x00	; 0
     d8c:	a5 96       	adiw	r28, 0x25	; 37
     d8e:	0c af       	std	Y+60, r16	; 0x3c
     d90:	1d af       	std	Y+61, r17	; 0x3d
     d92:	2e af       	std	Y+62, r18	; 0x3e
     d94:	3f af       	std	Y+63, r19	; 0x3f
     d96:	a5 97       	sbiw	r28, 0x25	; 37
     d98:	c6 01       	movw	r24, r12
     d9a:	b5 01       	movw	r22, r10
     d9c:	a4 01       	movw	r20, r8
     d9e:	93 01       	movw	r18, r6
     da0:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     da4:	7b 01       	movw	r14, r22
     da6:	8c 01       	movw	r16, r24
     da8:	c6 01       	movw	r24, r12
     daa:	b5 01       	movw	r22, r10
     dac:	a4 01       	movw	r20, r8
     dae:	93 01       	movw	r18, r6
     db0:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     db4:	c9 01       	movw	r24, r18
     db6:	da 01       	movw	r26, r20
     db8:	1c 01       	movw	r2, r24
     dba:	2d 01       	movw	r4, r26
     dbc:	c2 01       	movw	r24, r4
     dbe:	b1 01       	movw	r22, r2
     dc0:	a5 96       	adiw	r28, 0x25	; 37
     dc2:	2c ad       	ldd	r18, Y+60	; 0x3c
     dc4:	3d ad       	ldd	r19, Y+61	; 0x3d
     dc6:	4e ad       	ldd	r20, Y+62	; 0x3e
     dc8:	5f ad       	ldd	r21, Y+63	; 0x3f
     dca:	a5 97       	sbiw	r28, 0x25	; 37
     dcc:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	87 01       	movw	r16, r14
     dd6:	ff 24       	eor	r15, r15
     dd8:	ee 24       	eor	r14, r14
     dda:	ad a4       	ldd	r10, Y+45	; 0x2d
     ddc:	be a4       	ldd	r11, Y+46	; 0x2e
     dde:	cf a4       	ldd	r12, Y+47	; 0x2f
     de0:	d8 a8       	ldd	r13, Y+48	; 0x30
     de2:	c6 01       	movw	r24, r12
     de4:	aa 27       	eor	r26, r26
     de6:	bb 27       	eor	r27, r27
     de8:	57 01       	movw	r10, r14
     dea:	68 01       	movw	r12, r16
     dec:	a8 2a       	or	r10, r24
     dee:	b9 2a       	or	r11, r25
     df0:	ca 2a       	or	r12, r26
     df2:	db 2a       	or	r13, r27
     df4:	a2 16       	cp	r10, r18
     df6:	b3 06       	cpc	r11, r19
     df8:	c4 06       	cpc	r12, r20
     dfa:	d5 06       	cpc	r13, r21
     dfc:	00 f5       	brcc	.+64     	; 0xe3e <__stack+0x5df>
     dfe:	08 94       	sec
     e00:	21 08       	sbc	r2, r1
     e02:	31 08       	sbc	r3, r1
     e04:	41 08       	sbc	r4, r1
     e06:	51 08       	sbc	r5, r1
     e08:	ed a8       	ldd	r14, Y+53	; 0x35
     e0a:	fe a8       	ldd	r15, Y+54	; 0x36
     e0c:	0f a9       	ldd	r16, Y+55	; 0x37
     e0e:	18 ad       	ldd	r17, Y+56	; 0x38
     e10:	ae 0c       	add	r10, r14
     e12:	bf 1c       	adc	r11, r15
     e14:	c0 1e       	adc	r12, r16
     e16:	d1 1e       	adc	r13, r17
     e18:	ae 14       	cp	r10, r14
     e1a:	bf 04       	cpc	r11, r15
     e1c:	c0 06       	cpc	r12, r16
     e1e:	d1 06       	cpc	r13, r17
     e20:	70 f0       	brcs	.+28     	; 0xe3e <__stack+0x5df>
     e22:	a2 16       	cp	r10, r18
     e24:	b3 06       	cpc	r11, r19
     e26:	c4 06       	cpc	r12, r20
     e28:	d5 06       	cpc	r13, r21
     e2a:	48 f4       	brcc	.+18     	; 0xe3e <__stack+0x5df>
     e2c:	08 94       	sec
     e2e:	21 08       	sbc	r2, r1
     e30:	31 08       	sbc	r3, r1
     e32:	41 08       	sbc	r4, r1
     e34:	51 08       	sbc	r5, r1
     e36:	ae 0c       	add	r10, r14
     e38:	bf 1c       	adc	r11, r15
     e3a:	c0 1e       	adc	r12, r16
     e3c:	d1 1e       	adc	r13, r17
     e3e:	a2 1a       	sub	r10, r18
     e40:	b3 0a       	sbc	r11, r19
     e42:	c4 0a       	sbc	r12, r20
     e44:	d5 0a       	sbc	r13, r21
     e46:	c6 01       	movw	r24, r12
     e48:	b5 01       	movw	r22, r10
     e4a:	a4 01       	movw	r20, r8
     e4c:	93 01       	movw	r18, r6
     e4e:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     e52:	7b 01       	movw	r14, r22
     e54:	8c 01       	movw	r16, r24
     e56:	c6 01       	movw	r24, r12
     e58:	b5 01       	movw	r22, r10
     e5a:	a4 01       	movw	r20, r8
     e5c:	93 01       	movw	r18, r6
     e5e:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
     e62:	c9 01       	movw	r24, r18
     e64:	da 01       	movw	r26, r20
     e66:	3c 01       	movw	r6, r24
     e68:	4d 01       	movw	r8, r26
     e6a:	c4 01       	movw	r24, r8
     e6c:	b3 01       	movw	r22, r6
     e6e:	a5 96       	adiw	r28, 0x25	; 37
     e70:	2c ad       	ldd	r18, Y+60	; 0x3c
     e72:	3d ad       	ldd	r19, Y+61	; 0x3d
     e74:	4e ad       	ldd	r20, Y+62	; 0x3e
     e76:	5f ad       	ldd	r21, Y+63	; 0x3f
     e78:	a5 97       	sbiw	r28, 0x25	; 37
     e7a:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
     e82:	87 01       	movw	r16, r14
     e84:	ff 24       	eor	r15, r15
     e86:	ee 24       	eor	r14, r14
     e88:	8d a5       	ldd	r24, Y+45	; 0x2d
     e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e8c:	af a5       	ldd	r26, Y+47	; 0x2f
     e8e:	b8 a9       	ldd	r27, Y+48	; 0x30
     e90:	a0 70       	andi	r26, 0x00	; 0
     e92:	b0 70       	andi	r27, 0x00	; 0
     e94:	57 01       	movw	r10, r14
     e96:	68 01       	movw	r12, r16
     e98:	a8 2a       	or	r10, r24
     e9a:	b9 2a       	or	r11, r25
     e9c:	ca 2a       	or	r12, r26
     e9e:	db 2a       	or	r13, r27
     ea0:	a2 16       	cp	r10, r18
     ea2:	b3 06       	cpc	r11, r19
     ea4:	c4 06       	cpc	r12, r20
     ea6:	d5 06       	cpc	r13, r21
     ea8:	00 f5       	brcc	.+64     	; 0xeea <__stack+0x68b>
     eaa:	08 94       	sec
     eac:	61 08       	sbc	r6, r1
     eae:	71 08       	sbc	r7, r1
     eb0:	81 08       	sbc	r8, r1
     eb2:	91 08       	sbc	r9, r1
     eb4:	6d a9       	ldd	r22, Y+53	; 0x35
     eb6:	7e a9       	ldd	r23, Y+54	; 0x36
     eb8:	8f a9       	ldd	r24, Y+55	; 0x37
     eba:	98 ad       	ldd	r25, Y+56	; 0x38
     ebc:	a6 0e       	add	r10, r22
     ebe:	b7 1e       	adc	r11, r23
     ec0:	c8 1e       	adc	r12, r24
     ec2:	d9 1e       	adc	r13, r25
     ec4:	a6 16       	cp	r10, r22
     ec6:	b7 06       	cpc	r11, r23
     ec8:	c8 06       	cpc	r12, r24
     eca:	d9 06       	cpc	r13, r25
     ecc:	70 f0       	brcs	.+28     	; 0xeea <__stack+0x68b>
     ece:	a2 16       	cp	r10, r18
     ed0:	b3 06       	cpc	r11, r19
     ed2:	c4 06       	cpc	r12, r20
     ed4:	d5 06       	cpc	r13, r21
     ed6:	48 f4       	brcc	.+18     	; 0xeea <__stack+0x68b>
     ed8:	08 94       	sec
     eda:	61 08       	sbc	r6, r1
     edc:	71 08       	sbc	r7, r1
     ede:	81 08       	sbc	r8, r1
     ee0:	91 08       	sbc	r9, r1
     ee2:	a6 0e       	add	r10, r22
     ee4:	b7 1e       	adc	r11, r23
     ee6:	c8 1e       	adc	r12, r24
     ee8:	d9 1e       	adc	r13, r25
     eea:	d6 01       	movw	r26, r12
     eec:	c5 01       	movw	r24, r10
     eee:	82 1b       	sub	r24, r18
     ef0:	93 0b       	sbc	r25, r19
     ef2:	a4 0b       	sbc	r26, r20
     ef4:	b5 0b       	sbc	r27, r21
     ef6:	89 a7       	std	Y+41, r24	; 0x29
     ef8:	9a a7       	std	Y+42, r25	; 0x2a
     efa:	ab a7       	std	Y+43, r26	; 0x2b
     efc:	bc a7       	std	Y+44, r27	; 0x2c
     efe:	d1 01       	movw	r26, r2
     f00:	99 27       	eor	r25, r25
     f02:	88 27       	eor	r24, r24
     f04:	64 01       	movw	r12, r8
     f06:	53 01       	movw	r10, r6
     f08:	a8 2a       	or	r10, r24
     f0a:	b9 2a       	or	r11, r25
     f0c:	ca 2a       	or	r12, r26
     f0e:	db 2a       	or	r13, r27
     f10:	25 96       	adiw	r28, 0x05	; 5
     f12:	ac ae       	std	Y+60, r10	; 0x3c
     f14:	bd ae       	std	Y+61, r11	; 0x3d
     f16:	ce ae       	std	Y+62, r12	; 0x3e
     f18:	df ae       	std	Y+63, r13	; 0x3f
     f1a:	25 97       	sbiw	r28, 0x05	; 5
     f1c:	86 01       	movw	r16, r12
     f1e:	75 01       	movw	r14, r10
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	e2 22       	and	r14, r18
     f2a:	f3 22       	and	r15, r19
     f2c:	04 23       	and	r16, r20
     f2e:	15 23       	and	r17, r21
     f30:	a6 01       	movw	r20, r12
     f32:	66 27       	eor	r22, r22
     f34:	77 27       	eor	r23, r23
     f36:	ad 96       	adiw	r28, 0x2d	; 45
     f38:	4c af       	std	Y+60, r20	; 0x3c
     f3a:	5d af       	std	Y+61, r21	; 0x3d
     f3c:	6e af       	std	Y+62, r22	; 0x3e
     f3e:	7f af       	std	Y+63, r23	; 0x3f
     f40:	ad 97       	sbiw	r28, 0x2d	; 45
     f42:	a9 a8       	ldd	r10, Y+49	; 0x31
     f44:	ba a8       	ldd	r11, Y+50	; 0x32
     f46:	cb a8       	ldd	r12, Y+51	; 0x33
     f48:	dc a8       	ldd	r13, Y+52	; 0x34
     f4a:	6f ef       	ldi	r22, 0xFF	; 255
     f4c:	7f ef       	ldi	r23, 0xFF	; 255
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a6 22       	and	r10, r22
     f54:	b7 22       	and	r11, r23
     f56:	c8 22       	and	r12, r24
     f58:	d9 22       	and	r13, r25
     f5a:	89 a9       	ldd	r24, Y+49	; 0x31
     f5c:	9a a9       	ldd	r25, Y+50	; 0x32
     f5e:	ab a9       	ldd	r26, Y+51	; 0x33
     f60:	bc a9       	ldd	r27, Y+52	; 0x34
     f62:	1d 01       	movw	r2, r26
     f64:	44 24       	eor	r4, r4
     f66:	55 24       	eor	r5, r5
     f68:	c8 01       	movw	r24, r16
     f6a:	b7 01       	movw	r22, r14
     f6c:	a6 01       	movw	r20, r12
     f6e:	95 01       	movw	r18, r10
     f70:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     f74:	a9 96       	adiw	r28, 0x29	; 41
     f76:	6c af       	std	Y+60, r22	; 0x3c
     f78:	7d af       	std	Y+61, r23	; 0x3d
     f7a:	8e af       	std	Y+62, r24	; 0x3e
     f7c:	9f af       	std	Y+63, r25	; 0x3f
     f7e:	a9 97       	sbiw	r28, 0x29	; 41
     f80:	c8 01       	movw	r24, r16
     f82:	b7 01       	movw	r22, r14
     f84:	a2 01       	movw	r20, r4
     f86:	91 01       	movw	r18, r2
     f88:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     f8c:	3b 01       	movw	r6, r22
     f8e:	4c 01       	movw	r8, r24
     f90:	ad 96       	adiw	r28, 0x2d	; 45
     f92:	6c ad       	ldd	r22, Y+60	; 0x3c
     f94:	7d ad       	ldd	r23, Y+61	; 0x3d
     f96:	8e ad       	ldd	r24, Y+62	; 0x3e
     f98:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9a:	ad 97       	sbiw	r28, 0x2d	; 45
     f9c:	a6 01       	movw	r20, r12
     f9e:	95 01       	movw	r18, r10
     fa0:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     fa4:	7b 01       	movw	r14, r22
     fa6:	8c 01       	movw	r16, r24
     fa8:	ad 96       	adiw	r28, 0x2d	; 45
     faa:	6c ad       	ldd	r22, Y+60	; 0x3c
     fac:	7d ad       	ldd	r23, Y+61	; 0x3d
     fae:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb2:	ad 97       	sbiw	r28, 0x2d	; 45
     fb4:	a2 01       	movw	r20, r4
     fb6:	91 01       	movw	r18, r2
     fb8:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
     fbc:	5b 01       	movw	r10, r22
     fbe:	6c 01       	movw	r12, r24
     fc0:	a8 01       	movw	r20, r16
     fc2:	97 01       	movw	r18, r14
     fc4:	26 0d       	add	r18, r6
     fc6:	37 1d       	adc	r19, r7
     fc8:	48 1d       	adc	r20, r8
     fca:	59 1d       	adc	r21, r9
     fcc:	a9 96       	adiw	r28, 0x29	; 41
     fce:	6c ac       	ldd	r6, Y+60	; 0x3c
     fd0:	7d ac       	ldd	r7, Y+61	; 0x3d
     fd2:	8e ac       	ldd	r8, Y+62	; 0x3e
     fd4:	9f ac       	ldd	r9, Y+63	; 0x3f
     fd6:	a9 97       	sbiw	r28, 0x29	; 41
     fd8:	c4 01       	movw	r24, r8
     fda:	aa 27       	eor	r26, r26
     fdc:	bb 27       	eor	r27, r27
     fde:	28 0f       	add	r18, r24
     fe0:	39 1f       	adc	r19, r25
     fe2:	4a 1f       	adc	r20, r26
     fe4:	5b 1f       	adc	r21, r27
     fe6:	2e 15       	cp	r18, r14
     fe8:	3f 05       	cpc	r19, r15
     fea:	40 07       	cpc	r20, r16
     fec:	51 07       	cpc	r21, r17
     fee:	48 f4       	brcc	.+18     	; 0x1002 <__stack+0x7a3>
     ff0:	e1 2c       	mov	r14, r1
     ff2:	f1 2c       	mov	r15, r1
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	06 2f       	mov	r16, r22
     ff8:	11 2d       	mov	r17, r1
     ffa:	ae 0c       	add	r10, r14
     ffc:	bf 1c       	adc	r11, r15
     ffe:	c0 1e       	adc	r12, r16
    1000:	d1 1e       	adc	r13, r17
    1002:	ca 01       	movw	r24, r20
    1004:	aa 27       	eor	r26, r26
    1006:	bb 27       	eor	r27, r27
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	6a 0d       	add	r22, r10
    100e:	7b 1d       	adc	r23, r11
    1010:	8c 1d       	adc	r24, r12
    1012:	9d 1d       	adc	r25, r13
    1014:	69 a4       	ldd	r6, Y+41	; 0x29
    1016:	7a a4       	ldd	r7, Y+42	; 0x2a
    1018:	8b a4       	ldd	r8, Y+43	; 0x2b
    101a:	9c a4       	ldd	r9, Y+44	; 0x2c
    101c:	66 16       	cp	r6, r22
    101e:	77 06       	cpc	r7, r23
    1020:	88 06       	cpc	r8, r24
    1022:	99 06       	cpc	r9, r25
    1024:	50 f1       	brcs	.+84     	; 0x107a <__stack+0x81b>
    1026:	66 15       	cp	r22, r6
    1028:	77 05       	cpc	r23, r7
    102a:	88 05       	cpc	r24, r8
    102c:	99 05       	cpc	r25, r9
    102e:	09 f0       	breq	.+2      	; 0x1032 <__stack+0x7d3>
    1030:	4d c0       	rjmp	.+154    	; 0x10cc <__stack+0x86d>
    1032:	d9 01       	movw	r26, r18
    1034:	99 27       	eor	r25, r25
    1036:	88 27       	eor	r24, r24
    1038:	a9 96       	adiw	r28, 0x29	; 41
    103a:	2c ad       	ldd	r18, Y+60	; 0x3c
    103c:	3d ad       	ldd	r19, Y+61	; 0x3d
    103e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1040:	5f ad       	ldd	r21, Y+63	; 0x3f
    1042:	a9 97       	sbiw	r28, 0x29	; 41
    1044:	40 70       	andi	r20, 0x00	; 0
    1046:	50 70       	andi	r21, 0x00	; 0
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	a4 1f       	adc	r26, r20
    104e:	b5 1f       	adc	r27, r21
    1050:	21 96       	adiw	r28, 0x01	; 1
    1052:	2c ad       	ldd	r18, Y+60	; 0x3c
    1054:	3d ad       	ldd	r19, Y+61	; 0x3d
    1056:	4e ad       	ldd	r20, Y+62	; 0x3e
    1058:	5f ad       	ldd	r21, Y+63	; 0x3f
    105a:	21 97       	sbiw	r28, 0x01	; 1
    105c:	e2 96       	adiw	r28, 0x32	; 50
    105e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1060:	e2 97       	sbiw	r28, 0x32	; 50
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__stack+0x80d>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	0a 94       	dec	r0
    106e:	d2 f7       	brpl	.-12     	; 0x1064 <__stack+0x805>
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	4a 07       	cpc	r20, r26
    1076:	5b 07       	cpc	r21, r27
    1078:	48 f5       	brcc	.+82     	; 0x10cc <__stack+0x86d>
    107a:	25 96       	adiw	r28, 0x05	; 5
    107c:	0c ad       	ldd	r16, Y+60	; 0x3c
    107e:	1d ad       	ldd	r17, Y+61	; 0x3d
    1080:	2e ad       	ldd	r18, Y+62	; 0x3e
    1082:	3f ad       	ldd	r19, Y+63	; 0x3f
    1084:	25 97       	sbiw	r28, 0x05	; 5
    1086:	01 50       	subi	r16, 0x01	; 1
    1088:	10 40       	sbci	r17, 0x00	; 0
    108a:	20 40       	sbci	r18, 0x00	; 0
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	25 96       	adiw	r28, 0x05	; 5
    1090:	0c af       	std	Y+60, r16	; 0x3c
    1092:	1d af       	std	Y+61, r17	; 0x3d
    1094:	2e af       	std	Y+62, r18	; 0x3e
    1096:	3f af       	std	Y+63, r19	; 0x3f
    1098:	25 97       	sbiw	r28, 0x05	; 5
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <__stack+0x86d>
    109c:	66 24       	eor	r6, r6
    109e:	77 24       	eor	r7, r7
    10a0:	43 01       	movw	r8, r6
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	25 96       	adiw	r28, 0x05	; 5
    10ac:	2c af       	std	Y+60, r18	; 0x3c
    10ae:	3d af       	std	Y+61, r19	; 0x3d
    10b0:	4e af       	std	Y+62, r20	; 0x3e
    10b2:	5f af       	std	Y+63, r21	; 0x3f
    10b4:	25 97       	sbiw	r28, 0x05	; 5
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <__stack+0x873>
    10b8:	66 24       	eor	r6, r6
    10ba:	77 24       	eor	r7, r7
    10bc:	43 01       	movw	r8, r6
    10be:	25 96       	adiw	r28, 0x05	; 5
    10c0:	1c ae       	std	Y+60, r1	; 0x3c
    10c2:	1d ae       	std	Y+61, r1	; 0x3d
    10c4:	1e ae       	std	Y+62, r1	; 0x3e
    10c6:	1f ae       	std	Y+63, r1	; 0x3f
    10c8:	25 97       	sbiw	r28, 0x05	; 5
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <__stack+0x873>
    10cc:	66 24       	eor	r6, r6
    10ce:	77 24       	eor	r7, r7
    10d0:	43 01       	movw	r8, r6
    10d2:	fe 01       	movw	r30, r28
    10d4:	b1 96       	adiw	r30, 0x21	; 33
    10d6:	88 e0       	ldi	r24, 0x08	; 8
    10d8:	df 01       	movw	r26, r30
    10da:	1d 92       	st	X+, r1
    10dc:	8a 95       	dec	r24
    10de:	e9 f7       	brne	.-6      	; 0x10da <__stack+0x87b>
    10e0:	25 96       	adiw	r28, 0x05	; 5
    10e2:	ac ac       	ldd	r10, Y+60	; 0x3c
    10e4:	bd ac       	ldd	r11, Y+61	; 0x3d
    10e6:	ce ac       	ldd	r12, Y+62	; 0x3e
    10e8:	df ac       	ldd	r13, Y+63	; 0x3f
    10ea:	25 97       	sbiw	r28, 0x05	; 5
    10ec:	a9 a2       	std	Y+33, r10	; 0x21
    10ee:	ba a2       	std	Y+34, r11	; 0x22
    10f0:	cb a2       	std	Y+35, r12	; 0x23
    10f2:	dc a2       	std	Y+36, r13	; 0x24
    10f4:	6d a2       	std	Y+37, r6	; 0x25
    10f6:	7e a2       	std	Y+38, r7	; 0x26
    10f8:	8f a2       	std	Y+39, r8	; 0x27
    10fa:	98 a6       	std	Y+40, r9	; 0x28
    10fc:	22 96       	adiw	r28, 0x02	; 2
    10fe:	2f ad       	ldd	r18, Y+63	; 0x3f
    1100:	22 97       	sbiw	r28, 0x02	; 2
    1102:	3a a1       	ldd	r19, Y+34	; 0x22
    1104:	4b a1       	ldd	r20, Y+35	; 0x23
    1106:	5c a1       	ldd	r21, Y+36	; 0x24
    1108:	66 2d       	mov	r22, r6
    110a:	7e a1       	ldd	r23, Y+38	; 0x26
    110c:	df a0       	ldd	r13, Y+39	; 0x27
    110e:	98 a5       	ldd	r25, Y+40	; 0x28
    1110:	e1 96       	adiw	r28, 0x31	; 49
    1112:	ec ac       	ldd	r14, Y+60	; 0x3c
    1114:	fd ac       	ldd	r15, Y+61	; 0x3d
    1116:	0e ad       	ldd	r16, Y+62	; 0x3e
    1118:	1f ad       	ldd	r17, Y+63	; 0x3f
    111a:	e1 97       	sbiw	r28, 0x31	; 49
    111c:	e1 14       	cp	r14, r1
    111e:	f1 04       	cpc	r15, r1
    1120:	01 05       	cpc	r16, r1
    1122:	11 05       	cpc	r17, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x8c9>
    1126:	56 c0       	rjmp	.+172    	; 0x11d4 <__stack+0x975>
    1128:	21 95       	neg	r18
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	12 16       	cp	r1, r18
    112e:	08 f0       	brcs	.+2      	; 0x1132 <__stack+0x8d3>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	31 95       	neg	r19
    1134:	e1 e0       	ldi	r30, 0x01	; 1
    1136:	13 16       	cp	r1, r19
    1138:	08 f0       	brcs	.+2      	; 0x113c <__stack+0x8dd>
    113a:	e0 e0       	ldi	r30, 0x00	; 0
    113c:	93 2e       	mov	r9, r19
    113e:	98 1a       	sub	r9, r24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	39 15       	cp	r19, r9
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__stack+0x8e9>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	e8 2b       	or	r30, r24
    114a:	41 95       	neg	r20
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	14 16       	cp	r1, r20
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__stack+0x8f5>
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	a4 2e       	mov	r10, r20
    1156:	ae 1a       	sub	r10, r30
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	4a 15       	cp	r20, r10
    115c:	08 f0       	brcs	.+2      	; 0x1160 <__stack+0x901>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	f8 2b       	or	r31, r24
    1162:	51 95       	neg	r21
    1164:	e1 e0       	ldi	r30, 0x01	; 1
    1166:	15 16       	cp	r1, r21
    1168:	08 f0       	brcs	.+2      	; 0x116c <__stack+0x90d>
    116a:	e0 e0       	ldi	r30, 0x00	; 0
    116c:	b5 2e       	mov	r11, r21
    116e:	bf 1a       	sub	r11, r31
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	5b 15       	cp	r21, r11
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__stack+0x919>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	e8 2b       	or	r30, r24
    117a:	61 95       	neg	r22
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	16 16       	cp	r1, r22
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__stack+0x925>
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	a6 2f       	mov	r26, r22
    1186:	ae 1b       	sub	r26, r30
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	6a 17       	cp	r22, r26
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__stack+0x931>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	f8 2b       	or	r31, r24
    1192:	71 95       	neg	r23
    1194:	e1 e0       	ldi	r30, 0x01	; 1
    1196:	17 16       	cp	r1, r23
    1198:	08 f0       	brcs	.+2      	; 0x119c <__stack+0x93d>
    119a:	e0 e0       	ldi	r30, 0x00	; 0
    119c:	c7 2e       	mov	r12, r23
    119e:	cf 1a       	sub	r12, r31
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	7c 15       	cp	r23, r12
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <__stack+0x949>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	e8 2b       	or	r30, r24
    11aa:	8d 2d       	mov	r24, r13
    11ac:	81 95       	neg	r24
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	18 16       	cp	r1, r24
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__stack+0x957>
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	d8 2e       	mov	r13, r24
    11b8:	de 1a       	sub	r13, r30
    11ba:	e1 e0       	ldi	r30, 0x01	; 1
    11bc:	8d 15       	cp	r24, r13
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__stack+0x963>
    11c0:	e0 e0       	ldi	r30, 0x00	; 0
    11c2:	fe 2b       	or	r31, r30
    11c4:	89 2f       	mov	r24, r25
    11c6:	81 95       	neg	r24
    11c8:	39 2d       	mov	r19, r9
    11ca:	a5 01       	movw	r20, r10
    11cc:	6a 2f       	mov	r22, r26
    11ce:	7c 2d       	mov	r23, r12
    11d0:	98 2f       	mov	r25, r24
    11d2:	9f 1b       	sub	r25, r31
    11d4:	8d 2d       	mov	r24, r13
    11d6:	ce 58       	subi	r28, 0x8E	; 142
    11d8:	df 4f       	sbci	r29, 0xFF	; 255
    11da:	e2 e1       	ldi	r30, 0x12	; 18
    11dc:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__epilogue_restores__>

000011e0 <__moddi3>:
    11e0:	a7 e7       	ldi	r26, 0x77	; 119
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 ef       	ldi	r30, 0xF6	; 246
    11e6:	f8 e0       	ldi	r31, 0x08	; 8
    11e8:	0c 94 de 33 	jmp	0x67bc	; 0x67bc <__prologue_saves__>
    11ec:	98 2e       	mov	r9, r24
    11ee:	89 2e       	mov	r8, r25
    11f0:	71 2e       	mov	r7, r17
    11f2:	88 e0       	ldi	r24, 0x08	; 8
    11f4:	fe 01       	movw	r30, r28
    11f6:	31 96       	adiw	r30, 0x01	; 1
    11f8:	df 01       	movw	r26, r30
    11fa:	68 2e       	mov	r6, r24
    11fc:	1d 92       	st	X+, r1
    11fe:	6a 94       	dec	r6
    1200:	e9 f7       	brne	.-6      	; 0x11fc <__moddi3+0x1c>
    1202:	29 83       	std	Y+1, r18	; 0x01
    1204:	3a 83       	std	Y+2, r19	; 0x02
    1206:	4b 83       	std	Y+3, r20	; 0x03
    1208:	5c 83       	std	Y+4, r21	; 0x04
    120a:	6d 83       	std	Y+5, r22	; 0x05
    120c:	7e 83       	std	Y+6, r23	; 0x06
    120e:	9f 82       	std	Y+7, r9	; 0x07
    1210:	98 87       	std	Y+8, r25	; 0x08
    1212:	fe 01       	movw	r30, r28
    1214:	39 96       	adiw	r30, 0x09	; 9
    1216:	df 01       	movw	r26, r30
    1218:	1d 92       	st	X+, r1
    121a:	8a 95       	dec	r24
    121c:	e9 f7       	brne	.-6      	; 0x1218 <__moddi3+0x38>
    121e:	a9 86       	std	Y+9, r10	; 0x09
    1220:	ba 86       	std	Y+10, r11	; 0x0a
    1222:	cb 86       	std	Y+11, r12	; 0x0b
    1224:	dc 86       	std	Y+12, r13	; 0x0c
    1226:	ed 86       	std	Y+13, r14	; 0x0d
    1228:	fe 86       	std	Y+14, r15	; 0x0e
    122a:	0f 87       	std	Y+15, r16	; 0x0f
    122c:	18 8b       	std	Y+16, r17	; 0x10
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	af 81       	ldd	r26, Y+7	; 0x07
    1234:	b8 85       	ldd	r27, Y+8	; 0x08
    1236:	b7 fd       	sbrc	r27, 7
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <__moddi3+0x68>
    123a:	e1 96       	adiw	r28, 0x31	; 49
    123c:	1c ae       	std	Y+60, r1	; 0x3c
    123e:	1d ae       	std	Y+61, r1	; 0x3d
    1240:	1e ae       	std	Y+62, r1	; 0x3e
    1242:	1f ae       	std	Y+63, r1	; 0x3f
    1244:	e1 97       	sbiw	r28, 0x31	; 49
    1246:	64 c0       	rjmp	.+200    	; 0x1310 <__moddi3+0x130>
    1248:	21 95       	neg	r18
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	12 16       	cp	r1, r18
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__moddi3+0x72>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	31 95       	neg	r19
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	13 16       	cp	r1, r19
    1258:	08 f0       	brcs	.+2      	; 0x125c <__moddi3+0x7c>
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	b3 2f       	mov	r27, r19
    125e:	b8 1b       	sub	r27, r24
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	3b 17       	cp	r19, r27
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__moddi3+0x88>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	98 2b       	or	r25, r24
    126a:	41 95       	neg	r20
    126c:	31 e0       	ldi	r19, 0x01	; 1
    126e:	14 16       	cp	r1, r20
    1270:	08 f0       	brcs	.+2      	; 0x1274 <__moddi3+0x94>
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	a4 2f       	mov	r26, r20
    1276:	a9 1b       	sub	r26, r25
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	4a 17       	cp	r20, r26
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0xa0>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	38 2b       	or	r19, r24
    1282:	51 95       	neg	r21
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	15 16       	cp	r1, r21
    1288:	08 f0       	brcs	.+2      	; 0x128c <__moddi3+0xac>
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	f5 2f       	mov	r31, r21
    128e:	f3 1b       	sub	r31, r19
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	5f 17       	cp	r21, r31
    1294:	08 f0       	brcs	.+2      	; 0x1298 <__moddi3+0xb8>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	98 2b       	or	r25, r24
    129a:	61 95       	neg	r22
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	16 16       	cp	r1, r22
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__moddi3+0xc4>
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	e6 2f       	mov	r30, r22
    12a6:	e9 1b       	sub	r30, r25
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	6e 17       	cp	r22, r30
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__moddi3+0xd0>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	38 2b       	or	r19, r24
    12b2:	71 95       	neg	r23
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	17 16       	cp	r1, r23
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__moddi3+0xdc>
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	57 2f       	mov	r21, r23
    12be:	53 1b       	sub	r21, r19
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	75 17       	cp	r23, r21
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__moddi3+0xe8>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	48 2b       	or	r20, r24
    12ca:	89 2d       	mov	r24, r9
    12cc:	81 95       	neg	r24
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	18 16       	cp	r1, r24
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__moddi3+0xf6>
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	68 2e       	mov	r6, r24
    12d8:	64 1a       	sub	r6, r20
    12da:	46 2d       	mov	r20, r6
    12dc:	31 e0       	ldi	r19, 0x01	; 1
    12de:	86 15       	cp	r24, r6
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__moddi3+0x104>
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	93 2b       	or	r25, r19
    12e6:	88 2d       	mov	r24, r8
    12e8:	81 95       	neg	r24
    12ea:	89 1b       	sub	r24, r25
    12ec:	29 83       	std	Y+1, r18	; 0x01
    12ee:	ba 83       	std	Y+2, r27	; 0x02
    12f0:	ab 83       	std	Y+3, r26	; 0x03
    12f2:	fc 83       	std	Y+4, r31	; 0x04
    12f4:	ed 83       	std	Y+5, r30	; 0x05
    12f6:	5e 83       	std	Y+6, r21	; 0x06
    12f8:	4f 83       	std	Y+7, r20	; 0x07
    12fa:	88 87       	std	Y+8, r24	; 0x08
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f ef       	ldi	r20, 0xFF	; 255
    1302:	5f ef       	ldi	r21, 0xFF	; 255
    1304:	e1 96       	adiw	r28, 0x31	; 49
    1306:	2c af       	std	Y+60, r18	; 0x3c
    1308:	3d af       	std	Y+61, r19	; 0x3d
    130a:	4e af       	std	Y+62, r20	; 0x3e
    130c:	5f af       	std	Y+63, r21	; 0x3f
    130e:	e1 97       	sbiw	r28, 0x31	; 49
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	af 85       	ldd	r26, Y+15	; 0x0f
    1316:	b8 89       	ldd	r27, Y+16	; 0x10
    1318:	b7 ff       	sbrs	r27, 7
    131a:	5a c0       	rjmp	.+180    	; 0x13d0 <__moddi3+0x1f0>
    131c:	a1 94       	neg	r10
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	1a 14       	cp	r1, r10
    1322:	08 f0       	brcs	.+2      	; 0x1326 <__moddi3+0x146>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	b1 94       	neg	r11
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	1b 14       	cp	r1, r11
    132c:	08 f0       	brcs	.+2      	; 0x1330 <__moddi3+0x150>
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	6b 2d       	mov	r22, r11
    1332:	68 1b       	sub	r22, r24
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	b6 16       	cp	r11, r22
    1338:	08 f0       	brcs	.+2      	; 0x133c <__moddi3+0x15c>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	98 2b       	or	r25, r24
    133e:	c1 94       	neg	r12
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	1c 14       	cp	r1, r12
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__moddi3+0x168>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	5c 2d       	mov	r21, r12
    134a:	59 1b       	sub	r21, r25
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	c5 16       	cp	r12, r21
    1350:	08 f0       	brcs	.+2      	; 0x1354 <__moddi3+0x174>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	28 2b       	or	r18, r24
    1356:	d1 94       	neg	r13
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	1d 14       	cp	r1, r13
    135c:	08 f0       	brcs	.+2      	; 0x1360 <__moddi3+0x180>
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	4d 2d       	mov	r20, r13
    1362:	42 1b       	sub	r20, r18
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	d4 16       	cp	r13, r20
    1368:	08 f0       	brcs	.+2      	; 0x136c <__moddi3+0x18c>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	98 2b       	or	r25, r24
    136e:	e1 94       	neg	r14
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	1e 14       	cp	r1, r14
    1374:	08 f0       	brcs	.+2      	; 0x1378 <__moddi3+0x198>
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3e 2d       	mov	r19, r14
    137a:	39 1b       	sub	r19, r25
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	e3 16       	cp	r14, r19
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__moddi3+0x1a4>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	28 2b       	or	r18, r24
    1386:	f1 94       	neg	r15
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	1f 14       	cp	r1, r15
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__moddi3+0x1b0>
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	7f 2d       	mov	r23, r15
    1392:	72 1b       	sub	r23, r18
    1394:	27 2f       	mov	r18, r23
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	f7 16       	cp	r15, r23
    139a:	08 f0       	brcs	.+2      	; 0x139e <__moddi3+0x1be>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	98 2b       	or	r25, r24
    13a0:	01 95       	neg	r16
    13a2:	11 e0       	ldi	r17, 0x01	; 1
    13a4:	10 16       	cp	r1, r16
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <__moddi3+0x1ca>
    13a8:	10 e0       	ldi	r17, 0x00	; 0
    13aa:	80 2f       	mov	r24, r16
    13ac:	89 1b       	sub	r24, r25
    13ae:	98 2f       	mov	r25, r24
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	09 17       	cp	r16, r25
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__moddi3+0x1d8>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	18 2b       	or	r17, r24
    13ba:	87 2d       	mov	r24, r7
    13bc:	81 95       	neg	r24
    13be:	81 1b       	sub	r24, r17
    13c0:	a9 86       	std	Y+9, r10	; 0x09
    13c2:	6a 87       	std	Y+10, r22	; 0x0a
    13c4:	5b 87       	std	Y+11, r21	; 0x0b
    13c6:	4c 87       	std	Y+12, r20	; 0x0c
    13c8:	3d 87       	std	Y+13, r19	; 0x0d
    13ca:	2e 87       	std	Y+14, r18	; 0x0e
    13cc:	9f 87       	std	Y+15, r25	; 0x0f
    13ce:	88 8b       	std	Y+16, r24	; 0x10
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	2a 81       	ldd	r18, Y+2	; 0x02
    13d4:	3b 81       	ldd	r19, Y+3	; 0x03
    13d6:	4c 81       	ldd	r20, Y+4	; 0x04
    13d8:	5d 81       	ldd	r21, Y+5	; 0x05
    13da:	6e 81       	ldd	r22, Y+6	; 0x06
    13dc:	7f 81       	ldd	r23, Y+7	; 0x07
    13de:	a8 85       	ldd	r26, Y+8	; 0x08
    13e0:	b9 85       	ldd	r27, Y+9	; 0x09
    13e2:	1a 85       	ldd	r17, Y+10	; 0x0a
    13e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    13e6:	fc 84       	ldd	r15, Y+12	; 0x0c
    13e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    13ea:	de 84       	ldd	r13, Y+14	; 0x0e
    13ec:	cf 84       	ldd	r12, Y+15	; 0x0f
    13ee:	b8 88       	ldd	r11, Y+16	; 0x10
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	e9 e1       	ldi	r30, 0x19	; 25
    13f4:	8e 2e       	mov	r8, r30
    13f6:	91 2c       	mov	r9, r1
    13f8:	8c 0e       	add	r8, r28
    13fa:	9d 1e       	adc	r9, r29
    13fc:	f4 01       	movw	r30, r8
    13fe:	68 2e       	mov	r6, r24
    1400:	11 92       	st	Z+, r1
    1402:	6a 94       	dec	r6
    1404:	e9 f7       	brne	.-6      	; 0x1400 <__moddi3+0x220>
    1406:	99 8f       	std	Y+25, r25	; 0x19
    1408:	2a 8f       	std	Y+26, r18	; 0x1a
    140a:	3b 8f       	std	Y+27, r19	; 0x1b
    140c:	4c 8f       	std	Y+28, r20	; 0x1c
    140e:	5d 8f       	std	Y+29, r21	; 0x1d
    1410:	6e 8f       	std	Y+30, r22	; 0x1e
    1412:	7f 8f       	std	Y+31, r23	; 0x1f
    1414:	a8 a3       	std	Y+32, r26	; 0x20
    1416:	9e 01       	movw	r18, r28
    1418:	2f 5d       	subi	r18, 0xDF	; 223
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	f9 01       	movw	r30, r18
    141e:	11 92       	st	Z+, r1
    1420:	8a 95       	dec	r24
    1422:	e9 f7       	brne	.-6      	; 0x141e <__moddi3+0x23e>
    1424:	b9 a3       	std	Y+33, r27	; 0x21
    1426:	1a a3       	std	Y+34, r17	; 0x22
    1428:	0b a3       	std	Y+35, r16	; 0x23
    142a:	fc a2       	std	Y+36, r15	; 0x24
    142c:	ed a2       	std	Y+37, r14	; 0x25
    142e:	de a2       	std	Y+38, r13	; 0x26
    1430:	cf a2       	std	Y+39, r12	; 0x27
    1432:	b8 a6       	std	Y+40, r11	; 0x28
    1434:	29 a0       	ldd	r2, Y+33	; 0x21
    1436:	3a a0       	ldd	r3, Y+34	; 0x22
    1438:	4b a0       	ldd	r4, Y+35	; 0x23
    143a:	5c a0       	ldd	r5, Y+36	; 0x24
    143c:	ad a0       	ldd	r10, Y+37	; 0x25
    143e:	be a0       	ldd	r11, Y+38	; 0x26
    1440:	cf a0       	ldd	r12, Y+39	; 0x27
    1442:	d8 a4       	ldd	r13, Y+40	; 0x28
    1444:	49 8d       	ldd	r20, Y+25	; 0x19
    1446:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1448:	6b 8d       	ldd	r22, Y+27	; 0x1b
    144a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    144c:	e5 96       	adiw	r28, 0x35	; 53
    144e:	4f af       	std	Y+63, r20	; 0x3f
    1450:	e5 97       	sbiw	r28, 0x35	; 53
    1452:	e6 96       	adiw	r28, 0x36	; 54
    1454:	5f af       	std	Y+63, r21	; 0x3f
    1456:	e6 97       	sbiw	r28, 0x36	; 54
    1458:	e7 96       	adiw	r28, 0x37	; 55
    145a:	6f af       	std	Y+63, r22	; 0x3f
    145c:	e7 97       	sbiw	r28, 0x37	; 55
    145e:	e8 96       	adiw	r28, 0x38	; 56
    1460:	7f af       	std	Y+63, r23	; 0x3f
    1462:	e8 97       	sbiw	r28, 0x38	; 56
    1464:	e8 96       	adiw	r28, 0x38	; 56
    1466:	6c ac       	ldd	r6, Y+60	; 0x3c
    1468:	7d ac       	ldd	r7, Y+61	; 0x3d
    146a:	8e ac       	ldd	r8, Y+62	; 0x3e
    146c:	9f ac       	ldd	r9, Y+63	; 0x3f
    146e:	e8 97       	sbiw	r28, 0x38	; 56
    1470:	2d 96       	adiw	r28, 0x0d	; 13
    1472:	6c ae       	std	Y+60, r6	; 0x3c
    1474:	7d ae       	std	Y+61, r7	; 0x3d
    1476:	8e ae       	std	Y+62, r8	; 0x3e
    1478:	9f ae       	std	Y+63, r9	; 0x3f
    147a:	2d 97       	sbiw	r28, 0x0d	; 13
    147c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1480:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1482:	38 a1       	ldd	r19, Y+32	; 0x20
    1484:	3c 01       	movw	r6, r24
    1486:	49 01       	movw	r8, r18
    1488:	61 96       	adiw	r28, 0x11	; 17
    148a:	6c ae       	std	Y+60, r6	; 0x3c
    148c:	7d ae       	std	Y+61, r7	; 0x3d
    148e:	8e ae       	std	Y+62, r8	; 0x3e
    1490:	9f ae       	std	Y+63, r9	; 0x3f
    1492:	61 97       	sbiw	r28, 0x11	; 17
    1494:	a1 14       	cp	r10, r1
    1496:	b1 04       	cpc	r11, r1
    1498:	c1 04       	cpc	r12, r1
    149a:	d1 04       	cpc	r13, r1
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__moddi3+0x2c0>
    149e:	28 c3       	rjmp	.+1616   	; 0x1af0 <__moddi3+0x910>
    14a0:	62 14       	cp	r6, r2
    14a2:	73 04       	cpc	r7, r3
    14a4:	84 04       	cpc	r8, r4
    14a6:	95 04       	cpc	r9, r5
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <__moddi3+0x2cc>
    14aa:	0e c1       	rjmp	.+540    	; 0x16c8 <__moddi3+0x4e8>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	20 16       	cp	r2, r16
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	30 06       	cpc	r3, r16
    14b4:	01 e0       	ldi	r16, 0x01	; 1
    14b6:	40 06       	cpc	r4, r16
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	50 06       	cpc	r5, r16
    14bc:	88 f4       	brcc	.+34     	; 0x14e0 <__moddi3+0x300>
    14be:	1f ef       	ldi	r17, 0xFF	; 255
    14c0:	21 16       	cp	r2, r17
    14c2:	31 04       	cpc	r3, r1
    14c4:	41 04       	cpc	r4, r1
    14c6:	51 04       	cpc	r5, r1
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <__moddi3+0x2f8>
    14ca:	30 f0       	brcs	.+12     	; 0x14d8 <__moddi3+0x2f8>
    14cc:	88 e0       	ldi	r24, 0x08	; 8
    14ce:	e8 2e       	mov	r14, r24
    14d0:	f1 2c       	mov	r15, r1
    14d2:	01 2d       	mov	r16, r1
    14d4:	11 2d       	mov	r17, r1
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <__moddi3+0x328>
    14d8:	ee 24       	eor	r14, r14
    14da:	ff 24       	eor	r15, r15
    14dc:	87 01       	movw	r16, r14
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <__moddi3+0x328>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	22 16       	cp	r2, r18
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	32 06       	cpc	r3, r18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	42 06       	cpc	r4, r18
    14ec:	21 e0       	ldi	r18, 0x01	; 1
    14ee:	52 06       	cpc	r5, r18
    14f0:	30 f0       	brcs	.+12     	; 0x14fe <__moddi3+0x31e>
    14f2:	b8 e1       	ldi	r27, 0x18	; 24
    14f4:	eb 2e       	mov	r14, r27
    14f6:	f1 2c       	mov	r15, r1
    14f8:	01 2d       	mov	r16, r1
    14fa:	11 2d       	mov	r17, r1
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <__moddi3+0x328>
    14fe:	a0 e1       	ldi	r26, 0x10	; 16
    1500:	ea 2e       	mov	r14, r26
    1502:	f1 2c       	mov	r15, r1
    1504:	01 2d       	mov	r16, r1
    1506:	11 2d       	mov	r17, r1
    1508:	d2 01       	movw	r26, r4
    150a:	c1 01       	movw	r24, r2
    150c:	0e 2c       	mov	r0, r14
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <__moddi3+0x338>
    1510:	b6 95       	lsr	r27
    1512:	a7 95       	ror	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	0a 94       	dec	r0
    151a:	d2 f7       	brpl	.-12     	; 0x1510 <__moddi3+0x330>
    151c:	85 53       	subi	r24, 0x35	; 53
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	dc 01       	movw	r26, r24
    1522:	2c 91       	ld	r18, X
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	8e 19       	sub	r24, r14
    152e:	9f 09       	sbc	r25, r15
    1530:	a0 0b       	sbc	r26, r16
    1532:	b1 0b       	sbc	r27, r17
    1534:	5c 01       	movw	r10, r24
    1536:	6d 01       	movw	r12, r26
    1538:	a2 1a       	sub	r10, r18
    153a:	b1 08       	sbc	r11, r1
    153c:	c1 08       	sbc	r12, r1
    153e:	d1 08       	sbc	r13, r1
    1540:	65 96       	adiw	r28, 0x15	; 21
    1542:	ac ae       	std	Y+60, r10	; 0x3c
    1544:	bd ae       	std	Y+61, r11	; 0x3d
    1546:	ce ae       	std	Y+62, r12	; 0x3e
    1548:	df ae       	std	Y+63, r13	; 0x3f
    154a:	65 97       	sbiw	r28, 0x15	; 21
    154c:	a1 14       	cp	r10, r1
    154e:	b1 04       	cpc	r11, r1
    1550:	c1 04       	cpc	r12, r1
    1552:	d1 04       	cpc	r13, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <__moddi3+0x378>
    1556:	45 c0       	rjmp	.+138    	; 0x15e2 <__moddi3+0x402>
    1558:	62 96       	adiw	r28, 0x12	; 18
    155a:	6f ad       	ldd	r22, Y+63	; 0x3f
    155c:	62 97       	sbiw	r28, 0x12	; 18
    155e:	06 2e       	mov	r0, r22
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__moddi3+0x38a>
    1562:	22 0c       	add	r2, r2
    1564:	33 1c       	adc	r3, r3
    1566:	44 1c       	adc	r4, r4
    1568:	55 1c       	adc	r5, r5
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__moddi3+0x382>
    156e:	a4 01       	movw	r20, r8
    1570:	93 01       	movw	r18, r6
    1572:	06 2e       	mov	r0, r22
    1574:	04 c0       	rjmp	.+8      	; 0x157e <__moddi3+0x39e>
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	0a 94       	dec	r0
    1580:	d2 f7       	brpl	.-12     	; 0x1576 <__moddi3+0x396>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	8a 19       	sub	r24, r10
    1588:	9b 09       	sbc	r25, r11
    158a:	e8 96       	adiw	r28, 0x38	; 56
    158c:	cc ac       	ldd	r12, Y+60	; 0x3c
    158e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1590:	ee ac       	ldd	r14, Y+62	; 0x3e
    1592:	ff ac       	ldd	r15, Y+63	; 0x3f
    1594:	e8 97       	sbiw	r28, 0x38	; 56
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__moddi3+0x3c0>
    1598:	f6 94       	lsr	r15
    159a:	e7 94       	ror	r14
    159c:	d7 94       	ror	r13
    159e:	c7 94       	ror	r12
    15a0:	8a 95       	dec	r24
    15a2:	d2 f7       	brpl	.-12     	; 0x1598 <__moddi3+0x3b8>
    15a4:	87 01       	movw	r16, r14
    15a6:	76 01       	movw	r14, r12
    15a8:	e2 2a       	or	r14, r18
    15aa:	f3 2a       	or	r15, r19
    15ac:	04 2b       	or	r16, r20
    15ae:	15 2b       	or	r17, r21
    15b0:	61 96       	adiw	r28, 0x11	; 17
    15b2:	ec ae       	std	Y+60, r14	; 0x3c
    15b4:	fd ae       	std	Y+61, r15	; 0x3d
    15b6:	0e af       	std	Y+62, r16	; 0x3e
    15b8:	1f af       	std	Y+63, r17	; 0x3f
    15ba:	61 97       	sbiw	r28, 0x11	; 17
    15bc:	e8 96       	adiw	r28, 0x38	; 56
    15be:	0c ad       	ldd	r16, Y+60	; 0x3c
    15c0:	1d ad       	ldd	r17, Y+61	; 0x3d
    15c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    15c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    15c6:	e8 97       	sbiw	r28, 0x38	; 56
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <__moddi3+0x3f2>
    15ca:	00 0f       	add	r16, r16
    15cc:	11 1f       	adc	r17, r17
    15ce:	22 1f       	adc	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	6a 95       	dec	r22
    15d4:	d2 f7       	brpl	.-12     	; 0x15ca <__moddi3+0x3ea>
    15d6:	2d 96       	adiw	r28, 0x0d	; 13
    15d8:	0c af       	std	Y+60, r16	; 0x3c
    15da:	1d af       	std	Y+61, r17	; 0x3d
    15dc:	2e af       	std	Y+62, r18	; 0x3e
    15de:	3f af       	std	Y+63, r19	; 0x3f
    15e0:	2d 97       	sbiw	r28, 0x0d	; 13
    15e2:	32 01       	movw	r6, r4
    15e4:	88 24       	eor	r8, r8
    15e6:	99 24       	eor	r9, r9
    15e8:	a2 01       	movw	r20, r4
    15ea:	91 01       	movw	r18, r2
    15ec:	40 70       	andi	r20, 0x00	; 0
    15ee:	50 70       	andi	r21, 0x00	; 0
    15f0:	69 96       	adiw	r28, 0x19	; 25
    15f2:	2c af       	std	Y+60, r18	; 0x3c
    15f4:	3d af       	std	Y+61, r19	; 0x3d
    15f6:	4e af       	std	Y+62, r20	; 0x3e
    15f8:	5f af       	std	Y+63, r21	; 0x3f
    15fa:	69 97       	sbiw	r28, 0x19	; 25
    15fc:	61 96       	adiw	r28, 0x11	; 17
    15fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1600:	7d ad       	ldd	r23, Y+61	; 0x3d
    1602:	8e ad       	ldd	r24, Y+62	; 0x3e
    1604:	9f ad       	ldd	r25, Y+63	; 0x3f
    1606:	61 97       	sbiw	r28, 0x11	; 17
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1610:	7b 01       	movw	r14, r22
    1612:	8c 01       	movw	r16, r24
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	6c ad       	ldd	r22, Y+60	; 0x3c
    1618:	7d ad       	ldd	r23, Y+61	; 0x3d
    161a:	8e ad       	ldd	r24, Y+62	; 0x3e
    161c:	9f ad       	ldd	r25, Y+63	; 0x3f
    161e:	61 97       	sbiw	r28, 0x11	; 17
    1620:	a4 01       	movw	r20, r8
    1622:	93 01       	movw	r18, r6
    1624:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1628:	ca 01       	movw	r24, r20
    162a:	b9 01       	movw	r22, r18
    162c:	69 96       	adiw	r28, 0x19	; 25
    162e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1630:	3d ad       	ldd	r19, Y+61	; 0x3d
    1632:	4e ad       	ldd	r20, Y+62	; 0x3e
    1634:	5f ad       	ldd	r21, Y+63	; 0x3f
    1636:	69 97       	sbiw	r28, 0x19	; 25
    1638:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	87 01       	movw	r16, r14
    1642:	ff 24       	eor	r15, r15
    1644:	ee 24       	eor	r14, r14
    1646:	2d 96       	adiw	r28, 0x0d	; 13
    1648:	ac ac       	ldd	r10, Y+60	; 0x3c
    164a:	bd ac       	ldd	r11, Y+61	; 0x3d
    164c:	ce ac       	ldd	r12, Y+62	; 0x3e
    164e:	df ac       	ldd	r13, Y+63	; 0x3f
    1650:	2d 97       	sbiw	r28, 0x0d	; 13
    1652:	c6 01       	movw	r24, r12
    1654:	aa 27       	eor	r26, r26
    1656:	bb 27       	eor	r27, r27
    1658:	57 01       	movw	r10, r14
    165a:	68 01       	movw	r12, r16
    165c:	a8 2a       	or	r10, r24
    165e:	b9 2a       	or	r11, r25
    1660:	ca 2a       	or	r12, r26
    1662:	db 2a       	or	r13, r27
    1664:	a2 16       	cp	r10, r18
    1666:	b3 06       	cpc	r11, r19
    1668:	c4 06       	cpc	r12, r20
    166a:	d5 06       	cpc	r13, r21
    166c:	90 f4       	brcc	.+36     	; 0x1692 <__moddi3+0x4b2>
    166e:	a2 0c       	add	r10, r2
    1670:	b3 1c       	adc	r11, r3
    1672:	c4 1c       	adc	r12, r4
    1674:	d5 1c       	adc	r13, r5
    1676:	a2 14       	cp	r10, r2
    1678:	b3 04       	cpc	r11, r3
    167a:	c4 04       	cpc	r12, r4
    167c:	d5 04       	cpc	r13, r5
    167e:	48 f0       	brcs	.+18     	; 0x1692 <__moddi3+0x4b2>
    1680:	a2 16       	cp	r10, r18
    1682:	b3 06       	cpc	r11, r19
    1684:	c4 06       	cpc	r12, r20
    1686:	d5 06       	cpc	r13, r21
    1688:	20 f4       	brcc	.+8      	; 0x1692 <__moddi3+0x4b2>
    168a:	a2 0c       	add	r10, r2
    168c:	b3 1c       	adc	r11, r3
    168e:	c4 1c       	adc	r12, r4
    1690:	d5 1c       	adc	r13, r5
    1692:	a2 1a       	sub	r10, r18
    1694:	b3 0a       	sbc	r11, r19
    1696:	c4 0a       	sbc	r12, r20
    1698:	d5 0a       	sbc	r13, r21
    169a:	c6 01       	movw	r24, r12
    169c:	b5 01       	movw	r22, r10
    169e:	a4 01       	movw	r20, r8
    16a0:	93 01       	movw	r18, r6
    16a2:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    16a6:	7b 01       	movw	r14, r22
    16a8:	8c 01       	movw	r16, r24
    16aa:	c6 01       	movw	r24, r12
    16ac:	b5 01       	movw	r22, r10
    16ae:	a4 01       	movw	r20, r8
    16b0:	93 01       	movw	r18, r6
    16b2:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    16b6:	ca 01       	movw	r24, r20
    16b8:	b9 01       	movw	r22, r18
    16ba:	69 96       	adiw	r28, 0x19	; 25
    16bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    16be:	3d ad       	ldd	r19, Y+61	; 0x3d
    16c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    16c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    16c4:	69 97       	sbiw	r28, 0x19	; 25
    16c6:	c8 c1       	rjmp	.+912    	; 0x1a58 <__moddi3+0x878>
    16c8:	21 14       	cp	r2, r1
    16ca:	31 04       	cpc	r3, r1
    16cc:	41 04       	cpc	r4, r1
    16ce:	51 04       	cpc	r5, r1
    16d0:	71 f4       	brne	.+28     	; 0x16ee <__moddi3+0x50e>
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    16e6:	c9 01       	movw	r24, r18
    16e8:	da 01       	movw	r26, r20
    16ea:	1c 01       	movw	r2, r24
    16ec:	2d 01       	movw	r4, r26
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	20 16       	cp	r2, r16
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	30 06       	cpc	r3, r16
    16f6:	01 e0       	ldi	r16, 0x01	; 1
    16f8:	40 06       	cpc	r4, r16
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	50 06       	cpc	r5, r16
    16fe:	88 f4       	brcc	.+34     	; 0x1722 <__moddi3+0x542>
    1700:	1f ef       	ldi	r17, 0xFF	; 255
    1702:	21 16       	cp	r2, r17
    1704:	31 04       	cpc	r3, r1
    1706:	41 04       	cpc	r4, r1
    1708:	51 04       	cpc	r5, r1
    170a:	39 f0       	breq	.+14     	; 0x171a <__moddi3+0x53a>
    170c:	30 f0       	brcs	.+12     	; 0x171a <__moddi3+0x53a>
    170e:	68 e0       	ldi	r22, 0x08	; 8
    1710:	e6 2e       	mov	r14, r22
    1712:	f1 2c       	mov	r15, r1
    1714:	01 2d       	mov	r16, r1
    1716:	11 2d       	mov	r17, r1
    1718:	18 c0       	rjmp	.+48     	; 0x174a <__moddi3+0x56a>
    171a:	ee 24       	eor	r14, r14
    171c:	ff 24       	eor	r15, r15
    171e:	87 01       	movw	r16, r14
    1720:	14 c0       	rjmp	.+40     	; 0x174a <__moddi3+0x56a>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	22 16       	cp	r2, r18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	32 06       	cpc	r3, r18
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	42 06       	cpc	r4, r18
    172e:	21 e0       	ldi	r18, 0x01	; 1
    1730:	52 06       	cpc	r5, r18
    1732:	30 f0       	brcs	.+12     	; 0x1740 <__moddi3+0x560>
    1734:	58 e1       	ldi	r21, 0x18	; 24
    1736:	e5 2e       	mov	r14, r21
    1738:	f1 2c       	mov	r15, r1
    173a:	01 2d       	mov	r16, r1
    173c:	11 2d       	mov	r17, r1
    173e:	05 c0       	rjmp	.+10     	; 0x174a <__moddi3+0x56a>
    1740:	40 e1       	ldi	r20, 0x10	; 16
    1742:	e4 2e       	mov	r14, r20
    1744:	f1 2c       	mov	r15, r1
    1746:	01 2d       	mov	r16, r1
    1748:	11 2d       	mov	r17, r1
    174a:	d2 01       	movw	r26, r4
    174c:	c1 01       	movw	r24, r2
    174e:	0e 2c       	mov	r0, r14
    1750:	04 c0       	rjmp	.+8      	; 0x175a <__moddi3+0x57a>
    1752:	b6 95       	lsr	r27
    1754:	a7 95       	ror	r26
    1756:	97 95       	ror	r25
    1758:	87 95       	ror	r24
    175a:	0a 94       	dec	r0
    175c:	d2 f7       	brpl	.-12     	; 0x1752 <__moddi3+0x572>
    175e:	85 53       	subi	r24, 0x35	; 53
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	dc 01       	movw	r26, r24
    1764:	2c 91       	ld	r18, X
    1766:	30 e2       	ldi	r19, 0x20	; 32
    1768:	a3 2e       	mov	r10, r19
    176a:	b1 2c       	mov	r11, r1
    176c:	c1 2c       	mov	r12, r1
    176e:	d1 2c       	mov	r13, r1
    1770:	d6 01       	movw	r26, r12
    1772:	c5 01       	movw	r24, r10
    1774:	8e 19       	sub	r24, r14
    1776:	9f 09       	sbc	r25, r15
    1778:	a0 0b       	sbc	r26, r16
    177a:	b1 0b       	sbc	r27, r17
    177c:	7c 01       	movw	r14, r24
    177e:	8d 01       	movw	r16, r26
    1780:	e2 1a       	sub	r14, r18
    1782:	f1 08       	sbc	r15, r1
    1784:	01 09       	sbc	r16, r1
    1786:	11 09       	sbc	r17, r1
    1788:	65 96       	adiw	r28, 0x15	; 21
    178a:	ec ae       	std	Y+60, r14	; 0x3c
    178c:	fd ae       	std	Y+61, r15	; 0x3d
    178e:	0e af       	std	Y+62, r16	; 0x3e
    1790:	1f af       	std	Y+63, r17	; 0x3f
    1792:	65 97       	sbiw	r28, 0x15	; 21
    1794:	e1 14       	cp	r14, r1
    1796:	f1 04       	cpc	r15, r1
    1798:	01 05       	cpc	r16, r1
    179a:	11 05       	cpc	r17, r1
    179c:	39 f4       	brne	.+14     	; 0x17ac <__moddi3+0x5cc>
    179e:	64 01       	movw	r12, r8
    17a0:	53 01       	movw	r10, r6
    17a2:	a2 18       	sub	r10, r2
    17a4:	b3 08       	sbc	r11, r3
    17a6:	c4 08       	sbc	r12, r4
    17a8:	d5 08       	sbc	r13, r5
    17aa:	ec c0       	rjmp	.+472    	; 0x1984 <__moddi3+0x7a4>
    17ac:	62 96       	adiw	r28, 0x12	; 18
    17ae:	ff ac       	ldd	r15, Y+63	; 0x3f
    17b0:	62 97       	sbiw	r28, 0x12	; 18
    17b2:	e4 96       	adiw	r28, 0x34	; 52
    17b4:	ff ae       	std	Y+63, r15	; 0x3f
    17b6:	e4 97       	sbiw	r28, 0x34	; 52
    17b8:	0f 2c       	mov	r0, r15
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <__moddi3+0x5e4>
    17bc:	22 0c       	add	r2, r2
    17be:	33 1c       	adc	r3, r3
    17c0:	44 1c       	adc	r4, r4
    17c2:	55 1c       	adc	r5, r5
    17c4:	0a 94       	dec	r0
    17c6:	d2 f7       	brpl	.-12     	; 0x17bc <__moddi3+0x5dc>
    17c8:	8a 2d       	mov	r24, r10
    17ca:	8f 19       	sub	r24, r15
    17cc:	64 01       	movw	r12, r8
    17ce:	53 01       	movw	r10, r6
    17d0:	08 2e       	mov	r0, r24
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__moddi3+0x5fc>
    17d4:	d6 94       	lsr	r13
    17d6:	c7 94       	ror	r12
    17d8:	b7 94       	ror	r11
    17da:	a7 94       	ror	r10
    17dc:	0a 94       	dec	r0
    17de:	d2 f7       	brpl	.-12     	; 0x17d4 <__moddi3+0x5f4>
    17e0:	a4 01       	movw	r20, r8
    17e2:	93 01       	movw	r18, r6
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__moddi3+0x60e>
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	44 1f       	adc	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	fa 94       	dec	r15
    17f0:	d2 f7       	brpl	.-12     	; 0x17e6 <__moddi3+0x606>
    17f2:	e8 96       	adiw	r28, 0x38	; 56
    17f4:	6c ac       	ldd	r6, Y+60	; 0x3c
    17f6:	7d ac       	ldd	r7, Y+61	; 0x3d
    17f8:	8e ac       	ldd	r8, Y+62	; 0x3e
    17fa:	9f ac       	ldd	r9, Y+63	; 0x3f
    17fc:	e8 97       	sbiw	r28, 0x38	; 56
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <__moddi3+0x628>
    1800:	96 94       	lsr	r9
    1802:	87 94       	ror	r8
    1804:	77 94       	ror	r7
    1806:	67 94       	ror	r6
    1808:	8a 95       	dec	r24
    180a:	d2 f7       	brpl	.-12     	; 0x1800 <__moddi3+0x620>
    180c:	84 01       	movw	r16, r8
    180e:	73 01       	movw	r14, r6
    1810:	e2 2a       	or	r14, r18
    1812:	f3 2a       	or	r15, r19
    1814:	04 2b       	or	r16, r20
    1816:	15 2b       	or	r17, r21
    1818:	29 96       	adiw	r28, 0x09	; 9
    181a:	ec ae       	std	Y+60, r14	; 0x3c
    181c:	fd ae       	std	Y+61, r15	; 0x3d
    181e:	0e af       	std	Y+62, r16	; 0x3e
    1820:	1f af       	std	Y+63, r17	; 0x3f
    1822:	29 97       	sbiw	r28, 0x09	; 9
    1824:	32 01       	movw	r6, r4
    1826:	88 24       	eor	r8, r8
    1828:	99 24       	eor	r9, r9
    182a:	92 01       	movw	r18, r4
    182c:	81 01       	movw	r16, r2
    182e:	20 70       	andi	r18, 0x00	; 0
    1830:	30 70       	andi	r19, 0x00	; 0
    1832:	6d 96       	adiw	r28, 0x1d	; 29
    1834:	0c af       	std	Y+60, r16	; 0x3c
    1836:	1d af       	std	Y+61, r17	; 0x3d
    1838:	2e af       	std	Y+62, r18	; 0x3e
    183a:	3f af       	std	Y+63, r19	; 0x3f
    183c:	6d 97       	sbiw	r28, 0x1d	; 29
    183e:	c6 01       	movw	r24, r12
    1840:	b5 01       	movw	r22, r10
    1842:	a4 01       	movw	r20, r8
    1844:	93 01       	movw	r18, r6
    1846:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    184a:	7b 01       	movw	r14, r22
    184c:	8c 01       	movw	r16, r24
    184e:	c6 01       	movw	r24, r12
    1850:	b5 01       	movw	r22, r10
    1852:	a4 01       	movw	r20, r8
    1854:	93 01       	movw	r18, r6
    1856:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    185a:	ca 01       	movw	r24, r20
    185c:	b9 01       	movw	r22, r18
    185e:	6d 96       	adiw	r28, 0x1d	; 29
    1860:	2c ad       	ldd	r18, Y+60	; 0x3c
    1862:	3d ad       	ldd	r19, Y+61	; 0x3d
    1864:	4e ad       	ldd	r20, Y+62	; 0x3e
    1866:	5f ad       	ldd	r21, Y+63	; 0x3f
    1868:	6d 97       	sbiw	r28, 0x1d	; 29
    186a:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	87 01       	movw	r16, r14
    1874:	ff 24       	eor	r15, r15
    1876:	ee 24       	eor	r14, r14
    1878:	29 96       	adiw	r28, 0x09	; 9
    187a:	ac ac       	ldd	r10, Y+60	; 0x3c
    187c:	bd ac       	ldd	r11, Y+61	; 0x3d
    187e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1880:	df ac       	ldd	r13, Y+63	; 0x3f
    1882:	29 97       	sbiw	r28, 0x09	; 9
    1884:	c6 01       	movw	r24, r12
    1886:	aa 27       	eor	r26, r26
    1888:	bb 27       	eor	r27, r27
    188a:	5c 01       	movw	r10, r24
    188c:	6d 01       	movw	r12, r26
    188e:	ae 28       	or	r10, r14
    1890:	bf 28       	or	r11, r15
    1892:	c0 2a       	or	r12, r16
    1894:	d1 2a       	or	r13, r17
    1896:	a2 16       	cp	r10, r18
    1898:	b3 06       	cpc	r11, r19
    189a:	c4 06       	cpc	r12, r20
    189c:	d5 06       	cpc	r13, r21
    189e:	90 f4       	brcc	.+36     	; 0x18c4 <__moddi3+0x6e4>
    18a0:	a2 0c       	add	r10, r2
    18a2:	b3 1c       	adc	r11, r3
    18a4:	c4 1c       	adc	r12, r4
    18a6:	d5 1c       	adc	r13, r5
    18a8:	a2 14       	cp	r10, r2
    18aa:	b3 04       	cpc	r11, r3
    18ac:	c4 04       	cpc	r12, r4
    18ae:	d5 04       	cpc	r13, r5
    18b0:	48 f0       	brcs	.+18     	; 0x18c4 <__moddi3+0x6e4>
    18b2:	a2 16       	cp	r10, r18
    18b4:	b3 06       	cpc	r11, r19
    18b6:	c4 06       	cpc	r12, r20
    18b8:	d5 06       	cpc	r13, r21
    18ba:	20 f4       	brcc	.+8      	; 0x18c4 <__moddi3+0x6e4>
    18bc:	a2 0c       	add	r10, r2
    18be:	b3 1c       	adc	r11, r3
    18c0:	c4 1c       	adc	r12, r4
    18c2:	d5 1c       	adc	r13, r5
    18c4:	a2 1a       	sub	r10, r18
    18c6:	b3 0a       	sbc	r11, r19
    18c8:	c4 0a       	sbc	r12, r20
    18ca:	d5 0a       	sbc	r13, r21
    18cc:	c6 01       	movw	r24, r12
    18ce:	b5 01       	movw	r22, r10
    18d0:	a4 01       	movw	r20, r8
    18d2:	93 01       	movw	r18, r6
    18d4:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    18d8:	7b 01       	movw	r14, r22
    18da:	8c 01       	movw	r16, r24
    18dc:	c6 01       	movw	r24, r12
    18de:	b5 01       	movw	r22, r10
    18e0:	a4 01       	movw	r20, r8
    18e2:	93 01       	movw	r18, r6
    18e4:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    18e8:	ca 01       	movw	r24, r20
    18ea:	b9 01       	movw	r22, r18
    18ec:	6d 96       	adiw	r28, 0x1d	; 29
    18ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f6:	6d 97       	sbiw	r28, 0x1d	; 29
    18f8:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	87 01       	movw	r16, r14
    1902:	ff 24       	eor	r15, r15
    1904:	ee 24       	eor	r14, r14
    1906:	29 96       	adiw	r28, 0x09	; 9
    1908:	8c ad       	ldd	r24, Y+60	; 0x3c
    190a:	9d ad       	ldd	r25, Y+61	; 0x3d
    190c:	ae ad       	ldd	r26, Y+62	; 0x3e
    190e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1910:	29 97       	sbiw	r28, 0x09	; 9
    1912:	a0 70       	andi	r26, 0x00	; 0
    1914:	b0 70       	andi	r27, 0x00	; 0
    1916:	57 01       	movw	r10, r14
    1918:	68 01       	movw	r12, r16
    191a:	a8 2a       	or	r10, r24
    191c:	b9 2a       	or	r11, r25
    191e:	ca 2a       	or	r12, r26
    1920:	db 2a       	or	r13, r27
    1922:	a2 16       	cp	r10, r18
    1924:	b3 06       	cpc	r11, r19
    1926:	c4 06       	cpc	r12, r20
    1928:	d5 06       	cpc	r13, r21
    192a:	90 f4       	brcc	.+36     	; 0x1950 <__moddi3+0x770>
    192c:	a2 0c       	add	r10, r2
    192e:	b3 1c       	adc	r11, r3
    1930:	c4 1c       	adc	r12, r4
    1932:	d5 1c       	adc	r13, r5
    1934:	a2 14       	cp	r10, r2
    1936:	b3 04       	cpc	r11, r3
    1938:	c4 04       	cpc	r12, r4
    193a:	d5 04       	cpc	r13, r5
    193c:	48 f0       	brcs	.+18     	; 0x1950 <__moddi3+0x770>
    193e:	a2 16       	cp	r10, r18
    1940:	b3 06       	cpc	r11, r19
    1942:	c4 06       	cpc	r12, r20
    1944:	d5 06       	cpc	r13, r21
    1946:	20 f4       	brcc	.+8      	; 0x1950 <__moddi3+0x770>
    1948:	a2 0c       	add	r10, r2
    194a:	b3 1c       	adc	r11, r3
    194c:	c4 1c       	adc	r12, r4
    194e:	d5 1c       	adc	r13, r5
    1950:	e8 96       	adiw	r28, 0x38	; 56
    1952:	ec ac       	ldd	r14, Y+60	; 0x3c
    1954:	fd ac       	ldd	r15, Y+61	; 0x3d
    1956:	0e ad       	ldd	r16, Y+62	; 0x3e
    1958:	1f ad       	ldd	r17, Y+63	; 0x3f
    195a:	e8 97       	sbiw	r28, 0x38	; 56
    195c:	e4 96       	adiw	r28, 0x34	; 52
    195e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1960:	e4 97       	sbiw	r28, 0x34	; 52
    1962:	04 c0       	rjmp	.+8      	; 0x196c <__moddi3+0x78c>
    1964:	ee 0c       	add	r14, r14
    1966:	ff 1c       	adc	r15, r15
    1968:	00 1f       	adc	r16, r16
    196a:	11 1f       	adc	r17, r17
    196c:	0a 94       	dec	r0
    196e:	d2 f7       	brpl	.-12     	; 0x1964 <__moddi3+0x784>
    1970:	2d 96       	adiw	r28, 0x0d	; 13
    1972:	ec ae       	std	Y+60, r14	; 0x3c
    1974:	fd ae       	std	Y+61, r15	; 0x3d
    1976:	0e af       	std	Y+62, r16	; 0x3e
    1978:	1f af       	std	Y+63, r17	; 0x3f
    197a:	2d 97       	sbiw	r28, 0x0d	; 13
    197c:	a2 1a       	sub	r10, r18
    197e:	b3 0a       	sbc	r11, r19
    1980:	c4 0a       	sbc	r12, r20
    1982:	d5 0a       	sbc	r13, r21
    1984:	32 01       	movw	r6, r4
    1986:	88 24       	eor	r8, r8
    1988:	99 24       	eor	r9, r9
    198a:	92 01       	movw	r18, r4
    198c:	81 01       	movw	r16, r2
    198e:	20 70       	andi	r18, 0x00	; 0
    1990:	30 70       	andi	r19, 0x00	; 0
    1992:	a1 96       	adiw	r28, 0x21	; 33
    1994:	0c af       	std	Y+60, r16	; 0x3c
    1996:	1d af       	std	Y+61, r17	; 0x3d
    1998:	2e af       	std	Y+62, r18	; 0x3e
    199a:	3f af       	std	Y+63, r19	; 0x3f
    199c:	a1 97       	sbiw	r28, 0x21	; 33
    199e:	c6 01       	movw	r24, r12
    19a0:	b5 01       	movw	r22, r10
    19a2:	a4 01       	movw	r20, r8
    19a4:	93 01       	movw	r18, r6
    19a6:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    19aa:	7b 01       	movw	r14, r22
    19ac:	8c 01       	movw	r16, r24
    19ae:	c6 01       	movw	r24, r12
    19b0:	b5 01       	movw	r22, r10
    19b2:	a4 01       	movw	r20, r8
    19b4:	93 01       	movw	r18, r6
    19b6:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    19ba:	ca 01       	movw	r24, r20
    19bc:	b9 01       	movw	r22, r18
    19be:	a1 96       	adiw	r28, 0x21	; 33
    19c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    19c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    19c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    19c8:	a1 97       	sbiw	r28, 0x21	; 33
    19ca:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	87 01       	movw	r16, r14
    19d4:	ff 24       	eor	r15, r15
    19d6:	ee 24       	eor	r14, r14
    19d8:	2d 96       	adiw	r28, 0x0d	; 13
    19da:	ac ac       	ldd	r10, Y+60	; 0x3c
    19dc:	bd ac       	ldd	r11, Y+61	; 0x3d
    19de:	ce ac       	ldd	r12, Y+62	; 0x3e
    19e0:	df ac       	ldd	r13, Y+63	; 0x3f
    19e2:	2d 97       	sbiw	r28, 0x0d	; 13
    19e4:	c6 01       	movw	r24, r12
    19e6:	aa 27       	eor	r26, r26
    19e8:	bb 27       	eor	r27, r27
    19ea:	57 01       	movw	r10, r14
    19ec:	68 01       	movw	r12, r16
    19ee:	a8 2a       	or	r10, r24
    19f0:	b9 2a       	or	r11, r25
    19f2:	ca 2a       	or	r12, r26
    19f4:	db 2a       	or	r13, r27
    19f6:	a2 16       	cp	r10, r18
    19f8:	b3 06       	cpc	r11, r19
    19fa:	c4 06       	cpc	r12, r20
    19fc:	d5 06       	cpc	r13, r21
    19fe:	90 f4       	brcc	.+36     	; 0x1a24 <__moddi3+0x844>
    1a00:	a2 0c       	add	r10, r2
    1a02:	b3 1c       	adc	r11, r3
    1a04:	c4 1c       	adc	r12, r4
    1a06:	d5 1c       	adc	r13, r5
    1a08:	a2 14       	cp	r10, r2
    1a0a:	b3 04       	cpc	r11, r3
    1a0c:	c4 04       	cpc	r12, r4
    1a0e:	d5 04       	cpc	r13, r5
    1a10:	48 f0       	brcs	.+18     	; 0x1a24 <__moddi3+0x844>
    1a12:	a2 16       	cp	r10, r18
    1a14:	b3 06       	cpc	r11, r19
    1a16:	c4 06       	cpc	r12, r20
    1a18:	d5 06       	cpc	r13, r21
    1a1a:	20 f4       	brcc	.+8      	; 0x1a24 <__moddi3+0x844>
    1a1c:	a2 0c       	add	r10, r2
    1a1e:	b3 1c       	adc	r11, r3
    1a20:	c4 1c       	adc	r12, r4
    1a22:	d5 1c       	adc	r13, r5
    1a24:	a2 1a       	sub	r10, r18
    1a26:	b3 0a       	sbc	r11, r19
    1a28:	c4 0a       	sbc	r12, r20
    1a2a:	d5 0a       	sbc	r13, r21
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	b5 01       	movw	r22, r10
    1a30:	a4 01       	movw	r20, r8
    1a32:	93 01       	movw	r18, r6
    1a34:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1a38:	7b 01       	movw	r14, r22
    1a3a:	8c 01       	movw	r16, r24
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	b5 01       	movw	r22, r10
    1a40:	a4 01       	movw	r20, r8
    1a42:	93 01       	movw	r18, r6
    1a44:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1a48:	ca 01       	movw	r24, r20
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	a1 96       	adiw	r28, 0x21	; 33
    1a4e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a50:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a52:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a54:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a56:	a1 97       	sbiw	r28, 0x21	; 33
    1a58:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	87 01       	movw	r16, r14
    1a62:	ff 24       	eor	r15, r15
    1a64:	ee 24       	eor	r14, r14
    1a66:	2d 96       	adiw	r28, 0x0d	; 13
    1a68:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a6a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a6c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a6e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a70:	2d 97       	sbiw	r28, 0x0d	; 13
    1a72:	a0 70       	andi	r26, 0x00	; 0
    1a74:	b0 70       	andi	r27, 0x00	; 0
    1a76:	e8 2a       	or	r14, r24
    1a78:	f9 2a       	or	r15, r25
    1a7a:	0a 2b       	or	r16, r26
    1a7c:	1b 2b       	or	r17, r27
    1a7e:	e2 16       	cp	r14, r18
    1a80:	f3 06       	cpc	r15, r19
    1a82:	04 07       	cpc	r16, r20
    1a84:	15 07       	cpc	r17, r21
    1a86:	90 f4       	brcc	.+36     	; 0x1aac <__moddi3+0x8cc>
    1a88:	e2 0c       	add	r14, r2
    1a8a:	f3 1c       	adc	r15, r3
    1a8c:	04 1d       	adc	r16, r4
    1a8e:	15 1d       	adc	r17, r5
    1a90:	e2 14       	cp	r14, r2
    1a92:	f3 04       	cpc	r15, r3
    1a94:	04 05       	cpc	r16, r4
    1a96:	15 05       	cpc	r17, r5
    1a98:	48 f0       	brcs	.+18     	; 0x1aac <__moddi3+0x8cc>
    1a9a:	e2 16       	cp	r14, r18
    1a9c:	f3 06       	cpc	r15, r19
    1a9e:	04 07       	cpc	r16, r20
    1aa0:	15 07       	cpc	r17, r21
    1aa2:	20 f4       	brcc	.+8      	; 0x1aac <__moddi3+0x8cc>
    1aa4:	e2 0c       	add	r14, r2
    1aa6:	f3 1c       	adc	r15, r3
    1aa8:	04 1d       	adc	r16, r4
    1aaa:	15 1d       	adc	r17, r5
    1aac:	e2 1a       	sub	r14, r18
    1aae:	f3 0a       	sbc	r15, r19
    1ab0:	04 0b       	sbc	r16, r20
    1ab2:	15 0b       	sbc	r17, r21
    1ab4:	d8 01       	movw	r26, r16
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	62 96       	adiw	r28, 0x12	; 18
    1aba:	0f ac       	ldd	r0, Y+63	; 0x3f
    1abc:	62 97       	sbiw	r28, 0x12	; 18
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <__moddi3+0x8e8>
    1ac0:	b6 95       	lsr	r27
    1ac2:	a7 95       	ror	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	0a 94       	dec	r0
    1aca:	d2 f7       	brpl	.-12     	; 0x1ac0 <__moddi3+0x8e0>
    1acc:	89 a7       	std	Y+41, r24	; 0x29
    1ace:	9a a7       	std	Y+42, r25	; 0x2a
    1ad0:	ab a7       	std	Y+43, r26	; 0x2b
    1ad2:	bc a7       	std	Y+44, r27	; 0x2c
    1ad4:	1d a6       	std	Y+45, r1	; 0x2d
    1ad6:	1e a6       	std	Y+46, r1	; 0x2e
    1ad8:	1f a6       	std	Y+47, r1	; 0x2f
    1ada:	18 aa       	std	Y+48, r1	; 0x30
    1adc:	89 8b       	std	Y+17, r24	; 0x11
    1ade:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ae0:	8a 8b       	std	Y+18, r24	; 0x12
    1ae2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ae8:	8c 8b       	std	Y+20, r24	; 0x14
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	8d 8b       	std	Y+21, r24	; 0x15
    1aee:	2f c3       	rjmp	.+1630   	; 0x214e <__moddi3+0xf6e>
    1af0:	6a 14       	cp	r6, r10
    1af2:	7b 04       	cpc	r7, r11
    1af4:	8c 04       	cpc	r8, r12
    1af6:	9d 04       	cpc	r9, r13
    1af8:	48 f4       	brcc	.+18     	; 0x1b0c <__moddi3+0x92c>
    1afa:	49 8b       	std	Y+17, r20	; 0x11
    1afc:	5a 8b       	std	Y+18, r21	; 0x12
    1afe:	6b 8b       	std	Y+19, r22	; 0x13
    1b00:	7c 8b       	std	Y+20, r23	; 0x14
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	9e 8b       	std	Y+22, r25	; 0x16
    1b06:	2f 8b       	std	Y+23, r18	; 0x17
    1b08:	38 8f       	std	Y+24, r19	; 0x18
    1b0a:	27 c3       	rjmp	.+1614   	; 0x215a <__moddi3+0xf7a>
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	a0 16       	cp	r10, r16
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	b0 06       	cpc	r11, r16
    1b14:	01 e0       	ldi	r16, 0x01	; 1
    1b16:	c0 06       	cpc	r12, r16
    1b18:	00 e0       	ldi	r16, 0x00	; 0
    1b1a:	d0 06       	cpc	r13, r16
    1b1c:	88 f4       	brcc	.+34     	; 0x1b40 <__moddi3+0x960>
    1b1e:	1f ef       	ldi	r17, 0xFF	; 255
    1b20:	a1 16       	cp	r10, r17
    1b22:	b1 04       	cpc	r11, r1
    1b24:	c1 04       	cpc	r12, r1
    1b26:	d1 04       	cpc	r13, r1
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <__moddi3+0x958>
    1b2a:	30 f0       	brcs	.+12     	; 0x1b38 <__moddi3+0x958>
    1b2c:	28 e0       	ldi	r18, 0x08	; 8
    1b2e:	e2 2e       	mov	r14, r18
    1b30:	f1 2c       	mov	r15, r1
    1b32:	01 2d       	mov	r16, r1
    1b34:	11 2d       	mov	r17, r1
    1b36:	18 c0       	rjmp	.+48     	; 0x1b68 <__moddi3+0x988>
    1b38:	ee 24       	eor	r14, r14
    1b3a:	ff 24       	eor	r15, r15
    1b3c:	87 01       	movw	r16, r14
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <__moddi3+0x988>
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	a2 16       	cp	r10, r18
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	b2 06       	cpc	r11, r18
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	c2 06       	cpc	r12, r18
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	d2 06       	cpc	r13, r18
    1b50:	30 f0       	brcs	.+12     	; 0x1b5e <__moddi3+0x97e>
    1b52:	98 e1       	ldi	r25, 0x18	; 24
    1b54:	e9 2e       	mov	r14, r25
    1b56:	f1 2c       	mov	r15, r1
    1b58:	01 2d       	mov	r16, r1
    1b5a:	11 2d       	mov	r17, r1
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <__moddi3+0x988>
    1b5e:	80 e1       	ldi	r24, 0x10	; 16
    1b60:	e8 2e       	mov	r14, r24
    1b62:	f1 2c       	mov	r15, r1
    1b64:	01 2d       	mov	r16, r1
    1b66:	11 2d       	mov	r17, r1
    1b68:	d6 01       	movw	r26, r12
    1b6a:	c5 01       	movw	r24, r10
    1b6c:	0e 2c       	mov	r0, r14
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <__moddi3+0x998>
    1b70:	b6 95       	lsr	r27
    1b72:	a7 95       	ror	r26
    1b74:	97 95       	ror	r25
    1b76:	87 95       	ror	r24
    1b78:	0a 94       	dec	r0
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <__moddi3+0x990>
    1b7c:	85 53       	subi	r24, 0x35	; 53
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	dc 01       	movw	r26, r24
    1b82:	2c 91       	ld	r18, X
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	8e 19       	sub	r24, r14
    1b8e:	9f 09       	sbc	r25, r15
    1b90:	a0 0b       	sbc	r26, r16
    1b92:	b1 0b       	sbc	r27, r17
    1b94:	82 1b       	sub	r24, r18
    1b96:	91 09       	sbc	r25, r1
    1b98:	a1 09       	sbc	r26, r1
    1b9a:	b1 09       	sbc	r27, r1
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	a1 05       	cpc	r26, r1
    1ba0:	b1 05       	cpc	r27, r1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <__moddi3+0x9c6>
    1ba4:	59 c0       	rjmp	.+178    	; 0x1c58 <__moddi3+0xa78>
    1ba6:	a6 14       	cp	r10, r6
    1ba8:	b7 04       	cpc	r11, r7
    1baa:	c8 04       	cpc	r12, r8
    1bac:	d9 04       	cpc	r13, r9
    1bae:	70 f0       	brcs	.+28     	; 0x1bcc <__moddi3+0x9ec>
    1bb0:	e8 96       	adiw	r28, 0x38	; 56
    1bb2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1bb4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1bb6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1bb8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bba:	e8 97       	sbiw	r28, 0x38	; 56
    1bbc:	e2 14       	cp	r14, r2
    1bbe:	f3 04       	cpc	r15, r3
    1bc0:	04 05       	cpc	r16, r4
    1bc2:	15 05       	cpc	r17, r5
    1bc4:	18 f4       	brcc	.+6      	; 0x1bcc <__moddi3+0x9ec>
    1bc6:	d8 01       	movw	r26, r16
    1bc8:	c7 01       	movw	r24, r14
    1bca:	2f c0       	rjmp	.+94     	; 0x1c2a <__moddi3+0xa4a>
    1bcc:	e8 96       	adiw	r28, 0x38	; 56
    1bce:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bd0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bd2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bd4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bd6:	e8 97       	sbiw	r28, 0x38	; 56
    1bd8:	82 19       	sub	r24, r2
    1bda:	93 09       	sbc	r25, r3
    1bdc:	a4 09       	sbc	r26, r4
    1bde:	b5 09       	sbc	r27, r5
    1be0:	a4 01       	movw	r20, r8
    1be2:	93 01       	movw	r18, r6
    1be4:	2a 19       	sub	r18, r10
    1be6:	3b 09       	sbc	r19, r11
    1be8:	4c 09       	sbc	r20, r12
    1bea:	5d 09       	sbc	r21, r13
    1bec:	aa 24       	eor	r10, r10
    1bee:	bb 24       	eor	r11, r11
    1bf0:	65 01       	movw	r12, r10
    1bf2:	e8 96       	adiw	r28, 0x38	; 56
    1bf4:	6c ac       	ldd	r6, Y+60	; 0x3c
    1bf6:	7d ac       	ldd	r7, Y+61	; 0x3d
    1bf8:	8e ac       	ldd	r8, Y+62	; 0x3e
    1bfa:	9f ac       	ldd	r9, Y+63	; 0x3f
    1bfc:	e8 97       	sbiw	r28, 0x38	; 56
    1bfe:	68 16       	cp	r6, r24
    1c00:	79 06       	cpc	r7, r25
    1c02:	8a 06       	cpc	r8, r26
    1c04:	9b 06       	cpc	r9, r27
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <__moddi3+0xa32>
    1c08:	11 e0       	ldi	r17, 0x01	; 1
    1c0a:	a1 2e       	mov	r10, r17
    1c0c:	b1 2c       	mov	r11, r1
    1c0e:	c1 2c       	mov	r12, r1
    1c10:	d1 2c       	mov	r13, r1
    1c12:	79 01       	movw	r14, r18
    1c14:	8a 01       	movw	r16, r20
    1c16:	ea 18       	sub	r14, r10
    1c18:	fb 08       	sbc	r15, r11
    1c1a:	0c 09       	sbc	r16, r12
    1c1c:	1d 09       	sbc	r17, r13
    1c1e:	61 96       	adiw	r28, 0x11	; 17
    1c20:	ec ae       	std	Y+60, r14	; 0x3c
    1c22:	fd ae       	std	Y+61, r15	; 0x3d
    1c24:	0e af       	std	Y+62, r16	; 0x3e
    1c26:	1f af       	std	Y+63, r17	; 0x3f
    1c28:	61 97       	sbiw	r28, 0x11	; 17
    1c2a:	89 a7       	std	Y+41, r24	; 0x29
    1c2c:	9a a7       	std	Y+42, r25	; 0x2a
    1c2e:	ab a7       	std	Y+43, r26	; 0x2b
    1c30:	bc a7       	std	Y+44, r27	; 0x2c
    1c32:	61 96       	adiw	r28, 0x11	; 17
    1c34:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c36:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c38:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c3c:	61 97       	sbiw	r28, 0x11	; 17
    1c3e:	0d a7       	std	Y+45, r16	; 0x2d
    1c40:	1e a7       	std	Y+46, r17	; 0x2e
    1c42:	2f a7       	std	Y+47, r18	; 0x2f
    1c44:	38 ab       	std	Y+48, r19	; 0x30
    1c46:	89 8b       	std	Y+17, r24	; 0x11
    1c48:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c4a:	8a 8b       	std	Y+18, r24	; 0x12
    1c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4e:	8b 8b       	std	Y+19, r24	; 0x13
    1c50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c52:	8c 8b       	std	Y+20, r24	; 0x14
    1c54:	0d 8b       	std	Y+21, r16	; 0x15
    1c56:	7b c2       	rjmp	.+1270   	; 0x214e <__moddi3+0xf6e>
    1c58:	e3 96       	adiw	r28, 0x33	; 51
    1c5a:	8f af       	std	Y+63, r24	; 0x3f
    1c5c:	e3 97       	sbiw	r28, 0x33	; 51
    1c5e:	a6 01       	movw	r20, r12
    1c60:	95 01       	movw	r18, r10
    1c62:	08 2e       	mov	r0, r24
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__moddi3+0xa8e>
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	44 1f       	adc	r20, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	0a 94       	dec	r0
    1c70:	d2 f7       	brpl	.-12     	; 0x1c66 <__moddi3+0xa86>
    1c72:	10 e2       	ldi	r17, 0x20	; 32
    1c74:	18 1b       	sub	r17, r24
    1c76:	e2 96       	adiw	r28, 0x32	; 50
    1c78:	1f af       	std	Y+63, r17	; 0x3f
    1c7a:	e2 97       	sbiw	r28, 0x32	; 50
    1c7c:	d2 01       	movw	r26, r4
    1c7e:	c1 01       	movw	r24, r2
    1c80:	01 2e       	mov	r0, r17
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <__moddi3+0xaac>
    1c84:	b6 95       	lsr	r27
    1c86:	a7 95       	ror	r26
    1c88:	97 95       	ror	r25
    1c8a:	87 95       	ror	r24
    1c8c:	0a 94       	dec	r0
    1c8e:	d2 f7       	brpl	.-12     	; 0x1c84 <__moddi3+0xaa4>
    1c90:	5c 01       	movw	r10, r24
    1c92:	6d 01       	movw	r12, r26
    1c94:	a2 2a       	or	r10, r18
    1c96:	b3 2a       	or	r11, r19
    1c98:	c4 2a       	or	r12, r20
    1c9a:	d5 2a       	or	r13, r21
    1c9c:	25 96       	adiw	r28, 0x05	; 5
    1c9e:	ac ae       	std	Y+60, r10	; 0x3c
    1ca0:	bd ae       	std	Y+61, r11	; 0x3d
    1ca2:	ce ae       	std	Y+62, r12	; 0x3e
    1ca4:	df ae       	std	Y+63, r13	; 0x3f
    1ca6:	25 97       	sbiw	r28, 0x05	; 5
    1ca8:	72 01       	movw	r14, r4
    1caa:	61 01       	movw	r12, r2
    1cac:	e3 96       	adiw	r28, 0x33	; 51
    1cae:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cb0:	e3 97       	sbiw	r28, 0x33	; 51
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <__moddi3+0xadc>
    1cb4:	cc 0c       	add	r12, r12
    1cb6:	dd 1c       	adc	r13, r13
    1cb8:	ee 1c       	adc	r14, r14
    1cba:	ff 1c       	adc	r15, r15
    1cbc:	0a 94       	dec	r0
    1cbe:	d2 f7       	brpl	.-12     	; 0x1cb4 <__moddi3+0xad4>
    1cc0:	21 96       	adiw	r28, 0x01	; 1
    1cc2:	cc ae       	std	Y+60, r12	; 0x3c
    1cc4:	dd ae       	std	Y+61, r13	; 0x3d
    1cc6:	ee ae       	std	Y+62, r14	; 0x3e
    1cc8:	ff ae       	std	Y+63, r15	; 0x3f
    1cca:	21 97       	sbiw	r28, 0x01	; 1
    1ccc:	64 01       	movw	r12, r8
    1cce:	53 01       	movw	r10, r6
    1cd0:	01 2e       	mov	r0, r17
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <__moddi3+0xafc>
    1cd4:	d6 94       	lsr	r13
    1cd6:	c7 94       	ror	r12
    1cd8:	b7 94       	ror	r11
    1cda:	a7 94       	ror	r10
    1cdc:	0a 94       	dec	r0
    1cde:	d2 f7       	brpl	.-12     	; 0x1cd4 <__moddi3+0xaf4>
    1ce0:	a4 01       	movw	r20, r8
    1ce2:	93 01       	movw	r18, r6
    1ce4:	e3 96       	adiw	r28, 0x33	; 51
    1ce6:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ce8:	e3 97       	sbiw	r28, 0x33	; 51
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <__moddi3+0xb14>
    1cec:	22 0f       	add	r18, r18
    1cee:	33 1f       	adc	r19, r19
    1cf0:	44 1f       	adc	r20, r20
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	0a 94       	dec	r0
    1cf6:	d2 f7       	brpl	.-12     	; 0x1cec <__moddi3+0xb0c>
    1cf8:	e8 96       	adiw	r28, 0x38	; 56
    1cfa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1cfc:	9d ad       	ldd	r25, Y+61	; 0x3d
    1cfe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d00:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d02:	e8 97       	sbiw	r28, 0x38	; 56
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <__moddi3+0xb2e>
    1d06:	b6 95       	lsr	r27
    1d08:	a7 95       	ror	r26
    1d0a:	97 95       	ror	r25
    1d0c:	87 95       	ror	r24
    1d0e:	1a 95       	dec	r17
    1d10:	d2 f7       	brpl	.-12     	; 0x1d06 <__moddi3+0xb26>
    1d12:	7c 01       	movw	r14, r24
    1d14:	8d 01       	movw	r16, r26
    1d16:	e2 2a       	or	r14, r18
    1d18:	f3 2a       	or	r15, r19
    1d1a:	04 2b       	or	r16, r20
    1d1c:	15 2b       	or	r17, r21
    1d1e:	e9 ae       	std	Y+57, r14	; 0x39
    1d20:	fa ae       	std	Y+58, r15	; 0x3a
    1d22:	0b af       	std	Y+59, r16	; 0x3b
    1d24:	1c af       	std	Y+60, r17	; 0x3c
    1d26:	e8 96       	adiw	r28, 0x38	; 56
    1d28:	0c ad       	ldd	r16, Y+60	; 0x3c
    1d2a:	1d ad       	ldd	r17, Y+61	; 0x3d
    1d2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d30:	e8 97       	sbiw	r28, 0x38	; 56
    1d32:	e3 96       	adiw	r28, 0x33	; 51
    1d34:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d36:	e3 97       	sbiw	r28, 0x33	; 51
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <__moddi3+0xb62>
    1d3a:	00 0f       	add	r16, r16
    1d3c:	11 1f       	adc	r17, r17
    1d3e:	22 1f       	adc	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	0a 94       	dec	r0
    1d44:	d2 f7       	brpl	.-12     	; 0x1d3a <__moddi3+0xb5a>
    1d46:	0d ab       	std	Y+53, r16	; 0x35
    1d48:	1e ab       	std	Y+54, r17	; 0x36
    1d4a:	2f ab       	std	Y+55, r18	; 0x37
    1d4c:	38 af       	std	Y+56, r19	; 0x38
    1d4e:	25 96       	adiw	r28, 0x05	; 5
    1d50:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d52:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d54:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d56:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d58:	25 97       	sbiw	r28, 0x05	; 5
    1d5a:	3a 01       	movw	r6, r20
    1d5c:	88 24       	eor	r8, r8
    1d5e:	99 24       	eor	r9, r9
    1d60:	40 70       	andi	r20, 0x00	; 0
    1d62:	50 70       	andi	r21, 0x00	; 0
    1d64:	a5 96       	adiw	r28, 0x25	; 37
    1d66:	2c af       	std	Y+60, r18	; 0x3c
    1d68:	3d af       	std	Y+61, r19	; 0x3d
    1d6a:	4e af       	std	Y+62, r20	; 0x3e
    1d6c:	5f af       	std	Y+63, r21	; 0x3f
    1d6e:	a5 97       	sbiw	r28, 0x25	; 37
    1d70:	c6 01       	movw	r24, r12
    1d72:	b5 01       	movw	r22, r10
    1d74:	a4 01       	movw	r20, r8
    1d76:	93 01       	movw	r18, r6
    1d78:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	8c 01       	movw	r16, r24
    1d80:	c6 01       	movw	r24, r12
    1d82:	b5 01       	movw	r22, r10
    1d84:	a4 01       	movw	r20, r8
    1d86:	93 01       	movw	r18, r6
    1d88:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1d8c:	c9 01       	movw	r24, r18
    1d8e:	da 01       	movw	r26, r20
    1d90:	1c 01       	movw	r2, r24
    1d92:	2d 01       	movw	r4, r26
    1d94:	c2 01       	movw	r24, r4
    1d96:	b1 01       	movw	r22, r2
    1d98:	a5 96       	adiw	r28, 0x25	; 37
    1d9a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d9c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1da0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da2:	a5 97       	sbiw	r28, 0x25	; 37
    1da4:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1da8:	9b 01       	movw	r18, r22
    1daa:	ac 01       	movw	r20, r24
    1dac:	87 01       	movw	r16, r14
    1dae:	ff 24       	eor	r15, r15
    1db0:	ee 24       	eor	r14, r14
    1db2:	a9 ac       	ldd	r10, Y+57	; 0x39
    1db4:	ba ac       	ldd	r11, Y+58	; 0x3a
    1db6:	cb ac       	ldd	r12, Y+59	; 0x3b
    1db8:	dc ac       	ldd	r13, Y+60	; 0x3c
    1dba:	c6 01       	movw	r24, r12
    1dbc:	aa 27       	eor	r26, r26
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	57 01       	movw	r10, r14
    1dc2:	68 01       	movw	r12, r16
    1dc4:	a8 2a       	or	r10, r24
    1dc6:	b9 2a       	or	r11, r25
    1dc8:	ca 2a       	or	r12, r26
    1dca:	db 2a       	or	r13, r27
    1dcc:	a2 16       	cp	r10, r18
    1dce:	b3 06       	cpc	r11, r19
    1dd0:	c4 06       	cpc	r12, r20
    1dd2:	d5 06       	cpc	r13, r21
    1dd4:	10 f5       	brcc	.+68     	; 0x1e1a <__moddi3+0xc3a>
    1dd6:	08 94       	sec
    1dd8:	21 08       	sbc	r2, r1
    1dda:	31 08       	sbc	r3, r1
    1ddc:	41 08       	sbc	r4, r1
    1dde:	51 08       	sbc	r5, r1
    1de0:	25 96       	adiw	r28, 0x05	; 5
    1de2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1de4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1de6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1de8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1dea:	25 97       	sbiw	r28, 0x05	; 5
    1dec:	ae 0c       	add	r10, r14
    1dee:	bf 1c       	adc	r11, r15
    1df0:	c0 1e       	adc	r12, r16
    1df2:	d1 1e       	adc	r13, r17
    1df4:	ae 14       	cp	r10, r14
    1df6:	bf 04       	cpc	r11, r15
    1df8:	c0 06       	cpc	r12, r16
    1dfa:	d1 06       	cpc	r13, r17
    1dfc:	70 f0       	brcs	.+28     	; 0x1e1a <__moddi3+0xc3a>
    1dfe:	a2 16       	cp	r10, r18
    1e00:	b3 06       	cpc	r11, r19
    1e02:	c4 06       	cpc	r12, r20
    1e04:	d5 06       	cpc	r13, r21
    1e06:	48 f4       	brcc	.+18     	; 0x1e1a <__moddi3+0xc3a>
    1e08:	08 94       	sec
    1e0a:	21 08       	sbc	r2, r1
    1e0c:	31 08       	sbc	r3, r1
    1e0e:	41 08       	sbc	r4, r1
    1e10:	51 08       	sbc	r5, r1
    1e12:	ae 0c       	add	r10, r14
    1e14:	bf 1c       	adc	r11, r15
    1e16:	c0 1e       	adc	r12, r16
    1e18:	d1 1e       	adc	r13, r17
    1e1a:	a2 1a       	sub	r10, r18
    1e1c:	b3 0a       	sbc	r11, r19
    1e1e:	c4 0a       	sbc	r12, r20
    1e20:	d5 0a       	sbc	r13, r21
    1e22:	c6 01       	movw	r24, r12
    1e24:	b5 01       	movw	r22, r10
    1e26:	a4 01       	movw	r20, r8
    1e28:	93 01       	movw	r18, r6
    1e2a:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1e2e:	7b 01       	movw	r14, r22
    1e30:	8c 01       	movw	r16, r24
    1e32:	c6 01       	movw	r24, r12
    1e34:	b5 01       	movw	r22, r10
    1e36:	a4 01       	movw	r20, r8
    1e38:	93 01       	movw	r18, r6
    1e3a:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    1e3e:	c9 01       	movw	r24, r18
    1e40:	da 01       	movw	r26, r20
    1e42:	3c 01       	movw	r6, r24
    1e44:	4d 01       	movw	r8, r26
    1e46:	c4 01       	movw	r24, r8
    1e48:	b3 01       	movw	r22, r6
    1e4a:	a5 96       	adiw	r28, 0x25	; 37
    1e4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e50:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e52:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e54:	a5 97       	sbiw	r28, 0x25	; 37
    1e56:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	87 01       	movw	r16, r14
    1e60:	ff 24       	eor	r15, r15
    1e62:	ee 24       	eor	r14, r14
    1e64:	89 ad       	ldd	r24, Y+57	; 0x39
    1e66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e68:	ab ad       	ldd	r26, Y+59	; 0x3b
    1e6a:	bc ad       	ldd	r27, Y+60	; 0x3c
    1e6c:	a0 70       	andi	r26, 0x00	; 0
    1e6e:	b0 70       	andi	r27, 0x00	; 0
    1e70:	57 01       	movw	r10, r14
    1e72:	68 01       	movw	r12, r16
    1e74:	a8 2a       	or	r10, r24
    1e76:	b9 2a       	or	r11, r25
    1e78:	ca 2a       	or	r12, r26
    1e7a:	db 2a       	or	r13, r27
    1e7c:	a2 16       	cp	r10, r18
    1e7e:	b3 06       	cpc	r11, r19
    1e80:	c4 06       	cpc	r12, r20
    1e82:	d5 06       	cpc	r13, r21
    1e84:	10 f5       	brcc	.+68     	; 0x1eca <__moddi3+0xcea>
    1e86:	08 94       	sec
    1e88:	61 08       	sbc	r6, r1
    1e8a:	71 08       	sbc	r7, r1
    1e8c:	81 08       	sbc	r8, r1
    1e8e:	91 08       	sbc	r9, r1
    1e90:	25 96       	adiw	r28, 0x05	; 5
    1e92:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e94:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e96:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e98:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e9a:	25 97       	sbiw	r28, 0x05	; 5
    1e9c:	a6 0e       	add	r10, r22
    1e9e:	b7 1e       	adc	r11, r23
    1ea0:	c8 1e       	adc	r12, r24
    1ea2:	d9 1e       	adc	r13, r25
    1ea4:	a6 16       	cp	r10, r22
    1ea6:	b7 06       	cpc	r11, r23
    1ea8:	c8 06       	cpc	r12, r24
    1eaa:	d9 06       	cpc	r13, r25
    1eac:	70 f0       	brcs	.+28     	; 0x1eca <__moddi3+0xcea>
    1eae:	a2 16       	cp	r10, r18
    1eb0:	b3 06       	cpc	r11, r19
    1eb2:	c4 06       	cpc	r12, r20
    1eb4:	d5 06       	cpc	r13, r21
    1eb6:	48 f4       	brcc	.+18     	; 0x1eca <__moddi3+0xcea>
    1eb8:	08 94       	sec
    1eba:	61 08       	sbc	r6, r1
    1ebc:	71 08       	sbc	r7, r1
    1ebe:	81 08       	sbc	r8, r1
    1ec0:	91 08       	sbc	r9, r1
    1ec2:	a6 0e       	add	r10, r22
    1ec4:	b7 1e       	adc	r11, r23
    1ec6:	c8 1e       	adc	r12, r24
    1ec8:	d9 1e       	adc	r13, r25
    1eca:	d6 01       	movw	r26, r12
    1ecc:	c5 01       	movw	r24, r10
    1ece:	82 1b       	sub	r24, r18
    1ed0:	93 0b       	sbc	r25, r19
    1ed2:	a4 0b       	sbc	r26, r20
    1ed4:	b5 0b       	sbc	r27, r21
    1ed6:	89 ab       	std	Y+49, r24	; 0x31
    1ed8:	9a ab       	std	Y+50, r25	; 0x32
    1eda:	ab ab       	std	Y+51, r26	; 0x33
    1edc:	bc ab       	std	Y+52, r27	; 0x34
    1ede:	d1 01       	movw	r26, r2
    1ee0:	99 27       	eor	r25, r25
    1ee2:	88 27       	eor	r24, r24
    1ee4:	84 01       	movw	r16, r8
    1ee6:	73 01       	movw	r14, r6
    1ee8:	e8 2a       	or	r14, r24
    1eea:	f9 2a       	or	r15, r25
    1eec:	0a 2b       	or	r16, r26
    1eee:	1b 2b       	or	r17, r27
    1ef0:	8f ef       	ldi	r24, 0xFF	; 255
    1ef2:	a8 2e       	mov	r10, r24
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	b8 2e       	mov	r11, r24
    1ef8:	c1 2c       	mov	r12, r1
    1efa:	d1 2c       	mov	r13, r1
    1efc:	ae 20       	and	r10, r14
    1efe:	bf 20       	and	r11, r15
    1f00:	c0 22       	and	r12, r16
    1f02:	d1 22       	and	r13, r17
    1f04:	78 01       	movw	r14, r16
    1f06:	00 27       	eor	r16, r16
    1f08:	11 27       	eor	r17, r17
    1f0a:	21 96       	adiw	r28, 0x01	; 1
    1f0c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f0e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f10:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f12:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f14:	21 97       	sbiw	r28, 0x01	; 1
    1f16:	2f ef       	ldi	r18, 0xFF	; 255
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	62 22       	and	r6, r18
    1f20:	73 22       	and	r7, r19
    1f22:	84 22       	and	r8, r20
    1f24:	95 22       	and	r9, r21
    1f26:	21 96       	adiw	r28, 0x01	; 1
    1f28:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f30:	21 97       	sbiw	r28, 0x01	; 1
    1f32:	ac 01       	movw	r20, r24
    1f34:	66 27       	eor	r22, r22
    1f36:	77 27       	eor	r23, r23
    1f38:	ad 96       	adiw	r28, 0x2d	; 45
    1f3a:	4c af       	std	Y+60, r20	; 0x3c
    1f3c:	5d af       	std	Y+61, r21	; 0x3d
    1f3e:	6e af       	std	Y+62, r22	; 0x3e
    1f40:	7f af       	std	Y+63, r23	; 0x3f
    1f42:	ad 97       	sbiw	r28, 0x2d	; 45
    1f44:	c6 01       	movw	r24, r12
    1f46:	b5 01       	movw	r22, r10
    1f48:	a4 01       	movw	r20, r8
    1f4a:	93 01       	movw	r18, r6
    1f4c:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	6c af       	std	Y+60, r22	; 0x3c
    1f54:	7d af       	std	Y+61, r23	; 0x3d
    1f56:	8e af       	std	Y+62, r24	; 0x3e
    1f58:	9f af       	std	Y+63, r25	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	c6 01       	movw	r24, r12
    1f5e:	b5 01       	movw	r22, r10
    1f60:	ad 96       	adiw	r28, 0x2d	; 45
    1f62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f66:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f68:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f6a:	ad 97       	sbiw	r28, 0x2d	; 45
    1f6c:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1f70:	1b 01       	movw	r2, r22
    1f72:	2c 01       	movw	r4, r24
    1f74:	c8 01       	movw	r24, r16
    1f76:	b7 01       	movw	r22, r14
    1f78:	a4 01       	movw	r20, r8
    1f7a:	93 01       	movw	r18, r6
    1f7c:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1f80:	5b 01       	movw	r10, r22
    1f82:	6c 01       	movw	r12, r24
    1f84:	c8 01       	movw	r24, r16
    1f86:	b7 01       	movw	r22, r14
    1f88:	ad 96       	adiw	r28, 0x2d	; 45
    1f8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f90:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f92:	ad 97       	sbiw	r28, 0x2d	; 45
    1f94:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    1f98:	7b 01       	movw	r14, r22
    1f9a:	8c 01       	movw	r16, r24
    1f9c:	a6 01       	movw	r20, r12
    1f9e:	95 01       	movw	r18, r10
    1fa0:	22 0d       	add	r18, r2
    1fa2:	33 1d       	adc	r19, r3
    1fa4:	44 1d       	adc	r20, r4
    1fa6:	55 1d       	adc	r21, r5
    1fa8:	a9 96       	adiw	r28, 0x29	; 41
    1faa:	6c ac       	ldd	r6, Y+60	; 0x3c
    1fac:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fae:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fb0:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fb2:	a9 97       	sbiw	r28, 0x29	; 41
    1fb4:	c4 01       	movw	r24, r8
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	bb 27       	eor	r27, r27
    1fba:	28 0f       	add	r18, r24
    1fbc:	39 1f       	adc	r19, r25
    1fbe:	4a 1f       	adc	r20, r26
    1fc0:	5b 1f       	adc	r21, r27
    1fc2:	2a 15       	cp	r18, r10
    1fc4:	3b 05       	cpc	r19, r11
    1fc6:	4c 05       	cpc	r20, r12
    1fc8:	5d 05       	cpc	r21, r13
    1fca:	48 f4       	brcc	.+18     	; 0x1fde <__moddi3+0xdfe>
    1fcc:	81 2c       	mov	r8, r1
    1fce:	91 2c       	mov	r9, r1
    1fd0:	e1 e0       	ldi	r30, 0x01	; 1
    1fd2:	ae 2e       	mov	r10, r30
    1fd4:	b1 2c       	mov	r11, r1
    1fd6:	e8 0c       	add	r14, r8
    1fd8:	f9 1c       	adc	r15, r9
    1fda:	0a 1d       	adc	r16, r10
    1fdc:	1b 1d       	adc	r17, r11
    1fde:	ca 01       	movw	r24, r20
    1fe0:	aa 27       	eor	r26, r26
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	57 01       	movw	r10, r14
    1fe6:	68 01       	movw	r12, r16
    1fe8:	a8 0e       	add	r10, r24
    1fea:	b9 1e       	adc	r11, r25
    1fec:	ca 1e       	adc	r12, r26
    1fee:	db 1e       	adc	r13, r27
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	33 27       	eor	r19, r19
    1ff4:	22 27       	eor	r18, r18
    1ff6:	a9 96       	adiw	r28, 0x29	; 41
    1ff8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ffa:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ffc:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ffe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2000:	a9 97       	sbiw	r28, 0x29	; 41
    2002:	a0 70       	andi	r26, 0x00	; 0
    2004:	b0 70       	andi	r27, 0x00	; 0
    2006:	28 0f       	add	r18, r24
    2008:	39 1f       	adc	r19, r25
    200a:	4a 1f       	adc	r20, r26
    200c:	5b 1f       	adc	r21, r27
    200e:	e9 a8       	ldd	r14, Y+49	; 0x31
    2010:	fa a8       	ldd	r15, Y+50	; 0x32
    2012:	0b a9       	ldd	r16, Y+51	; 0x33
    2014:	1c a9       	ldd	r17, Y+52	; 0x34
    2016:	ea 14       	cp	r14, r10
    2018:	fb 04       	cpc	r15, r11
    201a:	0c 05       	cpc	r16, r12
    201c:	1d 05       	cpc	r17, r13
    201e:	70 f0       	brcs	.+28     	; 0x203c <__moddi3+0xe5c>
    2020:	ae 14       	cp	r10, r14
    2022:	bf 04       	cpc	r11, r15
    2024:	c0 06       	cpc	r12, r16
    2026:	d1 06       	cpc	r13, r17
    2028:	89 f5       	brne	.+98     	; 0x208c <__moddi3+0xeac>
    202a:	6d a9       	ldd	r22, Y+53	; 0x35
    202c:	7e a9       	ldd	r23, Y+54	; 0x36
    202e:	8f a9       	ldd	r24, Y+55	; 0x37
    2030:	98 ad       	ldd	r25, Y+56	; 0x38
    2032:	62 17       	cp	r22, r18
    2034:	73 07       	cpc	r23, r19
    2036:	84 07       	cpc	r24, r20
    2038:	95 07       	cpc	r25, r21
    203a:	40 f5       	brcc	.+80     	; 0x208c <__moddi3+0xeac>
    203c:	da 01       	movw	r26, r20
    203e:	c9 01       	movw	r24, r18
    2040:	21 96       	adiw	r28, 0x01	; 1
    2042:	6c ac       	ldd	r6, Y+60	; 0x3c
    2044:	7d ac       	ldd	r7, Y+61	; 0x3d
    2046:	8e ac       	ldd	r8, Y+62	; 0x3e
    2048:	9f ac       	ldd	r9, Y+63	; 0x3f
    204a:	21 97       	sbiw	r28, 0x01	; 1
    204c:	86 19       	sub	r24, r6
    204e:	97 09       	sbc	r25, r7
    2050:	a8 09       	sbc	r26, r8
    2052:	b9 09       	sbc	r27, r9
    2054:	25 96       	adiw	r28, 0x05	; 5
    2056:	ec ac       	ldd	r14, Y+60	; 0x3c
    2058:	fd ac       	ldd	r15, Y+61	; 0x3d
    205a:	0e ad       	ldd	r16, Y+62	; 0x3e
    205c:	1f ad       	ldd	r17, Y+63	; 0x3f
    205e:	25 97       	sbiw	r28, 0x05	; 5
    2060:	ae 18       	sub	r10, r14
    2062:	bf 08       	sbc	r11, r15
    2064:	c0 0a       	sbc	r12, r16
    2066:	d1 0a       	sbc	r13, r17
    2068:	ee 24       	eor	r14, r14
    206a:	ff 24       	eor	r15, r15
    206c:	87 01       	movw	r16, r14
    206e:	28 17       	cp	r18, r24
    2070:	39 07       	cpc	r19, r25
    2072:	4a 07       	cpc	r20, r26
    2074:	5b 07       	cpc	r21, r27
    2076:	28 f4       	brcc	.+10     	; 0x2082 <__moddi3+0xea2>
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	e2 2e       	mov	r14, r18
    207c:	f1 2c       	mov	r15, r1
    207e:	01 2d       	mov	r16, r1
    2080:	11 2d       	mov	r17, r1
    2082:	ae 18       	sub	r10, r14
    2084:	bf 08       	sbc	r11, r15
    2086:	c0 0a       	sbc	r12, r16
    2088:	d1 0a       	sbc	r13, r17
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <__moddi3+0xeb0>
    208c:	da 01       	movw	r26, r20
    208e:	c9 01       	movw	r24, r18
    2090:	6d a8       	ldd	r6, Y+53	; 0x35
    2092:	7e a8       	ldd	r7, Y+54	; 0x36
    2094:	8f a8       	ldd	r8, Y+55	; 0x37
    2096:	98 ac       	ldd	r9, Y+56	; 0x38
    2098:	68 1a       	sub	r6, r24
    209a:	79 0a       	sbc	r7, r25
    209c:	8a 0a       	sbc	r8, r26
    209e:	9b 0a       	sbc	r9, r27
    20a0:	09 a9       	ldd	r16, Y+49	; 0x31
    20a2:	1a a9       	ldd	r17, Y+50	; 0x32
    20a4:	2b a9       	ldd	r18, Y+51	; 0x33
    20a6:	3c a9       	ldd	r19, Y+52	; 0x34
    20a8:	0a 19       	sub	r16, r10
    20aa:	1b 09       	sbc	r17, r11
    20ac:	2c 09       	sbc	r18, r12
    20ae:	3d 09       	sbc	r19, r13
    20b0:	58 01       	movw	r10, r16
    20b2:	69 01       	movw	r12, r18
    20b4:	22 24       	eor	r2, r2
    20b6:	33 24       	eor	r3, r3
    20b8:	21 01       	movw	r4, r2
    20ba:	2d a9       	ldd	r18, Y+53	; 0x35
    20bc:	3e a9       	ldd	r19, Y+54	; 0x36
    20be:	4f a9       	ldd	r20, Y+55	; 0x37
    20c0:	58 ad       	ldd	r21, Y+56	; 0x38
    20c2:	26 15       	cp	r18, r6
    20c4:	37 05       	cpc	r19, r7
    20c6:	48 05       	cpc	r20, r8
    20c8:	59 05       	cpc	r21, r9
    20ca:	28 f4       	brcc	.+10     	; 0x20d6 <__moddi3+0xef6>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	28 2e       	mov	r2, r24
    20d0:	31 2c       	mov	r3, r1
    20d2:	41 2c       	mov	r4, r1
    20d4:	51 2c       	mov	r5, r1
    20d6:	86 01       	movw	r16, r12
    20d8:	75 01       	movw	r14, r10
    20da:	e2 18       	sub	r14, r2
    20dc:	f3 08       	sbc	r15, r3
    20de:	04 09       	sbc	r16, r4
    20e0:	15 09       	sbc	r17, r5
    20e2:	a8 01       	movw	r20, r16
    20e4:	97 01       	movw	r18, r14
    20e6:	e2 96       	adiw	r28, 0x32	; 50
    20e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    20ea:	e2 97       	sbiw	r28, 0x32	; 50
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <__moddi3+0xf16>
    20ee:	22 0f       	add	r18, r18
    20f0:	33 1f       	adc	r19, r19
    20f2:	44 1f       	adc	r20, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	0a 94       	dec	r0
    20f8:	d2 f7       	brpl	.-12     	; 0x20ee <__moddi3+0xf0e>
    20fa:	d4 01       	movw	r26, r8
    20fc:	c3 01       	movw	r24, r6
    20fe:	e3 96       	adiw	r28, 0x33	; 51
    2100:	0f ac       	ldd	r0, Y+63	; 0x3f
    2102:	e3 97       	sbiw	r28, 0x33	; 51
    2104:	04 c0       	rjmp	.+8      	; 0x210e <__moddi3+0xf2e>
    2106:	b6 95       	lsr	r27
    2108:	a7 95       	ror	r26
    210a:	97 95       	ror	r25
    210c:	87 95       	ror	r24
    210e:	0a 94       	dec	r0
    2110:	d2 f7       	brpl	.-12     	; 0x2106 <__moddi3+0xf26>
    2112:	28 2b       	or	r18, r24
    2114:	39 2b       	or	r19, r25
    2116:	4a 2b       	or	r20, r26
    2118:	5b 2b       	or	r21, r27
    211a:	29 a7       	std	Y+41, r18	; 0x29
    211c:	3a a7       	std	Y+42, r19	; 0x2a
    211e:	4b a7       	std	Y+43, r20	; 0x2b
    2120:	5c a7       	std	Y+44, r21	; 0x2c
    2122:	e3 96       	adiw	r28, 0x33	; 51
    2124:	0f ac       	ldd	r0, Y+63	; 0x3f
    2126:	e3 97       	sbiw	r28, 0x33	; 51
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <__moddi3+0xf52>
    212a:	16 95       	lsr	r17
    212c:	07 95       	ror	r16
    212e:	f7 94       	ror	r15
    2130:	e7 94       	ror	r14
    2132:	0a 94       	dec	r0
    2134:	d2 f7       	brpl	.-12     	; 0x212a <__moddi3+0xf4a>
    2136:	ed a6       	std	Y+45, r14	; 0x2d
    2138:	fe a6       	std	Y+46, r15	; 0x2e
    213a:	0f a7       	std	Y+47, r16	; 0x2f
    213c:	18 ab       	std	Y+48, r17	; 0x30
    213e:	29 8b       	std	Y+17, r18	; 0x11
    2140:	8a a5       	ldd	r24, Y+42	; 0x2a
    2142:	8a 8b       	std	Y+18, r24	; 0x12
    2144:	8b a5       	ldd	r24, Y+43	; 0x2b
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	8c a5       	ldd	r24, Y+44	; 0x2c
    214a:	8c 8b       	std	Y+20, r24	; 0x14
    214c:	ed 8a       	std	Y+21, r14	; 0x15
    214e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2150:	8e 8b       	std	Y+22, r24	; 0x16
    2152:	8f a5       	ldd	r24, Y+47	; 0x2f
    2154:	8f 8b       	std	Y+23, r24	; 0x17
    2156:	88 a9       	ldd	r24, Y+48	; 0x30
    2158:	88 8f       	std	Y+24, r24	; 0x18
    215a:	e1 96       	adiw	r28, 0x31	; 49
    215c:	4c ad       	ldd	r20, Y+60	; 0x3c
    215e:	5d ad       	ldd	r21, Y+61	; 0x3d
    2160:	6e ad       	ldd	r22, Y+62	; 0x3e
    2162:	7f ad       	ldd	r23, Y+63	; 0x3f
    2164:	e1 97       	sbiw	r28, 0x31	; 49
    2166:	41 15       	cp	r20, r1
    2168:	51 05       	cpc	r21, r1
    216a:	61 05       	cpc	r22, r1
    216c:	71 05       	cpc	r23, r1
    216e:	09 f4       	brne	.+2      	; 0x2172 <__moddi3+0xf92>
    2170:	67 c0       	rjmp	.+206    	; 0x2240 <__moddi3+0x1060>
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	2a 89       	ldd	r18, Y+18	; 0x12
    2176:	3b 89       	ldd	r19, Y+19	; 0x13
    2178:	4c 89       	ldd	r20, Y+20	; 0x14
    217a:	5d 89       	ldd	r21, Y+21	; 0x15
    217c:	ae 89       	ldd	r26, Y+22	; 0x16
    217e:	bf 89       	ldd	r27, Y+23	; 0x17
    2180:	18 8d       	ldd	r17, Y+24	; 0x18
    2182:	f8 2f       	mov	r31, r24
    2184:	f1 95       	neg	r31
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	1f 16       	cp	r1, r31
    218a:	08 f0       	brcs	.+2      	; 0x218e <__moddi3+0xfae>
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	82 2f       	mov	r24, r18
    2190:	81 95       	neg	r24
    2192:	21 e0       	ldi	r18, 0x01	; 1
    2194:	18 16       	cp	r1, r24
    2196:	08 f0       	brcs	.+2      	; 0x219a <__moddi3+0xfba>
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	e8 2f       	mov	r30, r24
    219c:	e9 1b       	sub	r30, r25
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	8e 17       	cp	r24, r30
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <__moddi3+0xfc6>
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	29 2b       	or	r18, r25
    21a8:	83 2f       	mov	r24, r19
    21aa:	81 95       	neg	r24
    21ac:	31 e0       	ldi	r19, 0x01	; 1
    21ae:	18 16       	cp	r1, r24
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__moddi3+0xfd4>
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	78 2f       	mov	r23, r24
    21b6:	72 1b       	sub	r23, r18
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	87 17       	cp	r24, r23
    21bc:	08 f0       	brcs	.+2      	; 0x21c0 <__moddi3+0xfe0>
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	39 2b       	or	r19, r25
    21c2:	84 2f       	mov	r24, r20
    21c4:	81 95       	neg	r24
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	18 16       	cp	r1, r24
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <__moddi3+0xfee>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	68 2f       	mov	r22, r24
    21d0:	63 1b       	sub	r22, r19
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	86 17       	cp	r24, r22
    21d6:	08 f0       	brcs	.+2      	; 0x21da <__moddi3+0xffa>
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	29 2b       	or	r18, r25
    21dc:	85 2f       	mov	r24, r21
    21de:	81 95       	neg	r24
    21e0:	31 e0       	ldi	r19, 0x01	; 1
    21e2:	18 16       	cp	r1, r24
    21e4:	08 f0       	brcs	.+2      	; 0x21e8 <__moddi3+0x1008>
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	58 2f       	mov	r21, r24
    21ea:	52 1b       	sub	r21, r18
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	85 17       	cp	r24, r21
    21f0:	08 f0       	brcs	.+2      	; 0x21f4 <__moddi3+0x1014>
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	39 2b       	or	r19, r25
    21f6:	8a 2f       	mov	r24, r26
    21f8:	81 95       	neg	r24
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	18 16       	cp	r1, r24
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__moddi3+0x1022>
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	48 2f       	mov	r20, r24
    2204:	43 1b       	sub	r20, r19
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	84 17       	cp	r24, r20
    220a:	08 f0       	brcs	.+2      	; 0x220e <__moddi3+0x102e>
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	29 2b       	or	r18, r25
    2210:	8b 2f       	mov	r24, r27
    2212:	81 95       	neg	r24
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	18 16       	cp	r1, r24
    2218:	08 f0       	brcs	.+2      	; 0x221c <__moddi3+0x103c>
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	38 2f       	mov	r19, r24
    221e:	32 1b       	sub	r19, r18
    2220:	21 e0       	ldi	r18, 0x01	; 1
    2222:	83 17       	cp	r24, r19
    2224:	08 f0       	brcs	.+2      	; 0x2228 <__moddi3+0x1048>
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	92 2b       	or	r25, r18
    222a:	81 2f       	mov	r24, r17
    222c:	81 95       	neg	r24
    222e:	89 1b       	sub	r24, r25
    2230:	f9 8b       	std	Y+17, r31	; 0x11
    2232:	ea 8b       	std	Y+18, r30	; 0x12
    2234:	7b 8b       	std	Y+19, r23	; 0x13
    2236:	6c 8b       	std	Y+20, r22	; 0x14
    2238:	5d 8b       	std	Y+21, r21	; 0x15
    223a:	4e 8b       	std	Y+22, r20	; 0x16
    223c:	3f 8b       	std	Y+23, r19	; 0x17
    223e:	88 8f       	std	Y+24, r24	; 0x18
    2240:	29 89       	ldd	r18, Y+17	; 0x11
    2242:	3a 89       	ldd	r19, Y+18	; 0x12
    2244:	4b 89       	ldd	r20, Y+19	; 0x13
    2246:	5c 89       	ldd	r21, Y+20	; 0x14
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	c9 58       	subi	r28, 0x89	; 137
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	e2 e1       	ldi	r30, 0x12	; 18
    2256:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__epilogue_restores__>

0000225a <__udivdi3>:
    225a:	ae e5       	ldi	r26, 0x5E	; 94
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e3 e3       	ldi	r30, 0x33	; 51
    2260:	f1 e1       	ldi	r31, 0x11	; 17
    2262:	0c 94 de 33 	jmp	0x67bc	; 0x67bc <__prologue_saves__>
    2266:	a8 e0       	ldi	r26, 0x08	; 8
    2268:	4e 01       	movw	r8, r28
    226a:	08 94       	sec
    226c:	81 1c       	adc	r8, r1
    226e:	91 1c       	adc	r9, r1
    2270:	f4 01       	movw	r30, r8
    2272:	6a 2e       	mov	r6, r26
    2274:	11 92       	st	Z+, r1
    2276:	6a 94       	dec	r6
    2278:	e9 f7       	brne	.-6      	; 0x2274 <__udivdi3+0x1a>
    227a:	29 83       	std	Y+1, r18	; 0x01
    227c:	3a 83       	std	Y+2, r19	; 0x02
    227e:	4b 83       	std	Y+3, r20	; 0x03
    2280:	5c 83       	std	Y+4, r21	; 0x04
    2282:	6d 83       	std	Y+5, r22	; 0x05
    2284:	7e 83       	std	Y+6, r23	; 0x06
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	ce 01       	movw	r24, r28
    228c:	09 96       	adiw	r24, 0x09	; 9
    228e:	fc 01       	movw	r30, r24
    2290:	11 92       	st	Z+, r1
    2292:	aa 95       	dec	r26
    2294:	e9 f7       	brne	.-6      	; 0x2290 <__udivdi3+0x36>
    2296:	a9 86       	std	Y+9, r10	; 0x09
    2298:	ba 86       	std	Y+10, r11	; 0x0a
    229a:	cb 86       	std	Y+11, r12	; 0x0b
    229c:	dc 86       	std	Y+12, r13	; 0x0c
    229e:	ed 86       	std	Y+13, r14	; 0x0d
    22a0:	fe 86       	std	Y+14, r15	; 0x0e
    22a2:	0f 87       	std	Y+15, r16	; 0x0f
    22a4:	18 8b       	std	Y+16, r17	; 0x10
    22a6:	29 84       	ldd	r2, Y+9	; 0x09
    22a8:	3a 84       	ldd	r3, Y+10	; 0x0a
    22aa:	4b 84       	ldd	r4, Y+11	; 0x0b
    22ac:	5c 84       	ldd	r5, Y+12	; 0x0c
    22ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    22b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    22b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    22b4:	18 89       	ldd	r17, Y+16	; 0x10
    22b6:	69 80       	ldd	r6, Y+1	; 0x01
    22b8:	7a 80       	ldd	r7, Y+2	; 0x02
    22ba:	8b 80       	ldd	r8, Y+3	; 0x03
    22bc:	9c 80       	ldd	r9, Y+4	; 0x04
    22be:	6d a6       	std	Y+45, r6	; 0x2d
    22c0:	7e a6       	std	Y+46, r7	; 0x2e
    22c2:	8f a6       	std	Y+47, r8	; 0x2f
    22c4:	98 aa       	std	Y+48, r9	; 0x30
    22c6:	6d 80       	ldd	r6, Y+5	; 0x05
    22c8:	7e 80       	ldd	r7, Y+6	; 0x06
    22ca:	8f 80       	ldd	r8, Y+7	; 0x07
    22cc:	98 84       	ldd	r9, Y+8	; 0x08
    22ce:	e1 14       	cp	r14, r1
    22d0:	f1 04       	cpc	r15, r1
    22d2:	01 05       	cpc	r16, r1
    22d4:	11 05       	cpc	r17, r1
    22d6:	09 f0       	breq	.+2      	; 0x22da <__udivdi3+0x80>
    22d8:	b3 c3       	rjmp	.+1894   	; 0x2a40 <__udivdi3+0x7e6>
    22da:	62 14       	cp	r6, r2
    22dc:	73 04       	cpc	r7, r3
    22de:	84 04       	cpc	r8, r4
    22e0:	95 04       	cpc	r9, r5
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <__udivdi3+0x8c>
    22e4:	3d c1       	rjmp	.+634    	; 0x2560 <__udivdi3+0x306>
    22e6:	00 e0       	ldi	r16, 0x00	; 0
    22e8:	20 16       	cp	r2, r16
    22ea:	00 e0       	ldi	r16, 0x00	; 0
    22ec:	30 06       	cpc	r3, r16
    22ee:	01 e0       	ldi	r16, 0x01	; 1
    22f0:	40 06       	cpc	r4, r16
    22f2:	00 e0       	ldi	r16, 0x00	; 0
    22f4:	50 06       	cpc	r5, r16
    22f6:	88 f4       	brcc	.+34     	; 0x231a <__udivdi3+0xc0>
    22f8:	1f ef       	ldi	r17, 0xFF	; 255
    22fa:	21 16       	cp	r2, r17
    22fc:	31 04       	cpc	r3, r1
    22fe:	41 04       	cpc	r4, r1
    2300:	51 04       	cpc	r5, r1
    2302:	39 f0       	breq	.+14     	; 0x2312 <__udivdi3+0xb8>
    2304:	30 f0       	brcs	.+12     	; 0x2312 <__udivdi3+0xb8>
    2306:	48 e0       	ldi	r20, 0x08	; 8
    2308:	e4 2e       	mov	r14, r20
    230a:	f1 2c       	mov	r15, r1
    230c:	01 2d       	mov	r16, r1
    230e:	11 2d       	mov	r17, r1
    2310:	18 c0       	rjmp	.+48     	; 0x2342 <__udivdi3+0xe8>
    2312:	ee 24       	eor	r14, r14
    2314:	ff 24       	eor	r15, r15
    2316:	87 01       	movw	r16, r14
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <__udivdi3+0xe8>
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	22 16       	cp	r2, r18
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	32 06       	cpc	r3, r18
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	42 06       	cpc	r4, r18
    2326:	21 e0       	ldi	r18, 0x01	; 1
    2328:	52 06       	cpc	r5, r18
    232a:	30 f0       	brcs	.+12     	; 0x2338 <__udivdi3+0xde>
    232c:	38 e1       	ldi	r19, 0x18	; 24
    232e:	e3 2e       	mov	r14, r19
    2330:	f1 2c       	mov	r15, r1
    2332:	01 2d       	mov	r16, r1
    2334:	11 2d       	mov	r17, r1
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <__udivdi3+0xe8>
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	e2 2e       	mov	r14, r18
    233c:	f1 2c       	mov	r15, r1
    233e:	01 2d       	mov	r16, r1
    2340:	11 2d       	mov	r17, r1
    2342:	d2 01       	movw	r26, r4
    2344:	c1 01       	movw	r24, r2
    2346:	0e 2c       	mov	r0, r14
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <__udivdi3+0xf8>
    234a:	b6 95       	lsr	r27
    234c:	a7 95       	ror	r26
    234e:	97 95       	ror	r25
    2350:	87 95       	ror	r24
    2352:	0a 94       	dec	r0
    2354:	d2 f7       	brpl	.-12     	; 0x234a <__udivdi3+0xf0>
    2356:	85 53       	subi	r24, 0x35	; 53
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	dc 01       	movw	r26, r24
    235c:	2c 91       	ld	r18, X
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	8e 19       	sub	r24, r14
    2368:	9f 09       	sbc	r25, r15
    236a:	a0 0b       	sbc	r26, r16
    236c:	b1 0b       	sbc	r27, r17
    236e:	7c 01       	movw	r14, r24
    2370:	8d 01       	movw	r16, r26
    2372:	e2 1a       	sub	r14, r18
    2374:	f1 08       	sbc	r15, r1
    2376:	01 09       	sbc	r16, r1
    2378:	11 09       	sbc	r17, r1
    237a:	e1 14       	cp	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	01 05       	cpc	r16, r1
    2380:	11 05       	cpc	r17, r1
    2382:	a1 f1       	breq	.+104    	; 0x23ec <__udivdi3+0x192>
    2384:	0e 2c       	mov	r0, r14
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <__udivdi3+0x136>
    2388:	22 0c       	add	r2, r2
    238a:	33 1c       	adc	r3, r3
    238c:	44 1c       	adc	r4, r4
    238e:	55 1c       	adc	r5, r5
    2390:	0a 94       	dec	r0
    2392:	d2 f7       	brpl	.-12     	; 0x2388 <__udivdi3+0x12e>
    2394:	a4 01       	movw	r20, r8
    2396:	93 01       	movw	r18, r6
    2398:	0e 2c       	mov	r0, r14
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <__udivdi3+0x14a>
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	44 1f       	adc	r20, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	0a 94       	dec	r0
    23a6:	d2 f7       	brpl	.-12     	; 0x239c <__udivdi3+0x142>
    23a8:	80 e2       	ldi	r24, 0x20	; 32
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	8e 19       	sub	r24, r14
    23ae:	9f 09       	sbc	r25, r15
    23b0:	6d a4       	ldd	r6, Y+45	; 0x2d
    23b2:	7e a4       	ldd	r7, Y+46	; 0x2e
    23b4:	8f a4       	ldd	r8, Y+47	; 0x2f
    23b6:	98 a8       	ldd	r9, Y+48	; 0x30
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <__udivdi3+0x168>
    23ba:	96 94       	lsr	r9
    23bc:	87 94       	ror	r8
    23be:	77 94       	ror	r7
    23c0:	67 94       	ror	r6
    23c2:	8a 95       	dec	r24
    23c4:	d2 f7       	brpl	.-12     	; 0x23ba <__udivdi3+0x160>
    23c6:	62 2a       	or	r6, r18
    23c8:	73 2a       	or	r7, r19
    23ca:	84 2a       	or	r8, r20
    23cc:	95 2a       	or	r9, r21
    23ce:	ad a4       	ldd	r10, Y+45	; 0x2d
    23d0:	be a4       	ldd	r11, Y+46	; 0x2e
    23d2:	cf a4       	ldd	r12, Y+47	; 0x2f
    23d4:	d8 a8       	ldd	r13, Y+48	; 0x30
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <__udivdi3+0x186>
    23d8:	aa 0c       	add	r10, r10
    23da:	bb 1c       	adc	r11, r11
    23dc:	cc 1c       	adc	r12, r12
    23de:	dd 1c       	adc	r13, r13
    23e0:	ea 94       	dec	r14
    23e2:	d2 f7       	brpl	.-12     	; 0x23d8 <__udivdi3+0x17e>
    23e4:	ad a6       	std	Y+45, r10	; 0x2d
    23e6:	be a6       	std	Y+46, r11	; 0x2e
    23e8:	cf a6       	std	Y+47, r12	; 0x2f
    23ea:	d8 aa       	std	Y+48, r13	; 0x30
    23ec:	62 01       	movw	r12, r4
    23ee:	ee 24       	eor	r14, r14
    23f0:	ff 24       	eor	r15, r15
    23f2:	cd aa       	std	Y+53, r12	; 0x35
    23f4:	de aa       	std	Y+54, r13	; 0x36
    23f6:	ef aa       	std	Y+55, r14	; 0x37
    23f8:	f8 ae       	std	Y+56, r15	; 0x38
    23fa:	92 01       	movw	r18, r4
    23fc:	81 01       	movw	r16, r2
    23fe:	20 70       	andi	r18, 0x00	; 0
    2400:	30 70       	andi	r19, 0x00	; 0
    2402:	09 af       	std	Y+57, r16	; 0x39
    2404:	1a af       	std	Y+58, r17	; 0x3a
    2406:	2b af       	std	Y+59, r18	; 0x3b
    2408:	3c af       	std	Y+60, r19	; 0x3c
    240a:	c4 01       	movw	r24, r8
    240c:	b3 01       	movw	r22, r6
    240e:	a7 01       	movw	r20, r14
    2410:	96 01       	movw	r18, r12
    2412:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    2416:	7b 01       	movw	r14, r22
    2418:	8c 01       	movw	r16, r24
    241a:	c4 01       	movw	r24, r8
    241c:	b3 01       	movw	r22, r6
    241e:	2d a9       	ldd	r18, Y+53	; 0x35
    2420:	3e a9       	ldd	r19, Y+54	; 0x36
    2422:	4f a9       	ldd	r20, Y+55	; 0x37
    2424:	58 ad       	ldd	r21, Y+56	; 0x38
    2426:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    242a:	c9 01       	movw	r24, r18
    242c:	da 01       	movw	r26, r20
    242e:	3c 01       	movw	r6, r24
    2430:	4d 01       	movw	r8, r26
    2432:	c4 01       	movw	r24, r8
    2434:	b3 01       	movw	r22, r6
    2436:	29 ad       	ldd	r18, Y+57	; 0x39
    2438:	3a ad       	ldd	r19, Y+58	; 0x3a
    243a:	4b ad       	ldd	r20, Y+59	; 0x3b
    243c:	5c ad       	ldd	r21, Y+60	; 0x3c
    243e:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	87 01       	movw	r16, r14
    2448:	ff 24       	eor	r15, r15
    244a:	ee 24       	eor	r14, r14
    244c:	ad a4       	ldd	r10, Y+45	; 0x2d
    244e:	be a4       	ldd	r11, Y+46	; 0x2e
    2450:	cf a4       	ldd	r12, Y+47	; 0x2f
    2452:	d8 a8       	ldd	r13, Y+48	; 0x30
    2454:	c6 01       	movw	r24, r12
    2456:	aa 27       	eor	r26, r26
    2458:	bb 27       	eor	r27, r27
    245a:	57 01       	movw	r10, r14
    245c:	68 01       	movw	r12, r16
    245e:	a8 2a       	or	r10, r24
    2460:	b9 2a       	or	r11, r25
    2462:	ca 2a       	or	r12, r26
    2464:	db 2a       	or	r13, r27
    2466:	a2 16       	cp	r10, r18
    2468:	b3 06       	cpc	r11, r19
    246a:	c4 06       	cpc	r12, r20
    246c:	d5 06       	cpc	r13, r21
    246e:	e0 f4       	brcc	.+56     	; 0x24a8 <__udivdi3+0x24e>
    2470:	08 94       	sec
    2472:	61 08       	sbc	r6, r1
    2474:	71 08       	sbc	r7, r1
    2476:	81 08       	sbc	r8, r1
    2478:	91 08       	sbc	r9, r1
    247a:	a2 0c       	add	r10, r2
    247c:	b3 1c       	adc	r11, r3
    247e:	c4 1c       	adc	r12, r4
    2480:	d5 1c       	adc	r13, r5
    2482:	a2 14       	cp	r10, r2
    2484:	b3 04       	cpc	r11, r3
    2486:	c4 04       	cpc	r12, r4
    2488:	d5 04       	cpc	r13, r5
    248a:	70 f0       	brcs	.+28     	; 0x24a8 <__udivdi3+0x24e>
    248c:	a2 16       	cp	r10, r18
    248e:	b3 06       	cpc	r11, r19
    2490:	c4 06       	cpc	r12, r20
    2492:	d5 06       	cpc	r13, r21
    2494:	48 f4       	brcc	.+18     	; 0x24a8 <__udivdi3+0x24e>
    2496:	08 94       	sec
    2498:	61 08       	sbc	r6, r1
    249a:	71 08       	sbc	r7, r1
    249c:	81 08       	sbc	r8, r1
    249e:	91 08       	sbc	r9, r1
    24a0:	a2 0c       	add	r10, r2
    24a2:	b3 1c       	adc	r11, r3
    24a4:	c4 1c       	adc	r12, r4
    24a6:	d5 1c       	adc	r13, r5
    24a8:	a2 1a       	sub	r10, r18
    24aa:	b3 0a       	sbc	r11, r19
    24ac:	c4 0a       	sbc	r12, r20
    24ae:	d5 0a       	sbc	r13, r21
    24b0:	c6 01       	movw	r24, r12
    24b2:	b5 01       	movw	r22, r10
    24b4:	2d a9       	ldd	r18, Y+53	; 0x35
    24b6:	3e a9       	ldd	r19, Y+54	; 0x36
    24b8:	4f a9       	ldd	r20, Y+55	; 0x37
    24ba:	58 ad       	ldd	r21, Y+56	; 0x38
    24bc:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    24c0:	7b 01       	movw	r14, r22
    24c2:	8c 01       	movw	r16, r24
    24c4:	c6 01       	movw	r24, r12
    24c6:	b5 01       	movw	r22, r10
    24c8:	2d a9       	ldd	r18, Y+53	; 0x35
    24ca:	3e a9       	ldd	r19, Y+54	; 0x36
    24cc:	4f a9       	ldd	r20, Y+55	; 0x37
    24ce:	58 ad       	ldd	r21, Y+56	; 0x38
    24d0:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    24d4:	c9 01       	movw	r24, r18
    24d6:	da 01       	movw	r26, r20
    24d8:	5c 01       	movw	r10, r24
    24da:	6d 01       	movw	r12, r26
    24dc:	c6 01       	movw	r24, r12
    24de:	b5 01       	movw	r22, r10
    24e0:	29 ad       	ldd	r18, Y+57	; 0x39
    24e2:	3a ad       	ldd	r19, Y+58	; 0x3a
    24e4:	4b ad       	ldd	r20, Y+59	; 0x3b
    24e6:	5c ad       	ldd	r21, Y+60	; 0x3c
    24e8:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	87 01       	movw	r16, r14
    24f2:	ff 24       	eor	r15, r15
    24f4:	ee 24       	eor	r14, r14
    24f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24fa:	af a5       	ldd	r26, Y+47	; 0x2f
    24fc:	b8 a9       	ldd	r27, Y+48	; 0x30
    24fe:	a0 70       	andi	r26, 0x00	; 0
    2500:	b0 70       	andi	r27, 0x00	; 0
    2502:	e8 2a       	or	r14, r24
    2504:	f9 2a       	or	r15, r25
    2506:	0a 2b       	or	r16, r26
    2508:	1b 2b       	or	r17, r27
    250a:	e2 16       	cp	r14, r18
    250c:	f3 06       	cpc	r15, r19
    250e:	04 07       	cpc	r16, r20
    2510:	15 07       	cpc	r17, r21
    2512:	c0 f4       	brcc	.+48     	; 0x2544 <__udivdi3+0x2ea>
    2514:	08 94       	sec
    2516:	a1 08       	sbc	r10, r1
    2518:	b1 08       	sbc	r11, r1
    251a:	c1 08       	sbc	r12, r1
    251c:	d1 08       	sbc	r13, r1
    251e:	e2 0c       	add	r14, r2
    2520:	f3 1c       	adc	r15, r3
    2522:	04 1d       	adc	r16, r4
    2524:	15 1d       	adc	r17, r5
    2526:	e2 14       	cp	r14, r2
    2528:	f3 04       	cpc	r15, r3
    252a:	04 05       	cpc	r16, r4
    252c:	15 05       	cpc	r17, r5
    252e:	50 f0       	brcs	.+20     	; 0x2544 <__udivdi3+0x2ea>
    2530:	e2 16       	cp	r14, r18
    2532:	f3 06       	cpc	r15, r19
    2534:	04 07       	cpc	r16, r20
    2536:	15 07       	cpc	r17, r21
    2538:	28 f4       	brcc	.+10     	; 0x2544 <__udivdi3+0x2ea>
    253a:	08 94       	sec
    253c:	a1 08       	sbc	r10, r1
    253e:	b1 08       	sbc	r11, r1
    2540:	c1 08       	sbc	r12, r1
    2542:	d1 08       	sbc	r13, r1
    2544:	d3 01       	movw	r26, r6
    2546:	99 27       	eor	r25, r25
    2548:	88 27       	eor	r24, r24
    254a:	86 01       	movw	r16, r12
    254c:	75 01       	movw	r14, r10
    254e:	e8 2a       	or	r14, r24
    2550:	f9 2a       	or	r15, r25
    2552:	0a 2b       	or	r16, r26
    2554:	1b 2b       	or	r17, r27
    2556:	e9 aa       	std	Y+49, r14	; 0x31
    2558:	fa aa       	std	Y+50, r15	; 0x32
    255a:	0b ab       	std	Y+51, r16	; 0x33
    255c:	1c ab       	std	Y+52, r17	; 0x34
    255e:	cf c4       	rjmp	.+2462   	; 0x2efe <__udivdi3+0xca4>
    2560:	21 14       	cp	r2, r1
    2562:	31 04       	cpc	r3, r1
    2564:	41 04       	cpc	r4, r1
    2566:	51 04       	cpc	r5, r1
    2568:	71 f4       	brne	.+28     	; 0x2586 <__udivdi3+0x32c>
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    257e:	c9 01       	movw	r24, r18
    2580:	da 01       	movw	r26, r20
    2582:	1c 01       	movw	r2, r24
    2584:	2d 01       	movw	r4, r26
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	20 16       	cp	r2, r16
    258a:	00 e0       	ldi	r16, 0x00	; 0
    258c:	30 06       	cpc	r3, r16
    258e:	01 e0       	ldi	r16, 0x01	; 1
    2590:	40 06       	cpc	r4, r16
    2592:	00 e0       	ldi	r16, 0x00	; 0
    2594:	50 06       	cpc	r5, r16
    2596:	88 f4       	brcc	.+34     	; 0x25ba <__udivdi3+0x360>
    2598:	1f ef       	ldi	r17, 0xFF	; 255
    259a:	21 16       	cp	r2, r17
    259c:	31 04       	cpc	r3, r1
    259e:	41 04       	cpc	r4, r1
    25a0:	51 04       	cpc	r5, r1
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <__udivdi3+0x356>
    25a4:	28 f0       	brcs	.+10     	; 0x25b0 <__udivdi3+0x356>
    25a6:	48 e0       	ldi	r20, 0x08	; 8
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	17 c0       	rjmp	.+46     	; 0x25de <__udivdi3+0x384>
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	12 c0       	rjmp	.+36     	; 0x25de <__udivdi3+0x384>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	22 16       	cp	r2, r18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	32 06       	cpc	r3, r18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	42 06       	cpc	r4, r18
    25c6:	21 e0       	ldi	r18, 0x01	; 1
    25c8:	52 06       	cpc	r5, r18
    25ca:	28 f0       	brcs	.+10     	; 0x25d6 <__udivdi3+0x37c>
    25cc:	48 e1       	ldi	r20, 0x18	; 24
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <__udivdi3+0x384>
    25d6:	40 e1       	ldi	r20, 0x10	; 16
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	d2 01       	movw	r26, r4
    25e0:	c1 01       	movw	r24, r2
    25e2:	04 2e       	mov	r0, r20
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <__udivdi3+0x394>
    25e6:	b6 95       	lsr	r27
    25e8:	a7 95       	ror	r26
    25ea:	97 95       	ror	r25
    25ec:	87 95       	ror	r24
    25ee:	0a 94       	dec	r0
    25f0:	d2 f7       	brpl	.-12     	; 0x25e6 <__udivdi3+0x38c>
    25f2:	85 53       	subi	r24, 0x35	; 53
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	dc 01       	movw	r26, r24
    25f8:	2c 91       	ld	r18, X
    25fa:	e0 e2       	ldi	r30, 0x20	; 32
    25fc:	ee 2e       	mov	r14, r30
    25fe:	f1 2c       	mov	r15, r1
    2600:	01 2d       	mov	r16, r1
    2602:	11 2d       	mov	r17, r1
    2604:	d8 01       	movw	r26, r16
    2606:	c7 01       	movw	r24, r14
    2608:	84 1b       	sub	r24, r20
    260a:	95 0b       	sbc	r25, r21
    260c:	a6 0b       	sbc	r26, r22
    260e:	b7 0b       	sbc	r27, r23
    2610:	82 1b       	sub	r24, r18
    2612:	91 09       	sbc	r25, r1
    2614:	a1 09       	sbc	r26, r1
    2616:	b1 09       	sbc	r27, r1
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	a1 05       	cpc	r26, r1
    261c:	b1 05       	cpc	r27, r1
    261e:	61 f4       	brne	.+24     	; 0x2638 <__udivdi3+0x3de>
    2620:	64 01       	movw	r12, r8
    2622:	53 01       	movw	r10, r6
    2624:	a2 18       	sub	r10, r2
    2626:	b3 08       	sbc	r11, r3
    2628:	c4 08       	sbc	r12, r4
    262a:	d5 08       	sbc	r13, r5
    262c:	31 e0       	ldi	r19, 0x01	; 1
    262e:	63 2e       	mov	r6, r19
    2630:	71 2c       	mov	r7, r1
    2632:	81 2c       	mov	r8, r1
    2634:	91 2c       	mov	r9, r1
    2636:	1e c1       	rjmp	.+572    	; 0x2874 <__udivdi3+0x61a>
    2638:	6f 96       	adiw	r28, 0x1f	; 31
    263a:	8f af       	std	Y+63, r24	; 0x3f
    263c:	6f 97       	sbiw	r28, 0x1f	; 31
    263e:	08 2e       	mov	r0, r24
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__udivdi3+0x3f0>
    2642:	22 0c       	add	r2, r2
    2644:	33 1c       	adc	r3, r3
    2646:	44 1c       	adc	r4, r4
    2648:	55 1c       	adc	r5, r5
    264a:	0a 94       	dec	r0
    264c:	d2 f7       	brpl	.-12     	; 0x2642 <__udivdi3+0x3e8>
    264e:	ee 2d       	mov	r30, r14
    2650:	e8 1b       	sub	r30, r24
    2652:	64 01       	movw	r12, r8
    2654:	53 01       	movw	r10, r6
    2656:	0e 2e       	mov	r0, r30
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <__udivdi3+0x408>
    265a:	d6 94       	lsr	r13
    265c:	c7 94       	ror	r12
    265e:	b7 94       	ror	r11
    2660:	a7 94       	ror	r10
    2662:	0a 94       	dec	r0
    2664:	d2 f7       	brpl	.-12     	; 0x265a <__udivdi3+0x400>
    2666:	a4 01       	movw	r20, r8
    2668:	93 01       	movw	r18, r6
    266a:	6f 96       	adiw	r28, 0x1f	; 31
    266c:	0f ac       	ldd	r0, Y+63	; 0x3f
    266e:	6f 97       	sbiw	r28, 0x1f	; 31
    2670:	04 c0       	rjmp	.+8      	; 0x267a <__udivdi3+0x420>
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	44 1f       	adc	r20, r20
    2678:	55 1f       	adc	r21, r21
    267a:	0a 94       	dec	r0
    267c:	d2 f7       	brpl	.-12     	; 0x2672 <__udivdi3+0x418>
    267e:	6d a4       	ldd	r6, Y+45	; 0x2d
    2680:	7e a4       	ldd	r7, Y+46	; 0x2e
    2682:	8f a4       	ldd	r8, Y+47	; 0x2f
    2684:	98 a8       	ldd	r9, Y+48	; 0x30
    2686:	0e 2e       	mov	r0, r30
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <__udivdi3+0x438>
    268a:	96 94       	lsr	r9
    268c:	87 94       	ror	r8
    268e:	77 94       	ror	r7
    2690:	67 94       	ror	r6
    2692:	0a 94       	dec	r0
    2694:	d2 f7       	brpl	.-12     	; 0x268a <__udivdi3+0x430>
    2696:	84 01       	movw	r16, r8
    2698:	73 01       	movw	r14, r6
    269a:	e2 2a       	or	r14, r18
    269c:	f3 2a       	or	r15, r19
    269e:	04 2b       	or	r16, r20
    26a0:	15 2b       	or	r17, r21
    26a2:	e9 a6       	std	Y+41, r14	; 0x29
    26a4:	fa a6       	std	Y+42, r15	; 0x2a
    26a6:	0b a7       	std	Y+43, r16	; 0x2b
    26a8:	1c a7       	std	Y+44, r17	; 0x2c
    26aa:	32 01       	movw	r6, r4
    26ac:	88 24       	eor	r8, r8
    26ae:	99 24       	eor	r9, r9
    26b0:	92 01       	movw	r18, r4
    26b2:	81 01       	movw	r16, r2
    26b4:	20 70       	andi	r18, 0x00	; 0
    26b6:	30 70       	andi	r19, 0x00	; 0
    26b8:	21 96       	adiw	r28, 0x01	; 1
    26ba:	0c af       	std	Y+60, r16	; 0x3c
    26bc:	1d af       	std	Y+61, r17	; 0x3d
    26be:	2e af       	std	Y+62, r18	; 0x3e
    26c0:	3f af       	std	Y+63, r19	; 0x3f
    26c2:	21 97       	sbiw	r28, 0x01	; 1
    26c4:	c6 01       	movw	r24, r12
    26c6:	b5 01       	movw	r22, r10
    26c8:	a4 01       	movw	r20, r8
    26ca:	93 01       	movw	r18, r6
    26cc:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    26d0:	7b 01       	movw	r14, r22
    26d2:	8c 01       	movw	r16, r24
    26d4:	c6 01       	movw	r24, r12
    26d6:	b5 01       	movw	r22, r10
    26d8:	a4 01       	movw	r20, r8
    26da:	93 01       	movw	r18, r6
    26dc:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    26e0:	c9 01       	movw	r24, r18
    26e2:	da 01       	movw	r26, r20
    26e4:	25 96       	adiw	r28, 0x05	; 5
    26e6:	8c af       	std	Y+60, r24	; 0x3c
    26e8:	9d af       	std	Y+61, r25	; 0x3d
    26ea:	ae af       	std	Y+62, r26	; 0x3e
    26ec:	bf af       	std	Y+63, r27	; 0x3f
    26ee:	25 97       	sbiw	r28, 0x05	; 5
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	21 96       	adiw	r28, 0x01	; 1
    26f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    26f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    26fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    26fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    26fe:	21 97       	sbiw	r28, 0x01	; 1
    2700:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	87 01       	movw	r16, r14
    270a:	ff 24       	eor	r15, r15
    270c:	ee 24       	eor	r14, r14
    270e:	a9 a4       	ldd	r10, Y+41	; 0x29
    2710:	ba a4       	ldd	r11, Y+42	; 0x2a
    2712:	cb a4       	ldd	r12, Y+43	; 0x2b
    2714:	dc a4       	ldd	r13, Y+44	; 0x2c
    2716:	c6 01       	movw	r24, r12
    2718:	aa 27       	eor	r26, r26
    271a:	bb 27       	eor	r27, r27
    271c:	5c 01       	movw	r10, r24
    271e:	6d 01       	movw	r12, r26
    2720:	ae 28       	or	r10, r14
    2722:	bf 28       	or	r11, r15
    2724:	c0 2a       	or	r12, r16
    2726:	d1 2a       	or	r13, r17
    2728:	a2 16       	cp	r10, r18
    272a:	b3 06       	cpc	r11, r19
    272c:	c4 06       	cpc	r12, r20
    272e:	d5 06       	cpc	r13, r21
    2730:	60 f5       	brcc	.+88     	; 0x278a <__udivdi3+0x530>
    2732:	25 96       	adiw	r28, 0x05	; 5
    2734:	6c ad       	ldd	r22, Y+60	; 0x3c
    2736:	7d ad       	ldd	r23, Y+61	; 0x3d
    2738:	8e ad       	ldd	r24, Y+62	; 0x3e
    273a:	9f ad       	ldd	r25, Y+63	; 0x3f
    273c:	25 97       	sbiw	r28, 0x05	; 5
    273e:	61 50       	subi	r22, 0x01	; 1
    2740:	70 40       	sbci	r23, 0x00	; 0
    2742:	80 40       	sbci	r24, 0x00	; 0
    2744:	90 40       	sbci	r25, 0x00	; 0
    2746:	25 96       	adiw	r28, 0x05	; 5
    2748:	6c af       	std	Y+60, r22	; 0x3c
    274a:	7d af       	std	Y+61, r23	; 0x3d
    274c:	8e af       	std	Y+62, r24	; 0x3e
    274e:	9f af       	std	Y+63, r25	; 0x3f
    2750:	25 97       	sbiw	r28, 0x05	; 5
    2752:	a2 0c       	add	r10, r2
    2754:	b3 1c       	adc	r11, r3
    2756:	c4 1c       	adc	r12, r4
    2758:	d5 1c       	adc	r13, r5
    275a:	a2 14       	cp	r10, r2
    275c:	b3 04       	cpc	r11, r3
    275e:	c4 04       	cpc	r12, r4
    2760:	d5 04       	cpc	r13, r5
    2762:	98 f0       	brcs	.+38     	; 0x278a <__udivdi3+0x530>
    2764:	a2 16       	cp	r10, r18
    2766:	b3 06       	cpc	r11, r19
    2768:	c4 06       	cpc	r12, r20
    276a:	d5 06       	cpc	r13, r21
    276c:	70 f4       	brcc	.+28     	; 0x278a <__udivdi3+0x530>
    276e:	61 50       	subi	r22, 0x01	; 1
    2770:	70 40       	sbci	r23, 0x00	; 0
    2772:	80 40       	sbci	r24, 0x00	; 0
    2774:	90 40       	sbci	r25, 0x00	; 0
    2776:	25 96       	adiw	r28, 0x05	; 5
    2778:	6c af       	std	Y+60, r22	; 0x3c
    277a:	7d af       	std	Y+61, r23	; 0x3d
    277c:	8e af       	std	Y+62, r24	; 0x3e
    277e:	9f af       	std	Y+63, r25	; 0x3f
    2780:	25 97       	sbiw	r28, 0x05	; 5
    2782:	a2 0c       	add	r10, r2
    2784:	b3 1c       	adc	r11, r3
    2786:	c4 1c       	adc	r12, r4
    2788:	d5 1c       	adc	r13, r5
    278a:	a2 1a       	sub	r10, r18
    278c:	b3 0a       	sbc	r11, r19
    278e:	c4 0a       	sbc	r12, r20
    2790:	d5 0a       	sbc	r13, r21
    2792:	c6 01       	movw	r24, r12
    2794:	b5 01       	movw	r22, r10
    2796:	a4 01       	movw	r20, r8
    2798:	93 01       	movw	r18, r6
    279a:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    279e:	7b 01       	movw	r14, r22
    27a0:	8c 01       	movw	r16, r24
    27a2:	c6 01       	movw	r24, r12
    27a4:	b5 01       	movw	r22, r10
    27a6:	a4 01       	movw	r20, r8
    27a8:	93 01       	movw	r18, r6
    27aa:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    27ae:	c9 01       	movw	r24, r18
    27b0:	da 01       	movw	r26, r20
    27b2:	3c 01       	movw	r6, r24
    27b4:	4d 01       	movw	r8, r26
    27b6:	c4 01       	movw	r24, r8
    27b8:	b3 01       	movw	r22, r6
    27ba:	21 96       	adiw	r28, 0x01	; 1
    27bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    27be:	3d ad       	ldd	r19, Y+61	; 0x3d
    27c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    27c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    27c4:	21 97       	sbiw	r28, 0x01	; 1
    27c6:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
    27ce:	87 01       	movw	r16, r14
    27d0:	ff 24       	eor	r15, r15
    27d2:	ee 24       	eor	r14, r14
    27d4:	89 a5       	ldd	r24, Y+41	; 0x29
    27d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d8:	ab a5       	ldd	r26, Y+43	; 0x2b
    27da:	bc a5       	ldd	r27, Y+44	; 0x2c
    27dc:	a0 70       	andi	r26, 0x00	; 0
    27de:	b0 70       	andi	r27, 0x00	; 0
    27e0:	57 01       	movw	r10, r14
    27e2:	68 01       	movw	r12, r16
    27e4:	a8 2a       	or	r10, r24
    27e6:	b9 2a       	or	r11, r25
    27e8:	ca 2a       	or	r12, r26
    27ea:	db 2a       	or	r13, r27
    27ec:	a2 16       	cp	r10, r18
    27ee:	b3 06       	cpc	r11, r19
    27f0:	c4 06       	cpc	r12, r20
    27f2:	d5 06       	cpc	r13, r21
    27f4:	e0 f4       	brcc	.+56     	; 0x282e <__udivdi3+0x5d4>
    27f6:	08 94       	sec
    27f8:	61 08       	sbc	r6, r1
    27fa:	71 08       	sbc	r7, r1
    27fc:	81 08       	sbc	r8, r1
    27fe:	91 08       	sbc	r9, r1
    2800:	a2 0c       	add	r10, r2
    2802:	b3 1c       	adc	r11, r3
    2804:	c4 1c       	adc	r12, r4
    2806:	d5 1c       	adc	r13, r5
    2808:	a2 14       	cp	r10, r2
    280a:	b3 04       	cpc	r11, r3
    280c:	c4 04       	cpc	r12, r4
    280e:	d5 04       	cpc	r13, r5
    2810:	70 f0       	brcs	.+28     	; 0x282e <__udivdi3+0x5d4>
    2812:	a2 16       	cp	r10, r18
    2814:	b3 06       	cpc	r11, r19
    2816:	c4 06       	cpc	r12, r20
    2818:	d5 06       	cpc	r13, r21
    281a:	48 f4       	brcc	.+18     	; 0x282e <__udivdi3+0x5d4>
    281c:	08 94       	sec
    281e:	61 08       	sbc	r6, r1
    2820:	71 08       	sbc	r7, r1
    2822:	81 08       	sbc	r8, r1
    2824:	91 08       	sbc	r9, r1
    2826:	a2 0c       	add	r10, r2
    2828:	b3 1c       	adc	r11, r3
    282a:	c4 1c       	adc	r12, r4
    282c:	d5 1c       	adc	r13, r5
    282e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2830:	9e a5       	ldd	r25, Y+46	; 0x2e
    2832:	af a5       	ldd	r26, Y+47	; 0x2f
    2834:	b8 a9       	ldd	r27, Y+48	; 0x30
    2836:	6f 96       	adiw	r28, 0x1f	; 31
    2838:	0f ac       	ldd	r0, Y+63	; 0x3f
    283a:	6f 97       	sbiw	r28, 0x1f	; 31
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__udivdi3+0x5ec>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	aa 1f       	adc	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	0a 94       	dec	r0
    2848:	d2 f7       	brpl	.-12     	; 0x283e <__udivdi3+0x5e4>
    284a:	8d a7       	std	Y+45, r24	; 0x2d
    284c:	9e a7       	std	Y+46, r25	; 0x2e
    284e:	af a7       	std	Y+47, r26	; 0x2f
    2850:	b8 ab       	std	Y+48, r27	; 0x30
    2852:	a2 1a       	sub	r10, r18
    2854:	b3 0a       	sbc	r11, r19
    2856:	c4 0a       	sbc	r12, r20
    2858:	d5 0a       	sbc	r13, r21
    285a:	25 96       	adiw	r28, 0x05	; 5
    285c:	ec ac       	ldd	r14, Y+60	; 0x3c
    285e:	fd ac       	ldd	r15, Y+61	; 0x3d
    2860:	0e ad       	ldd	r16, Y+62	; 0x3e
    2862:	1f ad       	ldd	r17, Y+63	; 0x3f
    2864:	25 97       	sbiw	r28, 0x05	; 5
    2866:	d7 01       	movw	r26, r14
    2868:	99 27       	eor	r25, r25
    286a:	88 27       	eor	r24, r24
    286c:	68 2a       	or	r6, r24
    286e:	79 2a       	or	r7, r25
    2870:	8a 2a       	or	r8, r26
    2872:	9b 2a       	or	r9, r27
    2874:	82 01       	movw	r16, r4
    2876:	22 27       	eor	r18, r18
    2878:	33 27       	eor	r19, r19
    287a:	29 96       	adiw	r28, 0x09	; 9
    287c:	0c af       	std	Y+60, r16	; 0x3c
    287e:	1d af       	std	Y+61, r17	; 0x3d
    2880:	2e af       	std	Y+62, r18	; 0x3e
    2882:	3f af       	std	Y+63, r19	; 0x3f
    2884:	29 97       	sbiw	r28, 0x09	; 9
    2886:	a2 01       	movw	r20, r4
    2888:	91 01       	movw	r18, r2
    288a:	40 70       	andi	r20, 0x00	; 0
    288c:	50 70       	andi	r21, 0x00	; 0
    288e:	2d 96       	adiw	r28, 0x0d	; 13
    2890:	2c af       	std	Y+60, r18	; 0x3c
    2892:	3d af       	std	Y+61, r19	; 0x3d
    2894:	4e af       	std	Y+62, r20	; 0x3e
    2896:	5f af       	std	Y+63, r21	; 0x3f
    2898:	2d 97       	sbiw	r28, 0x0d	; 13
    289a:	c6 01       	movw	r24, r12
    289c:	b5 01       	movw	r22, r10
    289e:	29 96       	adiw	r28, 0x09	; 9
    28a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    28a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    28a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    28a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    28a8:	29 97       	sbiw	r28, 0x09	; 9
    28aa:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    28ae:	7b 01       	movw	r14, r22
    28b0:	8c 01       	movw	r16, r24
    28b2:	c6 01       	movw	r24, r12
    28b4:	b5 01       	movw	r22, r10
    28b6:	29 96       	adiw	r28, 0x09	; 9
    28b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    28ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    28bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    28be:	5f ad       	ldd	r21, Y+63	; 0x3f
    28c0:	29 97       	sbiw	r28, 0x09	; 9
    28c2:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    28c6:	c9 01       	movw	r24, r18
    28c8:	da 01       	movw	r26, r20
    28ca:	61 96       	adiw	r28, 0x11	; 17
    28cc:	8c af       	std	Y+60, r24	; 0x3c
    28ce:	9d af       	std	Y+61, r25	; 0x3d
    28d0:	ae af       	std	Y+62, r26	; 0x3e
    28d2:	bf af       	std	Y+63, r27	; 0x3f
    28d4:	61 97       	sbiw	r28, 0x11	; 17
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	2d 96       	adiw	r28, 0x0d	; 13
    28dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    28de:	3d ad       	ldd	r19, Y+61	; 0x3d
    28e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    28e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    28e4:	2d 97       	sbiw	r28, 0x0d	; 13
    28e6:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	87 01       	movw	r16, r14
    28f0:	ff 24       	eor	r15, r15
    28f2:	ee 24       	eor	r14, r14
    28f4:	ad a4       	ldd	r10, Y+45	; 0x2d
    28f6:	be a4       	ldd	r11, Y+46	; 0x2e
    28f8:	cf a4       	ldd	r12, Y+47	; 0x2f
    28fa:	d8 a8       	ldd	r13, Y+48	; 0x30
    28fc:	c6 01       	movw	r24, r12
    28fe:	aa 27       	eor	r26, r26
    2900:	bb 27       	eor	r27, r27
    2902:	57 01       	movw	r10, r14
    2904:	68 01       	movw	r12, r16
    2906:	a8 2a       	or	r10, r24
    2908:	b9 2a       	or	r11, r25
    290a:	ca 2a       	or	r12, r26
    290c:	db 2a       	or	r13, r27
    290e:	a2 16       	cp	r10, r18
    2910:	b3 06       	cpc	r11, r19
    2912:	c4 06       	cpc	r12, r20
    2914:	d5 06       	cpc	r13, r21
    2916:	60 f5       	brcc	.+88     	; 0x2970 <__udivdi3+0x716>
    2918:	61 96       	adiw	r28, 0x11	; 17
    291a:	6c ad       	ldd	r22, Y+60	; 0x3c
    291c:	7d ad       	ldd	r23, Y+61	; 0x3d
    291e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2920:	9f ad       	ldd	r25, Y+63	; 0x3f
    2922:	61 97       	sbiw	r28, 0x11	; 17
    2924:	61 50       	subi	r22, 0x01	; 1
    2926:	70 40       	sbci	r23, 0x00	; 0
    2928:	80 40       	sbci	r24, 0x00	; 0
    292a:	90 40       	sbci	r25, 0x00	; 0
    292c:	61 96       	adiw	r28, 0x11	; 17
    292e:	6c af       	std	Y+60, r22	; 0x3c
    2930:	7d af       	std	Y+61, r23	; 0x3d
    2932:	8e af       	std	Y+62, r24	; 0x3e
    2934:	9f af       	std	Y+63, r25	; 0x3f
    2936:	61 97       	sbiw	r28, 0x11	; 17
    2938:	a2 0c       	add	r10, r2
    293a:	b3 1c       	adc	r11, r3
    293c:	c4 1c       	adc	r12, r4
    293e:	d5 1c       	adc	r13, r5
    2940:	a2 14       	cp	r10, r2
    2942:	b3 04       	cpc	r11, r3
    2944:	c4 04       	cpc	r12, r4
    2946:	d5 04       	cpc	r13, r5
    2948:	98 f0       	brcs	.+38     	; 0x2970 <__udivdi3+0x716>
    294a:	a2 16       	cp	r10, r18
    294c:	b3 06       	cpc	r11, r19
    294e:	c4 06       	cpc	r12, r20
    2950:	d5 06       	cpc	r13, r21
    2952:	70 f4       	brcc	.+28     	; 0x2970 <__udivdi3+0x716>
    2954:	61 50       	subi	r22, 0x01	; 1
    2956:	70 40       	sbci	r23, 0x00	; 0
    2958:	80 40       	sbci	r24, 0x00	; 0
    295a:	90 40       	sbci	r25, 0x00	; 0
    295c:	61 96       	adiw	r28, 0x11	; 17
    295e:	6c af       	std	Y+60, r22	; 0x3c
    2960:	7d af       	std	Y+61, r23	; 0x3d
    2962:	8e af       	std	Y+62, r24	; 0x3e
    2964:	9f af       	std	Y+63, r25	; 0x3f
    2966:	61 97       	sbiw	r28, 0x11	; 17
    2968:	a2 0c       	add	r10, r2
    296a:	b3 1c       	adc	r11, r3
    296c:	c4 1c       	adc	r12, r4
    296e:	d5 1c       	adc	r13, r5
    2970:	a2 1a       	sub	r10, r18
    2972:	b3 0a       	sbc	r11, r19
    2974:	c4 0a       	sbc	r12, r20
    2976:	d5 0a       	sbc	r13, r21
    2978:	c6 01       	movw	r24, r12
    297a:	b5 01       	movw	r22, r10
    297c:	29 96       	adiw	r28, 0x09	; 9
    297e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2980:	3d ad       	ldd	r19, Y+61	; 0x3d
    2982:	4e ad       	ldd	r20, Y+62	; 0x3e
    2984:	5f ad       	ldd	r21, Y+63	; 0x3f
    2986:	29 97       	sbiw	r28, 0x09	; 9
    2988:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    298c:	7b 01       	movw	r14, r22
    298e:	8c 01       	movw	r16, r24
    2990:	c6 01       	movw	r24, r12
    2992:	b5 01       	movw	r22, r10
    2994:	29 96       	adiw	r28, 0x09	; 9
    2996:	2c ad       	ldd	r18, Y+60	; 0x3c
    2998:	3d ad       	ldd	r19, Y+61	; 0x3d
    299a:	4e ad       	ldd	r20, Y+62	; 0x3e
    299c:	5f ad       	ldd	r21, Y+63	; 0x3f
    299e:	29 97       	sbiw	r28, 0x09	; 9
    29a0:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    29a4:	c9 01       	movw	r24, r18
    29a6:	da 01       	movw	r26, r20
    29a8:	5c 01       	movw	r10, r24
    29aa:	6d 01       	movw	r12, r26
    29ac:	c6 01       	movw	r24, r12
    29ae:	b5 01       	movw	r22, r10
    29b0:	2d 96       	adiw	r28, 0x0d	; 13
    29b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    29b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    29b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    29b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    29ba:	2d 97       	sbiw	r28, 0x0d	; 13
    29bc:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	87 01       	movw	r16, r14
    29c6:	ff 24       	eor	r15, r15
    29c8:	ee 24       	eor	r14, r14
    29ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    29cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ce:	af a5       	ldd	r26, Y+47	; 0x2f
    29d0:	b8 a9       	ldd	r27, Y+48	; 0x30
    29d2:	a0 70       	andi	r26, 0x00	; 0
    29d4:	b0 70       	andi	r27, 0x00	; 0
    29d6:	e8 2a       	or	r14, r24
    29d8:	f9 2a       	or	r15, r25
    29da:	0a 2b       	or	r16, r26
    29dc:	1b 2b       	or	r17, r27
    29de:	e2 16       	cp	r14, r18
    29e0:	f3 06       	cpc	r15, r19
    29e2:	04 07       	cpc	r16, r20
    29e4:	15 07       	cpc	r17, r21
    29e6:	c0 f4       	brcc	.+48     	; 0x2a18 <__udivdi3+0x7be>
    29e8:	08 94       	sec
    29ea:	a1 08       	sbc	r10, r1
    29ec:	b1 08       	sbc	r11, r1
    29ee:	c1 08       	sbc	r12, r1
    29f0:	d1 08       	sbc	r13, r1
    29f2:	e2 0c       	add	r14, r2
    29f4:	f3 1c       	adc	r15, r3
    29f6:	04 1d       	adc	r16, r4
    29f8:	15 1d       	adc	r17, r5
    29fa:	e2 14       	cp	r14, r2
    29fc:	f3 04       	cpc	r15, r3
    29fe:	04 05       	cpc	r16, r4
    2a00:	15 05       	cpc	r17, r5
    2a02:	50 f0       	brcs	.+20     	; 0x2a18 <__udivdi3+0x7be>
    2a04:	e2 16       	cp	r14, r18
    2a06:	f3 06       	cpc	r15, r19
    2a08:	04 07       	cpc	r16, r20
    2a0a:	15 07       	cpc	r17, r21
    2a0c:	28 f4       	brcc	.+10     	; 0x2a18 <__udivdi3+0x7be>
    2a0e:	08 94       	sec
    2a10:	a1 08       	sbc	r10, r1
    2a12:	b1 08       	sbc	r11, r1
    2a14:	c1 08       	sbc	r12, r1
    2a16:	d1 08       	sbc	r13, r1
    2a18:	61 96       	adiw	r28, 0x11	; 17
    2a1a:	ec ac       	ldd	r14, Y+60	; 0x3c
    2a1c:	fd ac       	ldd	r15, Y+61	; 0x3d
    2a1e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a20:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a22:	61 97       	sbiw	r28, 0x11	; 17
    2a24:	d7 01       	movw	r26, r14
    2a26:	99 27       	eor	r25, r25
    2a28:	88 27       	eor	r24, r24
    2a2a:	96 01       	movw	r18, r12
    2a2c:	85 01       	movw	r16, r10
    2a2e:	08 2b       	or	r16, r24
    2a30:	19 2b       	or	r17, r25
    2a32:	2a 2b       	or	r18, r26
    2a34:	3b 2b       	or	r19, r27
    2a36:	09 ab       	std	Y+49, r16	; 0x31
    2a38:	1a ab       	std	Y+50, r17	; 0x32
    2a3a:	2b ab       	std	Y+51, r18	; 0x33
    2a3c:	3c ab       	std	Y+52, r19	; 0x34
    2a3e:	62 c2       	rjmp	.+1220   	; 0x2f04 <__udivdi3+0xcaa>
    2a40:	6e 14       	cp	r6, r14
    2a42:	7f 04       	cpc	r7, r15
    2a44:	80 06       	cpc	r8, r16
    2a46:	91 06       	cpc	r9, r17
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <__udivdi3+0x7f2>
    2a4a:	51 c2       	rjmp	.+1186   	; 0x2eee <__udivdi3+0xc94>
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	e2 16       	cp	r14, r18
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	f2 06       	cpc	r15, r18
    2a54:	21 e0       	ldi	r18, 0x01	; 1
    2a56:	02 07       	cpc	r16, r18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	12 07       	cpc	r17, r18
    2a5c:	88 f4       	brcc	.+34     	; 0x2a80 <__udivdi3+0x826>
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	e3 16       	cp	r14, r19
    2a62:	f1 04       	cpc	r15, r1
    2a64:	01 05       	cpc	r16, r1
    2a66:	11 05       	cpc	r17, r1
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <__udivdi3+0x81c>
    2a6a:	28 f0       	brcs	.+10     	; 0x2a76 <__udivdi3+0x81c>
    2a6c:	48 e0       	ldi	r20, 0x08	; 8
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	17 c0       	rjmp	.+46     	; 0x2aa4 <__udivdi3+0x84a>
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	12 c0       	rjmp	.+36     	; 0x2aa4 <__udivdi3+0x84a>
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	e4 16       	cp	r14, r20
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	f4 06       	cpc	r15, r20
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	04 07       	cpc	r16, r20
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	14 07       	cpc	r17, r20
    2a90:	28 f0       	brcs	.+10     	; 0x2a9c <__udivdi3+0x842>
    2a92:	48 e1       	ldi	r20, 0x18	; 24
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <__udivdi3+0x84a>
    2a9c:	40 e1       	ldi	r20, 0x10	; 16
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	d8 01       	movw	r26, r16
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	04 2e       	mov	r0, r20
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <__udivdi3+0x85a>
    2aac:	b6 95       	lsr	r27
    2aae:	a7 95       	ror	r26
    2ab0:	97 95       	ror	r25
    2ab2:	87 95       	ror	r24
    2ab4:	0a 94       	dec	r0
    2ab6:	d2 f7       	brpl	.-12     	; 0x2aac <__udivdi3+0x852>
    2ab8:	85 53       	subi	r24, 0x35	; 53
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	dc 01       	movw	r26, r24
    2abe:	2c 91       	ld	r18, X
    2ac0:	30 e2       	ldi	r19, 0x20	; 32
    2ac2:	a3 2e       	mov	r10, r19
    2ac4:	b1 2c       	mov	r11, r1
    2ac6:	c1 2c       	mov	r12, r1
    2ac8:	d1 2c       	mov	r13, r1
    2aca:	d6 01       	movw	r26, r12
    2acc:	c5 01       	movw	r24, r10
    2ace:	84 1b       	sub	r24, r20
    2ad0:	95 0b       	sbc	r25, r21
    2ad2:	a6 0b       	sbc	r26, r22
    2ad4:	b7 0b       	sbc	r27, r23
    2ad6:	82 1b       	sub	r24, r18
    2ad8:	91 09       	sbc	r25, r1
    2ada:	a1 09       	sbc	r26, r1
    2adc:	b1 09       	sbc	r27, r1
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	a1 05       	cpc	r26, r1
    2ae2:	b1 05       	cpc	r27, r1
    2ae4:	89 f4       	brne	.+34     	; 0x2b08 <__udivdi3+0x8ae>
    2ae6:	e6 14       	cp	r14, r6
    2ae8:	f7 04       	cpc	r15, r7
    2aea:	08 05       	cpc	r16, r8
    2aec:	19 05       	cpc	r17, r9
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <__udivdi3+0x898>
    2af0:	f2 c1       	rjmp	.+996    	; 0x2ed6 <__udivdi3+0xc7c>
    2af2:	6d a4       	ldd	r6, Y+45	; 0x2d
    2af4:	7e a4       	ldd	r7, Y+46	; 0x2e
    2af6:	8f a4       	ldd	r8, Y+47	; 0x2f
    2af8:	98 a8       	ldd	r9, Y+48	; 0x30
    2afa:	62 14       	cp	r6, r2
    2afc:	73 04       	cpc	r7, r3
    2afe:	84 04       	cpc	r8, r4
    2b00:	95 04       	cpc	r9, r5
    2b02:	08 f0       	brcs	.+2      	; 0x2b06 <__udivdi3+0x8ac>
    2b04:	e8 c1       	rjmp	.+976    	; 0x2ed6 <__udivdi3+0xc7c>
    2b06:	f3 c1       	rjmp	.+998    	; 0x2eee <__udivdi3+0xc94>
    2b08:	6e 96       	adiw	r28, 0x1e	; 30
    2b0a:	8f af       	std	Y+63, r24	; 0x3f
    2b0c:	6e 97       	sbiw	r28, 0x1e	; 30
    2b0e:	08 2e       	mov	r0, r24
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <__udivdi3+0x8c0>
    2b12:	ee 0c       	add	r14, r14
    2b14:	ff 1c       	adc	r15, r15
    2b16:	00 1f       	adc	r16, r16
    2b18:	11 1f       	adc	r17, r17
    2b1a:	0a 94       	dec	r0
    2b1c:	d2 f7       	brpl	.-12     	; 0x2b12 <__udivdi3+0x8b8>
    2b1e:	6a 2d       	mov	r22, r10
    2b20:	68 1b       	sub	r22, r24
    2b22:	d2 01       	movw	r26, r4
    2b24:	c1 01       	movw	r24, r2
    2b26:	06 2e       	mov	r0, r22
    2b28:	04 c0       	rjmp	.+8      	; 0x2b32 <__udivdi3+0x8d8>
    2b2a:	b6 95       	lsr	r27
    2b2c:	a7 95       	ror	r26
    2b2e:	97 95       	ror	r25
    2b30:	87 95       	ror	r24
    2b32:	0a 94       	dec	r0
    2b34:	d2 f7       	brpl	.-12     	; 0x2b2a <__udivdi3+0x8d0>
    2b36:	5c 01       	movw	r10, r24
    2b38:	6d 01       	movw	r12, r26
    2b3a:	ae 28       	or	r10, r14
    2b3c:	bf 28       	or	r11, r15
    2b3e:	c0 2a       	or	r12, r16
    2b40:	d1 2a       	or	r13, r17
    2b42:	ad a2       	std	Y+37, r10	; 0x25
    2b44:	be a2       	std	Y+38, r11	; 0x26
    2b46:	cf a2       	std	Y+39, r12	; 0x27
    2b48:	d8 a6       	std	Y+40, r13	; 0x28
    2b4a:	72 01       	movw	r14, r4
    2b4c:	61 01       	movw	r12, r2
    2b4e:	6e 96       	adiw	r28, 0x1e	; 30
    2b50:	0f ac       	ldd	r0, Y+63	; 0x3f
    2b52:	6e 97       	sbiw	r28, 0x1e	; 30
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <__udivdi3+0x904>
    2b56:	cc 0c       	add	r12, r12
    2b58:	dd 1c       	adc	r13, r13
    2b5a:	ee 1c       	adc	r14, r14
    2b5c:	ff 1c       	adc	r15, r15
    2b5e:	0a 94       	dec	r0
    2b60:	d2 f7       	brpl	.-12     	; 0x2b56 <__udivdi3+0x8fc>
    2b62:	c9 a2       	std	Y+33, r12	; 0x21
    2b64:	da a2       	std	Y+34, r13	; 0x22
    2b66:	eb a2       	std	Y+35, r14	; 0x23
    2b68:	fc a2       	std	Y+36, r15	; 0x24
    2b6a:	64 01       	movw	r12, r8
    2b6c:	53 01       	movw	r10, r6
    2b6e:	06 2e       	mov	r0, r22
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <__udivdi3+0x920>
    2b72:	d6 94       	lsr	r13
    2b74:	c7 94       	ror	r12
    2b76:	b7 94       	ror	r11
    2b78:	a7 94       	ror	r10
    2b7a:	0a 94       	dec	r0
    2b7c:	d2 f7       	brpl	.-12     	; 0x2b72 <__udivdi3+0x918>
    2b7e:	d4 01       	movw	r26, r8
    2b80:	c3 01       	movw	r24, r6
    2b82:	6e 96       	adiw	r28, 0x1e	; 30
    2b84:	0f ac       	ldd	r0, Y+63	; 0x3f
    2b86:	6e 97       	sbiw	r28, 0x1e	; 30
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__udivdi3+0x938>
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	0a 94       	dec	r0
    2b94:	d2 f7       	brpl	.-12     	; 0x2b8a <__udivdi3+0x930>
    2b96:	ed a4       	ldd	r14, Y+45	; 0x2d
    2b98:	fe a4       	ldd	r15, Y+46	; 0x2e
    2b9a:	0f a5       	ldd	r16, Y+47	; 0x2f
    2b9c:	18 a9       	ldd	r17, Y+48	; 0x30
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <__udivdi3+0x94e>
    2ba0:	16 95       	lsr	r17
    2ba2:	07 95       	ror	r16
    2ba4:	f7 94       	ror	r15
    2ba6:	e7 94       	ror	r14
    2ba8:	6a 95       	dec	r22
    2baa:	d2 f7       	brpl	.-12     	; 0x2ba0 <__udivdi3+0x946>
    2bac:	37 01       	movw	r6, r14
    2bae:	48 01       	movw	r8, r16
    2bb0:	68 2a       	or	r6, r24
    2bb2:	79 2a       	or	r7, r25
    2bb4:	8a 2a       	or	r8, r26
    2bb6:	9b 2a       	or	r9, r27
    2bb8:	6d 8e       	std	Y+29, r6	; 0x1d
    2bba:	7e 8e       	std	Y+30, r7	; 0x1e
    2bbc:	8f 8e       	std	Y+31, r8	; 0x1f
    2bbe:	98 a2       	std	Y+32, r9	; 0x20
    2bc0:	ed a0       	ldd	r14, Y+37	; 0x25
    2bc2:	fe a0       	ldd	r15, Y+38	; 0x26
    2bc4:	0f a1       	ldd	r16, Y+39	; 0x27
    2bc6:	18 a5       	ldd	r17, Y+40	; 0x28
    2bc8:	38 01       	movw	r6, r16
    2bca:	88 24       	eor	r8, r8
    2bcc:	99 24       	eor	r9, r9
    2bce:	98 01       	movw	r18, r16
    2bd0:	87 01       	movw	r16, r14
    2bd2:	20 70       	andi	r18, 0x00	; 0
    2bd4:	30 70       	andi	r19, 0x00	; 0
    2bd6:	65 96       	adiw	r28, 0x15	; 21
    2bd8:	0c af       	std	Y+60, r16	; 0x3c
    2bda:	1d af       	std	Y+61, r17	; 0x3d
    2bdc:	2e af       	std	Y+62, r18	; 0x3e
    2bde:	3f af       	std	Y+63, r19	; 0x3f
    2be0:	65 97       	sbiw	r28, 0x15	; 21
    2be2:	c6 01       	movw	r24, r12
    2be4:	b5 01       	movw	r22, r10
    2be6:	a4 01       	movw	r20, r8
    2be8:	93 01       	movw	r18, r6
    2bea:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    2bee:	7b 01       	movw	r14, r22
    2bf0:	8c 01       	movw	r16, r24
    2bf2:	c6 01       	movw	r24, r12
    2bf4:	b5 01       	movw	r22, r10
    2bf6:	a4 01       	movw	r20, r8
    2bf8:	93 01       	movw	r18, r6
    2bfa:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    2bfe:	c9 01       	movw	r24, r18
    2c00:	da 01       	movw	r26, r20
    2c02:	1c 01       	movw	r2, r24
    2c04:	2d 01       	movw	r4, r26
    2c06:	c2 01       	movw	r24, r4
    2c08:	b1 01       	movw	r22, r2
    2c0a:	65 96       	adiw	r28, 0x15	; 21
    2c0c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c0e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c10:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c12:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c14:	65 97       	sbiw	r28, 0x15	; 21
    2c16:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2c1a:	9b 01       	movw	r18, r22
    2c1c:	ac 01       	movw	r20, r24
    2c1e:	87 01       	movw	r16, r14
    2c20:	ff 24       	eor	r15, r15
    2c22:	ee 24       	eor	r14, r14
    2c24:	ad 8c       	ldd	r10, Y+29	; 0x1d
    2c26:	be 8c       	ldd	r11, Y+30	; 0x1e
    2c28:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2c2a:	d8 a0       	ldd	r13, Y+32	; 0x20
    2c2c:	c6 01       	movw	r24, r12
    2c2e:	aa 27       	eor	r26, r26
    2c30:	bb 27       	eor	r27, r27
    2c32:	57 01       	movw	r10, r14
    2c34:	68 01       	movw	r12, r16
    2c36:	a8 2a       	or	r10, r24
    2c38:	b9 2a       	or	r11, r25
    2c3a:	ca 2a       	or	r12, r26
    2c3c:	db 2a       	or	r13, r27
    2c3e:	a2 16       	cp	r10, r18
    2c40:	b3 06       	cpc	r11, r19
    2c42:	c4 06       	cpc	r12, r20
    2c44:	d5 06       	cpc	r13, r21
    2c46:	00 f5       	brcc	.+64     	; 0x2c88 <__udivdi3+0xa2e>
    2c48:	08 94       	sec
    2c4a:	21 08       	sbc	r2, r1
    2c4c:	31 08       	sbc	r3, r1
    2c4e:	41 08       	sbc	r4, r1
    2c50:	51 08       	sbc	r5, r1
    2c52:	ed a0       	ldd	r14, Y+37	; 0x25
    2c54:	fe a0       	ldd	r15, Y+38	; 0x26
    2c56:	0f a1       	ldd	r16, Y+39	; 0x27
    2c58:	18 a5       	ldd	r17, Y+40	; 0x28
    2c5a:	ae 0c       	add	r10, r14
    2c5c:	bf 1c       	adc	r11, r15
    2c5e:	c0 1e       	adc	r12, r16
    2c60:	d1 1e       	adc	r13, r17
    2c62:	ae 14       	cp	r10, r14
    2c64:	bf 04       	cpc	r11, r15
    2c66:	c0 06       	cpc	r12, r16
    2c68:	d1 06       	cpc	r13, r17
    2c6a:	70 f0       	brcs	.+28     	; 0x2c88 <__udivdi3+0xa2e>
    2c6c:	a2 16       	cp	r10, r18
    2c6e:	b3 06       	cpc	r11, r19
    2c70:	c4 06       	cpc	r12, r20
    2c72:	d5 06       	cpc	r13, r21
    2c74:	48 f4       	brcc	.+18     	; 0x2c88 <__udivdi3+0xa2e>
    2c76:	08 94       	sec
    2c78:	21 08       	sbc	r2, r1
    2c7a:	31 08       	sbc	r3, r1
    2c7c:	41 08       	sbc	r4, r1
    2c7e:	51 08       	sbc	r5, r1
    2c80:	ae 0c       	add	r10, r14
    2c82:	bf 1c       	adc	r11, r15
    2c84:	c0 1e       	adc	r12, r16
    2c86:	d1 1e       	adc	r13, r17
    2c88:	a2 1a       	sub	r10, r18
    2c8a:	b3 0a       	sbc	r11, r19
    2c8c:	c4 0a       	sbc	r12, r20
    2c8e:	d5 0a       	sbc	r13, r21
    2c90:	c6 01       	movw	r24, r12
    2c92:	b5 01       	movw	r22, r10
    2c94:	a4 01       	movw	r20, r8
    2c96:	93 01       	movw	r18, r6
    2c98:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    2c9c:	7b 01       	movw	r14, r22
    2c9e:	8c 01       	movw	r16, r24
    2ca0:	c6 01       	movw	r24, r12
    2ca2:	b5 01       	movw	r22, r10
    2ca4:	a4 01       	movw	r20, r8
    2ca6:	93 01       	movw	r18, r6
    2ca8:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    2cac:	c9 01       	movw	r24, r18
    2cae:	da 01       	movw	r26, r20
    2cb0:	3c 01       	movw	r6, r24
    2cb2:	4d 01       	movw	r8, r26
    2cb4:	c4 01       	movw	r24, r8
    2cb6:	b3 01       	movw	r22, r6
    2cb8:	65 96       	adiw	r28, 0x15	; 21
    2cba:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cc2:	65 97       	sbiw	r28, 0x15	; 21
    2cc4:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2cc8:	9b 01       	movw	r18, r22
    2cca:	ac 01       	movw	r20, r24
    2ccc:	87 01       	movw	r16, r14
    2cce:	ff 24       	eor	r15, r15
    2cd0:	ee 24       	eor	r14, r14
    2cd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd6:	af 8d       	ldd	r26, Y+31	; 0x1f
    2cd8:	b8 a1       	ldd	r27, Y+32	; 0x20
    2cda:	a0 70       	andi	r26, 0x00	; 0
    2cdc:	b0 70       	andi	r27, 0x00	; 0
    2cde:	57 01       	movw	r10, r14
    2ce0:	68 01       	movw	r12, r16
    2ce2:	a8 2a       	or	r10, r24
    2ce4:	b9 2a       	or	r11, r25
    2ce6:	ca 2a       	or	r12, r26
    2ce8:	db 2a       	or	r13, r27
    2cea:	a2 16       	cp	r10, r18
    2cec:	b3 06       	cpc	r11, r19
    2cee:	c4 06       	cpc	r12, r20
    2cf0:	d5 06       	cpc	r13, r21
    2cf2:	00 f5       	brcc	.+64     	; 0x2d34 <__udivdi3+0xada>
    2cf4:	08 94       	sec
    2cf6:	61 08       	sbc	r6, r1
    2cf8:	71 08       	sbc	r7, r1
    2cfa:	81 08       	sbc	r8, r1
    2cfc:	91 08       	sbc	r9, r1
    2cfe:	6d a1       	ldd	r22, Y+37	; 0x25
    2d00:	7e a1       	ldd	r23, Y+38	; 0x26
    2d02:	8f a1       	ldd	r24, Y+39	; 0x27
    2d04:	98 a5       	ldd	r25, Y+40	; 0x28
    2d06:	a6 0e       	add	r10, r22
    2d08:	b7 1e       	adc	r11, r23
    2d0a:	c8 1e       	adc	r12, r24
    2d0c:	d9 1e       	adc	r13, r25
    2d0e:	a6 16       	cp	r10, r22
    2d10:	b7 06       	cpc	r11, r23
    2d12:	c8 06       	cpc	r12, r24
    2d14:	d9 06       	cpc	r13, r25
    2d16:	70 f0       	brcs	.+28     	; 0x2d34 <__udivdi3+0xada>
    2d18:	a2 16       	cp	r10, r18
    2d1a:	b3 06       	cpc	r11, r19
    2d1c:	c4 06       	cpc	r12, r20
    2d1e:	d5 06       	cpc	r13, r21
    2d20:	48 f4       	brcc	.+18     	; 0x2d34 <__udivdi3+0xada>
    2d22:	08 94       	sec
    2d24:	61 08       	sbc	r6, r1
    2d26:	71 08       	sbc	r7, r1
    2d28:	81 08       	sbc	r8, r1
    2d2a:	91 08       	sbc	r9, r1
    2d2c:	a6 0e       	add	r10, r22
    2d2e:	b7 1e       	adc	r11, r23
    2d30:	c8 1e       	adc	r12, r24
    2d32:	d9 1e       	adc	r13, r25
    2d34:	d6 01       	movw	r26, r12
    2d36:	c5 01       	movw	r24, r10
    2d38:	82 1b       	sub	r24, r18
    2d3a:	93 0b       	sbc	r25, r19
    2d3c:	a4 0b       	sbc	r26, r20
    2d3e:	b5 0b       	sbc	r27, r21
    2d40:	89 8f       	std	Y+25, r24	; 0x19
    2d42:	9a 8f       	std	Y+26, r25	; 0x1a
    2d44:	ab 8f       	std	Y+27, r26	; 0x1b
    2d46:	bc 8f       	std	Y+28, r27	; 0x1c
    2d48:	d1 01       	movw	r26, r2
    2d4a:	99 27       	eor	r25, r25
    2d4c:	88 27       	eor	r24, r24
    2d4e:	64 01       	movw	r12, r8
    2d50:	53 01       	movw	r10, r6
    2d52:	a8 2a       	or	r10, r24
    2d54:	b9 2a       	or	r11, r25
    2d56:	ca 2a       	or	r12, r26
    2d58:	db 2a       	or	r13, r27
    2d5a:	a9 aa       	std	Y+49, r10	; 0x31
    2d5c:	ba aa       	std	Y+50, r11	; 0x32
    2d5e:	cb aa       	std	Y+51, r12	; 0x33
    2d60:	dc aa       	std	Y+52, r13	; 0x34
    2d62:	86 01       	movw	r16, r12
    2d64:	75 01       	movw	r14, r10
    2d66:	2f ef       	ldi	r18, 0xFF	; 255
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	e2 22       	and	r14, r18
    2d70:	f3 22       	and	r15, r19
    2d72:	04 23       	and	r16, r20
    2d74:	15 23       	and	r17, r21
    2d76:	a6 01       	movw	r20, r12
    2d78:	66 27       	eor	r22, r22
    2d7a:	77 27       	eor	r23, r23
    2d7c:	6d 96       	adiw	r28, 0x1d	; 29
    2d7e:	4c af       	std	Y+60, r20	; 0x3c
    2d80:	5d af       	std	Y+61, r21	; 0x3d
    2d82:	6e af       	std	Y+62, r22	; 0x3e
    2d84:	7f af       	std	Y+63, r23	; 0x3f
    2d86:	6d 97       	sbiw	r28, 0x1d	; 29
    2d88:	a9 a0       	ldd	r10, Y+33	; 0x21
    2d8a:	ba a0       	ldd	r11, Y+34	; 0x22
    2d8c:	cb a0       	ldd	r12, Y+35	; 0x23
    2d8e:	dc a0       	ldd	r13, Y+36	; 0x24
    2d90:	6f ef       	ldi	r22, 0xFF	; 255
    2d92:	7f ef       	ldi	r23, 0xFF	; 255
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a6 22       	and	r10, r22
    2d9a:	b7 22       	and	r11, r23
    2d9c:	c8 22       	and	r12, r24
    2d9e:	d9 22       	and	r13, r25
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	9a a1       	ldd	r25, Y+34	; 0x22
    2da4:	ab a1       	ldd	r26, Y+35	; 0x23
    2da6:	bc a1       	ldd	r27, Y+36	; 0x24
    2da8:	1d 01       	movw	r2, r26
    2daa:	44 24       	eor	r4, r4
    2dac:	55 24       	eor	r5, r5
    2dae:	c8 01       	movw	r24, r16
    2db0:	b7 01       	movw	r22, r14
    2db2:	a6 01       	movw	r20, r12
    2db4:	95 01       	movw	r18, r10
    2db6:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2dba:	69 96       	adiw	r28, 0x19	; 25
    2dbc:	6c af       	std	Y+60, r22	; 0x3c
    2dbe:	7d af       	std	Y+61, r23	; 0x3d
    2dc0:	8e af       	std	Y+62, r24	; 0x3e
    2dc2:	9f af       	std	Y+63, r25	; 0x3f
    2dc4:	69 97       	sbiw	r28, 0x19	; 25
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	b7 01       	movw	r22, r14
    2dca:	a2 01       	movw	r20, r4
    2dcc:	91 01       	movw	r18, r2
    2dce:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2dd2:	3b 01       	movw	r6, r22
    2dd4:	4c 01       	movw	r8, r24
    2dd6:	6d 96       	adiw	r28, 0x1d	; 29
    2dd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dda:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ddc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dde:	9f ad       	ldd	r25, Y+63	; 0x3f
    2de0:	6d 97       	sbiw	r28, 0x1d	; 29
    2de2:	a6 01       	movw	r20, r12
    2de4:	95 01       	movw	r18, r10
    2de6:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2dea:	7b 01       	movw	r14, r22
    2dec:	8c 01       	movw	r16, r24
    2dee:	6d 96       	adiw	r28, 0x1d	; 29
    2df0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2df2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2df4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2df6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2df8:	6d 97       	sbiw	r28, 0x1d	; 29
    2dfa:	a2 01       	movw	r20, r4
    2dfc:	91 01       	movw	r18, r2
    2dfe:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    2e02:	5b 01       	movw	r10, r22
    2e04:	6c 01       	movw	r12, r24
    2e06:	a8 01       	movw	r20, r16
    2e08:	97 01       	movw	r18, r14
    2e0a:	26 0d       	add	r18, r6
    2e0c:	37 1d       	adc	r19, r7
    2e0e:	48 1d       	adc	r20, r8
    2e10:	59 1d       	adc	r21, r9
    2e12:	69 96       	adiw	r28, 0x19	; 25
    2e14:	6c ac       	ldd	r6, Y+60	; 0x3c
    2e16:	7d ac       	ldd	r7, Y+61	; 0x3d
    2e18:	8e ac       	ldd	r8, Y+62	; 0x3e
    2e1a:	9f ac       	ldd	r9, Y+63	; 0x3f
    2e1c:	69 97       	sbiw	r28, 0x19	; 25
    2e1e:	c4 01       	movw	r24, r8
    2e20:	aa 27       	eor	r26, r26
    2e22:	bb 27       	eor	r27, r27
    2e24:	28 0f       	add	r18, r24
    2e26:	39 1f       	adc	r19, r25
    2e28:	4a 1f       	adc	r20, r26
    2e2a:	5b 1f       	adc	r21, r27
    2e2c:	2e 15       	cp	r18, r14
    2e2e:	3f 05       	cpc	r19, r15
    2e30:	40 07       	cpc	r20, r16
    2e32:	51 07       	cpc	r21, r17
    2e34:	48 f4       	brcc	.+18     	; 0x2e48 <__udivdi3+0xbee>
    2e36:	e1 2c       	mov	r14, r1
    2e38:	f1 2c       	mov	r15, r1
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	06 2f       	mov	r16, r22
    2e3e:	11 2d       	mov	r17, r1
    2e40:	ae 0c       	add	r10, r14
    2e42:	bf 1c       	adc	r11, r15
    2e44:	c0 1e       	adc	r12, r16
    2e46:	d1 1e       	adc	r13, r17
    2e48:	ca 01       	movw	r24, r20
    2e4a:	aa 27       	eor	r26, r26
    2e4c:	bb 27       	eor	r27, r27
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	6a 0d       	add	r22, r10
    2e54:	7b 1d       	adc	r23, r11
    2e56:	8c 1d       	adc	r24, r12
    2e58:	9d 1d       	adc	r25, r13
    2e5a:	69 8c       	ldd	r6, Y+25	; 0x19
    2e5c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    2e5e:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2e60:	9c 8c       	ldd	r9, Y+28	; 0x1c
    2e62:	66 16       	cp	r6, r22
    2e64:	77 06       	cpc	r7, r23
    2e66:	88 06       	cpc	r8, r24
    2e68:	99 06       	cpc	r9, r25
    2e6a:	40 f1       	brcs	.+80     	; 0x2ebc <__udivdi3+0xc62>
    2e6c:	66 15       	cp	r22, r6
    2e6e:	77 05       	cpc	r23, r7
    2e70:	88 05       	cpc	r24, r8
    2e72:	99 05       	cpc	r25, r9
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <__udivdi3+0xc1e>
    2e76:	43 c0       	rjmp	.+134    	; 0x2efe <__udivdi3+0xca4>
    2e78:	d9 01       	movw	r26, r18
    2e7a:	99 27       	eor	r25, r25
    2e7c:	88 27       	eor	r24, r24
    2e7e:	69 96       	adiw	r28, 0x19	; 25
    2e80:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e82:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e84:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e86:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e88:	69 97       	sbiw	r28, 0x19	; 25
    2e8a:	40 70       	andi	r20, 0x00	; 0
    2e8c:	50 70       	andi	r21, 0x00	; 0
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	a4 1f       	adc	r26, r20
    2e94:	b5 1f       	adc	r27, r21
    2e96:	2d a5       	ldd	r18, Y+45	; 0x2d
    2e98:	3e a5       	ldd	r19, Y+46	; 0x2e
    2e9a:	4f a5       	ldd	r20, Y+47	; 0x2f
    2e9c:	58 a9       	ldd	r21, Y+48	; 0x30
    2e9e:	6e 96       	adiw	r28, 0x1e	; 30
    2ea0:	0f ac       	ldd	r0, Y+63	; 0x3f
    2ea2:	6e 97       	sbiw	r28, 0x1e	; 30
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <__udivdi3+0xc54>
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	44 1f       	adc	r20, r20
    2eac:	55 1f       	adc	r21, r21
    2eae:	0a 94       	dec	r0
    2eb0:	d2 f7       	brpl	.-12     	; 0x2ea6 <__udivdi3+0xc4c>
    2eb2:	28 17       	cp	r18, r24
    2eb4:	39 07       	cpc	r19, r25
    2eb6:	4a 07       	cpc	r20, r26
    2eb8:	5b 07       	cpc	r21, r27
    2eba:	08 f5       	brcc	.+66     	; 0x2efe <__udivdi3+0xca4>
    2ebc:	09 a9       	ldd	r16, Y+49	; 0x31
    2ebe:	1a a9       	ldd	r17, Y+50	; 0x32
    2ec0:	2b a9       	ldd	r18, Y+51	; 0x33
    2ec2:	3c a9       	ldd	r19, Y+52	; 0x34
    2ec4:	01 50       	subi	r16, 0x01	; 1
    2ec6:	10 40       	sbci	r17, 0x00	; 0
    2ec8:	20 40       	sbci	r18, 0x00	; 0
    2eca:	30 40       	sbci	r19, 0x00	; 0
    2ecc:	09 ab       	std	Y+49, r16	; 0x31
    2ece:	1a ab       	std	Y+50, r17	; 0x32
    2ed0:	2b ab       	std	Y+51, r18	; 0x33
    2ed2:	3c ab       	std	Y+52, r19	; 0x34
    2ed4:	14 c0       	rjmp	.+40     	; 0x2efe <__udivdi3+0xca4>
    2ed6:	66 24       	eor	r6, r6
    2ed8:	77 24       	eor	r7, r7
    2eda:	43 01       	movw	r8, r6
    2edc:	21 e0       	ldi	r18, 0x01	; 1
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	29 ab       	std	Y+49, r18	; 0x31
    2ee6:	3a ab       	std	Y+50, r19	; 0x32
    2ee8:	4b ab       	std	Y+51, r20	; 0x33
    2eea:	5c ab       	std	Y+52, r21	; 0x34
    2eec:	0b c0       	rjmp	.+22     	; 0x2f04 <__udivdi3+0xcaa>
    2eee:	66 24       	eor	r6, r6
    2ef0:	77 24       	eor	r7, r7
    2ef2:	43 01       	movw	r8, r6
    2ef4:	19 aa       	std	Y+49, r1	; 0x31
    2ef6:	1a aa       	std	Y+50, r1	; 0x32
    2ef8:	1b aa       	std	Y+51, r1	; 0x33
    2efa:	1c aa       	std	Y+52, r1	; 0x34
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <__udivdi3+0xcaa>
    2efe:	66 24       	eor	r6, r6
    2f00:	77 24       	eor	r7, r7
    2f02:	43 01       	movw	r8, r6
    2f04:	fe 01       	movw	r30, r28
    2f06:	71 96       	adiw	r30, 0x11	; 17
    2f08:	88 e0       	ldi	r24, 0x08	; 8
    2f0a:	df 01       	movw	r26, r30
    2f0c:	1d 92       	st	X+, r1
    2f0e:	8a 95       	dec	r24
    2f10:	e9 f7       	brne	.-6      	; 0x2f0c <__udivdi3+0xcb2>
    2f12:	a9 a8       	ldd	r10, Y+49	; 0x31
    2f14:	ba a8       	ldd	r11, Y+50	; 0x32
    2f16:	cb a8       	ldd	r12, Y+51	; 0x33
    2f18:	dc a8       	ldd	r13, Y+52	; 0x34
    2f1a:	a9 8a       	std	Y+17, r10	; 0x11
    2f1c:	ba 8a       	std	Y+18, r11	; 0x12
    2f1e:	cb 8a       	std	Y+19, r12	; 0x13
    2f20:	dc 8a       	std	Y+20, r13	; 0x14
    2f22:	6d 8a       	std	Y+21, r6	; 0x15
    2f24:	7e 8a       	std	Y+22, r7	; 0x16
    2f26:	8f 8a       	std	Y+23, r8	; 0x17
    2f28:	98 8e       	std	Y+24, r9	; 0x18
    2f2a:	29 a9       	ldd	r18, Y+49	; 0x31
    2f2c:	3a 89       	ldd	r19, Y+18	; 0x12
    2f2e:	4b 89       	ldd	r20, Y+19	; 0x13
    2f30:	5c 89       	ldd	r21, Y+20	; 0x14
    2f32:	66 2d       	mov	r22, r6
    2f34:	7e 89       	ldd	r23, Y+22	; 0x16
    2f36:	8f 89       	ldd	r24, Y+23	; 0x17
    2f38:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3a:	c2 5a       	subi	r28, 0xA2	; 162
    2f3c:	df 4f       	sbci	r29, 0xFF	; 255
    2f3e:	e2 e1       	ldi	r30, 0x12	; 18
    2f40:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__epilogue_restores__>

00002f44 <__umoddi3>:
    2f44:	ab e5       	ldi	r26, 0x5B	; 91
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 ea       	ldi	r30, 0xA8	; 168
    2f4a:	f7 e1       	ldi	r31, 0x17	; 23
    2f4c:	0c 94 de 33 	jmp	0x67bc	; 0x67bc <__prologue_saves__>
    2f50:	a8 e0       	ldi	r26, 0x08	; 8
    2f52:	4e 01       	movw	r8, r28
    2f54:	08 94       	sec
    2f56:	81 1c       	adc	r8, r1
    2f58:	91 1c       	adc	r9, r1
    2f5a:	f4 01       	movw	r30, r8
    2f5c:	6a 2e       	mov	r6, r26
    2f5e:	11 92       	st	Z+, r1
    2f60:	6a 94       	dec	r6
    2f62:	e9 f7       	brne	.-6      	; 0x2f5e <__umoddi3+0x1a>
    2f64:	29 83       	std	Y+1, r18	; 0x01
    2f66:	3a 83       	std	Y+2, r19	; 0x02
    2f68:	4b 83       	std	Y+3, r20	; 0x03
    2f6a:	5c 83       	std	Y+4, r21	; 0x04
    2f6c:	6d 83       	std	Y+5, r22	; 0x05
    2f6e:	7e 83       	std	Y+6, r23	; 0x06
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	ce 01       	movw	r24, r28
    2f76:	09 96       	adiw	r24, 0x09	; 9
    2f78:	fc 01       	movw	r30, r24
    2f7a:	11 92       	st	Z+, r1
    2f7c:	aa 95       	dec	r26
    2f7e:	e9 f7       	brne	.-6      	; 0x2f7a <__umoddi3+0x36>
    2f80:	a9 86       	std	Y+9, r10	; 0x09
    2f82:	ba 86       	std	Y+10, r11	; 0x0a
    2f84:	cb 86       	std	Y+11, r12	; 0x0b
    2f86:	dc 86       	std	Y+12, r13	; 0x0c
    2f88:	ed 86       	std	Y+13, r14	; 0x0d
    2f8a:	fe 86       	std	Y+14, r15	; 0x0e
    2f8c:	0f 87       	std	Y+15, r16	; 0x0f
    2f8e:	18 8b       	std	Y+16, r17	; 0x10
    2f90:	29 84       	ldd	r2, Y+9	; 0x09
    2f92:	3a 84       	ldd	r3, Y+10	; 0x0a
    2f94:	4b 84       	ldd	r4, Y+11	; 0x0b
    2f96:	5c 84       	ldd	r5, Y+12	; 0x0c
    2f98:	ad 84       	ldd	r10, Y+13	; 0x0d
    2f9a:	be 84       	ldd	r11, Y+14	; 0x0e
    2f9c:	cf 84       	ldd	r12, Y+15	; 0x0f
    2f9e:	d8 88       	ldd	r13, Y+16	; 0x10
    2fa0:	29 81       	ldd	r18, Y+1	; 0x01
    2fa2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa4:	4b 81       	ldd	r20, Y+3	; 0x03
    2fa6:	5c 81       	ldd	r21, Y+4	; 0x04
    2fa8:	69 96       	adiw	r28, 0x19	; 25
    2faa:	2f af       	std	Y+63, r18	; 0x3f
    2fac:	69 97       	sbiw	r28, 0x19	; 25
    2fae:	6a 96       	adiw	r28, 0x1a	; 26
    2fb0:	3f af       	std	Y+63, r19	; 0x3f
    2fb2:	6a 97       	sbiw	r28, 0x1a	; 26
    2fb4:	6b 96       	adiw	r28, 0x1b	; 27
    2fb6:	4f af       	std	Y+63, r20	; 0x3f
    2fb8:	6b 97       	sbiw	r28, 0x1b	; 27
    2fba:	6c 96       	adiw	r28, 0x1c	; 28
    2fbc:	5f af       	std	Y+63, r21	; 0x3f
    2fbe:	6c 97       	sbiw	r28, 0x1c	; 28
    2fc0:	6c 96       	adiw	r28, 0x1c	; 28
    2fc2:	6c ac       	ldd	r6, Y+60	; 0x3c
    2fc4:	7d ac       	ldd	r7, Y+61	; 0x3d
    2fc6:	8e ac       	ldd	r8, Y+62	; 0x3e
    2fc8:	9f ac       	ldd	r9, Y+63	; 0x3f
    2fca:	6c 97       	sbiw	r28, 0x1c	; 28
    2fcc:	69 aa       	std	Y+49, r6	; 0x31
    2fce:	7a aa       	std	Y+50, r7	; 0x32
    2fd0:	8b aa       	std	Y+51, r8	; 0x33
    2fd2:	9c aa       	std	Y+52, r9	; 0x34
    2fd4:	6d 81       	ldd	r22, Y+5	; 0x05
    2fd6:	7e 81       	ldd	r23, Y+6	; 0x06
    2fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fda:	98 85       	ldd	r25, Y+8	; 0x08
    2fdc:	3b 01       	movw	r6, r22
    2fde:	4c 01       	movw	r8, r24
    2fe0:	6d aa       	std	Y+53, r6	; 0x35
    2fe2:	7e aa       	std	Y+54, r7	; 0x36
    2fe4:	8f aa       	std	Y+55, r8	; 0x37
    2fe6:	98 ae       	std	Y+56, r9	; 0x38
    2fe8:	a1 14       	cp	r10, r1
    2fea:	b1 04       	cpc	r11, r1
    2fec:	c1 04       	cpc	r12, r1
    2fee:	d1 04       	cpc	r13, r1
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <__umoddi3+0xb0>
    2ff2:	04 c3       	rjmp	.+1544   	; 0x35fc <__umoddi3+0x6b8>
    2ff4:	62 14       	cp	r6, r2
    2ff6:	73 04       	cpc	r7, r3
    2ff8:	84 04       	cpc	r8, r4
    2ffa:	95 04       	cpc	r9, r5
    2ffc:	08 f0       	brcs	.+2      	; 0x3000 <__umoddi3+0xbc>
    2ffe:	00 c1       	rjmp	.+512    	; 0x3200 <__umoddi3+0x2bc>
    3000:	00 e0       	ldi	r16, 0x00	; 0
    3002:	20 16       	cp	r2, r16
    3004:	00 e0       	ldi	r16, 0x00	; 0
    3006:	30 06       	cpc	r3, r16
    3008:	01 e0       	ldi	r16, 0x01	; 1
    300a:	40 06       	cpc	r4, r16
    300c:	00 e0       	ldi	r16, 0x00	; 0
    300e:	50 06       	cpc	r5, r16
    3010:	88 f4       	brcc	.+34     	; 0x3034 <__umoddi3+0xf0>
    3012:	1f ef       	ldi	r17, 0xFF	; 255
    3014:	21 16       	cp	r2, r17
    3016:	31 04       	cpc	r3, r1
    3018:	41 04       	cpc	r4, r1
    301a:	51 04       	cpc	r5, r1
    301c:	39 f0       	breq	.+14     	; 0x302c <__umoddi3+0xe8>
    301e:	30 f0       	brcs	.+12     	; 0x302c <__umoddi3+0xe8>
    3020:	88 e0       	ldi	r24, 0x08	; 8
    3022:	e8 2e       	mov	r14, r24
    3024:	f1 2c       	mov	r15, r1
    3026:	01 2d       	mov	r16, r1
    3028:	11 2d       	mov	r17, r1
    302a:	18 c0       	rjmp	.+48     	; 0x305c <__umoddi3+0x118>
    302c:	ee 24       	eor	r14, r14
    302e:	ff 24       	eor	r15, r15
    3030:	87 01       	movw	r16, r14
    3032:	14 c0       	rjmp	.+40     	; 0x305c <__umoddi3+0x118>
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	24 16       	cp	r2, r20
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	34 06       	cpc	r3, r20
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	44 06       	cpc	r4, r20
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	54 06       	cpc	r5, r20
    3044:	30 f0       	brcs	.+12     	; 0x3052 <__umoddi3+0x10e>
    3046:	b8 e1       	ldi	r27, 0x18	; 24
    3048:	eb 2e       	mov	r14, r27
    304a:	f1 2c       	mov	r15, r1
    304c:	01 2d       	mov	r16, r1
    304e:	11 2d       	mov	r17, r1
    3050:	05 c0       	rjmp	.+10     	; 0x305c <__umoddi3+0x118>
    3052:	a0 e1       	ldi	r26, 0x10	; 16
    3054:	ea 2e       	mov	r14, r26
    3056:	f1 2c       	mov	r15, r1
    3058:	01 2d       	mov	r16, r1
    305a:	11 2d       	mov	r17, r1
    305c:	d2 01       	movw	r26, r4
    305e:	c1 01       	movw	r24, r2
    3060:	0e 2c       	mov	r0, r14
    3062:	04 c0       	rjmp	.+8      	; 0x306c <__umoddi3+0x128>
    3064:	b6 95       	lsr	r27
    3066:	a7 95       	ror	r26
    3068:	97 95       	ror	r25
    306a:	87 95       	ror	r24
    306c:	0a 94       	dec	r0
    306e:	d2 f7       	brpl	.-12     	; 0x3064 <__umoddi3+0x120>
    3070:	85 53       	subi	r24, 0x35	; 53
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	dc 01       	movw	r26, r24
    3076:	2c 91       	ld	r18, X
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 e0       	ldi	r26, 0x00	; 0
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	8e 19       	sub	r24, r14
    3082:	9f 09       	sbc	r25, r15
    3084:	a0 0b       	sbc	r26, r16
    3086:	b1 0b       	sbc	r27, r17
    3088:	5c 01       	movw	r10, r24
    308a:	6d 01       	movw	r12, r26
    308c:	a2 1a       	sub	r10, r18
    308e:	b1 08       	sbc	r11, r1
    3090:	c1 08       	sbc	r12, r1
    3092:	d1 08       	sbc	r13, r1
    3094:	a9 ae       	std	Y+57, r10	; 0x39
    3096:	ba ae       	std	Y+58, r11	; 0x3a
    3098:	cb ae       	std	Y+59, r12	; 0x3b
    309a:	dc ae       	std	Y+60, r13	; 0x3c
    309c:	a1 14       	cp	r10, r1
    309e:	b1 04       	cpc	r11, r1
    30a0:	c1 04       	cpc	r12, r1
    30a2:	d1 04       	cpc	r13, r1
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <__umoddi3+0x164>
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <__umoddi3+0x1e2>
    30a8:	69 ad       	ldd	r22, Y+57	; 0x39
    30aa:	06 2e       	mov	r0, r22
    30ac:	04 c0       	rjmp	.+8      	; 0x30b6 <__umoddi3+0x172>
    30ae:	22 0c       	add	r2, r2
    30b0:	33 1c       	adc	r3, r3
    30b2:	44 1c       	adc	r4, r4
    30b4:	55 1c       	adc	r5, r5
    30b6:	0a 94       	dec	r0
    30b8:	d2 f7       	brpl	.-12     	; 0x30ae <__umoddi3+0x16a>
    30ba:	a4 01       	movw	r20, r8
    30bc:	93 01       	movw	r18, r6
    30be:	06 2e       	mov	r0, r22
    30c0:	04 c0       	rjmp	.+8      	; 0x30ca <__umoddi3+0x186>
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	44 1f       	adc	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	0a 94       	dec	r0
    30cc:	d2 f7       	brpl	.-12     	; 0x30c2 <__umoddi3+0x17e>
    30ce:	80 e2       	ldi	r24, 0x20	; 32
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	8a 19       	sub	r24, r10
    30d4:	9b 09       	sbc	r25, r11
    30d6:	6c 96       	adiw	r28, 0x1c	; 28
    30d8:	cc ac       	ldd	r12, Y+60	; 0x3c
    30da:	dd ac       	ldd	r13, Y+61	; 0x3d
    30dc:	ee ac       	ldd	r14, Y+62	; 0x3e
    30de:	ff ac       	ldd	r15, Y+63	; 0x3f
    30e0:	6c 97       	sbiw	r28, 0x1c	; 28
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <__umoddi3+0x1a8>
    30e4:	f6 94       	lsr	r15
    30e6:	e7 94       	ror	r14
    30e8:	d7 94       	ror	r13
    30ea:	c7 94       	ror	r12
    30ec:	8a 95       	dec	r24
    30ee:	d2 f7       	brpl	.-12     	; 0x30e4 <__umoddi3+0x1a0>
    30f0:	87 01       	movw	r16, r14
    30f2:	76 01       	movw	r14, r12
    30f4:	e2 2a       	or	r14, r18
    30f6:	f3 2a       	or	r15, r19
    30f8:	04 2b       	or	r16, r20
    30fa:	15 2b       	or	r17, r21
    30fc:	ed aa       	std	Y+53, r14	; 0x35
    30fe:	fe aa       	std	Y+54, r15	; 0x36
    3100:	0f ab       	std	Y+55, r16	; 0x37
    3102:	18 af       	std	Y+56, r17	; 0x38
    3104:	6c 96       	adiw	r28, 0x1c	; 28
    3106:	8c ad       	ldd	r24, Y+60	; 0x3c
    3108:	9d ad       	ldd	r25, Y+61	; 0x3d
    310a:	ae ad       	ldd	r26, Y+62	; 0x3e
    310c:	bf ad       	ldd	r27, Y+63	; 0x3f
    310e:	6c 97       	sbiw	r28, 0x1c	; 28
    3110:	04 c0       	rjmp	.+8      	; 0x311a <__umoddi3+0x1d6>
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	aa 1f       	adc	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	6a 95       	dec	r22
    311c:	d2 f7       	brpl	.-12     	; 0x3112 <__umoddi3+0x1ce>
    311e:	89 ab       	std	Y+49, r24	; 0x31
    3120:	9a ab       	std	Y+50, r25	; 0x32
    3122:	ab ab       	std	Y+51, r26	; 0x33
    3124:	bc ab       	std	Y+52, r27	; 0x34
    3126:	32 01       	movw	r6, r4
    3128:	88 24       	eor	r8, r8
    312a:	99 24       	eor	r9, r9
    312c:	b2 01       	movw	r22, r4
    312e:	a1 01       	movw	r20, r2
    3130:	60 70       	andi	r22, 0x00	; 0
    3132:	70 70       	andi	r23, 0x00	; 0
    3134:	21 96       	adiw	r28, 0x01	; 1
    3136:	4c af       	std	Y+60, r20	; 0x3c
    3138:	5d af       	std	Y+61, r21	; 0x3d
    313a:	6e af       	std	Y+62, r22	; 0x3e
    313c:	7f af       	std	Y+63, r23	; 0x3f
    313e:	21 97       	sbiw	r28, 0x01	; 1
    3140:	6d a9       	ldd	r22, Y+53	; 0x35
    3142:	7e a9       	ldd	r23, Y+54	; 0x36
    3144:	8f a9       	ldd	r24, Y+55	; 0x37
    3146:	98 ad       	ldd	r25, Y+56	; 0x38
    3148:	a4 01       	movw	r20, r8
    314a:	93 01       	movw	r18, r6
    314c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3150:	7b 01       	movw	r14, r22
    3152:	8c 01       	movw	r16, r24
    3154:	6d a9       	ldd	r22, Y+53	; 0x35
    3156:	7e a9       	ldd	r23, Y+54	; 0x36
    3158:	8f a9       	ldd	r24, Y+55	; 0x37
    315a:	98 ad       	ldd	r25, Y+56	; 0x38
    315c:	a4 01       	movw	r20, r8
    315e:	93 01       	movw	r18, r6
    3160:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3164:	ca 01       	movw	r24, r20
    3166:	b9 01       	movw	r22, r18
    3168:	21 96       	adiw	r28, 0x01	; 1
    316a:	2c ad       	ldd	r18, Y+60	; 0x3c
    316c:	3d ad       	ldd	r19, Y+61	; 0x3d
    316e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3170:	5f ad       	ldd	r21, Y+63	; 0x3f
    3172:	21 97       	sbiw	r28, 0x01	; 1
    3174:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3178:	9b 01       	movw	r18, r22
    317a:	ac 01       	movw	r20, r24
    317c:	87 01       	movw	r16, r14
    317e:	ff 24       	eor	r15, r15
    3180:	ee 24       	eor	r14, r14
    3182:	a9 a8       	ldd	r10, Y+49	; 0x31
    3184:	ba a8       	ldd	r11, Y+50	; 0x32
    3186:	cb a8       	ldd	r12, Y+51	; 0x33
    3188:	dc a8       	ldd	r13, Y+52	; 0x34
    318a:	c6 01       	movw	r24, r12
    318c:	aa 27       	eor	r26, r26
    318e:	bb 27       	eor	r27, r27
    3190:	57 01       	movw	r10, r14
    3192:	68 01       	movw	r12, r16
    3194:	a8 2a       	or	r10, r24
    3196:	b9 2a       	or	r11, r25
    3198:	ca 2a       	or	r12, r26
    319a:	db 2a       	or	r13, r27
    319c:	a2 16       	cp	r10, r18
    319e:	b3 06       	cpc	r11, r19
    31a0:	c4 06       	cpc	r12, r20
    31a2:	d5 06       	cpc	r13, r21
    31a4:	90 f4       	brcc	.+36     	; 0x31ca <__umoddi3+0x286>
    31a6:	a2 0c       	add	r10, r2
    31a8:	b3 1c       	adc	r11, r3
    31aa:	c4 1c       	adc	r12, r4
    31ac:	d5 1c       	adc	r13, r5
    31ae:	a2 14       	cp	r10, r2
    31b0:	b3 04       	cpc	r11, r3
    31b2:	c4 04       	cpc	r12, r4
    31b4:	d5 04       	cpc	r13, r5
    31b6:	48 f0       	brcs	.+18     	; 0x31ca <__umoddi3+0x286>
    31b8:	a2 16       	cp	r10, r18
    31ba:	b3 06       	cpc	r11, r19
    31bc:	c4 06       	cpc	r12, r20
    31be:	d5 06       	cpc	r13, r21
    31c0:	20 f4       	brcc	.+8      	; 0x31ca <__umoddi3+0x286>
    31c2:	a2 0c       	add	r10, r2
    31c4:	b3 1c       	adc	r11, r3
    31c6:	c4 1c       	adc	r12, r4
    31c8:	d5 1c       	adc	r13, r5
    31ca:	a2 1a       	sub	r10, r18
    31cc:	b3 0a       	sbc	r11, r19
    31ce:	c4 0a       	sbc	r12, r20
    31d0:	d5 0a       	sbc	r13, r21
    31d2:	c6 01       	movw	r24, r12
    31d4:	b5 01       	movw	r22, r10
    31d6:	a4 01       	movw	r20, r8
    31d8:	93 01       	movw	r18, r6
    31da:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    31de:	7b 01       	movw	r14, r22
    31e0:	8c 01       	movw	r16, r24
    31e2:	c6 01       	movw	r24, r12
    31e4:	b5 01       	movw	r22, r10
    31e6:	a4 01       	movw	r20, r8
    31e8:	93 01       	movw	r18, r6
    31ea:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    31ee:	ca 01       	movw	r24, r20
    31f0:	b9 01       	movw	r22, r18
    31f2:	21 96       	adiw	r28, 0x01	; 1
    31f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    31f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    31f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    31fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    31fc:	21 97       	sbiw	r28, 0x01	; 1
    31fe:	ba c1       	rjmp	.+884    	; 0x3574 <__umoddi3+0x630>
    3200:	21 14       	cp	r2, r1
    3202:	31 04       	cpc	r3, r1
    3204:	41 04       	cpc	r4, r1
    3206:	51 04       	cpc	r5, r1
    3208:	71 f4       	brne	.+28     	; 0x3226 <__umoddi3+0x2e2>
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    321e:	c9 01       	movw	r24, r18
    3220:	da 01       	movw	r26, r20
    3222:	1c 01       	movw	r2, r24
    3224:	2d 01       	movw	r4, r26
    3226:	00 e0       	ldi	r16, 0x00	; 0
    3228:	20 16       	cp	r2, r16
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	30 06       	cpc	r3, r16
    322e:	01 e0       	ldi	r16, 0x01	; 1
    3230:	40 06       	cpc	r4, r16
    3232:	00 e0       	ldi	r16, 0x00	; 0
    3234:	50 06       	cpc	r5, r16
    3236:	88 f4       	brcc	.+34     	; 0x325a <__umoddi3+0x316>
    3238:	1f ef       	ldi	r17, 0xFF	; 255
    323a:	21 16       	cp	r2, r17
    323c:	31 04       	cpc	r3, r1
    323e:	41 04       	cpc	r4, r1
    3240:	51 04       	cpc	r5, r1
    3242:	39 f0       	breq	.+14     	; 0x3252 <__umoddi3+0x30e>
    3244:	30 f0       	brcs	.+12     	; 0x3252 <__umoddi3+0x30e>
    3246:	68 e0       	ldi	r22, 0x08	; 8
    3248:	e6 2e       	mov	r14, r22
    324a:	f1 2c       	mov	r15, r1
    324c:	01 2d       	mov	r16, r1
    324e:	11 2d       	mov	r17, r1
    3250:	18 c0       	rjmp	.+48     	; 0x3282 <__umoddi3+0x33e>
    3252:	ee 24       	eor	r14, r14
    3254:	ff 24       	eor	r15, r15
    3256:	87 01       	movw	r16, r14
    3258:	14 c0       	rjmp	.+40     	; 0x3282 <__umoddi3+0x33e>
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	24 16       	cp	r2, r20
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	34 06       	cpc	r3, r20
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	44 06       	cpc	r4, r20
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	54 06       	cpc	r5, r20
    326a:	30 f0       	brcs	.+12     	; 0x3278 <__umoddi3+0x334>
    326c:	58 e1       	ldi	r21, 0x18	; 24
    326e:	e5 2e       	mov	r14, r21
    3270:	f1 2c       	mov	r15, r1
    3272:	01 2d       	mov	r16, r1
    3274:	11 2d       	mov	r17, r1
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <__umoddi3+0x33e>
    3278:	40 e1       	ldi	r20, 0x10	; 16
    327a:	e4 2e       	mov	r14, r20
    327c:	f1 2c       	mov	r15, r1
    327e:	01 2d       	mov	r16, r1
    3280:	11 2d       	mov	r17, r1
    3282:	d2 01       	movw	r26, r4
    3284:	c1 01       	movw	r24, r2
    3286:	0e 2c       	mov	r0, r14
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <__umoddi3+0x34e>
    328a:	b6 95       	lsr	r27
    328c:	a7 95       	ror	r26
    328e:	97 95       	ror	r25
    3290:	87 95       	ror	r24
    3292:	0a 94       	dec	r0
    3294:	d2 f7       	brpl	.-12     	; 0x328a <__umoddi3+0x346>
    3296:	85 53       	subi	r24, 0x35	; 53
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	dc 01       	movw	r26, r24
    329c:	2c 91       	ld	r18, X
    329e:	30 e2       	ldi	r19, 0x20	; 32
    32a0:	a3 2e       	mov	r10, r19
    32a2:	b1 2c       	mov	r11, r1
    32a4:	c1 2c       	mov	r12, r1
    32a6:	d1 2c       	mov	r13, r1
    32a8:	d6 01       	movw	r26, r12
    32aa:	c5 01       	movw	r24, r10
    32ac:	8e 19       	sub	r24, r14
    32ae:	9f 09       	sbc	r25, r15
    32b0:	a0 0b       	sbc	r26, r16
    32b2:	b1 0b       	sbc	r27, r17
    32b4:	7c 01       	movw	r14, r24
    32b6:	8d 01       	movw	r16, r26
    32b8:	e2 1a       	sub	r14, r18
    32ba:	f1 08       	sbc	r15, r1
    32bc:	01 09       	sbc	r16, r1
    32be:	11 09       	sbc	r17, r1
    32c0:	e9 ae       	std	Y+57, r14	; 0x39
    32c2:	fa ae       	std	Y+58, r15	; 0x3a
    32c4:	0b af       	std	Y+59, r16	; 0x3b
    32c6:	1c af       	std	Y+60, r17	; 0x3c
    32c8:	e1 14       	cp	r14, r1
    32ca:	f1 04       	cpc	r15, r1
    32cc:	01 05       	cpc	r16, r1
    32ce:	11 05       	cpc	r17, r1
    32d0:	39 f4       	brne	.+14     	; 0x32e0 <__umoddi3+0x39c>
    32d2:	64 01       	movw	r12, r8
    32d4:	53 01       	movw	r10, r6
    32d6:	a2 18       	sub	r10, r2
    32d8:	b3 08       	sbc	r11, r3
    32da:	c4 08       	sbc	r12, r4
    32dc:	d5 08       	sbc	r13, r5
    32de:	e2 c0       	rjmp	.+452    	; 0x34a4 <__umoddi3+0x560>
    32e0:	f9 ac       	ldd	r15, Y+57	; 0x39
    32e2:	68 96       	adiw	r28, 0x18	; 24
    32e4:	ff ae       	std	Y+63, r15	; 0x3f
    32e6:	68 97       	sbiw	r28, 0x18	; 24
    32e8:	0f 2c       	mov	r0, r15
    32ea:	04 c0       	rjmp	.+8      	; 0x32f4 <__umoddi3+0x3b0>
    32ec:	22 0c       	add	r2, r2
    32ee:	33 1c       	adc	r3, r3
    32f0:	44 1c       	adc	r4, r4
    32f2:	55 1c       	adc	r5, r5
    32f4:	0a 94       	dec	r0
    32f6:	d2 f7       	brpl	.-12     	; 0x32ec <__umoddi3+0x3a8>
    32f8:	8a 2d       	mov	r24, r10
    32fa:	8f 19       	sub	r24, r15
    32fc:	64 01       	movw	r12, r8
    32fe:	53 01       	movw	r10, r6
    3300:	08 2e       	mov	r0, r24
    3302:	04 c0       	rjmp	.+8      	; 0x330c <__umoddi3+0x3c8>
    3304:	d6 94       	lsr	r13
    3306:	c7 94       	ror	r12
    3308:	b7 94       	ror	r11
    330a:	a7 94       	ror	r10
    330c:	0a 94       	dec	r0
    330e:	d2 f7       	brpl	.-12     	; 0x3304 <__umoddi3+0x3c0>
    3310:	a4 01       	movw	r20, r8
    3312:	93 01       	movw	r18, r6
    3314:	04 c0       	rjmp	.+8      	; 0x331e <__umoddi3+0x3da>
    3316:	22 0f       	add	r18, r18
    3318:	33 1f       	adc	r19, r19
    331a:	44 1f       	adc	r20, r20
    331c:	55 1f       	adc	r21, r21
    331e:	fa 94       	dec	r15
    3320:	d2 f7       	brpl	.-12     	; 0x3316 <__umoddi3+0x3d2>
    3322:	6c 96       	adiw	r28, 0x1c	; 28
    3324:	6c ac       	ldd	r6, Y+60	; 0x3c
    3326:	7d ac       	ldd	r7, Y+61	; 0x3d
    3328:	8e ac       	ldd	r8, Y+62	; 0x3e
    332a:	9f ac       	ldd	r9, Y+63	; 0x3f
    332c:	6c 97       	sbiw	r28, 0x1c	; 28
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <__umoddi3+0x3f4>
    3330:	96 94       	lsr	r9
    3332:	87 94       	ror	r8
    3334:	77 94       	ror	r7
    3336:	67 94       	ror	r6
    3338:	8a 95       	dec	r24
    333a:	d2 f7       	brpl	.-12     	; 0x3330 <__umoddi3+0x3ec>
    333c:	84 01       	movw	r16, r8
    333e:	73 01       	movw	r14, r6
    3340:	e2 2a       	or	r14, r18
    3342:	f3 2a       	or	r15, r19
    3344:	04 2b       	or	r16, r20
    3346:	15 2b       	or	r17, r21
    3348:	ed a6       	std	Y+45, r14	; 0x2d
    334a:	fe a6       	std	Y+46, r15	; 0x2e
    334c:	0f a7       	std	Y+47, r16	; 0x2f
    334e:	18 ab       	std	Y+48, r17	; 0x30
    3350:	32 01       	movw	r6, r4
    3352:	88 24       	eor	r8, r8
    3354:	99 24       	eor	r9, r9
    3356:	b2 01       	movw	r22, r4
    3358:	a1 01       	movw	r20, r2
    335a:	60 70       	andi	r22, 0x00	; 0
    335c:	70 70       	andi	r23, 0x00	; 0
    335e:	25 96       	adiw	r28, 0x05	; 5
    3360:	4c af       	std	Y+60, r20	; 0x3c
    3362:	5d af       	std	Y+61, r21	; 0x3d
    3364:	6e af       	std	Y+62, r22	; 0x3e
    3366:	7f af       	std	Y+63, r23	; 0x3f
    3368:	25 97       	sbiw	r28, 0x05	; 5
    336a:	c6 01       	movw	r24, r12
    336c:	b5 01       	movw	r22, r10
    336e:	a4 01       	movw	r20, r8
    3370:	93 01       	movw	r18, r6
    3372:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3376:	7b 01       	movw	r14, r22
    3378:	8c 01       	movw	r16, r24
    337a:	c6 01       	movw	r24, r12
    337c:	b5 01       	movw	r22, r10
    337e:	a4 01       	movw	r20, r8
    3380:	93 01       	movw	r18, r6
    3382:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3386:	ca 01       	movw	r24, r20
    3388:	b9 01       	movw	r22, r18
    338a:	25 96       	adiw	r28, 0x05	; 5
    338c:	2c ad       	ldd	r18, Y+60	; 0x3c
    338e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3390:	4e ad       	ldd	r20, Y+62	; 0x3e
    3392:	5f ad       	ldd	r21, Y+63	; 0x3f
    3394:	25 97       	sbiw	r28, 0x05	; 5
    3396:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    339a:	9b 01       	movw	r18, r22
    339c:	ac 01       	movw	r20, r24
    339e:	87 01       	movw	r16, r14
    33a0:	ff 24       	eor	r15, r15
    33a2:	ee 24       	eor	r14, r14
    33a4:	ad a4       	ldd	r10, Y+45	; 0x2d
    33a6:	be a4       	ldd	r11, Y+46	; 0x2e
    33a8:	cf a4       	ldd	r12, Y+47	; 0x2f
    33aa:	d8 a8       	ldd	r13, Y+48	; 0x30
    33ac:	c6 01       	movw	r24, r12
    33ae:	aa 27       	eor	r26, r26
    33b0:	bb 27       	eor	r27, r27
    33b2:	5c 01       	movw	r10, r24
    33b4:	6d 01       	movw	r12, r26
    33b6:	ae 28       	or	r10, r14
    33b8:	bf 28       	or	r11, r15
    33ba:	c0 2a       	or	r12, r16
    33bc:	d1 2a       	or	r13, r17
    33be:	a2 16       	cp	r10, r18
    33c0:	b3 06       	cpc	r11, r19
    33c2:	c4 06       	cpc	r12, r20
    33c4:	d5 06       	cpc	r13, r21
    33c6:	90 f4       	brcc	.+36     	; 0x33ec <__umoddi3+0x4a8>
    33c8:	a2 0c       	add	r10, r2
    33ca:	b3 1c       	adc	r11, r3
    33cc:	c4 1c       	adc	r12, r4
    33ce:	d5 1c       	adc	r13, r5
    33d0:	a2 14       	cp	r10, r2
    33d2:	b3 04       	cpc	r11, r3
    33d4:	c4 04       	cpc	r12, r4
    33d6:	d5 04       	cpc	r13, r5
    33d8:	48 f0       	brcs	.+18     	; 0x33ec <__umoddi3+0x4a8>
    33da:	a2 16       	cp	r10, r18
    33dc:	b3 06       	cpc	r11, r19
    33de:	c4 06       	cpc	r12, r20
    33e0:	d5 06       	cpc	r13, r21
    33e2:	20 f4       	brcc	.+8      	; 0x33ec <__umoddi3+0x4a8>
    33e4:	a2 0c       	add	r10, r2
    33e6:	b3 1c       	adc	r11, r3
    33e8:	c4 1c       	adc	r12, r4
    33ea:	d5 1c       	adc	r13, r5
    33ec:	a2 1a       	sub	r10, r18
    33ee:	b3 0a       	sbc	r11, r19
    33f0:	c4 0a       	sbc	r12, r20
    33f2:	d5 0a       	sbc	r13, r21
    33f4:	c6 01       	movw	r24, r12
    33f6:	b5 01       	movw	r22, r10
    33f8:	a4 01       	movw	r20, r8
    33fa:	93 01       	movw	r18, r6
    33fc:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3400:	7b 01       	movw	r14, r22
    3402:	8c 01       	movw	r16, r24
    3404:	c6 01       	movw	r24, r12
    3406:	b5 01       	movw	r22, r10
    3408:	a4 01       	movw	r20, r8
    340a:	93 01       	movw	r18, r6
    340c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3410:	ca 01       	movw	r24, r20
    3412:	b9 01       	movw	r22, r18
    3414:	25 96       	adiw	r28, 0x05	; 5
    3416:	2c ad       	ldd	r18, Y+60	; 0x3c
    3418:	3d ad       	ldd	r19, Y+61	; 0x3d
    341a:	4e ad       	ldd	r20, Y+62	; 0x3e
    341c:	5f ad       	ldd	r21, Y+63	; 0x3f
    341e:	25 97       	sbiw	r28, 0x05	; 5
    3420:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3424:	9b 01       	movw	r18, r22
    3426:	ac 01       	movw	r20, r24
    3428:	87 01       	movw	r16, r14
    342a:	ff 24       	eor	r15, r15
    342c:	ee 24       	eor	r14, r14
    342e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3430:	9e a5       	ldd	r25, Y+46	; 0x2e
    3432:	af a5       	ldd	r26, Y+47	; 0x2f
    3434:	b8 a9       	ldd	r27, Y+48	; 0x30
    3436:	a0 70       	andi	r26, 0x00	; 0
    3438:	b0 70       	andi	r27, 0x00	; 0
    343a:	57 01       	movw	r10, r14
    343c:	68 01       	movw	r12, r16
    343e:	a8 2a       	or	r10, r24
    3440:	b9 2a       	or	r11, r25
    3442:	ca 2a       	or	r12, r26
    3444:	db 2a       	or	r13, r27
    3446:	a2 16       	cp	r10, r18
    3448:	b3 06       	cpc	r11, r19
    344a:	c4 06       	cpc	r12, r20
    344c:	d5 06       	cpc	r13, r21
    344e:	90 f4       	brcc	.+36     	; 0x3474 <__umoddi3+0x530>
    3450:	a2 0c       	add	r10, r2
    3452:	b3 1c       	adc	r11, r3
    3454:	c4 1c       	adc	r12, r4
    3456:	d5 1c       	adc	r13, r5
    3458:	a2 14       	cp	r10, r2
    345a:	b3 04       	cpc	r11, r3
    345c:	c4 04       	cpc	r12, r4
    345e:	d5 04       	cpc	r13, r5
    3460:	48 f0       	brcs	.+18     	; 0x3474 <__umoddi3+0x530>
    3462:	a2 16       	cp	r10, r18
    3464:	b3 06       	cpc	r11, r19
    3466:	c4 06       	cpc	r12, r20
    3468:	d5 06       	cpc	r13, r21
    346a:	20 f4       	brcc	.+8      	; 0x3474 <__umoddi3+0x530>
    346c:	a2 0c       	add	r10, r2
    346e:	b3 1c       	adc	r11, r3
    3470:	c4 1c       	adc	r12, r4
    3472:	d5 1c       	adc	r13, r5
    3474:	6c 96       	adiw	r28, 0x1c	; 28
    3476:	ec ac       	ldd	r14, Y+60	; 0x3c
    3478:	fd ac       	ldd	r15, Y+61	; 0x3d
    347a:	0e ad       	ldd	r16, Y+62	; 0x3e
    347c:	1f ad       	ldd	r17, Y+63	; 0x3f
    347e:	6c 97       	sbiw	r28, 0x1c	; 28
    3480:	68 96       	adiw	r28, 0x18	; 24
    3482:	0f ac       	ldd	r0, Y+63	; 0x3f
    3484:	68 97       	sbiw	r28, 0x18	; 24
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <__umoddi3+0x54c>
    3488:	ee 0c       	add	r14, r14
    348a:	ff 1c       	adc	r15, r15
    348c:	00 1f       	adc	r16, r16
    348e:	11 1f       	adc	r17, r17
    3490:	0a 94       	dec	r0
    3492:	d2 f7       	brpl	.-12     	; 0x3488 <__umoddi3+0x544>
    3494:	e9 aa       	std	Y+49, r14	; 0x31
    3496:	fa aa       	std	Y+50, r15	; 0x32
    3498:	0b ab       	std	Y+51, r16	; 0x33
    349a:	1c ab       	std	Y+52, r17	; 0x34
    349c:	a2 1a       	sub	r10, r18
    349e:	b3 0a       	sbc	r11, r19
    34a0:	c4 0a       	sbc	r12, r20
    34a2:	d5 0a       	sbc	r13, r21
    34a4:	32 01       	movw	r6, r4
    34a6:	88 24       	eor	r8, r8
    34a8:	99 24       	eor	r9, r9
    34aa:	b2 01       	movw	r22, r4
    34ac:	a1 01       	movw	r20, r2
    34ae:	60 70       	andi	r22, 0x00	; 0
    34b0:	70 70       	andi	r23, 0x00	; 0
    34b2:	29 96       	adiw	r28, 0x09	; 9
    34b4:	4c af       	std	Y+60, r20	; 0x3c
    34b6:	5d af       	std	Y+61, r21	; 0x3d
    34b8:	6e af       	std	Y+62, r22	; 0x3e
    34ba:	7f af       	std	Y+63, r23	; 0x3f
    34bc:	29 97       	sbiw	r28, 0x09	; 9
    34be:	c6 01       	movw	r24, r12
    34c0:	b5 01       	movw	r22, r10
    34c2:	a4 01       	movw	r20, r8
    34c4:	93 01       	movw	r18, r6
    34c6:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    34ca:	7b 01       	movw	r14, r22
    34cc:	8c 01       	movw	r16, r24
    34ce:	c6 01       	movw	r24, r12
    34d0:	b5 01       	movw	r22, r10
    34d2:	a4 01       	movw	r20, r8
    34d4:	93 01       	movw	r18, r6
    34d6:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    34da:	ca 01       	movw	r24, r20
    34dc:	b9 01       	movw	r22, r18
    34de:	29 96       	adiw	r28, 0x09	; 9
    34e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    34e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    34e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    34e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    34e8:	29 97       	sbiw	r28, 0x09	; 9
    34ea:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	87 01       	movw	r16, r14
    34f4:	ff 24       	eor	r15, r15
    34f6:	ee 24       	eor	r14, r14
    34f8:	a9 a8       	ldd	r10, Y+49	; 0x31
    34fa:	ba a8       	ldd	r11, Y+50	; 0x32
    34fc:	cb a8       	ldd	r12, Y+51	; 0x33
    34fe:	dc a8       	ldd	r13, Y+52	; 0x34
    3500:	c6 01       	movw	r24, r12
    3502:	aa 27       	eor	r26, r26
    3504:	bb 27       	eor	r27, r27
    3506:	57 01       	movw	r10, r14
    3508:	68 01       	movw	r12, r16
    350a:	a8 2a       	or	r10, r24
    350c:	b9 2a       	or	r11, r25
    350e:	ca 2a       	or	r12, r26
    3510:	db 2a       	or	r13, r27
    3512:	a2 16       	cp	r10, r18
    3514:	b3 06       	cpc	r11, r19
    3516:	c4 06       	cpc	r12, r20
    3518:	d5 06       	cpc	r13, r21
    351a:	90 f4       	brcc	.+36     	; 0x3540 <__umoddi3+0x5fc>
    351c:	a2 0c       	add	r10, r2
    351e:	b3 1c       	adc	r11, r3
    3520:	c4 1c       	adc	r12, r4
    3522:	d5 1c       	adc	r13, r5
    3524:	a2 14       	cp	r10, r2
    3526:	b3 04       	cpc	r11, r3
    3528:	c4 04       	cpc	r12, r4
    352a:	d5 04       	cpc	r13, r5
    352c:	48 f0       	brcs	.+18     	; 0x3540 <__umoddi3+0x5fc>
    352e:	a2 16       	cp	r10, r18
    3530:	b3 06       	cpc	r11, r19
    3532:	c4 06       	cpc	r12, r20
    3534:	d5 06       	cpc	r13, r21
    3536:	20 f4       	brcc	.+8      	; 0x3540 <__umoddi3+0x5fc>
    3538:	a2 0c       	add	r10, r2
    353a:	b3 1c       	adc	r11, r3
    353c:	c4 1c       	adc	r12, r4
    353e:	d5 1c       	adc	r13, r5
    3540:	a2 1a       	sub	r10, r18
    3542:	b3 0a       	sbc	r11, r19
    3544:	c4 0a       	sbc	r12, r20
    3546:	d5 0a       	sbc	r13, r21
    3548:	c6 01       	movw	r24, r12
    354a:	b5 01       	movw	r22, r10
    354c:	a4 01       	movw	r20, r8
    354e:	93 01       	movw	r18, r6
    3550:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3554:	7b 01       	movw	r14, r22
    3556:	8c 01       	movw	r16, r24
    3558:	c6 01       	movw	r24, r12
    355a:	b5 01       	movw	r22, r10
    355c:	a4 01       	movw	r20, r8
    355e:	93 01       	movw	r18, r6
    3560:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3564:	ca 01       	movw	r24, r20
    3566:	b9 01       	movw	r22, r18
    3568:	29 96       	adiw	r28, 0x09	; 9
    356a:	2c ad       	ldd	r18, Y+60	; 0x3c
    356c:	3d ad       	ldd	r19, Y+61	; 0x3d
    356e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3570:	5f ad       	ldd	r21, Y+63	; 0x3f
    3572:	29 97       	sbiw	r28, 0x09	; 9
    3574:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3578:	9b 01       	movw	r18, r22
    357a:	ac 01       	movw	r20, r24
    357c:	87 01       	movw	r16, r14
    357e:	ff 24       	eor	r15, r15
    3580:	ee 24       	eor	r14, r14
    3582:	89 a9       	ldd	r24, Y+49	; 0x31
    3584:	9a a9       	ldd	r25, Y+50	; 0x32
    3586:	ab a9       	ldd	r26, Y+51	; 0x33
    3588:	bc a9       	ldd	r27, Y+52	; 0x34
    358a:	a0 70       	andi	r26, 0x00	; 0
    358c:	b0 70       	andi	r27, 0x00	; 0
    358e:	e8 2a       	or	r14, r24
    3590:	f9 2a       	or	r15, r25
    3592:	0a 2b       	or	r16, r26
    3594:	1b 2b       	or	r17, r27
    3596:	e2 16       	cp	r14, r18
    3598:	f3 06       	cpc	r15, r19
    359a:	04 07       	cpc	r16, r20
    359c:	15 07       	cpc	r17, r21
    359e:	90 f4       	brcc	.+36     	; 0x35c4 <__umoddi3+0x680>
    35a0:	e2 0c       	add	r14, r2
    35a2:	f3 1c       	adc	r15, r3
    35a4:	04 1d       	adc	r16, r4
    35a6:	15 1d       	adc	r17, r5
    35a8:	e2 14       	cp	r14, r2
    35aa:	f3 04       	cpc	r15, r3
    35ac:	04 05       	cpc	r16, r4
    35ae:	15 05       	cpc	r17, r5
    35b0:	48 f0       	brcs	.+18     	; 0x35c4 <__umoddi3+0x680>
    35b2:	e2 16       	cp	r14, r18
    35b4:	f3 06       	cpc	r15, r19
    35b6:	04 07       	cpc	r16, r20
    35b8:	15 07       	cpc	r17, r21
    35ba:	20 f4       	brcc	.+8      	; 0x35c4 <__umoddi3+0x680>
    35bc:	e2 0c       	add	r14, r2
    35be:	f3 1c       	adc	r15, r3
    35c0:	04 1d       	adc	r16, r4
    35c2:	15 1d       	adc	r17, r5
    35c4:	e2 1a       	sub	r14, r18
    35c6:	f3 0a       	sbc	r15, r19
    35c8:	04 0b       	sbc	r16, r20
    35ca:	15 0b       	sbc	r17, r21
    35cc:	d8 01       	movw	r26, r16
    35ce:	c7 01       	movw	r24, r14
    35d0:	09 ac       	ldd	r0, Y+57	; 0x39
    35d2:	04 c0       	rjmp	.+8      	; 0x35dc <__umoddi3+0x698>
    35d4:	b6 95       	lsr	r27
    35d6:	a7 95       	ror	r26
    35d8:	97 95       	ror	r25
    35da:	87 95       	ror	r24
    35dc:	0a 94       	dec	r0
    35de:	d2 f7       	brpl	.-12     	; 0x35d4 <__umoddi3+0x690>
    35e0:	89 8b       	std	Y+17, r24	; 0x11
    35e2:	9a 8b       	std	Y+18, r25	; 0x12
    35e4:	ab 8b       	std	Y+19, r26	; 0x13
    35e6:	bc 8b       	std	Y+20, r27	; 0x14
    35e8:	1d 8a       	std	Y+21, r1	; 0x15
    35ea:	1e 8a       	std	Y+22, r1	; 0x16
    35ec:	1f 8a       	std	Y+23, r1	; 0x17
    35ee:	18 8e       	std	Y+24, r1	; 0x18
    35f0:	28 2f       	mov	r18, r24
    35f2:	3a 89       	ldd	r19, Y+18	; 0x12
    35f4:	4b 89       	ldd	r20, Y+19	; 0x13
    35f6:	5c 89       	ldd	r21, Y+20	; 0x14
    35f8:	6d 89       	ldd	r22, Y+21	; 0x15
    35fa:	0c c3       	rjmp	.+1560   	; 0x3c14 <__umoddi3+0xcd0>
    35fc:	6a 14       	cp	r6, r10
    35fe:	7b 04       	cpc	r7, r11
    3600:	8c 04       	cpc	r8, r12
    3602:	9d 04       	cpc	r9, r13
    3604:	08 f4       	brcc	.+2      	; 0x3608 <__umoddi3+0x6c4>
    3606:	09 c3       	rjmp	.+1554   	; 0x3c1a <__umoddi3+0xcd6>
    3608:	00 e0       	ldi	r16, 0x00	; 0
    360a:	a0 16       	cp	r10, r16
    360c:	00 e0       	ldi	r16, 0x00	; 0
    360e:	b0 06       	cpc	r11, r16
    3610:	01 e0       	ldi	r16, 0x01	; 1
    3612:	c0 06       	cpc	r12, r16
    3614:	00 e0       	ldi	r16, 0x00	; 0
    3616:	d0 06       	cpc	r13, r16
    3618:	88 f4       	brcc	.+34     	; 0x363c <__umoddi3+0x6f8>
    361a:	1f ef       	ldi	r17, 0xFF	; 255
    361c:	a1 16       	cp	r10, r17
    361e:	b1 04       	cpc	r11, r1
    3620:	c1 04       	cpc	r12, r1
    3622:	d1 04       	cpc	r13, r1
    3624:	39 f0       	breq	.+14     	; 0x3634 <__umoddi3+0x6f0>
    3626:	30 f0       	brcs	.+12     	; 0x3634 <__umoddi3+0x6f0>
    3628:	28 e0       	ldi	r18, 0x08	; 8
    362a:	e2 2e       	mov	r14, r18
    362c:	f1 2c       	mov	r15, r1
    362e:	01 2d       	mov	r16, r1
    3630:	11 2d       	mov	r17, r1
    3632:	18 c0       	rjmp	.+48     	; 0x3664 <__umoddi3+0x720>
    3634:	ee 24       	eor	r14, r14
    3636:	ff 24       	eor	r15, r15
    3638:	87 01       	movw	r16, r14
    363a:	14 c0       	rjmp	.+40     	; 0x3664 <__umoddi3+0x720>
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	a4 16       	cp	r10, r20
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	b4 06       	cpc	r11, r20
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	c4 06       	cpc	r12, r20
    3648:	41 e0       	ldi	r20, 0x01	; 1
    364a:	d4 06       	cpc	r13, r20
    364c:	30 f0       	brcs	.+12     	; 0x365a <__umoddi3+0x716>
    364e:	98 e1       	ldi	r25, 0x18	; 24
    3650:	e9 2e       	mov	r14, r25
    3652:	f1 2c       	mov	r15, r1
    3654:	01 2d       	mov	r16, r1
    3656:	11 2d       	mov	r17, r1
    3658:	05 c0       	rjmp	.+10     	; 0x3664 <__umoddi3+0x720>
    365a:	80 e1       	ldi	r24, 0x10	; 16
    365c:	e8 2e       	mov	r14, r24
    365e:	f1 2c       	mov	r15, r1
    3660:	01 2d       	mov	r16, r1
    3662:	11 2d       	mov	r17, r1
    3664:	d6 01       	movw	r26, r12
    3666:	c5 01       	movw	r24, r10
    3668:	0e 2c       	mov	r0, r14
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <__umoddi3+0x730>
    366c:	b6 95       	lsr	r27
    366e:	a7 95       	ror	r26
    3670:	97 95       	ror	r25
    3672:	87 95       	ror	r24
    3674:	0a 94       	dec	r0
    3676:	d2 f7       	brpl	.-12     	; 0x366c <__umoddi3+0x728>
    3678:	85 53       	subi	r24, 0x35	; 53
    367a:	9f 4f       	sbci	r25, 0xFF	; 255
    367c:	dc 01       	movw	r26, r24
    367e:	2c 91       	ld	r18, X
    3680:	80 e2       	ldi	r24, 0x20	; 32
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 e0       	ldi	r26, 0x00	; 0
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	8e 19       	sub	r24, r14
    368a:	9f 09       	sbc	r25, r15
    368c:	a0 0b       	sbc	r26, r16
    368e:	b1 0b       	sbc	r27, r17
    3690:	82 1b       	sub	r24, r18
    3692:	91 09       	sbc	r25, r1
    3694:	a1 09       	sbc	r26, r1
    3696:	b1 09       	sbc	r27, r1
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	a1 05       	cpc	r26, r1
    369c:	b1 05       	cpc	r27, r1
    369e:	09 f0       	breq	.+2      	; 0x36a2 <__umoddi3+0x75e>
    36a0:	4f c0       	rjmp	.+158    	; 0x3740 <__umoddi3+0x7fc>
    36a2:	a6 14       	cp	r10, r6
    36a4:	b7 04       	cpc	r11, r7
    36a6:	c8 04       	cpc	r12, r8
    36a8:	d9 04       	cpc	r13, r9
    36aa:	58 f0       	brcs	.+22     	; 0x36c2 <__umoddi3+0x77e>
    36ac:	6c 96       	adiw	r28, 0x1c	; 28
    36ae:	ec ac       	ldd	r14, Y+60	; 0x3c
    36b0:	fd ac       	ldd	r15, Y+61	; 0x3d
    36b2:	0e ad       	ldd	r16, Y+62	; 0x3e
    36b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    36b6:	6c 97       	sbiw	r28, 0x1c	; 28
    36b8:	e2 14       	cp	r14, r2
    36ba:	f3 04       	cpc	r15, r3
    36bc:	04 05       	cpc	r16, r4
    36be:	15 05       	cpc	r17, r5
    36c0:	68 f1       	brcs	.+90     	; 0x371c <__umoddi3+0x7d8>
    36c2:	6c 96       	adiw	r28, 0x1c	; 28
    36c4:	ec ac       	ldd	r14, Y+60	; 0x3c
    36c6:	fd ac       	ldd	r15, Y+61	; 0x3d
    36c8:	0e ad       	ldd	r16, Y+62	; 0x3e
    36ca:	1f ad       	ldd	r17, Y+63	; 0x3f
    36cc:	6c 97       	sbiw	r28, 0x1c	; 28
    36ce:	e2 18       	sub	r14, r2
    36d0:	f3 08       	sbc	r15, r3
    36d2:	04 09       	sbc	r16, r4
    36d4:	15 09       	sbc	r17, r5
    36d6:	a4 01       	movw	r20, r8
    36d8:	93 01       	movw	r18, r6
    36da:	2a 19       	sub	r18, r10
    36dc:	3b 09       	sbc	r19, r11
    36de:	4c 09       	sbc	r20, r12
    36e0:	5d 09       	sbc	r21, r13
    36e2:	aa 24       	eor	r10, r10
    36e4:	bb 24       	eor	r11, r11
    36e6:	65 01       	movw	r12, r10
    36e8:	6c 96       	adiw	r28, 0x1c	; 28
    36ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    36ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    36ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    36f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36f2:	6c 97       	sbiw	r28, 0x1c	; 28
    36f4:	6e 15       	cp	r22, r14
    36f6:	7f 05       	cpc	r23, r15
    36f8:	80 07       	cpc	r24, r16
    36fa:	91 07       	cpc	r25, r17
    36fc:	28 f4       	brcc	.+10     	; 0x3708 <__umoddi3+0x7c4>
    36fe:	b1 e0       	ldi	r27, 0x01	; 1
    3700:	ab 2e       	mov	r10, r27
    3702:	b1 2c       	mov	r11, r1
    3704:	c1 2c       	mov	r12, r1
    3706:	d1 2c       	mov	r13, r1
    3708:	da 01       	movw	r26, r20
    370a:	c9 01       	movw	r24, r18
    370c:	8a 19       	sub	r24, r10
    370e:	9b 09       	sbc	r25, r11
    3710:	ac 09       	sbc	r26, r12
    3712:	bd 09       	sbc	r27, r13
    3714:	8d ab       	std	Y+53, r24	; 0x35
    3716:	9e ab       	std	Y+54, r25	; 0x36
    3718:	af ab       	std	Y+55, r26	; 0x37
    371a:	b8 af       	std	Y+56, r27	; 0x38
    371c:	e9 8a       	std	Y+17, r14	; 0x11
    371e:	fa 8a       	std	Y+18, r15	; 0x12
    3720:	0b 8b       	std	Y+19, r16	; 0x13
    3722:	1c 8b       	std	Y+20, r17	; 0x14
    3724:	6d a8       	ldd	r6, Y+53	; 0x35
    3726:	7e a8       	ldd	r7, Y+54	; 0x36
    3728:	8f a8       	ldd	r8, Y+55	; 0x37
    372a:	98 ac       	ldd	r9, Y+56	; 0x38
    372c:	6d 8a       	std	Y+21, r6	; 0x15
    372e:	7e 8a       	std	Y+22, r7	; 0x16
    3730:	8f 8a       	std	Y+23, r8	; 0x17
    3732:	98 8e       	std	Y+24, r9	; 0x18
    3734:	2e 2d       	mov	r18, r14
    3736:	3a 89       	ldd	r19, Y+18	; 0x12
    3738:	4b 89       	ldd	r20, Y+19	; 0x13
    373a:	5c 89       	ldd	r21, Y+20	; 0x14
    373c:	6d a9       	ldd	r22, Y+53	; 0x35
    373e:	6a c2       	rjmp	.+1236   	; 0x3c14 <__umoddi3+0xcd0>
    3740:	67 96       	adiw	r28, 0x17	; 23
    3742:	8f af       	std	Y+63, r24	; 0x3f
    3744:	67 97       	sbiw	r28, 0x17	; 23
    3746:	a6 01       	movw	r20, r12
    3748:	95 01       	movw	r18, r10
    374a:	08 2e       	mov	r0, r24
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <__umoddi3+0x812>
    374e:	22 0f       	add	r18, r18
    3750:	33 1f       	adc	r19, r19
    3752:	44 1f       	adc	r20, r20
    3754:	55 1f       	adc	r21, r21
    3756:	0a 94       	dec	r0
    3758:	d2 f7       	brpl	.-12     	; 0x374e <__umoddi3+0x80a>
    375a:	a0 e2       	ldi	r26, 0x20	; 32
    375c:	aa 2e       	mov	r10, r26
    375e:	a8 1a       	sub	r10, r24
    3760:	66 96       	adiw	r28, 0x16	; 22
    3762:	af ae       	std	Y+63, r10	; 0x3f
    3764:	66 97       	sbiw	r28, 0x16	; 22
    3766:	d2 01       	movw	r26, r4
    3768:	c1 01       	movw	r24, r2
    376a:	04 c0       	rjmp	.+8      	; 0x3774 <__umoddi3+0x830>
    376c:	b6 95       	lsr	r27
    376e:	a7 95       	ror	r26
    3770:	97 95       	ror	r25
    3772:	87 95       	ror	r24
    3774:	aa 94       	dec	r10
    3776:	d2 f7       	brpl	.-12     	; 0x376c <__umoddi3+0x828>
    3778:	6c 01       	movw	r12, r24
    377a:	7d 01       	movw	r14, r26
    377c:	c2 2a       	or	r12, r18
    377e:	d3 2a       	or	r13, r19
    3780:	e4 2a       	or	r14, r20
    3782:	f5 2a       	or	r15, r21
    3784:	c9 a6       	std	Y+41, r12	; 0x29
    3786:	da a6       	std	Y+42, r13	; 0x2a
    3788:	eb a6       	std	Y+43, r14	; 0x2b
    378a:	fc a6       	std	Y+44, r15	; 0x2c
    378c:	82 01       	movw	r16, r4
    378e:	71 01       	movw	r14, r2
    3790:	67 96       	adiw	r28, 0x17	; 23
    3792:	0f ac       	ldd	r0, Y+63	; 0x3f
    3794:	67 97       	sbiw	r28, 0x17	; 23
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <__umoddi3+0x85c>
    3798:	ee 0c       	add	r14, r14
    379a:	ff 1c       	adc	r15, r15
    379c:	00 1f       	adc	r16, r16
    379e:	11 1f       	adc	r17, r17
    37a0:	0a 94       	dec	r0
    37a2:	d2 f7       	brpl	.-12     	; 0x3798 <__umoddi3+0x854>
    37a4:	ed a2       	std	Y+37, r14	; 0x25
    37a6:	fe a2       	std	Y+38, r15	; 0x26
    37a8:	0f a3       	std	Y+39, r16	; 0x27
    37aa:	18 a7       	std	Y+40, r17	; 0x28
    37ac:	64 01       	movw	r12, r8
    37ae:	53 01       	movw	r10, r6
    37b0:	66 96       	adiw	r28, 0x16	; 22
    37b2:	0f ac       	ldd	r0, Y+63	; 0x3f
    37b4:	66 97       	sbiw	r28, 0x16	; 22
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <__umoddi3+0x87c>
    37b8:	d6 94       	lsr	r13
    37ba:	c7 94       	ror	r12
    37bc:	b7 94       	ror	r11
    37be:	a7 94       	ror	r10
    37c0:	0a 94       	dec	r0
    37c2:	d2 f7       	brpl	.-12     	; 0x37b8 <__umoddi3+0x874>
    37c4:	a4 01       	movw	r20, r8
    37c6:	93 01       	movw	r18, r6
    37c8:	67 96       	adiw	r28, 0x17	; 23
    37ca:	0f ac       	ldd	r0, Y+63	; 0x3f
    37cc:	67 97       	sbiw	r28, 0x17	; 23
    37ce:	04 c0       	rjmp	.+8      	; 0x37d8 <__umoddi3+0x894>
    37d0:	22 0f       	add	r18, r18
    37d2:	33 1f       	adc	r19, r19
    37d4:	44 1f       	adc	r20, r20
    37d6:	55 1f       	adc	r21, r21
    37d8:	0a 94       	dec	r0
    37da:	d2 f7       	brpl	.-12     	; 0x37d0 <__umoddi3+0x88c>
    37dc:	6c 96       	adiw	r28, 0x1c	; 28
    37de:	8c ad       	ldd	r24, Y+60	; 0x3c
    37e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    37e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    37e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    37e6:	6c 97       	sbiw	r28, 0x1c	; 28
    37e8:	66 96       	adiw	r28, 0x16	; 22
    37ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    37ec:	66 97       	sbiw	r28, 0x16	; 22
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <__umoddi3+0x8b4>
    37f0:	b6 95       	lsr	r27
    37f2:	a7 95       	ror	r26
    37f4:	97 95       	ror	r25
    37f6:	87 95       	ror	r24
    37f8:	0a 94       	dec	r0
    37fa:	d2 f7       	brpl	.-12     	; 0x37f0 <__umoddi3+0x8ac>
    37fc:	3c 01       	movw	r6, r24
    37fe:	4d 01       	movw	r8, r26
    3800:	62 2a       	or	r6, r18
    3802:	73 2a       	or	r7, r19
    3804:	84 2a       	or	r8, r20
    3806:	95 2a       	or	r9, r21
    3808:	69 a2       	std	Y+33, r6	; 0x21
    380a:	7a a2       	std	Y+34, r7	; 0x22
    380c:	8b a2       	std	Y+35, r8	; 0x23
    380e:	9c a2       	std	Y+36, r9	; 0x24
    3810:	6c 96       	adiw	r28, 0x1c	; 28
    3812:	ec ac       	ldd	r14, Y+60	; 0x3c
    3814:	fd ac       	ldd	r15, Y+61	; 0x3d
    3816:	0e ad       	ldd	r16, Y+62	; 0x3e
    3818:	1f ad       	ldd	r17, Y+63	; 0x3f
    381a:	6c 97       	sbiw	r28, 0x1c	; 28
    381c:	67 96       	adiw	r28, 0x17	; 23
    381e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3820:	67 97       	sbiw	r28, 0x17	; 23
    3822:	04 c0       	rjmp	.+8      	; 0x382c <__umoddi3+0x8e8>
    3824:	ee 0c       	add	r14, r14
    3826:	ff 1c       	adc	r15, r15
    3828:	00 1f       	adc	r16, r16
    382a:	11 1f       	adc	r17, r17
    382c:	0a 94       	dec	r0
    382e:	d2 f7       	brpl	.-12     	; 0x3824 <__umoddi3+0x8e0>
    3830:	ed 8e       	std	Y+29, r14	; 0x1d
    3832:	fe 8e       	std	Y+30, r15	; 0x1e
    3834:	0f 8f       	std	Y+31, r16	; 0x1f
    3836:	18 a3       	std	Y+32, r17	; 0x20
    3838:	49 a5       	ldd	r20, Y+41	; 0x29
    383a:	5a a5       	ldd	r21, Y+42	; 0x2a
    383c:	6b a5       	ldd	r22, Y+43	; 0x2b
    383e:	7c a5       	ldd	r23, Y+44	; 0x2c
    3840:	3b 01       	movw	r6, r22
    3842:	88 24       	eor	r8, r8
    3844:	99 24       	eor	r9, r9
    3846:	60 70       	andi	r22, 0x00	; 0
    3848:	70 70       	andi	r23, 0x00	; 0
    384a:	2d 96       	adiw	r28, 0x0d	; 13
    384c:	4c af       	std	Y+60, r20	; 0x3c
    384e:	5d af       	std	Y+61, r21	; 0x3d
    3850:	6e af       	std	Y+62, r22	; 0x3e
    3852:	7f af       	std	Y+63, r23	; 0x3f
    3854:	2d 97       	sbiw	r28, 0x0d	; 13
    3856:	c6 01       	movw	r24, r12
    3858:	b5 01       	movw	r22, r10
    385a:	a4 01       	movw	r20, r8
    385c:	93 01       	movw	r18, r6
    385e:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3862:	7b 01       	movw	r14, r22
    3864:	8c 01       	movw	r16, r24
    3866:	c6 01       	movw	r24, r12
    3868:	b5 01       	movw	r22, r10
    386a:	a4 01       	movw	r20, r8
    386c:	93 01       	movw	r18, r6
    386e:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3872:	c9 01       	movw	r24, r18
    3874:	da 01       	movw	r26, r20
    3876:	1c 01       	movw	r2, r24
    3878:	2d 01       	movw	r4, r26
    387a:	c2 01       	movw	r24, r4
    387c:	b1 01       	movw	r22, r2
    387e:	2d 96       	adiw	r28, 0x0d	; 13
    3880:	2c ad       	ldd	r18, Y+60	; 0x3c
    3882:	3d ad       	ldd	r19, Y+61	; 0x3d
    3884:	4e ad       	ldd	r20, Y+62	; 0x3e
    3886:	5f ad       	ldd	r21, Y+63	; 0x3f
    3888:	2d 97       	sbiw	r28, 0x0d	; 13
    388a:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    388e:	9b 01       	movw	r18, r22
    3890:	ac 01       	movw	r20, r24
    3892:	87 01       	movw	r16, r14
    3894:	ff 24       	eor	r15, r15
    3896:	ee 24       	eor	r14, r14
    3898:	a9 a0       	ldd	r10, Y+33	; 0x21
    389a:	ba a0       	ldd	r11, Y+34	; 0x22
    389c:	cb a0       	ldd	r12, Y+35	; 0x23
    389e:	dc a0       	ldd	r13, Y+36	; 0x24
    38a0:	c6 01       	movw	r24, r12
    38a2:	aa 27       	eor	r26, r26
    38a4:	bb 27       	eor	r27, r27
    38a6:	57 01       	movw	r10, r14
    38a8:	68 01       	movw	r12, r16
    38aa:	a8 2a       	or	r10, r24
    38ac:	b9 2a       	or	r11, r25
    38ae:	ca 2a       	or	r12, r26
    38b0:	db 2a       	or	r13, r27
    38b2:	a2 16       	cp	r10, r18
    38b4:	b3 06       	cpc	r11, r19
    38b6:	c4 06       	cpc	r12, r20
    38b8:	d5 06       	cpc	r13, r21
    38ba:	00 f5       	brcc	.+64     	; 0x38fc <__umoddi3+0x9b8>
    38bc:	08 94       	sec
    38be:	21 08       	sbc	r2, r1
    38c0:	31 08       	sbc	r3, r1
    38c2:	41 08       	sbc	r4, r1
    38c4:	51 08       	sbc	r5, r1
    38c6:	e9 a4       	ldd	r14, Y+41	; 0x29
    38c8:	fa a4       	ldd	r15, Y+42	; 0x2a
    38ca:	0b a5       	ldd	r16, Y+43	; 0x2b
    38cc:	1c a5       	ldd	r17, Y+44	; 0x2c
    38ce:	ae 0c       	add	r10, r14
    38d0:	bf 1c       	adc	r11, r15
    38d2:	c0 1e       	adc	r12, r16
    38d4:	d1 1e       	adc	r13, r17
    38d6:	ae 14       	cp	r10, r14
    38d8:	bf 04       	cpc	r11, r15
    38da:	c0 06       	cpc	r12, r16
    38dc:	d1 06       	cpc	r13, r17
    38de:	70 f0       	brcs	.+28     	; 0x38fc <__umoddi3+0x9b8>
    38e0:	a2 16       	cp	r10, r18
    38e2:	b3 06       	cpc	r11, r19
    38e4:	c4 06       	cpc	r12, r20
    38e6:	d5 06       	cpc	r13, r21
    38e8:	48 f4       	brcc	.+18     	; 0x38fc <__umoddi3+0x9b8>
    38ea:	08 94       	sec
    38ec:	21 08       	sbc	r2, r1
    38ee:	31 08       	sbc	r3, r1
    38f0:	41 08       	sbc	r4, r1
    38f2:	51 08       	sbc	r5, r1
    38f4:	ae 0c       	add	r10, r14
    38f6:	bf 1c       	adc	r11, r15
    38f8:	c0 1e       	adc	r12, r16
    38fa:	d1 1e       	adc	r13, r17
    38fc:	a2 1a       	sub	r10, r18
    38fe:	b3 0a       	sbc	r11, r19
    3900:	c4 0a       	sbc	r12, r20
    3902:	d5 0a       	sbc	r13, r21
    3904:	c6 01       	movw	r24, r12
    3906:	b5 01       	movw	r22, r10
    3908:	a4 01       	movw	r20, r8
    390a:	93 01       	movw	r18, r6
    390c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3910:	7b 01       	movw	r14, r22
    3912:	8c 01       	movw	r16, r24
    3914:	c6 01       	movw	r24, r12
    3916:	b5 01       	movw	r22, r10
    3918:	a4 01       	movw	r20, r8
    391a:	93 01       	movw	r18, r6
    391c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3920:	c9 01       	movw	r24, r18
    3922:	da 01       	movw	r26, r20
    3924:	3c 01       	movw	r6, r24
    3926:	4d 01       	movw	r8, r26
    3928:	c4 01       	movw	r24, r8
    392a:	b3 01       	movw	r22, r6
    392c:	2d 96       	adiw	r28, 0x0d	; 13
    392e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3930:	3d ad       	ldd	r19, Y+61	; 0x3d
    3932:	4e ad       	ldd	r20, Y+62	; 0x3e
    3934:	5f ad       	ldd	r21, Y+63	; 0x3f
    3936:	2d 97       	sbiw	r28, 0x0d	; 13
    3938:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    393c:	9b 01       	movw	r18, r22
    393e:	ac 01       	movw	r20, r24
    3940:	87 01       	movw	r16, r14
    3942:	ff 24       	eor	r15, r15
    3944:	ee 24       	eor	r14, r14
    3946:	89 a1       	ldd	r24, Y+33	; 0x21
    3948:	9a a1       	ldd	r25, Y+34	; 0x22
    394a:	ab a1       	ldd	r26, Y+35	; 0x23
    394c:	bc a1       	ldd	r27, Y+36	; 0x24
    394e:	a0 70       	andi	r26, 0x00	; 0
    3950:	b0 70       	andi	r27, 0x00	; 0
    3952:	57 01       	movw	r10, r14
    3954:	68 01       	movw	r12, r16
    3956:	a8 2a       	or	r10, r24
    3958:	b9 2a       	or	r11, r25
    395a:	ca 2a       	or	r12, r26
    395c:	db 2a       	or	r13, r27
    395e:	a2 16       	cp	r10, r18
    3960:	b3 06       	cpc	r11, r19
    3962:	c4 06       	cpc	r12, r20
    3964:	d5 06       	cpc	r13, r21
    3966:	00 f5       	brcc	.+64     	; 0x39a8 <__umoddi3+0xa64>
    3968:	08 94       	sec
    396a:	61 08       	sbc	r6, r1
    396c:	71 08       	sbc	r7, r1
    396e:	81 08       	sbc	r8, r1
    3970:	91 08       	sbc	r9, r1
    3972:	69 a5       	ldd	r22, Y+41	; 0x29
    3974:	7a a5       	ldd	r23, Y+42	; 0x2a
    3976:	8b a5       	ldd	r24, Y+43	; 0x2b
    3978:	9c a5       	ldd	r25, Y+44	; 0x2c
    397a:	a6 0e       	add	r10, r22
    397c:	b7 1e       	adc	r11, r23
    397e:	c8 1e       	adc	r12, r24
    3980:	d9 1e       	adc	r13, r25
    3982:	a6 16       	cp	r10, r22
    3984:	b7 06       	cpc	r11, r23
    3986:	c8 06       	cpc	r12, r24
    3988:	d9 06       	cpc	r13, r25
    398a:	70 f0       	brcs	.+28     	; 0x39a8 <__umoddi3+0xa64>
    398c:	a2 16       	cp	r10, r18
    398e:	b3 06       	cpc	r11, r19
    3990:	c4 06       	cpc	r12, r20
    3992:	d5 06       	cpc	r13, r21
    3994:	48 f4       	brcc	.+18     	; 0x39a8 <__umoddi3+0xa64>
    3996:	08 94       	sec
    3998:	61 08       	sbc	r6, r1
    399a:	71 08       	sbc	r7, r1
    399c:	81 08       	sbc	r8, r1
    399e:	91 08       	sbc	r9, r1
    39a0:	a6 0e       	add	r10, r22
    39a2:	b7 1e       	adc	r11, r23
    39a4:	c8 1e       	adc	r12, r24
    39a6:	d9 1e       	adc	r13, r25
    39a8:	d6 01       	movw	r26, r12
    39aa:	c5 01       	movw	r24, r10
    39ac:	82 1b       	sub	r24, r18
    39ae:	93 0b       	sbc	r25, r19
    39b0:	a4 0b       	sbc	r26, r20
    39b2:	b5 0b       	sbc	r27, r21
    39b4:	89 8f       	std	Y+25, r24	; 0x19
    39b6:	9a 8f       	std	Y+26, r25	; 0x1a
    39b8:	ab 8f       	std	Y+27, r26	; 0x1b
    39ba:	bc 8f       	std	Y+28, r27	; 0x1c
    39bc:	d1 01       	movw	r26, r2
    39be:	99 27       	eor	r25, r25
    39c0:	88 27       	eor	r24, r24
    39c2:	84 01       	movw	r16, r8
    39c4:	73 01       	movw	r14, r6
    39c6:	e8 2a       	or	r14, r24
    39c8:	f9 2a       	or	r15, r25
    39ca:	0a 2b       	or	r16, r26
    39cc:	1b 2b       	or	r17, r27
    39ce:	4f ef       	ldi	r20, 0xFF	; 255
    39d0:	a4 2e       	mov	r10, r20
    39d2:	4f ef       	ldi	r20, 0xFF	; 255
    39d4:	b4 2e       	mov	r11, r20
    39d6:	c1 2c       	mov	r12, r1
    39d8:	d1 2c       	mov	r13, r1
    39da:	ae 20       	and	r10, r14
    39dc:	bf 20       	and	r11, r15
    39de:	c0 22       	and	r12, r16
    39e0:	d1 22       	and	r13, r17
    39e2:	78 01       	movw	r14, r16
    39e4:	00 27       	eor	r16, r16
    39e6:	11 27       	eor	r17, r17
    39e8:	6d a0       	ldd	r6, Y+37	; 0x25
    39ea:	7e a0       	ldd	r7, Y+38	; 0x26
    39ec:	8f a0       	ldd	r8, Y+39	; 0x27
    39ee:	98 a4       	ldd	r9, Y+40	; 0x28
    39f0:	4f ef       	ldi	r20, 0xFF	; 255
    39f2:	5f ef       	ldi	r21, 0xFF	; 255
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	64 22       	and	r6, r20
    39fa:	75 22       	and	r7, r21
    39fc:	86 22       	and	r8, r22
    39fe:	97 22       	and	r9, r23
    3a00:	8d a1       	ldd	r24, Y+37	; 0x25
    3a02:	9e a1       	ldd	r25, Y+38	; 0x26
    3a04:	af a1       	ldd	r26, Y+39	; 0x27
    3a06:	b8 a5       	ldd	r27, Y+40	; 0x28
    3a08:	bd 01       	movw	r22, r26
    3a0a:	88 27       	eor	r24, r24
    3a0c:	99 27       	eor	r25, r25
    3a0e:	65 96       	adiw	r28, 0x15	; 21
    3a10:	6c af       	std	Y+60, r22	; 0x3c
    3a12:	7d af       	std	Y+61, r23	; 0x3d
    3a14:	8e af       	std	Y+62, r24	; 0x3e
    3a16:	9f af       	std	Y+63, r25	; 0x3f
    3a18:	65 97       	sbiw	r28, 0x15	; 21
    3a1a:	c6 01       	movw	r24, r12
    3a1c:	b5 01       	movw	r22, r10
    3a1e:	a4 01       	movw	r20, r8
    3a20:	93 01       	movw	r18, r6
    3a22:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3a26:	61 96       	adiw	r28, 0x11	; 17
    3a28:	6c af       	std	Y+60, r22	; 0x3c
    3a2a:	7d af       	std	Y+61, r23	; 0x3d
    3a2c:	8e af       	std	Y+62, r24	; 0x3e
    3a2e:	9f af       	std	Y+63, r25	; 0x3f
    3a30:	61 97       	sbiw	r28, 0x11	; 17
    3a32:	c6 01       	movw	r24, r12
    3a34:	b5 01       	movw	r22, r10
    3a36:	65 96       	adiw	r28, 0x15	; 21
    3a38:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a40:	65 97       	sbiw	r28, 0x15	; 21
    3a42:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3a46:	1b 01       	movw	r2, r22
    3a48:	2c 01       	movw	r4, r24
    3a4a:	c8 01       	movw	r24, r16
    3a4c:	b7 01       	movw	r22, r14
    3a4e:	a4 01       	movw	r20, r8
    3a50:	93 01       	movw	r18, r6
    3a52:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3a56:	5b 01       	movw	r10, r22
    3a58:	6c 01       	movw	r12, r24
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	65 96       	adiw	r28, 0x15	; 21
    3a60:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a62:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a64:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a66:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a68:	65 97       	sbiw	r28, 0x15	; 21
    3a6a:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3a6e:	7b 01       	movw	r14, r22
    3a70:	8c 01       	movw	r16, r24
    3a72:	a6 01       	movw	r20, r12
    3a74:	95 01       	movw	r18, r10
    3a76:	22 0d       	add	r18, r2
    3a78:	33 1d       	adc	r19, r3
    3a7a:	44 1d       	adc	r20, r4
    3a7c:	55 1d       	adc	r21, r5
    3a7e:	61 96       	adiw	r28, 0x11	; 17
    3a80:	6c ac       	ldd	r6, Y+60	; 0x3c
    3a82:	7d ac       	ldd	r7, Y+61	; 0x3d
    3a84:	8e ac       	ldd	r8, Y+62	; 0x3e
    3a86:	9f ac       	ldd	r9, Y+63	; 0x3f
    3a88:	61 97       	sbiw	r28, 0x11	; 17
    3a8a:	c4 01       	movw	r24, r8
    3a8c:	aa 27       	eor	r26, r26
    3a8e:	bb 27       	eor	r27, r27
    3a90:	28 0f       	add	r18, r24
    3a92:	39 1f       	adc	r19, r25
    3a94:	4a 1f       	adc	r20, r26
    3a96:	5b 1f       	adc	r21, r27
    3a98:	2a 15       	cp	r18, r10
    3a9a:	3b 05       	cpc	r19, r11
    3a9c:	4c 05       	cpc	r20, r12
    3a9e:	5d 05       	cpc	r21, r13
    3aa0:	48 f4       	brcc	.+18     	; 0x3ab4 <__umoddi3+0xb70>
    3aa2:	81 2c       	mov	r8, r1
    3aa4:	91 2c       	mov	r9, r1
    3aa6:	e1 e0       	ldi	r30, 0x01	; 1
    3aa8:	ae 2e       	mov	r10, r30
    3aaa:	b1 2c       	mov	r11, r1
    3aac:	e8 0c       	add	r14, r8
    3aae:	f9 1c       	adc	r15, r9
    3ab0:	0a 1d       	adc	r16, r10
    3ab2:	1b 1d       	adc	r17, r11
    3ab4:	ca 01       	movw	r24, r20
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	bb 27       	eor	r27, r27
    3aba:	57 01       	movw	r10, r14
    3abc:	68 01       	movw	r12, r16
    3abe:	a8 0e       	add	r10, r24
    3ac0:	b9 1e       	adc	r11, r25
    3ac2:	ca 1e       	adc	r12, r26
    3ac4:	db 1e       	adc	r13, r27
    3ac6:	a9 01       	movw	r20, r18
    3ac8:	33 27       	eor	r19, r19
    3aca:	22 27       	eor	r18, r18
    3acc:	61 96       	adiw	r28, 0x11	; 17
    3ace:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ad0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ad2:	ae ad       	ldd	r26, Y+62	; 0x3e
    3ad4:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ad6:	61 97       	sbiw	r28, 0x11	; 17
    3ad8:	a0 70       	andi	r26, 0x00	; 0
    3ada:	b0 70       	andi	r27, 0x00	; 0
    3adc:	28 0f       	add	r18, r24
    3ade:	39 1f       	adc	r19, r25
    3ae0:	4a 1f       	adc	r20, r26
    3ae2:	5b 1f       	adc	r21, r27
    3ae4:	e9 8c       	ldd	r14, Y+25	; 0x19
    3ae6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3ae8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3aea:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3aec:	ea 14       	cp	r14, r10
    3aee:	fb 04       	cpc	r15, r11
    3af0:	0c 05       	cpc	r16, r12
    3af2:	1d 05       	cpc	r17, r13
    3af4:	70 f0       	brcs	.+28     	; 0x3b12 <__umoddi3+0xbce>
    3af6:	ae 14       	cp	r10, r14
    3af8:	bf 04       	cpc	r11, r15
    3afa:	c0 06       	cpc	r12, r16
    3afc:	d1 06       	cpc	r13, r17
    3afe:	69 f5       	brne	.+90     	; 0x3b5a <__umoddi3+0xc16>
    3b00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b02:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b06:	98 a1       	ldd	r25, Y+32	; 0x20
    3b08:	62 17       	cp	r22, r18
    3b0a:	73 07       	cpc	r23, r19
    3b0c:	84 07       	cpc	r24, r20
    3b0e:	95 07       	cpc	r25, r21
    3b10:	20 f5       	brcc	.+72     	; 0x3b5a <__umoddi3+0xc16>
    3b12:	da 01       	movw	r26, r20
    3b14:	c9 01       	movw	r24, r18
    3b16:	6d a0       	ldd	r6, Y+37	; 0x25
    3b18:	7e a0       	ldd	r7, Y+38	; 0x26
    3b1a:	8f a0       	ldd	r8, Y+39	; 0x27
    3b1c:	98 a4       	ldd	r9, Y+40	; 0x28
    3b1e:	86 19       	sub	r24, r6
    3b20:	97 09       	sbc	r25, r7
    3b22:	a8 09       	sbc	r26, r8
    3b24:	b9 09       	sbc	r27, r9
    3b26:	e9 a4       	ldd	r14, Y+41	; 0x29
    3b28:	fa a4       	ldd	r15, Y+42	; 0x2a
    3b2a:	0b a5       	ldd	r16, Y+43	; 0x2b
    3b2c:	1c a5       	ldd	r17, Y+44	; 0x2c
    3b2e:	ae 18       	sub	r10, r14
    3b30:	bf 08       	sbc	r11, r15
    3b32:	c0 0a       	sbc	r12, r16
    3b34:	d1 0a       	sbc	r13, r17
    3b36:	ee 24       	eor	r14, r14
    3b38:	ff 24       	eor	r15, r15
    3b3a:	87 01       	movw	r16, r14
    3b3c:	28 17       	cp	r18, r24
    3b3e:	39 07       	cpc	r19, r25
    3b40:	4a 07       	cpc	r20, r26
    3b42:	5b 07       	cpc	r21, r27
    3b44:	28 f4       	brcc	.+10     	; 0x3b50 <__umoddi3+0xc0c>
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	e2 2e       	mov	r14, r18
    3b4a:	f1 2c       	mov	r15, r1
    3b4c:	01 2d       	mov	r16, r1
    3b4e:	11 2d       	mov	r17, r1
    3b50:	ae 18       	sub	r10, r14
    3b52:	bf 08       	sbc	r11, r15
    3b54:	c0 0a       	sbc	r12, r16
    3b56:	d1 0a       	sbc	r13, r17
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <__umoddi3+0xc1a>
    3b5a:	da 01       	movw	r26, r20
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3b60:	7e 8c       	ldd	r7, Y+30	; 0x1e
    3b62:	8f 8c       	ldd	r8, Y+31	; 0x1f
    3b64:	98 a0       	ldd	r9, Y+32	; 0x20
    3b66:	68 1a       	sub	r6, r24
    3b68:	79 0a       	sbc	r7, r25
    3b6a:	8a 0a       	sbc	r8, r26
    3b6c:	9b 0a       	sbc	r9, r27
    3b6e:	49 8d       	ldd	r20, Y+25	; 0x19
    3b70:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3b72:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3b74:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3b76:	4a 19       	sub	r20, r10
    3b78:	5b 09       	sbc	r21, r11
    3b7a:	6c 09       	sbc	r22, r12
    3b7c:	7d 09       	sbc	r23, r13
    3b7e:	5a 01       	movw	r10, r20
    3b80:	6b 01       	movw	r12, r22
    3b82:	22 24       	eor	r2, r2
    3b84:	33 24       	eor	r3, r3
    3b86:	21 01       	movw	r4, r2
    3b88:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b8a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b90:	66 15       	cp	r22, r6
    3b92:	77 05       	cpc	r23, r7
    3b94:	88 05       	cpc	r24, r8
    3b96:	99 05       	cpc	r25, r9
    3b98:	28 f4       	brcc	.+10     	; 0x3ba4 <__umoddi3+0xc60>
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	28 2e       	mov	r2, r24
    3b9e:	31 2c       	mov	r3, r1
    3ba0:	41 2c       	mov	r4, r1
    3ba2:	51 2c       	mov	r5, r1
    3ba4:	86 01       	movw	r16, r12
    3ba6:	75 01       	movw	r14, r10
    3ba8:	e2 18       	sub	r14, r2
    3baa:	f3 08       	sbc	r15, r3
    3bac:	04 09       	sbc	r16, r4
    3bae:	15 09       	sbc	r17, r5
    3bb0:	a8 01       	movw	r20, r16
    3bb2:	97 01       	movw	r18, r14
    3bb4:	66 96       	adiw	r28, 0x16	; 22
    3bb6:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bb8:	66 97       	sbiw	r28, 0x16	; 22
    3bba:	04 c0       	rjmp	.+8      	; 0x3bc4 <__umoddi3+0xc80>
    3bbc:	22 0f       	add	r18, r18
    3bbe:	33 1f       	adc	r19, r19
    3bc0:	44 1f       	adc	r20, r20
    3bc2:	55 1f       	adc	r21, r21
    3bc4:	0a 94       	dec	r0
    3bc6:	d2 f7       	brpl	.-12     	; 0x3bbc <__umoddi3+0xc78>
    3bc8:	d4 01       	movw	r26, r8
    3bca:	c3 01       	movw	r24, r6
    3bcc:	67 96       	adiw	r28, 0x17	; 23
    3bce:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bd0:	67 97       	sbiw	r28, 0x17	; 23
    3bd2:	04 c0       	rjmp	.+8      	; 0x3bdc <__umoddi3+0xc98>
    3bd4:	b6 95       	lsr	r27
    3bd6:	a7 95       	ror	r26
    3bd8:	97 95       	ror	r25
    3bda:	87 95       	ror	r24
    3bdc:	0a 94       	dec	r0
    3bde:	d2 f7       	brpl	.-12     	; 0x3bd4 <__umoddi3+0xc90>
    3be0:	28 2b       	or	r18, r24
    3be2:	39 2b       	or	r19, r25
    3be4:	4a 2b       	or	r20, r26
    3be6:	5b 2b       	or	r21, r27
    3be8:	29 8b       	std	Y+17, r18	; 0x11
    3bea:	3a 8b       	std	Y+18, r19	; 0x12
    3bec:	4b 8b       	std	Y+19, r20	; 0x13
    3bee:	5c 8b       	std	Y+20, r21	; 0x14
    3bf0:	67 96       	adiw	r28, 0x17	; 23
    3bf2:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bf4:	67 97       	sbiw	r28, 0x17	; 23
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <__umoddi3+0xcbc>
    3bf8:	16 95       	lsr	r17
    3bfa:	07 95       	ror	r16
    3bfc:	f7 94       	ror	r15
    3bfe:	e7 94       	ror	r14
    3c00:	0a 94       	dec	r0
    3c02:	d2 f7       	brpl	.-12     	; 0x3bf8 <__umoddi3+0xcb4>
    3c04:	ed 8a       	std	Y+21, r14	; 0x15
    3c06:	fe 8a       	std	Y+22, r15	; 0x16
    3c08:	0f 8b       	std	Y+23, r16	; 0x17
    3c0a:	18 8f       	std	Y+24, r17	; 0x18
    3c0c:	3a 89       	ldd	r19, Y+18	; 0x12
    3c0e:	4b 89       	ldd	r20, Y+19	; 0x13
    3c10:	5c 89       	ldd	r21, Y+20	; 0x14
    3c12:	6e 2d       	mov	r22, r14
    3c14:	7e 89       	ldd	r23, Y+22	; 0x16
    3c16:	8f 89       	ldd	r24, Y+23	; 0x17
    3c18:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1a:	c5 5a       	subi	r28, 0xA5	; 165
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	e2 e1       	ldi	r30, 0x12	; 18
    3c20:	0c 94 fa 33 	jmp	0x67f4	; 0x67f4 <__epilogue_restores__>

00003c24 <main>:
#include"../../2_HAL/LCD/LCD_INTERFACE.h"
#include <util/delay.h>
#include <string.h>
#define PASS_LOCATION   0x12

int main(void) {
    3c24:	2f 92       	push	r2
    3c26:	3f 92       	push	r3
    3c28:	4f 92       	push	r4
    3c2a:	5f 92       	push	r5
    3c2c:	6f 92       	push	r6
    3c2e:	7f 92       	push	r7
    3c30:	8f 92       	push	r8
    3c32:	9f 92       	push	r9
    3c34:	af 92       	push	r10
    3c36:	bf 92       	push	r11
    3c38:	df 92       	push	r13
    3c3a:	ef 92       	push	r14
    3c3c:	ff 92       	push	r15
    3c3e:	0f 93       	push	r16
    3c40:	1f 93       	push	r17
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
    3c4a:	65 97       	sbiw	r28, 0x15	; 21
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	f8 94       	cli
    3c50:	de bf       	out	0x3e, r29	; 62
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	cd bf       	out	0x3d, r28	; 61
	u8 read[5] = { 0 };
    3c56:	85 e0       	ldi	r24, 0x05	; 5
    3c58:	42 e0       	ldi	r20, 0x02	; 2
    3c5a:	84 2e       	mov	r8, r20
    3c5c:	91 2c       	mov	r9, r1
    3c5e:	8c 0e       	add	r8, r28
    3c60:	9d 1e       	adc	r9, r29
    3c62:	f4 01       	movw	r30, r8
    3c64:	98 2f       	mov	r25, r24
    3c66:	11 92       	st	Z+, r1
    3c68:	9a 95       	dec	r25
    3c6a:	e9 f7       	brne	.-6      	; 0x3c66 <main+0x42>
	u8 pass_preased_key[5] = { 0 };
    3c6c:	37 e0       	ldi	r19, 0x07	; 7
    3c6e:	a3 2e       	mov	r10, r19
    3c70:	b1 2c       	mov	r11, r1
    3c72:	ac 0e       	add	r10, r28
    3c74:	bd 1e       	adc	r11, r29
    3c76:	f5 01       	movw	r30, r10
    3c78:	98 2f       	mov	r25, r24
    3c7a:	11 92       	st	Z+, r1
    3c7c:	9a 95       	dec	r25
    3c7e:	e9 f7       	brne	.-6      	; 0x3c7a <main+0x56>
	u8 new_pass[5] = { 0 }, preased_key;
    3c80:	2c e0       	ldi	r18, 0x0C	; 12
    3c82:	42 2e       	mov	r4, r18
    3c84:	51 2c       	mov	r5, r1
    3c86:	4c 0e       	add	r4, r28
    3c88:	5d 1e       	adc	r5, r29
    3c8a:	f2 01       	movw	r30, r4
    3c8c:	11 92       	st	Z+, r1
    3c8e:	8a 95       	dec	r24
    3c90:	e9 f7       	brne	.-6      	; 0x3c8c <main+0x68>
	DIO_Enu_Init();
    3c92:	0e 94 93 31 	call	0x6326	; 0x6326 <DIO_Enu_Init>
	KPD_enu_Init();
    3c96:	0e 94 88 2d 	call	0x5b10	; 0x5b10 <KPD_enu_Init>
	SERVO_Init();
    3c9a:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SERVO_Init>
	LCD_enuInit();
    3c9e:	0e 94 c9 20 	call	0x4192	; 0x4192 <LCD_enuInit>
	LCD_enuClearScreen();
    3ca2:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
	EEPROM_voidInit();
    3ca6:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <EEPROM_voidInit>
	u8 pass[5] = "1234";
    3caa:	91 e1       	ldi	r25, 0x11	; 17
    3cac:	29 2e       	mov	r2, r25
    3cae:	31 2c       	mov	r3, r1
    3cb0:	2c 0e       	add	r2, r28
    3cb2:	3d 1e       	adc	r3, r29
    3cb4:	d1 01       	movw	r26, r2
    3cb6:	e6 ec       	ldi	r30, 0xC6	; 198
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	85 e0       	ldi	r24, 0x05	; 5
    3cbc:	01 90       	ld	r0, Z+
    3cbe:	0d 92       	st	X+, r0
    3cc0:	81 50       	subi	r24, 0x01	; 1
    3cc2:	e1 f7       	brne	.-8      	; 0x3cbc <main+0x98>
    3cc4:	ff 24       	eor	r15, r15
    3cc6:	f3 94       	inc	r15
    3cc8:	00 e0       	ldi	r16, 0x00	; 0
    3cca:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ccc:	80 e3       	ldi	r24, 0x30	; 48
    3cce:	68 2e       	mov	r6, r24
    3cd0:	85 e7       	ldi	r24, 0x75	; 117
    3cd2:	78 2e       	mov	r7, r24
	u8 is_stored = 1;
	for (u8 i = 0; i < 4; i++) {
		read[i] = EEPROM_u8ReadDataByte(PASS_LOCATION + i);
    3cd4:	c8 01       	movw	r24, r16
    3cd6:	42 96       	adiw	r24, 0x12	; 18
    3cd8:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <EEPROM_u8ReadDataByte>
    3cdc:	f4 01       	movw	r30, r8
    3cde:	e0 0f       	add	r30, r16
    3ce0:	f1 1f       	adc	r31, r17
    3ce2:	80 83       	st	Z, r24
    3ce4:	f3 01       	movw	r30, r6
    3ce6:	31 97       	sbiw	r30, 0x01	; 1
    3ce8:	f1 f7       	brne	.-4      	; 0x3ce6 <main+0xc2>
		_delay_ms(15);
		if (read[i] != pass[i]) {
    3cea:	f1 01       	movw	r30, r2
    3cec:	e0 0f       	add	r30, r16
    3cee:	f1 1f       	adc	r31, r17
    3cf0:	90 81       	ld	r25, Z
    3cf2:	89 13       	cpse	r24, r25
    3cf4:	ff 24       	eor	r15, r15
    3cf6:	0f 5f       	subi	r16, 0xFF	; 255
    3cf8:	1f 4f       	sbci	r17, 0xFF	; 255
	LCD_enuInit();
	LCD_enuClearScreen();
	EEPROM_voidInit();
	u8 pass[5] = "1234";
	u8 is_stored = 1;
	for (u8 i = 0; i < 4; i++) {
    3cfa:	04 30       	cpi	r16, 0x04	; 4
    3cfc:	11 05       	cpc	r17, r1
    3cfe:	51 f7       	brne	.-44     	; 0x3cd4 <main+0xb0>
		_delay_ms(15);
		if (read[i] != pass[i]) {
			is_stored = 0;
		}
	}
	if (is_stored) {
    3d00:	ff 20       	and	r15, r15
    3d02:	11 f1       	breq	.+68     	; 0x3d48 <main+0x124>
		for (u8 i = 0; i < 4; i++) {
			EEPROM_voidSendDataByte(PASS_LOCATION + i, pass[i]);
    3d04:	82 e1       	ldi	r24, 0x12	; 18
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	69 89       	ldd	r22, Y+17	; 0x11
    3d0a:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3d0e:	00 e3       	ldi	r16, 0x30	; 48
    3d10:	15 e7       	ldi	r17, 0x75	; 117
    3d12:	c8 01       	movw	r24, r16
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <main+0xf0>
    3d18:	83 e1       	ldi	r24, 0x13	; 19
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	6a 89       	ldd	r22, Y+18	; 0x12
    3d1e:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3d22:	c8 01       	movw	r24, r16
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	f1 f7       	brne	.-4      	; 0x3d24 <main+0x100>
    3d28:	84 e1       	ldi	r24, 0x14	; 20
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	6b 89       	ldd	r22, Y+19	; 0x13
    3d2e:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3d32:	c8 01       	movw	r24, r16
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <main+0x110>
    3d38:	85 e1       	ldi	r24, 0x15	; 21
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	6c 89       	ldd	r22, Y+20	; 0x14
    3d3e:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3d42:	c8 01       	movw	r24, r16
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <main+0x120>
    3d48:	3e 01       	movw	r6, r28
    3d4a:	08 94       	sec
    3d4c:	61 1c       	adc	r6, r1
    3d4e:	71 1c       	adc	r7, r1
			_delay_ms(15);
		}
	}
	while (1) {
		SERVO_SetAngle(0);
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <SERVO_SetAngle>
		for (u8 i = 0; i < 4; i++) {
			read[i] = EEPROM_u8ReadDataByte(PASS_LOCATION + i);
    3d56:	82 e1       	ldi	r24, 0x12	; 18
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <EEPROM_u8ReadDataByte>
    3d5e:	8a 83       	std	Y+2, r24	; 0x02
    3d60:	83 e1       	ldi	r24, 0x13	; 19
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <EEPROM_u8ReadDataByte>
    3d68:	8b 83       	std	Y+3, r24	; 0x03
    3d6a:	84 e1       	ldi	r24, 0x14	; 20
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <EEPROM_u8ReadDataByte>
    3d72:	8c 83       	std	Y+4, r24	; 0x04
    3d74:	85 e1       	ldi	r24, 0x15	; 21
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <EEPROM_u8ReadDataByte>
    3d7c:	8d 83       	std	Y+5, r24	; 0x05
		}

		LCD_enuSendString("WELCOME");
    3d7e:	80 e6       	ldi	r24, 0x60	; 96
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
		LCD_enuSetPosition(2, 1);
    3d86:	82 e0       	ldi	r24, 0x02	; 2
    3d88:	61 e0       	ldi	r22, 0x01	; 1
    3d8a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <LCD_enuSetPosition>
		LCD_enuSendString("ENTER PASSCODE :");
    3d8e:	88 e6       	ldi	r24, 0x68	; 104
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
		while (strncmp(read, pass_preased_key, 5) != 0) {
    3d96:	c4 01       	movw	r24, r8
    3d98:	b5 01       	movw	r22, r10
    3d9a:	45 e0       	ldi	r20, 0x05	; 5
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	0e 94 1c 34 	call	0x6838	; 0x6838 <strncmp>
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	a1 f1       	breq	.+104    	; 0x3e0e <main+0x1ea>
    3da6:	dd 24       	eor	r13, r13
    3da8:	75 01       	movw	r14, r10
    3daa:	ed 0c       	add	r14, r13
    3dac:	f1 1c       	adc	r15, r1
			for (u8 i = 0; i < 4; i++) {
				do {
					KPD_enu_GetPressed(&pass_preased_key[i]);
				} while (pass_preased_key[i] == '\0');
    3dae:	87 01       	movw	r16, r14
		LCD_enuSetPosition(2, 1);
		LCD_enuSendString("ENTER PASSCODE :");
		while (strncmp(read, pass_preased_key, 5) != 0) {
			for (u8 i = 0; i < 4; i++) {
				do {
					KPD_enu_GetPressed(&pass_preased_key[i]);
    3db0:	c7 01       	movw	r24, r14
    3db2:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <KPD_enu_GetPressed>
				} while (pass_preased_key[i] == '\0');
    3db6:	f8 01       	movw	r30, r16
    3db8:	80 81       	ld	r24, Z
    3dba:	88 23       	and	r24, r24
    3dbc:	c9 f3       	breq	.-14     	; 0x3db0 <main+0x18c>
				if (i == 0) {
    3dbe:	dd 20       	and	r13, r13
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <main+0x1a0>
    3dc2:	55 c0       	rjmp	.+170    	; 0x3e6e <main+0x24a>
					LCD_enuClearScreen();
				}
				LCD_enuSendData('*');
    3dc4:	8a e2       	ldi	r24, 0x2A	; 42
    3dc6:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <LCD_enuSendData>

		LCD_enuSendString("WELCOME");
		LCD_enuSetPosition(2, 1);
		LCD_enuSendString("ENTER PASSCODE :");
		while (strncmp(read, pass_preased_key, 5) != 0) {
			for (u8 i = 0; i < 4; i++) {
    3dca:	d3 94       	inc	r13
    3dcc:	f3 e0       	ldi	r31, 0x03	; 3
    3dce:	fd 15       	cp	r31, r13
    3dd0:	58 f7       	brcc	.-42     	; 0x3da8 <main+0x184>
				if (i == 0) {
					LCD_enuClearScreen();
				}
				LCD_enuSendData('*');
			}
			if (strncmp(read, pass_preased_key, 5) != 0) {
    3dd2:	c4 01       	movw	r24, r8
    3dd4:	b5 01       	movw	r22, r10
    3dd6:	45 e0       	ldi	r20, 0x05	; 5
    3dd8:	50 e0       	ldi	r21, 0x00	; 0
    3dda:	0e 94 1c 34 	call	0x6838	; 0x6838 <strncmp>
    3dde:	00 97       	sbiw	r24, 0x00	; 0
    3de0:	b1 f0       	breq	.+44     	; 0x3e0e <main+0x1ea>
				LCD_enuClearScreen();
    3de2:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
				LCD_enuSendString("WRONG PASSCODE");
    3de6:	89 e7       	ldi	r24, 0x79	; 121
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
				LCD_enuSetPosition(2, 1);
    3dee:	82 e0       	ldi	r24, 0x02	; 2
    3df0:	61 e0       	ldi	r22, 0x01	; 1
    3df2:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <LCD_enuSetPosition>
				LCD_enuSendString("TRY AGAIN :");
    3df6:	88 e8       	ldi	r24, 0x88	; 136
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
		}

		LCD_enuSendString("WELCOME");
		LCD_enuSetPosition(2, 1);
		LCD_enuSendString("ENTER PASSCODE :");
		while (strncmp(read, pass_preased_key, 5) != 0) {
    3dfe:	c4 01       	movw	r24, r8
    3e00:	b5 01       	movw	r22, r10
    3e02:	45 e0       	ldi	r20, 0x05	; 5
    3e04:	50 e0       	ldi	r21, 0x00	; 0
    3e06:	0e 94 1c 34 	call	0x6838	; 0x6838 <strncmp>
    3e0a:	00 97       	sbiw	r24, 0x00	; 0
    3e0c:	61 f6       	brne	.-104    	; 0x3da6 <main+0x182>
			} else {
				break;
			}
		}

		SERVO_SetAngle(90);
    3e0e:	8a e5       	ldi	r24, 0x5A	; 90
    3e10:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <SERVO_SetAngle>
		LCD_enuClearScreen();
    3e14:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
		LCD_enuSendString("1-TO CLOSE Door");
    3e18:	84 e9       	ldi	r24, 0x94	; 148
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
		LCD_enuSetPosition(2, 1);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	61 e0       	ldi	r22, 0x01	; 1
    3e24:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <LCD_enuSetPosition>
		LCD_enuSendString("2-TO CHANGE PASS");
    3e28:	84 ea       	ldi	r24, 0xA4	; 164
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
		do {
			KPD_enu_GetPressed(&preased_key);
    3e30:	c3 01       	movw	r24, r6
    3e32:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <KPD_enu_GetPressed>
		} while (preased_key == '\0'
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
				&& (preased_key != '1' || preased_key != '2'));
    3e38:	88 23       	and	r24, r24
    3e3a:	d1 f3       	breq	.-12     	; 0x3e30 <main+0x20c>
		if (preased_key == '1') {
    3e3c:	81 33       	cpi	r24, 0x31	; 49
    3e3e:	f9 f0       	breq	.+62     	; 0x3e7e <main+0x25a>
			SERVO_SetAngle(0);
		} else if (preased_key == '2') {
    3e40:	82 33       	cpi	r24, 0x32	; 50
    3e42:	09 f1       	breq	.+66     	; 0x3e86 <main+0x262>
				EEPROM_voidSendDataByte(PASS_LOCATION + i, new_pass[i]);
			}
			strcpy(pass, new_pass);
		}
		for (u8 i = 0; i < 4; i++) {
			read[i] = 0;
    3e44:	1a 82       	std	Y+2, r1	; 0x02
			pass_preased_key[i] = 0;
    3e46:	1f 82       	std	Y+7, r1	; 0x07
			new_pass[i] = 0;
    3e48:	1c 86       	std	Y+12, r1	; 0x0c
			LCD_enuClearScreen();
    3e4a:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
				EEPROM_voidSendDataByte(PASS_LOCATION + i, new_pass[i]);
			}
			strcpy(pass, new_pass);
		}
		for (u8 i = 0; i < 4; i++) {
			read[i] = 0;
    3e4e:	1b 82       	std	Y+3, r1	; 0x03
			pass_preased_key[i] = 0;
    3e50:	18 86       	std	Y+8, r1	; 0x08
			new_pass[i] = 0;
    3e52:	1d 86       	std	Y+13, r1	; 0x0d
			LCD_enuClearScreen();
    3e54:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
				EEPROM_voidSendDataByte(PASS_LOCATION + i, new_pass[i]);
			}
			strcpy(pass, new_pass);
		}
		for (u8 i = 0; i < 4; i++) {
			read[i] = 0;
    3e58:	1c 82       	std	Y+4, r1	; 0x04
			pass_preased_key[i] = 0;
    3e5a:	19 86       	std	Y+9, r1	; 0x09
			new_pass[i] = 0;
    3e5c:	1e 86       	std	Y+14, r1	; 0x0e
			LCD_enuClearScreen();
    3e5e:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
				EEPROM_voidSendDataByte(PASS_LOCATION + i, new_pass[i]);
			}
			strcpy(pass, new_pass);
		}
		for (u8 i = 0; i < 4; i++) {
			read[i] = 0;
    3e62:	1d 82       	std	Y+5, r1	; 0x05
			pass_preased_key[i] = 0;
    3e64:	1a 86       	std	Y+10, r1	; 0x0a
			new_pass[i] = 0;
    3e66:	1f 86       	std	Y+15, r1	; 0x0f
			LCD_enuClearScreen();
    3e68:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
    3e6c:	71 cf       	rjmp	.-286    	; 0x3d50 <main+0x12c>
			for (u8 i = 0; i < 4; i++) {
				do {
					KPD_enu_GetPressed(&pass_preased_key[i]);
				} while (pass_preased_key[i] == '\0');
				if (i == 0) {
					LCD_enuClearScreen();
    3e6e:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
				}
				LCD_enuSendData('*');
    3e72:	8a e2       	ldi	r24, 0x2A	; 42
    3e74:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <LCD_enuSendData>
    3e78:	dd 24       	eor	r13, r13
    3e7a:	d3 94       	inc	r13
    3e7c:	95 cf       	rjmp	.-214    	; 0x3da8 <main+0x184>
		do {
			KPD_enu_GetPressed(&preased_key);
		} while (preased_key == '\0'
				&& (preased_key != '1' || preased_key != '2'));
		if (preased_key == '1') {
			SERVO_SetAngle(0);
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <SERVO_SetAngle>
    3e84:	df cf       	rjmp	.-66     	; 0x3e44 <main+0x220>
		} else if (preased_key == '2') {
			LCD_enuClearScreen();
    3e86:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
			LCD_enuSendString("ENTER NEW PASS :");
    3e8a:	85 eb       	ldi	r24, 0xB5	; 181
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	0e 94 1b 22 	call	0x4436	; 0x4436 <LCD_enuSendString>
    3e92:	dd 24       	eor	r13, r13
    3e94:	72 01       	movw	r14, r4
    3e96:	ed 0c       	add	r14, r13
    3e98:	f1 1c       	adc	r15, r1
			for (u8 i = 0; i < 4; i++) {
				do {
					KPD_enu_GetPressed(&new_pass[i]);
				} while (new_pass[i] == '\0');
    3e9a:	87 01       	movw	r16, r14
		} else if (preased_key == '2') {
			LCD_enuClearScreen();
			LCD_enuSendString("ENTER NEW PASS :");
			for (u8 i = 0; i < 4; i++) {
				do {
					KPD_enu_GetPressed(&new_pass[i]);
    3e9c:	c7 01       	movw	r24, r14
    3e9e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <KPD_enu_GetPressed>
				} while (new_pass[i] == '\0');
    3ea2:	f8 01       	movw	r30, r16
    3ea4:	80 81       	ld	r24, Z
    3ea6:	88 23       	and	r24, r24
    3ea8:	c9 f3       	breq	.-14     	; 0x3e9c <main+0x278>
				if (i == 0) {
    3eaa:	dd 20       	and	r13, r13
    3eac:	01 f1       	breq	.+64     	; 0x3eee <main+0x2ca>
					LCD_enuClearScreen();
				}
				LCD_enuSendData('*');
    3eae:	8a e2       	ldi	r24, 0x2A	; 42
    3eb0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <LCD_enuSendData>
		if (preased_key == '1') {
			SERVO_SetAngle(0);
		} else if (preased_key == '2') {
			LCD_enuClearScreen();
			LCD_enuSendString("ENTER NEW PASS :");
			for (u8 i = 0; i < 4; i++) {
    3eb4:	d3 94       	inc	r13
    3eb6:	f3 e0       	ldi	r31, 0x03	; 3
    3eb8:	fd 15       	cp	r31, r13
    3eba:	60 f7       	brcc	.-40     	; 0x3e94 <main+0x270>
					LCD_enuClearScreen();
				}
				LCD_enuSendData('*');
			}
			for (u8 i = 0; i < 4; i++) {
				EEPROM_voidSendDataByte(PASS_LOCATION + i, new_pass[i]);
    3ebc:	82 e1       	ldi	r24, 0x12	; 18
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ec2:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3ec6:	83 e1       	ldi	r24, 0x13	; 19
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	6d 85       	ldd	r22, Y+13	; 0x0d
    3ecc:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3ed0:	84 e1       	ldi	r24, 0x14	; 20
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	6e 85       	ldd	r22, Y+14	; 0x0e
    3ed6:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
    3eda:	85 e1       	ldi	r24, 0x15	; 21
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ee0:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <EEPROM_voidSendDataByte>
			}
			strcpy(pass, new_pass);
    3ee4:	c1 01       	movw	r24, r2
    3ee6:	b2 01       	movw	r22, r4
    3ee8:	0e 94 15 34 	call	0x682a	; 0x682a <strcpy>
    3eec:	ab cf       	rjmp	.-170    	; 0x3e44 <main+0x220>
			for (u8 i = 0; i < 4; i++) {
				do {
					KPD_enu_GetPressed(&new_pass[i]);
				} while (new_pass[i] == '\0');
				if (i == 0) {
					LCD_enuClearScreen();
    3eee:	0e 94 2a 20 	call	0x4054	; 0x4054 <LCD_enuClearScreen>
				}
				LCD_enuSendData('*');
    3ef2:	8a e2       	ldi	r24, 0x2A	; 42
    3ef4:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <LCD_enuSendData>
    3ef8:	dd 24       	eor	r13, r13
    3efa:	d3 94       	inc	r13
    3efc:	cb cf       	rjmp	.-106    	; 0x3e94 <main+0x270>

00003efe <SERVO_SetAngle>:
	TIMER1_voidSetICR1((u16)19999);
	TIMER1_voidSetCTCA((u16)599);
}
void SERVO_SetAngle(u8 angle)
{
	TIMER1_voidSetCTCA((((u32)angle * 2000) / 180)  + 600 - 1) ; 
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	a0 e0       	ldi	r26, 0x00	; 0
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	20 ed       	ldi	r18, 0xD0	; 208
    3f0a:	37 e0       	ldi	r19, 0x07	; 7
    3f0c:	40 e0       	ldi	r20, 0x00	; 0
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	0e 94 9d 33 	call	0x673a	; 0x673a <__mulsi3>
    3f14:	24 eb       	ldi	r18, 0xB4	; 180
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	40 e0       	ldi	r20, 0x00	; 0
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	0e 94 bc 33 	call	0x6778	; 0x6778 <__udivmodsi4>
    3f20:	da 01       	movw	r26, r20
    3f22:	c9 01       	movw	r24, r18
    3f24:	89 5a       	subi	r24, 0xA9	; 169
    3f26:	9d 4f       	sbci	r25, 0xFD	; 253
    3f28:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <TIMER1_voidSetCTCA>
	
}
    3f2c:	08 95       	ret

00003f2e <SERVO_Init>:
#include "Servo.h"


void SERVO_Init(void)
{
	TIMER1_voidInit();
    3f2e:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <TIMER1_voidInit>
	TIMER1_voidSetICR1((u16)19999);
    3f32:	8f e1       	ldi	r24, 0x1F	; 31
    3f34:	9e e4       	ldi	r25, 0x4E	; 78
    3f36:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <TIMER1_voidSetICR1>
	TIMER1_voidSetCTCA((u16)599);
    3f3a:	87 e5       	ldi	r24, 0x57	; 87
    3f3c:	92 e0       	ldi	r25, 0x02	; 2
    3f3e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <TIMER1_voidSetCTCA>
}
    3f42:	08 95       	ret

00003f44 <LCD_enuSendData>:
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
ES_t LCD_enuSendData(u8 Copy_u8Data)
{
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	1f 93       	push	r17
    3f4a:	18 2f       	mov	r17, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	60 e0       	ldi	r22, 0x00	; 0
    3f50:	41 e0       	ldi	r20, 0x01	; 1
    3f52:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	61 e0       	ldi	r22, 0x01	; 1
    3f5a:	40 e0       	ldi	r20, 0x00	; 0
    3f5c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    3f60:	61 2f       	mov	r22, r17
    3f62:	62 95       	swap	r22
    3f64:	6f 70       	andi	r22, 0x0F	; 15
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	62 e0       	ldi	r22, 0x02	; 2
    3f70:	41 e0       	ldi	r20, 0x01	; 1
    3f72:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    3f76:	80 ed       	ldi	r24, 0xD0	; 208
    3f78:	e8 2e       	mov	r14, r24
    3f7a:	87 e0       	ldi	r24, 0x07	; 7
    3f7c:	f8 2e       	mov	r15, r24
    3f7e:	c7 01       	movw	r24, r14
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	f1 f7       	brne	.-4      	; 0x3f80 <LCD_enuSendData+0x3c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	62 e0       	ldi	r22, 0x02	; 2
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    3f8e:	c7 01       	movw	r24, r14
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <LCD_enuSendData+0x4c>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	61 2f       	mov	r22, r17
    3f98:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	62 e0       	ldi	r22, 0x02	; 2
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    3fa6:	c7 01       	movw	r24, r14
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <LCD_enuSendData+0x64>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	62 e0       	ldi	r22, 0x02	; 2
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    3fb6:	c7 01       	movw	r24, r14
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <LCD_enuSendData+0x74>
    _delay_ms(1);

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    3fbc:	c7 01       	movw	r24, r14
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <LCD_enuSendData+0x7a>
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	1f 91       	pop	r17
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	08 95       	ret

00003fcc <LCD_enuSendCommand>:

    return Local_EnuErrorState;
}

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    3fcc:	ef 92       	push	r14
    3fce:	ff 92       	push	r15
    3fd0:	1f 93       	push	r17
    3fd2:	18 2f       	mov	r17, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	61 e0       	ldi	r22, 0x01	; 1
    3fe2:	40 e0       	ldi	r20, 0x00	; 0
    3fe4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    3fe8:	61 2f       	mov	r22, r17
    3fea:	62 95       	swap	r22
    3fec:	6f 70       	andi	r22, 0x0F	; 15
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	62 e0       	ldi	r22, 0x02	; 2
    3ff8:	41 e0       	ldi	r20, 0x01	; 1
    3ffa:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    3ffe:	90 ed       	ldi	r25, 0xD0	; 208
    4000:	e9 2e       	mov	r14, r25
    4002:	97 e0       	ldi	r25, 0x07	; 7
    4004:	f9 2e       	mov	r15, r25
    4006:	c7 01       	movw	r24, r14
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <LCD_enuSendCommand+0x3c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	62 e0       	ldi	r22, 0x02	; 2
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4016:	c7 01       	movw	r24, r14
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <LCD_enuSendCommand+0x4c>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    401c:	81 e0       	ldi	r24, 0x01	; 1
    401e:	61 2f       	mov	r22, r17
    4020:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	62 e0       	ldi	r22, 0x02	; 2
    4028:	41 e0       	ldi	r20, 0x01	; 1
    402a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    402e:	c7 01       	movw	r24, r14
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	f1 f7       	brne	.-4      	; 0x4030 <LCD_enuSendCommand+0x64>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	62 e0       	ldi	r22, 0x02	; 2
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    403e:	c7 01       	movw	r24, r14
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <LCD_enuSendCommand+0x74>
    _delay_ms(1);

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    4044:	c7 01       	movw	r24, r14
    4046:	01 97       	sbiw	r24, 0x01	; 1
    4048:	f1 f7       	brne	.-4      	; 0x4046 <LCD_enuSendCommand+0x7a>
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	1f 91       	pop	r17
    404e:	ff 90       	pop	r15
    4050:	ef 90       	pop	r14
    4052:	08 95       	ret

00004054 <LCD_enuClearScreen>:

    return Local_EnuErrorState;
}

ES_t LCD_enuClearScreen(void)
{
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	40 e0       	ldi	r20, 0x00	; 0
    405e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	61 e0       	ldi	r22, 0x01	; 1
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	62 e0       	ldi	r22, 0x02	; 2
    4078:	41 e0       	ldi	r20, 0x01	; 1
    407a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    407e:	00 ed       	ldi	r16, 0xD0	; 208
    4080:	17 e0       	ldi	r17, 0x07	; 7
    4082:	c8 01       	movw	r24, r16
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <LCD_enuClearScreen+0x30>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	62 e0       	ldi	r22, 0x02	; 2
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4092:	c8 01       	movw	r24, r16
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <LCD_enuClearScreen+0x40>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	61 e0       	ldi	r22, 0x01	; 1
    409c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	62 e0       	ldi	r22, 0x02	; 2
    40a4:	41 e0       	ldi	r20, 0x01	; 1
    40a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    40aa:	c8 01       	movw	r24, r16
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	f1 f7       	brne	.-4      	; 0x40ac <LCD_enuClearScreen+0x58>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	62 e0       	ldi	r22, 0x02	; 2
    40b4:	40 e0       	ldi	r20, 0x00	; 0
    40b6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    40ba:	c8 01       	movw	r24, r16
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <LCD_enuClearScreen+0x68>
    _delay_ms(10); // wait more than 1.53 ms

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    40c0:	c8 01       	movw	r24, r16
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <LCD_enuClearScreen+0x6e>
    40c6:	80 e2       	ldi	r24, 0x20	; 32
    40c8:	9e e4       	ldi	r25, 0x4E	; 78
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	f1 f7       	brne	.-4      	; 0x40ca <LCD_enuClearScreen+0x76>
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	1f 91       	pop	r17
    40d2:	0f 91       	pop	r16
    40d4:	08 95       	ret

000040d6 <LCD_enuSetPosition>:
	}
	
}

ES_t LCD_enuSetPosition(u8 Copy_u8Row, u8 Copy_u8Col)
{
    40d6:	ff 92       	push	r15
    40d8:	0f 93       	push	r16
    40da:	1f 93       	push	r17
    40dc:	98 2f       	mov	r25, r24
    ES_t Local_EnuErrorState = ES_NOT_OK;

    u8 LOC_u8data;

    /* In These cases will set at (0,0) ==> if the user enter invalid location */
    if (Copy_u8Row > 2 || Copy_u8Row < 1 || Copy_u8Col > 16 || Copy_u8Col < 1) // check
    40de:	81 50       	subi	r24, 0x01	; 1
    40e0:	82 30       	cpi	r24, 0x02	; 2
    40e2:	08 f4       	brcc	.+2      	; 0x40e6 <LCD_enuSetPosition+0x10>
    40e4:	43 c0       	rjmp	.+134    	; 0x416c <LCD_enuSetPosition+0x96>
    }

    else if (Copy_u8Row == LCD_ROW_2)
    {

        LOC_u8data = ((lcd_SetCursor) + (64) + (Copy_u8Col - 1)); // Row2 -> 0xc0+col-1
    40e6:	20 e8       	ldi	r18, 0x80	; 128
    40e8:	f2 2e       	mov	r15, r18
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	60 e0       	ldi	r22, 0x00	; 0
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    40fe:	6f 2d       	mov	r22, r15
    4100:	62 95       	swap	r22
    4102:	6f 70       	andi	r22, 0x0F	; 15
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	62 e0       	ldi	r22, 0x02	; 2
    410e:	41 e0       	ldi	r20, 0x01	; 1
    4110:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4114:	00 ed       	ldi	r16, 0xD0	; 208
    4116:	17 e0       	ldi	r17, 0x07	; 7
    4118:	c8 01       	movw	r24, r16
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	f1 f7       	brne	.-4      	; 0x411a <LCD_enuSetPosition+0x44>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	62 e0       	ldi	r22, 0x02	; 2
    4122:	40 e0       	ldi	r20, 0x00	; 0
    4124:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4128:	c8 01       	movw	r24, r16
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <LCD_enuSetPosition+0x54>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	6f 2d       	mov	r22, r15
    4132:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	62 e0       	ldi	r22, 0x02	; 2
    413a:	41 e0       	ldi	r20, 0x01	; 1
    413c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4140:	c8 01       	movw	r24, r16
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <LCD_enuSetPosition+0x6c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	62 e0       	ldi	r22, 0x02	; 2
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4150:	c8 01       	movw	r24, r16
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	f1 f7       	brne	.-4      	; 0x4152 <LCD_enuSetPosition+0x7c>
    _delay_ms(1);

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    4156:	c8 01       	movw	r24, r16
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <LCD_enuSetPosition+0x82>
    415c:	c8 01       	movw	r24, r16
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	f1 f7       	brne	.-4      	; 0x415e <LCD_enuSetPosition+0x88>
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	ff 90       	pop	r15
    416a:	08 95       	ret
    ES_t Local_EnuErrorState = ES_NOT_OK;

    u8 LOC_u8data;

    /* In These cases will set at (0,0) ==> if the user enter invalid location */
    if (Copy_u8Row > 2 || Copy_u8Row < 1 || Copy_u8Col > 16 || Copy_u8Col < 1) // check
    416c:	61 31       	cpi	r22, 0x11	; 17
    416e:	08 f0       	brcs	.+2      	; 0x4172 <LCD_enuSetPosition+0x9c>
    4170:	ba cf       	rjmp	.-140    	; 0x40e6 <LCD_enuSetPosition+0x10>
    4172:	66 23       	and	r22, r22
    4174:	09 f4       	brne	.+2      	; 0x4178 <LCD_enuSetPosition+0xa2>
    4176:	b7 cf       	rjmp	.-146    	; 0x40e6 <LCD_enuSetPosition+0x10>
    {
        LOC_u8data = lcd_SetCursor; // first location
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    else if (Copy_u8Row == LCD_ROW_1)
    4178:	91 30       	cpi	r25, 0x01	; 1
    417a:	39 f0       	breq	.+14     	; 0x418a <LCD_enuSetPosition+0xb4>
    {

        LOC_u8data = ((lcd_SetCursor) + (Copy_u8Col - 1)); // Row1 -> 0x80+col-1
    }

    else if (Copy_u8Row == LCD_ROW_2)
    417c:	92 30       	cpi	r25, 0x02	; 2
    417e:	09 f0       	breq	.+2      	; 0x4182 <LCD_enuSetPosition+0xac>
    4180:	b4 cf       	rjmp	.-152    	; 0x40ea <LCD_enuSetPosition+0x14>
    {

        LOC_u8data = ((lcd_SetCursor) + (64) + (Copy_u8Col - 1)); // Row2 -> 0xc0+col-1
    4182:	3f eb       	ldi	r19, 0xBF	; 191
    4184:	f3 2e       	mov	r15, r19
    4186:	f6 0e       	add	r15, r22
    4188:	b0 cf       	rjmp	.-160    	; 0x40ea <LCD_enuSetPosition+0x14>
    }

    else if (Copy_u8Row == LCD_ROW_1)
    {

        LOC_u8data = ((lcd_SetCursor) + (Copy_u8Col - 1)); // Row1 -> 0x80+col-1
    418a:	4f e7       	ldi	r20, 0x7F	; 127
    418c:	f4 2e       	mov	r15, r20
    418e:	f6 0e       	add	r15, r22
    4190:	ac cf       	rjmp	.-168    	; 0x40ea <LCD_enuSetPosition+0x14>

00004192 <LCD_enuInit>:
#include "LCD_CONFIG.h"
#define F_CPU 8000000UL
#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    4192:	0f 93       	push	r16
    4194:	1f 93       	push	r17
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	48 ec       	ldi	r20, 0xC8	; 200
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	ca 01       	movw	r24, r20
    41a0:	01 97       	sbiw	r24, 0x01	; 1
    41a2:	f1 f7       	brne	.-4      	; 0x41a0 <LCD_enuInit+0xe>
    41a4:	2f 5f       	subi	r18, 0xFF	; 255
    41a6:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	24 3f       	cpi	r18, 0xF4	; 244
    41ac:	38 07       	cpc	r19, r24
    41ae:	b9 f7       	brne	.-18     	; 0x419e <LCD_enuInit+0xc>

#elif LCD_MODE == 4

    // 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
    _delay_ms(50);
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN4, DIO_u8OUTPUT);
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	64 e0       	ldi	r22, 0x04	; 4
    41b4:	41 e0       	ldi	r20, 0x01	; 1
    41b6:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN5, DIO_u8OUTPUT);
    41ba:	81 e0       	ldi	r24, 0x01	; 1
    41bc:	65 e0       	ldi	r22, 0x05	; 5
    41be:	41 e0       	ldi	r20, 0x01	; 1
    41c0:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN6, DIO_u8OUTPUT);
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	66 e0       	ldi	r22, 0x06	; 6
    41c8:	41 e0       	ldi	r20, 0x01	; 1
    41ca:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_DATA_PORT, DIO_u8PIN7, DIO_u8OUTPUT);
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	67 e0       	ldi	r22, 0x07	; 7
    41d2:	41 e0       	ldi	r20, 0x01	; 1
    41d4:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_u8OUTPUT);
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	60 e0       	ldi	r22, 0x00	; 0
    41dc:	41 e0       	ldi	r20, 0x01	; 1
    41de:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_u8OUTPUT);
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    DIO_Enu_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_u8OUTPUT);
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	62 e0       	ldi	r22, 0x02	; 2
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	60 e0       	ldi	r22, 0x00	; 0
    41fa:	40 e0       	ldi	r20, 0x00	; 0
    41fc:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	61 e0       	ldi	r22, 0x01	; 1
    4204:	40 e0       	ldi	r20, 0x00	; 0
    4206:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	62 e0       	ldi	r22, 0x02	; 2
    4216:	41 e0       	ldi	r20, 0x01	; 1
    4218:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    421c:	00 ed       	ldi	r16, 0xD0	; 208
    421e:	17 e0       	ldi	r17, 0x07	; 7
    4220:	c8 01       	movw	r24, r16
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <LCD_enuInit+0x90>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	62 e0       	ldi	r22, 0x02	; 2
    422a:	40 e0       	ldi	r20, 0x00	; 0
    422c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4230:	c8 01       	movw	r24, r16
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	f1 f7       	brne	.-4      	; 0x4232 <LCD_enuInit+0xa0>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	62 e0       	ldi	r22, 0x02	; 2
    423a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	62 e0       	ldi	r22, 0x02	; 2
    4242:	41 e0       	ldi	r20, 0x01	; 1
    4244:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4248:	c8 01       	movw	r24, r16
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <LCD_enuInit+0xb8>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	62 e0       	ldi	r22, 0x02	; 2
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4258:	c8 01       	movw	r24, r16
    425a:	01 97       	sbiw	r24, 0x01	; 1
    425c:	f1 f7       	brne	.-4      	; 0x425a <LCD_enuInit+0xc8>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    425e:	c8 01       	movw	r24, r16
    4260:	01 97       	sbiw	r24, 0x01	; 1
    4262:	f1 f7       	brne	.-4      	; 0x4260 <LCD_enuInit+0xce>
    4264:	80 e6       	ldi	r24, 0x60	; 96
    4266:	9a ee       	ldi	r25, 0xEA	; 234
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	f1 f7       	brne	.-4      	; 0x4268 <LCD_enuInit+0xd6>
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	40 e0       	ldi	r20, 0x00	; 0
    4272:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	61 e0       	ldi	r22, 0x01	; 1
    427a:	40 e0       	ldi	r20, 0x00	; 0
    427c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	62 e0       	ldi	r22, 0x02	; 2
    4284:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	62 e0       	ldi	r22, 0x02	; 2
    428c:	41 e0       	ldi	r20, 0x01	; 1
    428e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4292:	c8 01       	movw	r24, r16
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	f1 f7       	brne	.-4      	; 0x4294 <LCD_enuInit+0x102>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	62 e0       	ldi	r22, 0x02	; 2
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    42a2:	c8 01       	movw	r24, r16
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <LCD_enuInit+0x112>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	68 e2       	ldi	r22, 0x28	; 40
    42ac:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	62 e0       	ldi	r22, 0x02	; 2
    42b4:	41 e0       	ldi	r20, 0x01	; 1
    42b6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    42ba:	c8 01       	movw	r24, r16
    42bc:	01 97       	sbiw	r24, 0x01	; 1
    42be:	f1 f7       	brne	.-4      	; 0x42bc <LCD_enuInit+0x12a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	62 e0       	ldi	r22, 0x02	; 2
    42c4:	40 e0       	ldi	r20, 0x00	; 0
    42c6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    42ca:	c8 01       	movw	r24, r16
    42cc:	01 97       	sbiw	r24, 0x01	; 1
    42ce:	f1 f7       	brne	.-4      	; 0x42cc <LCD_enuInit+0x13a>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    42d0:	c8 01       	movw	r24, r16
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <LCD_enuInit+0x140>
    42d6:	c8 01       	movw	r24, r16
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	f1 f7       	brne	.-4      	; 0x42d8 <LCD_enuInit+0x146>
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	40 e0       	ldi	r20, 0x00	; 0
    42e2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	61 e0       	ldi	r22, 0x01	; 1
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	62 e0       	ldi	r22, 0x02	; 2
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4302:	c8 01       	movw	r24, r16
    4304:	01 97       	sbiw	r24, 0x01	; 1
    4306:	f1 f7       	brne	.-4      	; 0x4304 <LCD_enuInit+0x172>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	62 e0       	ldi	r22, 0x02	; 2
    430c:	40 e0       	ldi	r20, 0x00	; 0
    430e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4312:	c8 01       	movw	r24, r16
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	f1 f7       	brne	.-4      	; 0x4314 <LCD_enuInit+0x182>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	6c e0       	ldi	r22, 0x0C	; 12
    431c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	62 e0       	ldi	r22, 0x02	; 2
    4324:	41 e0       	ldi	r20, 0x01	; 1
    4326:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    432a:	c8 01       	movw	r24, r16
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <LCD_enuInit+0x19a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	62 e0       	ldi	r22, 0x02	; 2
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    433a:	c8 01       	movw	r24, r16
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <LCD_enuInit+0x1aa>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    4340:	c8 01       	movw	r24, r16
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	f1 f7       	brne	.-4      	; 0x4342 <LCD_enuInit+0x1b0>
    4346:	c8 01       	movw	r24, r16
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	f1 f7       	brne	.-4      	; 0x4348 <LCD_enuInit+0x1b6>
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	40 e0       	ldi	r20, 0x00	; 0
    4352:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	61 e0       	ldi	r22, 0x01	; 1
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	62 e0       	ldi	r22, 0x02	; 2
    436c:	41 e0       	ldi	r20, 0x01	; 1
    436e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4372:	c8 01       	movw	r24, r16
    4374:	01 97       	sbiw	r24, 0x01	; 1
    4376:	f1 f7       	brne	.-4      	; 0x4374 <LCD_enuInit+0x1e2>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	62 e0       	ldi	r22, 0x02	; 2
    437c:	40 e0       	ldi	r20, 0x00	; 0
    437e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4382:	c8 01       	movw	r24, r16
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	f1 f7       	brne	.-4      	; 0x4384 <LCD_enuInit+0x1f2>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	61 e0       	ldi	r22, 0x01	; 1
    438c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4390:	81 e0       	ldi	r24, 0x01	; 1
    4392:	62 e0       	ldi	r22, 0x02	; 2
    4394:	41 e0       	ldi	r20, 0x01	; 1
    4396:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    439a:	c8 01       	movw	r24, r16
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	f1 f7       	brne	.-4      	; 0x439c <LCD_enuInit+0x20a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	62 e0       	ldi	r22, 0x02	; 2
    43a4:	40 e0       	ldi	r20, 0x00	; 0
    43a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    43aa:	c8 01       	movw	r24, r16
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <LCD_enuInit+0x21a>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    43b0:	c8 01       	movw	r24, r16
    43b2:	01 97       	sbiw	r24, 0x01	; 1
    43b4:	f1 f7       	brne	.-4      	; 0x43b2 <LCD_enuInit+0x220>
    43b6:	80 e2       	ldi	r24, 0x20	; 32
    43b8:	9e e4       	ldi	r25, 0x4E	; 78
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	f1 f7       	brne	.-4      	; 0x43ba <LCD_enuInit+0x228>
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	60 e0       	ldi	r22, 0x00	; 0
    43c2:	40 e0       	ldi	r20, 0x00	; 0
    43c4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	61 e0       	ldi	r22, 0x01	; 1
    43cc:	40 e0       	ldi	r20, 0x00	; 0
    43ce:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	60 e0       	ldi	r22, 0x00	; 0
    43d6:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	62 e0       	ldi	r22, 0x02	; 2
    43de:	41 e0       	ldi	r20, 0x01	; 1
    43e0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    43e4:	c8 01       	movw	r24, r16
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <LCD_enuInit+0x254>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	62 e0       	ldi	r22, 0x02	; 2
    43ee:	40 e0       	ldi	r20, 0x00	; 0
    43f0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    43f4:	c8 01       	movw	r24, r16
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	f1 f7       	brne	.-4      	; 0x43f6 <LCD_enuInit+0x264>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	66 e0       	ldi	r22, 0x06	; 6
    43fe:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	62 e0       	ldi	r22, 0x02	; 2
    4406:	41 e0       	ldi	r20, 0x01	; 1
    4408:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    440c:	c8 01       	movw	r24, r16
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <LCD_enuInit+0x27c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	62 e0       	ldi	r22, 0x02	; 2
    4416:	40 e0       	ldi	r20, 0x00	; 0
    4418:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    441c:	c8 01       	movw	r24, r16
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	f1 f7       	brne	.-4      	; 0x441e <LCD_enuInit+0x28c>
#endif

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    4422:	c8 01       	movw	r24, r16
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	f1 f7       	brne	.-4      	; 0x4424 <LCD_enuInit+0x292>
    4428:	c8 01       	movw	r24, r16
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <LCD_enuInit+0x298>
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	08 95       	ret

00004436 <LCD_enuSendString>:

    return Local_EnuErrorState;
}

ES_t LCD_enuSendString(const u8 *Copy_u8ptrString)
{
    4436:	ef 92       	push	r14
    4438:	ff 92       	push	r15
    443a:	0f 93       	push	r16
    443c:	1f 93       	push	r17
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	7c 01       	movw	r14, r24
    ES_t Local_EnuErrorState = ES_NOT_OK;

    u8 LOC_u8Iterator = 0;

    while (Copy_u8ptrString[LOC_u8Iterator] != '\0')
    4444:	fc 01       	movw	r30, r24
    4446:	10 81       	ld	r17, Z
    4448:	11 23       	and	r17, r17
    444a:	09 f4       	brne	.+2      	; 0x444e <LCD_enuSendString+0x18>
    444c:	42 c0       	rjmp	.+132    	; 0x44d2 <LCD_enuSendString+0x9c>
    444e:	00 e0       	ldi	r16, 0x00	; 0
    4450:	c0 ed       	ldi	r28, 0xD0	; 208
    4452:	d7 e0       	ldi	r29, 0x07	; 7
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	60 e0       	ldi	r22, 0x00	; 0
    4458:	41 e0       	ldi	r20, 0x01	; 1
    445a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	40 e0       	ldi	r20, 0x00	; 0
    4464:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4468:	61 2f       	mov	r22, r17
    446a:	62 95       	swap	r22
    446c:	6f 70       	andi	r22, 0x0F	; 15
    446e:	81 e0       	ldi	r24, 0x01	; 1
    4470:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	62 e0       	ldi	r22, 0x02	; 2
    4478:	41 e0       	ldi	r20, 0x01	; 1
    447a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    447e:	ce 01       	movw	r24, r28
    4480:	01 97       	sbiw	r24, 0x01	; 1
    4482:	f1 f7       	brne	.-4      	; 0x4480 <LCD_enuSendString+0x4a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	62 e0       	ldi	r22, 0x02	; 2
    4488:	40 e0       	ldi	r20, 0x00	; 0
    448a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    448e:	ce 01       	movw	r24, r28
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	f1 f7       	brne	.-4      	; 0x4490 <LCD_enuSendString+0x5a>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4494:	81 e0       	ldi	r24, 0x01	; 1
    4496:	61 2f       	mov	r22, r17
    4498:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    449c:	81 e0       	ldi	r24, 0x01	; 1
    449e:	62 e0       	ldi	r22, 0x02	; 2
    44a0:	41 e0       	ldi	r20, 0x01	; 1
    44a2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    44a6:	ce 01       	movw	r24, r28
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	f1 f7       	brne	.-4      	; 0x44a8 <LCD_enuSendString+0x72>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	62 e0       	ldi	r22, 0x02	; 2
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    44b6:	ce 01       	movw	r24, r28
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <LCD_enuSendString+0x82>

    while (Copy_u8ptrString[LOC_u8Iterator] != '\0')
    {

        LCD_enuSendData(Copy_u8ptrString[LOC_u8Iterator]);
        LOC_u8Iterator++;
    44bc:	ce 01       	movw	r24, r28
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	f1 f7       	brne	.-4      	; 0x44be <LCD_enuSendString+0x88>
    44c2:	0f 5f       	subi	r16, 0xFF	; 255
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    u8 LOC_u8Iterator = 0;

    while (Copy_u8ptrString[LOC_u8Iterator] != '\0')
    44c4:	f7 01       	movw	r30, r14
    44c6:	e0 0f       	add	r30, r16
    44c8:	f1 1d       	adc	r31, r1
    44ca:	10 81       	ld	r17, Z
    44cc:	11 23       	and	r17, r17
    44ce:	09 f0       	breq	.+2      	; 0x44d2 <LCD_enuSendString+0x9c>
    44d0:	c1 cf       	rjmp	.-126    	; 0x4454 <LCD_enuSendString+0x1e>
        LOC_u8Iterator++;
    }
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	df 91       	pop	r29
    44d6:	cf 91       	pop	r28
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	ff 90       	pop	r15
    44de:	ef 90       	pop	r14
    44e0:	08 95       	ret

000044e2 <LCD_WriteNumberIn4Digits>:
	}
	
}

void LCD_WriteNumberIn4Digits(s64 number)
{
    44e2:	2f 92       	push	r2
    44e4:	3f 92       	push	r3
    44e6:	4f 92       	push	r4
    44e8:	5f 92       	push	r5
    44ea:	6f 92       	push	r6
    44ec:	7f 92       	push	r7
    44ee:	8f 92       	push	r8
    44f0:	9f 92       	push	r9
    44f2:	af 92       	push	r10
    44f4:	bf 92       	push	r11
    44f6:	cf 92       	push	r12
    44f8:	df 92       	push	r13
    44fa:	ef 92       	push	r14
    44fc:	ff 92       	push	r15
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
    4502:	df 93       	push	r29
    4504:	cf 93       	push	r28
    4506:	00 d0       	rcall	.+0      	; 0x4508 <LCD_WriteNumberIn4Digits+0x26>
    4508:	00 d0       	rcall	.+0      	; 0x450a <LCD_WriteNumberIn4Digits+0x28>
    450a:	cd b7       	in	r28, 0x3d	; 61
    450c:	de b7       	in	r29, 0x3e	; 62
    450e:	92 2e       	mov	r9, r18
    4510:	83 2e       	mov	r8, r19
    4512:	74 2e       	mov	r7, r20
    4514:	55 2e       	mov	r5, r21
    4516:	46 2e       	mov	r4, r22
    4518:	37 2e       	mov	r3, r23
    451a:	28 2e       	mov	r2, r24
    451c:	69 2e       	mov	r6, r25
	u8 digits[4] = {0} ;
	u8 i = 0  ;
	
	if(number == 0)
    451e:	82 2f       	mov	r24, r18
    4520:	83 2b       	or	r24, r19
    4522:	84 2b       	or	r24, r20
    4524:	85 2b       	or	r24, r21
    4526:	86 2b       	or	r24, r22
    4528:	87 2b       	or	r24, r23
    452a:	82 29       	or	r24, r2
    452c:	89 2b       	or	r24, r25
    452e:	09 f0       	breq	.+2      	; 0x4532 <LCD_WriteNumberIn4Digits+0x50>
    4530:	ed c0       	rjmp	.+474    	; 0x470c <LCD_WriteNumberIn4Digits+0x22a>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	60 e0       	ldi	r22, 0x00	; 0
    4536:	41 e0       	ldi	r20, 0x01	; 1
    4538:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	61 e0       	ldi	r22, 0x01	; 1
    4540:	40 e0       	ldi	r20, 0x00	; 0
    4542:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	63 e0       	ldi	r22, 0x03	; 3
    454a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	62 e0       	ldi	r22, 0x02	; 2
    4552:	41 e0       	ldi	r20, 0x01	; 1
    4554:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4558:	00 ed       	ldi	r16, 0xD0	; 208
    455a:	17 e0       	ldi	r17, 0x07	; 7
    455c:	c8 01       	movw	r24, r16
    455e:	01 97       	sbiw	r24, 0x01	; 1
    4560:	f1 f7       	brne	.-4      	; 0x455e <LCD_WriteNumberIn4Digits+0x7c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	62 e0       	ldi	r22, 0x02	; 2
    4566:	40 e0       	ldi	r20, 0x00	; 0
    4568:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    456c:	c8 01       	movw	r24, r16
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <LCD_WriteNumberIn4Digits+0x8c>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	60 e3       	ldi	r22, 0x30	; 48
    4576:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	62 e0       	ldi	r22, 0x02	; 2
    457e:	41 e0       	ldi	r20, 0x01	; 1
    4580:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4584:	c8 01       	movw	r24, r16
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	f1 f7       	brne	.-4      	; 0x4586 <LCD_WriteNumberIn4Digits+0xa4>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	62 e0       	ldi	r22, 0x02	; 2
    458e:	40 e0       	ldi	r20, 0x00	; 0
    4590:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4594:	c8 01       	movw	r24, r16
    4596:	01 97       	sbiw	r24, 0x01	; 1
    4598:	f1 f7       	brne	.-4      	; 0x4596 <LCD_WriteNumberIn4Digits+0xb4>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    459a:	c8 01       	movw	r24, r16
    459c:	01 97       	sbiw	r24, 0x01	; 1
    459e:	f1 f7       	brne	.-4      	; 0x459c <LCD_WriteNumberIn4Digits+0xba>
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	60 e0       	ldi	r22, 0x00	; 0
    45a4:	41 e0       	ldi	r20, 0x01	; 1
    45a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	61 e0       	ldi	r22, 0x01	; 1
    45ae:	40 e0       	ldi	r20, 0x00	; 0
    45b0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	63 e0       	ldi	r22, 0x03	; 3
    45b8:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	62 e0       	ldi	r22, 0x02	; 2
    45c0:	41 e0       	ldi	r20, 0x01	; 1
    45c2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    45c6:	c8 01       	movw	r24, r16
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	f1 f7       	brne	.-4      	; 0x45c8 <LCD_WriteNumberIn4Digits+0xe6>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	62 e0       	ldi	r22, 0x02	; 2
    45d0:	40 e0       	ldi	r20, 0x00	; 0
    45d2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    45d6:	c8 01       	movw	r24, r16
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <LCD_WriteNumberIn4Digits+0xf6>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	60 e3       	ldi	r22, 0x30	; 48
    45e0:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	62 e0       	ldi	r22, 0x02	; 2
    45e8:	41 e0       	ldi	r20, 0x01	; 1
    45ea:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    45ee:	c8 01       	movw	r24, r16
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <LCD_WriteNumberIn4Digits+0x10e>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	62 e0       	ldi	r22, 0x02	; 2
    45f8:	40 e0       	ldi	r20, 0x00	; 0
    45fa:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    45fe:	c8 01       	movw	r24, r16
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	f1 f7       	brne	.-4      	; 0x4600 <LCD_WriteNumberIn4Digits+0x11e>
    4604:	c8 01       	movw	r24, r16
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	f1 f7       	brne	.-4      	; 0x4606 <LCD_WriteNumberIn4Digits+0x124>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	41 e0       	ldi	r20, 0x01	; 1
    4610:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	61 e0       	ldi	r22, 0x01	; 1
    4618:	40 e0       	ldi	r20, 0x00	; 0
    461a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	63 e0       	ldi	r22, 0x03	; 3
    4622:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	62 e0       	ldi	r22, 0x02	; 2
    462a:	41 e0       	ldi	r20, 0x01	; 1
    462c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4630:	c8 01       	movw	r24, r16
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <LCD_WriteNumberIn4Digits+0x150>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	62 e0       	ldi	r22, 0x02	; 2
    463a:	40 e0       	ldi	r20, 0x00	; 0
    463c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4640:	c8 01       	movw	r24, r16
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <LCD_WriteNumberIn4Digits+0x160>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	60 e3       	ldi	r22, 0x30	; 48
    464a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	62 e0       	ldi	r22, 0x02	; 2
    4652:	41 e0       	ldi	r20, 0x01	; 1
    4654:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4658:	c8 01       	movw	r24, r16
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <LCD_WriteNumberIn4Digits+0x178>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	62 e0       	ldi	r22, 0x02	; 2
    4662:	40 e0       	ldi	r20, 0x00	; 0
    4664:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4668:	c8 01       	movw	r24, r16
    466a:	01 97       	sbiw	r24, 0x01	; 1
    466c:	f1 f7       	brne	.-4      	; 0x466a <LCD_WriteNumberIn4Digits+0x188>
    466e:	c8 01       	movw	r24, r16
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	f1 f7       	brne	.-4      	; 0x4670 <LCD_WriteNumberIn4Digits+0x18e>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	60 e0       	ldi	r22, 0x00	; 0
    4678:	41 e0       	ldi	r20, 0x01	; 1
    467a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	61 e0       	ldi	r22, 0x01	; 1
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	63 e0       	ldi	r22, 0x03	; 3
    468c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	62 e0       	ldi	r22, 0x02	; 2
    4694:	41 e0       	ldi	r20, 0x01	; 1
    4696:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    469a:	c8 01       	movw	r24, r16
    469c:	01 97       	sbiw	r24, 0x01	; 1
    469e:	f1 f7       	brne	.-4      	; 0x469c <LCD_WriteNumberIn4Digits+0x1ba>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	62 e0       	ldi	r22, 0x02	; 2
    46a4:	40 e0       	ldi	r20, 0x00	; 0
    46a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    46aa:	c8 01       	movw	r24, r16
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	f1 f7       	brne	.-4      	; 0x46ac <LCD_WriteNumberIn4Digits+0x1ca>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	60 e3       	ldi	r22, 0x30	; 48
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    46b4:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	62 e0       	ldi	r22, 0x02	; 2
    46bc:	41 e0       	ldi	r20, 0x01	; 1
    46be:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    46c2:	c8 01       	movw	r24, r16
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	f1 f7       	brne	.-4      	; 0x46c4 <LCD_WriteNumberIn4Digits+0x1e2>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	62 e0       	ldi	r22, 0x02	; 2
    46cc:	40 e0       	ldi	r20, 0x00	; 0
    46ce:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    46d2:	c8 01       	movw	r24, r16
    46d4:	01 97       	sbiw	r24, 0x01	; 1
    46d6:	f1 f7       	brne	.-4      	; 0x46d4 <LCD_WriteNumberIn4Digits+0x1f2>
		LCD_enuSendData(digits[i] + '0') ;
		if(i == 0)
		break ;
	}
	
}
    46d8:	c8 01       	movw	r24, r16
    46da:	01 97       	sbiw	r24, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <LCD_WriteNumberIn4Digits+0x1f8>
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	ef 90       	pop	r14
    46f2:	df 90       	pop	r13
    46f4:	cf 90       	pop	r12
    46f6:	bf 90       	pop	r11
    46f8:	af 90       	pop	r10
    46fa:	9f 90       	pop	r9
    46fc:	8f 90       	pop	r8
    46fe:	7f 90       	pop	r7
    4700:	6f 90       	pop	r6
    4702:	5f 90       	pop	r5
    4704:	4f 90       	pop	r4
    4706:	3f 90       	pop	r3
    4708:	2f 90       	pop	r2
    470a:	08 95       	ret
			if(i == 0)
			break ;
		}
		return ;
	}
	if(number < 0)
    470c:	97 fd       	sbrc	r25, 7
    470e:	6b c1       	rjmp	.+726    	; 0x49e6 <LCD_WriteNumberIn4Digits+0x504>
	
}

void LCD_WriteNumberIn4Digits(s64 number)
{
	u8 digits[4] = {0} ;
    4710:	19 82       	std	Y+1, r1	; 0x01
    4712:	1a 82       	std	Y+2, r1	; 0x02
    4714:	1b 82       	std	Y+3, r1	; 0x03
    4716:	1c 82       	std	Y+4, r1	; 0x04
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 4 )
	{
		digits[i] =  number % 10 ;
    4718:	29 2d       	mov	r18, r9
    471a:	38 2d       	mov	r19, r8
    471c:	47 2d       	mov	r20, r7
    471e:	55 2d       	mov	r21, r5
    4720:	64 2d       	mov	r22, r4
    4722:	73 2d       	mov	r23, r3
    4724:	82 2d       	mov	r24, r2
    4726:	96 2d       	mov	r25, r6
    4728:	ea e0       	ldi	r30, 0x0A	; 10
    472a:	ae 2e       	mov	r10, r30
    472c:	bb 24       	eor	r11, r11
    472e:	cc 24       	eor	r12, r12
    4730:	dd 24       	eor	r13, r13
    4732:	ee 24       	eor	r14, r14
    4734:	ff 24       	eor	r15, r15
    4736:	00 e0       	ldi	r16, 0x00	; 0
    4738:	10 e0       	ldi	r17, 0x00	; 0
    473a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    473e:	29 83       	std	Y+1, r18	; 0x01
		number /= 10 ;
    4740:	29 2d       	mov	r18, r9
    4742:	38 2d       	mov	r19, r8
    4744:	47 2d       	mov	r20, r7
    4746:	55 2d       	mov	r21, r5
    4748:	64 2d       	mov	r22, r4
    474a:	73 2d       	mov	r23, r3
    474c:	82 2d       	mov	r24, r2
    474e:	96 2d       	mov	r25, r6
    4750:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    4754:	92 2e       	mov	r9, r18
    4756:	83 2e       	mov	r8, r19
    4758:	74 2e       	mov	r7, r20
    475a:	65 2e       	mov	r6, r21
    475c:	56 2e       	mov	r5, r22
    475e:	47 2e       	mov	r4, r23
    4760:	38 2e       	mov	r3, r24
    4762:	29 2e       	mov	r2, r25
	if(number < 0)
	{
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 4 )
    4764:	82 2f       	mov	r24, r18
    4766:	88 29       	or	r24, r8
    4768:	87 29       	or	r24, r7
    476a:	86 29       	or	r24, r6
    476c:	85 29       	or	r24, r5
    476e:	84 29       	or	r24, r4
    4770:	83 29       	or	r24, r3
    4772:	82 29       	or	r24, r2
    4774:	09 f4       	brne	.+2      	; 0x4778 <LCD_WriteNumberIn4Digits+0x296>
    4776:	61 c0       	rjmp	.+194    	; 0x483a <LCD_WriteNumberIn4Digits+0x358>
	{
		digits[i] =  number % 10 ;
    4778:	29 2d       	mov	r18, r9
    477a:	38 2d       	mov	r19, r8
    477c:	47 2d       	mov	r20, r7
    477e:	56 2d       	mov	r21, r6
    4780:	65 2d       	mov	r22, r5
    4782:	74 2d       	mov	r23, r4
    4784:	83 2d       	mov	r24, r3
    4786:	92 2d       	mov	r25, r2
    4788:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    478c:	2a 83       	std	Y+2, r18	; 0x02
		number /= 10 ;
    478e:	29 2d       	mov	r18, r9
    4790:	38 2d       	mov	r19, r8
    4792:	47 2d       	mov	r20, r7
    4794:	56 2d       	mov	r21, r6
    4796:	65 2d       	mov	r22, r5
    4798:	74 2d       	mov	r23, r4
    479a:	83 2d       	mov	r24, r3
    479c:	92 2d       	mov	r25, r2
    479e:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    47a2:	92 2e       	mov	r9, r18
    47a4:	83 2e       	mov	r8, r19
    47a6:	74 2e       	mov	r7, r20
    47a8:	65 2e       	mov	r6, r21
    47aa:	56 2e       	mov	r5, r22
    47ac:	47 2e       	mov	r4, r23
    47ae:	38 2e       	mov	r3, r24
    47b0:	29 2e       	mov	r2, r25
	if(number < 0)
	{
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 4 )
    47b2:	82 2f       	mov	r24, r18
    47b4:	88 29       	or	r24, r8
    47b6:	87 29       	or	r24, r7
    47b8:	86 29       	or	r24, r6
    47ba:	85 29       	or	r24, r5
    47bc:	84 29       	or	r24, r4
    47be:	83 29       	or	r24, r3
    47c0:	82 29       	or	r24, r2
    47c2:	d9 f1       	breq	.+118    	; 0x483a <LCD_WriteNumberIn4Digits+0x358>
	{
		digits[i] =  number % 10 ;
    47c4:	29 2d       	mov	r18, r9
    47c6:	38 2d       	mov	r19, r8
    47c8:	47 2d       	mov	r20, r7
    47ca:	56 2d       	mov	r21, r6
    47cc:	65 2d       	mov	r22, r5
    47ce:	74 2d       	mov	r23, r4
    47d0:	83 2d       	mov	r24, r3
    47d2:	92 2d       	mov	r25, r2
    47d4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    47d8:	2b 83       	std	Y+3, r18	; 0x03
		number /= 10 ;
    47da:	29 2d       	mov	r18, r9
    47dc:	38 2d       	mov	r19, r8
    47de:	47 2d       	mov	r20, r7
    47e0:	56 2d       	mov	r21, r6
    47e2:	65 2d       	mov	r22, r5
    47e4:	74 2d       	mov	r23, r4
    47e6:	83 2d       	mov	r24, r3
    47e8:	92 2d       	mov	r25, r2
    47ea:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    47ee:	92 2e       	mov	r9, r18
    47f0:	83 2e       	mov	r8, r19
    47f2:	74 2e       	mov	r7, r20
    47f4:	65 2e       	mov	r6, r21
    47f6:	56 2e       	mov	r5, r22
    47f8:	47 2e       	mov	r4, r23
    47fa:	38 2e       	mov	r3, r24
    47fc:	29 2e       	mov	r2, r25
	if(number < 0)
	{
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 4 )
    47fe:	82 2f       	mov	r24, r18
    4800:	88 29       	or	r24, r8
    4802:	87 29       	or	r24, r7
    4804:	86 29       	or	r24, r6
    4806:	85 29       	or	r24, r5
    4808:	84 29       	or	r24, r4
    480a:	83 29       	or	r24, r3
    480c:	82 29       	or	r24, r2
    480e:	a9 f0       	breq	.+42     	; 0x483a <LCD_WriteNumberIn4Digits+0x358>
	{
		digits[i] =  number % 10 ;
    4810:	29 2d       	mov	r18, r9
    4812:	38 2d       	mov	r19, r8
    4814:	47 2d       	mov	r20, r7
    4816:	56 2d       	mov	r21, r6
    4818:	65 2d       	mov	r22, r5
    481a:	74 2d       	mov	r23, r4
    481c:	83 2d       	mov	r24, r3
    481e:	92 2d       	mov	r25, r2
    4820:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    4824:	2c 83       	std	Y+4, r18	; 0x04
		number /= 10 ;
    4826:	29 2d       	mov	r18, r9
    4828:	38 2d       	mov	r19, r8
    482a:	47 2d       	mov	r20, r7
    482c:	56 2d       	mov	r21, r6
    482e:	65 2d       	mov	r22, r5
    4830:	74 2d       	mov	r23, r4
    4832:	83 2d       	mov	r24, r3
    4834:	92 2d       	mov	r25, r2
    4836:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
		i++ ;
	}
	for(i = 3 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    483a:	fc 80       	ldd	r15, Y+4	; 0x04
    483c:	80 e3       	ldi	r24, 0x30	; 48
    483e:	f8 0e       	add	r15, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	60 e0       	ldi	r22, 0x00	; 0
    4844:	41 e0       	ldi	r20, 0x01	; 1
    4846:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	61 e0       	ldi	r22, 0x01	; 1
    484e:	40 e0       	ldi	r20, 0x00	; 0
    4850:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4854:	6f 2d       	mov	r22, r15
    4856:	62 95       	swap	r22
    4858:	6f 70       	andi	r22, 0x0F	; 15
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	62 e0       	ldi	r22, 0x02	; 2
    4864:	41 e0       	ldi	r20, 0x01	; 1
    4866:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    486a:	00 ed       	ldi	r16, 0xD0	; 208
    486c:	17 e0       	ldi	r17, 0x07	; 7
    486e:	c8 01       	movw	r24, r16
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	f1 f7       	brne	.-4      	; 0x4870 <LCD_WriteNumberIn4Digits+0x38e>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	62 e0       	ldi	r22, 0x02	; 2
    4878:	40 e0       	ldi	r20, 0x00	; 0
    487a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    487e:	c8 01       	movw	r24, r16
    4880:	01 97       	sbiw	r24, 0x01	; 1
    4882:	f1 f7       	brne	.-4      	; 0x4880 <LCD_WriteNumberIn4Digits+0x39e>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	6f 2d       	mov	r22, r15
    4888:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	62 e0       	ldi	r22, 0x02	; 2
    4890:	41 e0       	ldi	r20, 0x01	; 1
    4892:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4896:	c8 01       	movw	r24, r16
    4898:	01 97       	sbiw	r24, 0x01	; 1
    489a:	f1 f7       	brne	.-4      	; 0x4898 <LCD_WriteNumberIn4Digits+0x3b6>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	62 e0       	ldi	r22, 0x02	; 2
    48a0:	40 e0       	ldi	r20, 0x00	; 0
    48a2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    48a6:	c8 01       	movw	r24, r16
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	f1 f7       	brne	.-4      	; 0x48a8 <LCD_WriteNumberIn4Digits+0x3c6>
    48ac:	c8 01       	movw	r24, r16
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <LCD_WriteNumberIn4Digits+0x3cc>
		number /= 10 ;
		i++ ;
	}
	for(i = 3 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    48b2:	fb 80       	ldd	r15, Y+3	; 0x03
    48b4:	80 e3       	ldi	r24, 0x30	; 48
    48b6:	f8 0e       	add	r15, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	60 e0       	ldi	r22, 0x00	; 0
    48bc:	41 e0       	ldi	r20, 0x01	; 1
    48be:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	61 e0       	ldi	r22, 0x01	; 1
    48c6:	40 e0       	ldi	r20, 0x00	; 0
    48c8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    48cc:	6f 2d       	mov	r22, r15
    48ce:	62 95       	swap	r22
    48d0:	6f 70       	andi	r22, 0x0F	; 15
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	62 e0       	ldi	r22, 0x02	; 2
    48dc:	41 e0       	ldi	r20, 0x01	; 1
    48de:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    48e2:	c8 01       	movw	r24, r16
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	f1 f7       	brne	.-4      	; 0x48e4 <LCD_WriteNumberIn4Digits+0x402>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	62 e0       	ldi	r22, 0x02	; 2
    48ec:	40 e0       	ldi	r20, 0x00	; 0
    48ee:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    48f2:	c8 01       	movw	r24, r16
    48f4:	01 97       	sbiw	r24, 0x01	; 1
    48f6:	f1 f7       	brne	.-4      	; 0x48f4 <LCD_WriteNumberIn4Digits+0x412>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	6f 2d       	mov	r22, r15
    48fc:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	62 e0       	ldi	r22, 0x02	; 2
    4904:	41 e0       	ldi	r20, 0x01	; 1
    4906:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    490a:	c8 01       	movw	r24, r16
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <LCD_WriteNumberIn4Digits+0x42a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	62 e0       	ldi	r22, 0x02	; 2
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    491a:	c8 01       	movw	r24, r16
    491c:	01 97       	sbiw	r24, 0x01	; 1
    491e:	f1 f7       	brne	.-4      	; 0x491c <LCD_WriteNumberIn4Digits+0x43a>
    4920:	c8 01       	movw	r24, r16
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	f1 f7       	brne	.-4      	; 0x4922 <LCD_WriteNumberIn4Digits+0x440>
		number /= 10 ;
		i++ ;
	}
	for(i = 3 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    4926:	fa 80       	ldd	r15, Y+2	; 0x02
    4928:	80 e3       	ldi	r24, 0x30	; 48
    492a:	f8 0e       	add	r15, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	41 e0       	ldi	r20, 0x01	; 1
    4932:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	61 e0       	ldi	r22, 0x01	; 1
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4940:	6f 2d       	mov	r22, r15
    4942:	62 95       	swap	r22
    4944:	6f 70       	andi	r22, 0x0F	; 15
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	62 e0       	ldi	r22, 0x02	; 2
    4950:	41 e0       	ldi	r20, 0x01	; 1
    4952:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4956:	c8 01       	movw	r24, r16
    4958:	01 97       	sbiw	r24, 0x01	; 1
    495a:	f1 f7       	brne	.-4      	; 0x4958 <LCD_WriteNumberIn4Digits+0x476>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    495c:	81 e0       	ldi	r24, 0x01	; 1
    495e:	62 e0       	ldi	r22, 0x02	; 2
    4960:	40 e0       	ldi	r20, 0x00	; 0
    4962:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4966:	c8 01       	movw	r24, r16
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <LCD_WriteNumberIn4Digits+0x486>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	6f 2d       	mov	r22, r15
    4970:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	62 e0       	ldi	r22, 0x02	; 2
    4978:	41 e0       	ldi	r20, 0x01	; 1
    497a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    497e:	c8 01       	movw	r24, r16
    4980:	01 97       	sbiw	r24, 0x01	; 1
    4982:	f1 f7       	brne	.-4      	; 0x4980 <LCD_WriteNumberIn4Digits+0x49e>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	62 e0       	ldi	r22, 0x02	; 2
    4988:	40 e0       	ldi	r20, 0x00	; 0
    498a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    498e:	c8 01       	movw	r24, r16
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	f1 f7       	brne	.-4      	; 0x4990 <LCD_WriteNumberIn4Digits+0x4ae>
    4994:	c8 01       	movw	r24, r16
    4996:	01 97       	sbiw	r24, 0x01	; 1
    4998:	f1 f7       	brne	.-4      	; 0x4996 <LCD_WriteNumberIn4Digits+0x4b4>
		number /= 10 ;
		i++ ;
	}
	for(i = 3 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    499a:	f9 80       	ldd	r15, Y+1	; 0x01
    499c:	80 e3       	ldi	r24, 0x30	; 48
    499e:	f8 0e       	add	r15, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	60 e0       	ldi	r22, 0x00	; 0
    49a4:	41 e0       	ldi	r20, 0x01	; 1
    49a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	61 e0       	ldi	r22, 0x01	; 1
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    49b4:	6f 2d       	mov	r22, r15
    49b6:	62 95       	swap	r22
    49b8:	6f 70       	andi	r22, 0x0F	; 15
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	62 e0       	ldi	r22, 0x02	; 2
    49c4:	41 e0       	ldi	r20, 0x01	; 1
    49c6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    49ca:	c8 01       	movw	r24, r16
    49cc:	01 97       	sbiw	r24, 0x01	; 1
    49ce:	f1 f7       	brne	.-4      	; 0x49cc <LCD_WriteNumberIn4Digits+0x4ea>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	62 e0       	ldi	r22, 0x02	; 2
    49d4:	40 e0       	ldi	r20, 0x00	; 0
    49d6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    49da:	c8 01       	movw	r24, r16
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	f1 f7       	brne	.-4      	; 0x49dc <LCD_WriteNumberIn4Digits+0x4fa>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	6f 2d       	mov	r22, r15
    49e4:	67 ce       	rjmp	.-818    	; 0x46b4 <LCD_WriteNumberIn4Digits+0x1d2>
		}
		return ;
	}
	if(number < 0)
	{
		number *= (-1) ;
    49e6:	21 95       	neg	r18
    49e8:	41 e0       	ldi	r20, 0x01	; 1
    49ea:	12 16       	cp	r1, r18
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <LCD_WriteNumberIn4Digits+0x50e>
    49ee:	6c c0       	rjmp	.+216    	; 0x4ac8 <LCD_WriteNumberIn4Digits+0x5e6>
    49f0:	38 2d       	mov	r19, r8
    49f2:	31 95       	neg	r19
    49f4:	91 e0       	ldi	r25, 0x01	; 1
    49f6:	13 16       	cp	r1, r19
    49f8:	08 f0       	brcs	.+2      	; 0x49fc <LCD_WriteNumberIn4Digits+0x51a>
    49fa:	64 c0       	rjmp	.+200    	; 0x4ac4 <LCD_WriteNumberIn4Digits+0x5e2>
    49fc:	f3 2e       	mov	r15, r19
    49fe:	f4 1a       	sub	r15, r20
    4a00:	41 e0       	ldi	r20, 0x01	; 1
    4a02:	3f 15       	cp	r19, r15
    4a04:	08 f0       	brcs	.+2      	; 0x4a08 <LCD_WriteNumberIn4Digits+0x526>
    4a06:	5c c0       	rjmp	.+184    	; 0x4ac0 <LCD_WriteNumberIn4Digits+0x5de>
    4a08:	94 2b       	or	r25, r20
    4a0a:	47 2d       	mov	r20, r7
    4a0c:	41 95       	neg	r20
    4a0e:	61 e0       	ldi	r22, 0x01	; 1
    4a10:	14 16       	cp	r1, r20
    4a12:	08 f0       	brcs	.+2      	; 0x4a16 <LCD_WriteNumberIn4Digits+0x534>
    4a14:	53 c0       	rjmp	.+166    	; 0x4abc <LCD_WriteNumberIn4Digits+0x5da>
    4a16:	04 2f       	mov	r16, r20
    4a18:	09 1b       	sub	r16, r25
    4a1a:	91 e0       	ldi	r25, 0x01	; 1
    4a1c:	40 17       	cp	r20, r16
    4a1e:	08 f0       	brcs	.+2      	; 0x4a22 <LCD_WriteNumberIn4Digits+0x540>
    4a20:	4b c0       	rjmp	.+150    	; 0x4ab8 <LCD_WriteNumberIn4Digits+0x5d6>
    4a22:	69 2b       	or	r22, r25
    4a24:	55 2d       	mov	r21, r5
    4a26:	51 95       	neg	r21
    4a28:	91 e0       	ldi	r25, 0x01	; 1
    4a2a:	15 16       	cp	r1, r21
    4a2c:	08 f0       	brcs	.+2      	; 0x4a30 <LCD_WriteNumberIn4Digits+0x54e>
    4a2e:	42 c0       	rjmp	.+132    	; 0x4ab4 <LCD_WriteNumberIn4Digits+0x5d2>
    4a30:	15 2f       	mov	r17, r21
    4a32:	16 1b       	sub	r17, r22
    4a34:	61 e0       	ldi	r22, 0x01	; 1
    4a36:	51 17       	cp	r21, r17
    4a38:	d8 f5       	brcc	.+118    	; 0x4ab0 <LCD_WriteNumberIn4Digits+0x5ce>
    4a3a:	96 2b       	or	r25, r22
    4a3c:	64 2d       	mov	r22, r4
    4a3e:	61 95       	neg	r22
    4a40:	e1 e0       	ldi	r30, 0x01	; 1
    4a42:	16 16       	cp	r1, r22
    4a44:	98 f5       	brcc	.+102    	; 0x4aac <LCD_WriteNumberIn4Digits+0x5ca>
    4a46:	b6 2f       	mov	r27, r22
    4a48:	b9 1b       	sub	r27, r25
    4a4a:	91 e0       	ldi	r25, 0x01	; 1
    4a4c:	6b 17       	cp	r22, r27
    4a4e:	60 f5       	brcc	.+88     	; 0x4aa8 <LCD_WriteNumberIn4Digits+0x5c6>
    4a50:	e9 2b       	or	r30, r25
    4a52:	73 2d       	mov	r23, r3
    4a54:	71 95       	neg	r23
    4a56:	91 e0       	ldi	r25, 0x01	; 1
    4a58:	17 16       	cp	r1, r23
    4a5a:	20 f5       	brcc	.+72     	; 0x4aa4 <LCD_WriteNumberIn4Digits+0x5c2>
    4a5c:	a7 2f       	mov	r26, r23
    4a5e:	ae 1b       	sub	r26, r30
    4a60:	e1 e0       	ldi	r30, 0x01	; 1
    4a62:	7a 17       	cp	r23, r26
    4a64:	e8 f4       	brcc	.+58     	; 0x4aa0 <LCD_WriteNumberIn4Digits+0x5be>
    4a66:	9e 2b       	or	r25, r30
    4a68:	82 2d       	mov	r24, r2
    4a6a:	81 95       	neg	r24
    4a6c:	e1 e0       	ldi	r30, 0x01	; 1
    4a6e:	18 16       	cp	r1, r24
    4a70:	a8 f4       	brcc	.+42     	; 0x4a9c <LCD_WriteNumberIn4Digits+0x5ba>
    4a72:	f8 2f       	mov	r31, r24
    4a74:	f9 1b       	sub	r31, r25
    4a76:	91 e0       	ldi	r25, 0x01	; 1
    4a78:	8f 17       	cp	r24, r31
    4a7a:	70 f4       	brcc	.+28     	; 0x4a98 <LCD_WriteNumberIn4Digits+0x5b6>
    4a7c:	e9 2b       	or	r30, r25
    4a7e:	61 94       	neg	r6
    4a80:	92 2e       	mov	r9, r18
    4a82:	8f 2c       	mov	r8, r15
    4a84:	70 2e       	mov	r7, r16
    4a86:	51 2e       	mov	r5, r17
    4a88:	4b 2e       	mov	r4, r27
    4a8a:	3a 2e       	mov	r3, r26
    4a8c:	2f 2e       	mov	r2, r31
    4a8e:	6e 1a       	sub	r6, r30
		LCD_enuSendData('-') ;
    4a90:	8d e2       	ldi	r24, 0x2D	; 45
    4a92:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <LCD_enuSendData>
    4a96:	3c ce       	rjmp	.-904    	; 0x4710 <LCD_WriteNumberIn4Digits+0x22e>
		}
		return ;
	}
	if(number < 0)
	{
		number *= (-1) ;
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	f0 cf       	rjmp	.-32     	; 0x4a7c <LCD_WriteNumberIn4Digits+0x59a>
    4a9c:	e0 e0       	ldi	r30, 0x00	; 0
    4a9e:	e9 cf       	rjmp	.-46     	; 0x4a72 <LCD_WriteNumberIn4Digits+0x590>
    4aa0:	e0 e0       	ldi	r30, 0x00	; 0
    4aa2:	e1 cf       	rjmp	.-62     	; 0x4a66 <LCD_WriteNumberIn4Digits+0x584>
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	da cf       	rjmp	.-76     	; 0x4a5c <LCD_WriteNumberIn4Digits+0x57a>
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	d2 cf       	rjmp	.-92     	; 0x4a50 <LCD_WriteNumberIn4Digits+0x56e>
    4aac:	e0 e0       	ldi	r30, 0x00	; 0
    4aae:	cb cf       	rjmp	.-106    	; 0x4a46 <LCD_WriteNumberIn4Digits+0x564>
    4ab0:	60 e0       	ldi	r22, 0x00	; 0
    4ab2:	c3 cf       	rjmp	.-122    	; 0x4a3a <LCD_WriteNumberIn4Digits+0x558>
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	bc cf       	rjmp	.-136    	; 0x4a30 <LCD_WriteNumberIn4Digits+0x54e>
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	b3 cf       	rjmp	.-154    	; 0x4a22 <LCD_WriteNumberIn4Digits+0x540>
    4abc:	60 e0       	ldi	r22, 0x00	; 0
    4abe:	ab cf       	rjmp	.-170    	; 0x4a16 <LCD_WriteNumberIn4Digits+0x534>
    4ac0:	40 e0       	ldi	r20, 0x00	; 0
    4ac2:	a2 cf       	rjmp	.-188    	; 0x4a08 <LCD_WriteNumberIn4Digits+0x526>
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	9a cf       	rjmp	.-204    	; 0x49fc <LCD_WriteNumberIn4Digits+0x51a>
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	92 cf       	rjmp	.-220    	; 0x49f0 <LCD_WriteNumberIn4Digits+0x50e>

00004acc <LCD_WriteNumberIn3Digits>:

    return Local_EnuErrorState;
}

void LCD_WriteNumberIn3Digits(s64 number)
{
    4acc:	2f 92       	push	r2
    4ace:	3f 92       	push	r3
    4ad0:	4f 92       	push	r4
    4ad2:	5f 92       	push	r5
    4ad4:	6f 92       	push	r6
    4ad6:	7f 92       	push	r7
    4ad8:	8f 92       	push	r8
    4ada:	9f 92       	push	r9
    4adc:	af 92       	push	r10
    4ade:	bf 92       	push	r11
    4ae0:	cf 92       	push	r12
    4ae2:	df 92       	push	r13
    4ae4:	ef 92       	push	r14
    4ae6:	ff 92       	push	r15
    4ae8:	0f 93       	push	r16
    4aea:	1f 93       	push	r17
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	00 d0       	rcall	.+0      	; 0x4af2 <LCD_WriteNumberIn3Digits+0x26>
    4af2:	0f 92       	push	r0
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
    4af8:	92 2e       	mov	r9, r18
    4afa:	83 2e       	mov	r8, r19
    4afc:	74 2e       	mov	r7, r20
    4afe:	55 2e       	mov	r5, r21
    4b00:	46 2e       	mov	r4, r22
    4b02:	37 2e       	mov	r3, r23
    4b04:	28 2e       	mov	r2, r24
    4b06:	69 2e       	mov	r6, r25
	u8 digits[3] = {0} ;
	u8 i = 0  ;
	
	if(number == 0)
    4b08:	82 2f       	mov	r24, r18
    4b0a:	83 2b       	or	r24, r19
    4b0c:	84 2b       	or	r24, r20
    4b0e:	85 2b       	or	r24, r21
    4b10:	86 2b       	or	r24, r22
    4b12:	87 2b       	or	r24, r23
    4b14:	82 29       	or	r24, r2
    4b16:	89 2b       	or	r24, r25
    4b18:	09 f0       	breq	.+2      	; 0x4b1c <LCD_WriteNumberIn3Digits+0x50>
    4b1a:	b7 c0       	rjmp	.+366    	; 0x4c8a <LCD_WriteNumberIn3Digits+0x1be>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4b1c:	81 e0       	ldi	r24, 0x01	; 1
    4b1e:	60 e0       	ldi	r22, 0x00	; 0
    4b20:	41 e0       	ldi	r20, 0x01	; 1
    4b22:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	61 e0       	ldi	r22, 0x01	; 1
    4b2a:	40 e0       	ldi	r20, 0x00	; 0
    4b2c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	63 e0       	ldi	r22, 0x03	; 3
    4b34:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	62 e0       	ldi	r22, 0x02	; 2
    4b3c:	41 e0       	ldi	r20, 0x01	; 1
    4b3e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4b42:	00 ed       	ldi	r16, 0xD0	; 208
    4b44:	17 e0       	ldi	r17, 0x07	; 7
    4b46:	c8 01       	movw	r24, r16
    4b48:	01 97       	sbiw	r24, 0x01	; 1
    4b4a:	f1 f7       	brne	.-4      	; 0x4b48 <LCD_WriteNumberIn3Digits+0x7c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	62 e0       	ldi	r22, 0x02	; 2
    4b50:	40 e0       	ldi	r20, 0x00	; 0
    4b52:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4b56:	c8 01       	movw	r24, r16
    4b58:	01 97       	sbiw	r24, 0x01	; 1
    4b5a:	f1 f7       	brne	.-4      	; 0x4b58 <LCD_WriteNumberIn3Digits+0x8c>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	60 e3       	ldi	r22, 0x30	; 48
    4b60:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	62 e0       	ldi	r22, 0x02	; 2
    4b68:	41 e0       	ldi	r20, 0x01	; 1
    4b6a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4b6e:	c8 01       	movw	r24, r16
    4b70:	01 97       	sbiw	r24, 0x01	; 1
    4b72:	f1 f7       	brne	.-4      	; 0x4b70 <LCD_WriteNumberIn3Digits+0xa4>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	62 e0       	ldi	r22, 0x02	; 2
    4b78:	40 e0       	ldi	r20, 0x00	; 0
    4b7a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4b7e:	c8 01       	movw	r24, r16
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <LCD_WriteNumberIn3Digits+0xb4>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4b84:	c8 01       	movw	r24, r16
    4b86:	01 97       	sbiw	r24, 0x01	; 1
    4b88:	f1 f7       	brne	.-4      	; 0x4b86 <LCD_WriteNumberIn3Digits+0xba>
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	60 e0       	ldi	r22, 0x00	; 0
    4b8e:	41 e0       	ldi	r20, 0x01	; 1
    4b90:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	61 e0       	ldi	r22, 0x01	; 1
    4b98:	40 e0       	ldi	r20, 0x00	; 0
    4b9a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	63 e0       	ldi	r22, 0x03	; 3
    4ba2:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	62 e0       	ldi	r22, 0x02	; 2
    4baa:	41 e0       	ldi	r20, 0x01	; 1
    4bac:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4bb0:	c8 01       	movw	r24, r16
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <LCD_WriteNumberIn3Digits+0xe6>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	62 e0       	ldi	r22, 0x02	; 2
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4bc0:	c8 01       	movw	r24, r16
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	f1 f7       	brne	.-4      	; 0x4bc2 <LCD_WriteNumberIn3Digits+0xf6>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	60 e3       	ldi	r22, 0x30	; 48
    4bca:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	62 e0       	ldi	r22, 0x02	; 2
    4bd2:	41 e0       	ldi	r20, 0x01	; 1
    4bd4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4bd8:	c8 01       	movw	r24, r16
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	f1 f7       	brne	.-4      	; 0x4bda <LCD_WriteNumberIn3Digits+0x10e>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	62 e0       	ldi	r22, 0x02	; 2
    4be2:	40 e0       	ldi	r20, 0x00	; 0
    4be4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4be8:	c8 01       	movw	r24, r16
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <LCD_WriteNumberIn3Digits+0x11e>
    4bee:	c8 01       	movw	r24, r16
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <LCD_WriteNumberIn3Digits+0x124>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	60 e0       	ldi	r22, 0x00	; 0
    4bf8:	41 e0       	ldi	r20, 0x01	; 1
    4bfa:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	61 e0       	ldi	r22, 0x01	; 1
    4c02:	40 e0       	ldi	r20, 0x00	; 0
    4c04:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	63 e0       	ldi	r22, 0x03	; 3
    4c0c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4c10:	81 e0       	ldi	r24, 0x01	; 1
    4c12:	62 e0       	ldi	r22, 0x02	; 2
    4c14:	41 e0       	ldi	r20, 0x01	; 1
    4c16:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4c1a:	c8 01       	movw	r24, r16
    4c1c:	01 97       	sbiw	r24, 0x01	; 1
    4c1e:	f1 f7       	brne	.-4      	; 0x4c1c <LCD_WriteNumberIn3Digits+0x150>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	62 e0       	ldi	r22, 0x02	; 2
    4c24:	40 e0       	ldi	r20, 0x00	; 0
    4c26:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4c2a:	c8 01       	movw	r24, r16
    4c2c:	01 97       	sbiw	r24, 0x01	; 1
    4c2e:	f1 f7       	brne	.-4      	; 0x4c2c <LCD_WriteNumberIn3Digits+0x160>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	60 e3       	ldi	r22, 0x30	; 48
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4c34:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	62 e0       	ldi	r22, 0x02	; 2
    4c3c:	41 e0       	ldi	r20, 0x01	; 1
    4c3e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4c42:	c8 01       	movw	r24, r16
    4c44:	01 97       	sbiw	r24, 0x01	; 1
    4c46:	f1 f7       	brne	.-4      	; 0x4c44 <LCD_WriteNumberIn3Digits+0x178>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	62 e0       	ldi	r22, 0x02	; 2
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4c52:	c8 01       	movw	r24, r16
    4c54:	01 97       	sbiw	r24, 0x01	; 1
    4c56:	f1 f7       	brne	.-4      	; 0x4c54 <LCD_WriteNumberIn3Digits+0x188>
		LCD_enuSendData(digits[i] + '0') ;
		if(i == 0)
		break ;
	}
	
}
    4c58:	c8 01       	movw	r24, r16
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	f1 f7       	brne	.-4      	; 0x4c5a <LCD_WriteNumberIn3Digits+0x18e>
    4c5e:	0f 90       	pop	r0
    4c60:	0f 90       	pop	r0
    4c62:	0f 90       	pop	r0
    4c64:	cf 91       	pop	r28
    4c66:	df 91       	pop	r29
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	ff 90       	pop	r15
    4c6e:	ef 90       	pop	r14
    4c70:	df 90       	pop	r13
    4c72:	cf 90       	pop	r12
    4c74:	bf 90       	pop	r11
    4c76:	af 90       	pop	r10
    4c78:	9f 90       	pop	r9
    4c7a:	8f 90       	pop	r8
    4c7c:	7f 90       	pop	r7
    4c7e:	6f 90       	pop	r6
    4c80:	5f 90       	pop	r5
    4c82:	4f 90       	pop	r4
    4c84:	3f 90       	pop	r3
    4c86:	2f 90       	pop	r2
    4c88:	08 95       	ret
			if(i == 0)
			break ;
		}
		return ;
	}
	if(number < 0)
    4c8a:	97 fd       	sbrc	r25, 7
    4c8c:	0d c1       	rjmp	.+538    	; 0x4ea8 <LCD_WriteNumberIn3Digits+0x3dc>
    return Local_EnuErrorState;
}

void LCD_WriteNumberIn3Digits(s64 number)
{
	u8 digits[3] = {0} ;
    4c8e:	fe 01       	movw	r30, r28
    4c90:	31 96       	adiw	r30, 0x01	; 1
    4c92:	83 e0       	ldi	r24, 0x03	; 3
    4c94:	df 01       	movw	r26, r30
    4c96:	1d 92       	st	X+, r1
    4c98:	8a 95       	dec	r24
    4c9a:	e9 f7       	brne	.-6      	; 0x4c96 <LCD_WriteNumberIn3Digits+0x1ca>
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 3 )
	{
		digits[i] =  number % 10 ;
    4c9c:	29 2d       	mov	r18, r9
    4c9e:	38 2d       	mov	r19, r8
    4ca0:	47 2d       	mov	r20, r7
    4ca2:	55 2d       	mov	r21, r5
    4ca4:	64 2d       	mov	r22, r4
    4ca6:	73 2d       	mov	r23, r3
    4ca8:	82 2d       	mov	r24, r2
    4caa:	96 2d       	mov	r25, r6
    4cac:	fa e0       	ldi	r31, 0x0A	; 10
    4cae:	af 2e       	mov	r10, r31
    4cb0:	bb 24       	eor	r11, r11
    4cb2:	cc 24       	eor	r12, r12
    4cb4:	dd 24       	eor	r13, r13
    4cb6:	ee 24       	eor	r14, r14
    4cb8:	ff 24       	eor	r15, r15
    4cba:	00 e0       	ldi	r16, 0x00	; 0
    4cbc:	10 e0       	ldi	r17, 0x00	; 0
    4cbe:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    4cc2:	29 83       	std	Y+1, r18	; 0x01
		number /= 10 ;
    4cc4:	29 2d       	mov	r18, r9
    4cc6:	38 2d       	mov	r19, r8
    4cc8:	47 2d       	mov	r20, r7
    4cca:	55 2d       	mov	r21, r5
    4ccc:	64 2d       	mov	r22, r4
    4cce:	73 2d       	mov	r23, r3
    4cd0:	82 2d       	mov	r24, r2
    4cd2:	96 2d       	mov	r25, r6
    4cd4:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    4cd8:	92 2e       	mov	r9, r18
    4cda:	83 2e       	mov	r8, r19
    4cdc:	74 2e       	mov	r7, r20
    4cde:	65 2e       	mov	r6, r21
    4ce0:	56 2e       	mov	r5, r22
    4ce2:	47 2e       	mov	r4, r23
    4ce4:	38 2e       	mov	r3, r24
    4ce6:	29 2e       	mov	r2, r25
	if(number < 0)
	{
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 3 )
    4ce8:	82 2f       	mov	r24, r18
    4cea:	88 29       	or	r24, r8
    4cec:	87 29       	or	r24, r7
    4cee:	86 29       	or	r24, r6
    4cf0:	85 29       	or	r24, r5
    4cf2:	84 29       	or	r24, r4
    4cf4:	83 29       	or	r24, r3
    4cf6:	82 29       	or	r24, r2
    4cf8:	d9 f1       	breq	.+118    	; 0x4d70 <LCD_WriteNumberIn3Digits+0x2a4>
	{
		digits[i] =  number % 10 ;
    4cfa:	29 2d       	mov	r18, r9
    4cfc:	38 2d       	mov	r19, r8
    4cfe:	47 2d       	mov	r20, r7
    4d00:	56 2d       	mov	r21, r6
    4d02:	65 2d       	mov	r22, r5
    4d04:	74 2d       	mov	r23, r4
    4d06:	83 2d       	mov	r24, r3
    4d08:	92 2d       	mov	r25, r2
    4d0a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    4d0e:	2a 83       	std	Y+2, r18	; 0x02
		number /= 10 ;
    4d10:	29 2d       	mov	r18, r9
    4d12:	38 2d       	mov	r19, r8
    4d14:	47 2d       	mov	r20, r7
    4d16:	56 2d       	mov	r21, r6
    4d18:	65 2d       	mov	r22, r5
    4d1a:	74 2d       	mov	r23, r4
    4d1c:	83 2d       	mov	r24, r3
    4d1e:	92 2d       	mov	r25, r2
    4d20:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    4d24:	92 2e       	mov	r9, r18
    4d26:	83 2e       	mov	r8, r19
    4d28:	74 2e       	mov	r7, r20
    4d2a:	65 2e       	mov	r6, r21
    4d2c:	56 2e       	mov	r5, r22
    4d2e:	47 2e       	mov	r4, r23
    4d30:	38 2e       	mov	r3, r24
    4d32:	29 2e       	mov	r2, r25
	if(number < 0)
	{
		number *= (-1) ;
		LCD_enuSendData('-') ;
	}
	while(number && i < 3 )
    4d34:	82 2f       	mov	r24, r18
    4d36:	88 29       	or	r24, r8
    4d38:	87 29       	or	r24, r7
    4d3a:	86 29       	or	r24, r6
    4d3c:	85 29       	or	r24, r5
    4d3e:	84 29       	or	r24, r4
    4d40:	83 29       	or	r24, r3
    4d42:	82 29       	or	r24, r2
    4d44:	a9 f0       	breq	.+42     	; 0x4d70 <LCD_WriteNumberIn3Digits+0x2a4>
	{
		digits[i] =  number % 10 ;
    4d46:	29 2d       	mov	r18, r9
    4d48:	38 2d       	mov	r19, r8
    4d4a:	47 2d       	mov	r20, r7
    4d4c:	56 2d       	mov	r21, r6
    4d4e:	65 2d       	mov	r22, r5
    4d50:	74 2d       	mov	r23, r4
    4d52:	83 2d       	mov	r24, r3
    4d54:	92 2d       	mov	r25, r2
    4d56:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    4d5a:	2b 83       	std	Y+3, r18	; 0x03
		number /= 10 ;
    4d5c:	29 2d       	mov	r18, r9
    4d5e:	38 2d       	mov	r19, r8
    4d60:	47 2d       	mov	r20, r7
    4d62:	56 2d       	mov	r21, r6
    4d64:	65 2d       	mov	r22, r5
    4d66:	74 2d       	mov	r23, r4
    4d68:	83 2d       	mov	r24, r3
    4d6a:	92 2d       	mov	r25, r2
    4d6c:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
		i++ ;
	}
	for(i = 2 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    4d70:	fb 80       	ldd	r15, Y+3	; 0x03
    4d72:	b0 e3       	ldi	r27, 0x30	; 48
    4d74:	fb 0e       	add	r15, r27
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	60 e0       	ldi	r22, 0x00	; 0
    4d7a:	41 e0       	ldi	r20, 0x01	; 1
    4d7c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	40 e0       	ldi	r20, 0x00	; 0
    4d86:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4d8a:	6f 2d       	mov	r22, r15
    4d8c:	62 95       	swap	r22
    4d8e:	6f 70       	andi	r22, 0x0F	; 15
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	62 e0       	ldi	r22, 0x02	; 2
    4d9a:	41 e0       	ldi	r20, 0x01	; 1
    4d9c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4da0:	00 ed       	ldi	r16, 0xD0	; 208
    4da2:	17 e0       	ldi	r17, 0x07	; 7
    4da4:	c8 01       	movw	r24, r16
    4da6:	01 97       	sbiw	r24, 0x01	; 1
    4da8:	f1 f7       	brne	.-4      	; 0x4da6 <LCD_WriteNumberIn3Digits+0x2da>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4daa:	81 e0       	ldi	r24, 0x01	; 1
    4dac:	62 e0       	ldi	r22, 0x02	; 2
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4db4:	c8 01       	movw	r24, r16
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	f1 f7       	brne	.-4      	; 0x4db6 <LCD_WriteNumberIn3Digits+0x2ea>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4dba:	81 e0       	ldi	r24, 0x01	; 1
    4dbc:	6f 2d       	mov	r22, r15
    4dbe:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	62 e0       	ldi	r22, 0x02	; 2
    4dc6:	41 e0       	ldi	r20, 0x01	; 1
    4dc8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4dcc:	c8 01       	movw	r24, r16
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	f1 f7       	brne	.-4      	; 0x4dce <LCD_WriteNumberIn3Digits+0x302>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	62 e0       	ldi	r22, 0x02	; 2
    4dd6:	40 e0       	ldi	r20, 0x00	; 0
    4dd8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4ddc:	c8 01       	movw	r24, r16
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	f1 f7       	brne	.-4      	; 0x4dde <LCD_WriteNumberIn3Digits+0x312>
    4de2:	c8 01       	movw	r24, r16
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	f1 f7       	brne	.-4      	; 0x4de4 <LCD_WriteNumberIn3Digits+0x318>
		number /= 10 ;
		i++ ;
	}
	for(i = 2 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    4de8:	fa 80       	ldd	r15, Y+2	; 0x02
    4dea:	80 e3       	ldi	r24, 0x30	; 48
    4dec:	f8 0e       	add	r15, r24
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	60 e0       	ldi	r22, 0x00	; 0
    4df2:	41 e0       	ldi	r20, 0x01	; 1
    4df4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4df8:	81 e0       	ldi	r24, 0x01	; 1
    4dfa:	61 e0       	ldi	r22, 0x01	; 1
    4dfc:	40 e0       	ldi	r20, 0x00	; 0
    4dfe:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4e02:	6f 2d       	mov	r22, r15
    4e04:	62 95       	swap	r22
    4e06:	6f 70       	andi	r22, 0x0F	; 15
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	62 e0       	ldi	r22, 0x02	; 2
    4e12:	41 e0       	ldi	r20, 0x01	; 1
    4e14:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4e18:	c8 01       	movw	r24, r16
    4e1a:	01 97       	sbiw	r24, 0x01	; 1
    4e1c:	f1 f7       	brne	.-4      	; 0x4e1a <LCD_WriteNumberIn3Digits+0x34e>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4e1e:	81 e0       	ldi	r24, 0x01	; 1
    4e20:	62 e0       	ldi	r22, 0x02	; 2
    4e22:	40 e0       	ldi	r20, 0x00	; 0
    4e24:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4e28:	c8 01       	movw	r24, r16
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	f1 f7       	brne	.-4      	; 0x4e2a <LCD_WriteNumberIn3Digits+0x35e>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	6f 2d       	mov	r22, r15
    4e32:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	62 e0       	ldi	r22, 0x02	; 2
    4e3a:	41 e0       	ldi	r20, 0x01	; 1
    4e3c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4e40:	c8 01       	movw	r24, r16
    4e42:	01 97       	sbiw	r24, 0x01	; 1
    4e44:	f1 f7       	brne	.-4      	; 0x4e42 <LCD_WriteNumberIn3Digits+0x376>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	62 e0       	ldi	r22, 0x02	; 2
    4e4a:	40 e0       	ldi	r20, 0x00	; 0
    4e4c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4e50:	c8 01       	movw	r24, r16
    4e52:	01 97       	sbiw	r24, 0x01	; 1
    4e54:	f1 f7       	brne	.-4      	; 0x4e52 <LCD_WriteNumberIn3Digits+0x386>
    4e56:	c8 01       	movw	r24, r16
    4e58:	01 97       	sbiw	r24, 0x01	; 1
    4e5a:	f1 f7       	brne	.-4      	; 0x4e58 <LCD_WriteNumberIn3Digits+0x38c>
		number /= 10 ;
		i++ ;
	}
	for(i = 2 ; i >= 0 ; i--)
	{
		LCD_enuSendData(digits[i] + '0') ;
    4e5c:	f9 80       	ldd	r15, Y+1	; 0x01
    4e5e:	a0 e3       	ldi	r26, 0x30	; 48
    4e60:	fa 0e       	add	r15, r26
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    4e62:	81 e0       	ldi	r24, 0x01	; 1
    4e64:	60 e0       	ldi	r22, 0x00	; 0
    4e66:	41 e0       	ldi	r20, 0x01	; 1
    4e68:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4e6c:	81 e0       	ldi	r24, 0x01	; 1
    4e6e:	61 e0       	ldi	r22, 0x01	; 1
    4e70:	40 e0       	ldi	r20, 0x00	; 0
    4e72:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    4e76:	6f 2d       	mov	r22, r15
    4e78:	62 95       	swap	r22
    4e7a:	6f 70       	andi	r22, 0x0F	; 15
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	62 e0       	ldi	r22, 0x02	; 2
    4e86:	41 e0       	ldi	r20, 0x01	; 1
    4e88:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4e8c:	c8 01       	movw	r24, r16
    4e8e:	01 97       	sbiw	r24, 0x01	; 1
    4e90:	f1 f7       	brne	.-4      	; 0x4e8e <LCD_WriteNumberIn3Digits+0x3c2>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	62 e0       	ldi	r22, 0x02	; 2
    4e96:	40 e0       	ldi	r20, 0x00	; 0
    4e98:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4e9c:	c8 01       	movw	r24, r16
    4e9e:	01 97       	sbiw	r24, 0x01	; 1
    4ea0:	f1 f7       	brne	.-4      	; 0x4e9e <LCD_WriteNumberIn3Digits+0x3d2>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	6f 2d       	mov	r22, r15
    4ea6:	c6 ce       	rjmp	.-628    	; 0x4c34 <LCD_WriteNumberIn3Digits+0x168>
		}
		return ;
	}
	if(number < 0)
	{
		number *= (-1) ;
    4ea8:	21 95       	neg	r18
    4eaa:	41 e0       	ldi	r20, 0x01	; 1
    4eac:	12 16       	cp	r1, r18
    4eae:	08 f0       	brcs	.+2      	; 0x4eb2 <LCD_WriteNumberIn3Digits+0x3e6>
    4eb0:	6c c0       	rjmp	.+216    	; 0x4f8a <LCD_WriteNumberIn3Digits+0x4be>
    4eb2:	38 2d       	mov	r19, r8
    4eb4:	31 95       	neg	r19
    4eb6:	91 e0       	ldi	r25, 0x01	; 1
    4eb8:	13 16       	cp	r1, r19
    4eba:	08 f0       	brcs	.+2      	; 0x4ebe <LCD_WriteNumberIn3Digits+0x3f2>
    4ebc:	64 c0       	rjmp	.+200    	; 0x4f86 <LCD_WriteNumberIn3Digits+0x4ba>
    4ebe:	f3 2e       	mov	r15, r19
    4ec0:	f4 1a       	sub	r15, r20
    4ec2:	41 e0       	ldi	r20, 0x01	; 1
    4ec4:	3f 15       	cp	r19, r15
    4ec6:	08 f0       	brcs	.+2      	; 0x4eca <LCD_WriteNumberIn3Digits+0x3fe>
    4ec8:	5c c0       	rjmp	.+184    	; 0x4f82 <LCD_WriteNumberIn3Digits+0x4b6>
    4eca:	94 2b       	or	r25, r20
    4ecc:	47 2d       	mov	r20, r7
    4ece:	41 95       	neg	r20
    4ed0:	61 e0       	ldi	r22, 0x01	; 1
    4ed2:	14 16       	cp	r1, r20
    4ed4:	08 f0       	brcs	.+2      	; 0x4ed8 <LCD_WriteNumberIn3Digits+0x40c>
    4ed6:	53 c0       	rjmp	.+166    	; 0x4f7e <LCD_WriteNumberIn3Digits+0x4b2>
    4ed8:	04 2f       	mov	r16, r20
    4eda:	09 1b       	sub	r16, r25
    4edc:	91 e0       	ldi	r25, 0x01	; 1
    4ede:	40 17       	cp	r20, r16
    4ee0:	08 f0       	brcs	.+2      	; 0x4ee4 <LCD_WriteNumberIn3Digits+0x418>
    4ee2:	4b c0       	rjmp	.+150    	; 0x4f7a <LCD_WriteNumberIn3Digits+0x4ae>
    4ee4:	69 2b       	or	r22, r25
    4ee6:	55 2d       	mov	r21, r5
    4ee8:	51 95       	neg	r21
    4eea:	91 e0       	ldi	r25, 0x01	; 1
    4eec:	15 16       	cp	r1, r21
    4eee:	08 f0       	brcs	.+2      	; 0x4ef2 <LCD_WriteNumberIn3Digits+0x426>
    4ef0:	42 c0       	rjmp	.+132    	; 0x4f76 <LCD_WriteNumberIn3Digits+0x4aa>
    4ef2:	15 2f       	mov	r17, r21
    4ef4:	16 1b       	sub	r17, r22
    4ef6:	61 e0       	ldi	r22, 0x01	; 1
    4ef8:	51 17       	cp	r21, r17
    4efa:	d8 f5       	brcc	.+118    	; 0x4f72 <LCD_WriteNumberIn3Digits+0x4a6>
    4efc:	96 2b       	or	r25, r22
    4efe:	64 2d       	mov	r22, r4
    4f00:	61 95       	neg	r22
    4f02:	e1 e0       	ldi	r30, 0x01	; 1
    4f04:	16 16       	cp	r1, r22
    4f06:	98 f5       	brcc	.+102    	; 0x4f6e <LCD_WriteNumberIn3Digits+0x4a2>
    4f08:	b6 2f       	mov	r27, r22
    4f0a:	b9 1b       	sub	r27, r25
    4f0c:	91 e0       	ldi	r25, 0x01	; 1
    4f0e:	6b 17       	cp	r22, r27
    4f10:	60 f5       	brcc	.+88     	; 0x4f6a <LCD_WriteNumberIn3Digits+0x49e>
    4f12:	e9 2b       	or	r30, r25
    4f14:	73 2d       	mov	r23, r3
    4f16:	71 95       	neg	r23
    4f18:	91 e0       	ldi	r25, 0x01	; 1
    4f1a:	17 16       	cp	r1, r23
    4f1c:	20 f5       	brcc	.+72     	; 0x4f66 <LCD_WriteNumberIn3Digits+0x49a>
    4f1e:	a7 2f       	mov	r26, r23
    4f20:	ae 1b       	sub	r26, r30
    4f22:	e1 e0       	ldi	r30, 0x01	; 1
    4f24:	7a 17       	cp	r23, r26
    4f26:	e8 f4       	brcc	.+58     	; 0x4f62 <LCD_WriteNumberIn3Digits+0x496>
    4f28:	9e 2b       	or	r25, r30
    4f2a:	82 2d       	mov	r24, r2
    4f2c:	81 95       	neg	r24
    4f2e:	e1 e0       	ldi	r30, 0x01	; 1
    4f30:	18 16       	cp	r1, r24
    4f32:	a8 f4       	brcc	.+42     	; 0x4f5e <LCD_WriteNumberIn3Digits+0x492>
    4f34:	f8 2f       	mov	r31, r24
    4f36:	f9 1b       	sub	r31, r25
    4f38:	91 e0       	ldi	r25, 0x01	; 1
    4f3a:	8f 17       	cp	r24, r31
    4f3c:	70 f4       	brcc	.+28     	; 0x4f5a <LCD_WriteNumberIn3Digits+0x48e>
    4f3e:	e9 2b       	or	r30, r25
    4f40:	61 94       	neg	r6
    4f42:	92 2e       	mov	r9, r18
    4f44:	8f 2c       	mov	r8, r15
    4f46:	70 2e       	mov	r7, r16
    4f48:	51 2e       	mov	r5, r17
    4f4a:	4b 2e       	mov	r4, r27
    4f4c:	3a 2e       	mov	r3, r26
    4f4e:	2f 2e       	mov	r2, r31
    4f50:	6e 1a       	sub	r6, r30
		LCD_enuSendData('-') ;
    4f52:	8d e2       	ldi	r24, 0x2D	; 45
    4f54:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <LCD_enuSendData>
    4f58:	9a ce       	rjmp	.-716    	; 0x4c8e <LCD_WriteNumberIn3Digits+0x1c2>
		}
		return ;
	}
	if(number < 0)
	{
		number *= (-1) ;
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	f0 cf       	rjmp	.-32     	; 0x4f3e <LCD_WriteNumberIn3Digits+0x472>
    4f5e:	e0 e0       	ldi	r30, 0x00	; 0
    4f60:	e9 cf       	rjmp	.-46     	; 0x4f34 <LCD_WriteNumberIn3Digits+0x468>
    4f62:	e0 e0       	ldi	r30, 0x00	; 0
    4f64:	e1 cf       	rjmp	.-62     	; 0x4f28 <LCD_WriteNumberIn3Digits+0x45c>
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	da cf       	rjmp	.-76     	; 0x4f1e <LCD_WriteNumberIn3Digits+0x452>
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	d2 cf       	rjmp	.-92     	; 0x4f12 <LCD_WriteNumberIn3Digits+0x446>
    4f6e:	e0 e0       	ldi	r30, 0x00	; 0
    4f70:	cb cf       	rjmp	.-106    	; 0x4f08 <LCD_WriteNumberIn3Digits+0x43c>
    4f72:	60 e0       	ldi	r22, 0x00	; 0
    4f74:	c3 cf       	rjmp	.-122    	; 0x4efc <LCD_WriteNumberIn3Digits+0x430>
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	bc cf       	rjmp	.-136    	; 0x4ef2 <LCD_WriteNumberIn3Digits+0x426>
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	b3 cf       	rjmp	.-154    	; 0x4ee4 <LCD_WriteNumberIn3Digits+0x418>
    4f7e:	60 e0       	ldi	r22, 0x00	; 0
    4f80:	ab cf       	rjmp	.-170    	; 0x4ed8 <LCD_WriteNumberIn3Digits+0x40c>
    4f82:	40 e0       	ldi	r20, 0x00	; 0
    4f84:	a2 cf       	rjmp	.-188    	; 0x4eca <LCD_WriteNumberIn3Digits+0x3fe>
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	9a cf       	rjmp	.-204    	; 0x4ebe <LCD_WriteNumberIn3Digits+0x3f2>
    4f8a:	40 e0       	ldi	r20, 0x00	; 0
    4f8c:	92 cf       	rjmp	.-220    	; 0x4eb2 <LCD_WriteNumberIn3Digits+0x3e6>

00004f8e <LCD_enuSendExtraChar>:

    return Local_EnuErrorState;
}

ES_t LCD_enuSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    4f8e:	cf 92       	push	r12
    4f90:	df 92       	push	r13
    4f92:	ef 92       	push	r14
    4f94:	ff 92       	push	r15
    4f96:	0f 93       	push	r16
    4f98:	1f 93       	push	r17
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	d8 2e       	mov	r13, r24
    4fa0:	c6 2e       	mov	r12, r22
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	60 e0       	ldi	r22, 0x00	; 0
    4fa6:	40 e0       	ldi	r20, 0x00	; 0
    4fa8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	61 e0       	ldi	r22, 0x01	; 1
    4fb0:	40 e0       	ldi	r20, 0x00	; 0
    4fb2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	64 e0       	ldi	r22, 0x04	; 4
    4fba:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	62 e0       	ldi	r22, 0x02	; 2
    4fc2:	41 e0       	ldi	r20, 0x01	; 1
    4fc4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4fc8:	00 ed       	ldi	r16, 0xD0	; 208
    4fca:	17 e0       	ldi	r17, 0x07	; 7
    4fcc:	c8 01       	movw	r24, r16
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	f1 f7       	brne	.-4      	; 0x4fce <LCD_enuSendExtraChar+0x40>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	62 e0       	ldi	r22, 0x02	; 2
    4fd6:	40 e0       	ldi	r20, 0x00	; 0
    4fd8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4fdc:	c8 01       	movw	r24, r16
    4fde:	01 97       	sbiw	r24, 0x01	; 1
    4fe0:	f1 f7       	brne	.-4      	; 0x4fde <LCD_enuSendExtraChar+0x50>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	60 e4       	ldi	r22, 0x40	; 64
    4fe6:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	62 e0       	ldi	r22, 0x02	; 2
    4fee:	41 e0       	ldi	r20, 0x01	; 1
    4ff0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    4ff4:	c8 01       	movw	r24, r16
    4ff6:	01 97       	sbiw	r24, 0x01	; 1
    4ff8:	f1 f7       	brne	.-4      	; 0x4ff6 <LCD_enuSendExtraChar+0x68>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	62 e0       	ldi	r22, 0x02	; 2
    4ffe:	40 e0       	ldi	r20, 0x00	; 0
    5000:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5004:	c8 01       	movw	r24, r16
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	f1 f7       	brne	.-4      	; 0x5006 <LCD_enuSendExtraChar+0x78>
    /* 2- Draw Character in CGRAM        */
    /* Hint : it will be copied to DDRAM automatically */
    for (LOC_u8Iterator = 0; LOC_u8Iterator < sizeof(LCD_u8ExtraChar) / sizeof(LCD_u8ExtraChar[0]); LOC_u8Iterator++)
    {

        LCD_enuSendData(LCD_u8ExtraChar[LOC_u8Iterator]);
    500a:	c8 01       	movw	r24, r16
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	f1 f7       	brne	.-4      	; 0x500c <LCD_enuSendExtraChar+0x7e>
    5010:	cb ec       	ldi	r28, 0xCB	; 203
    5012:	d1 e0       	ldi	r29, 0x01	; 1
    5014:	00 ed       	ldi	r16, 0xD0	; 208
    5016:	e0 2e       	mov	r14, r16
    5018:	07 e0       	ldi	r16, 0x07	; 7
    501a:	f0 2e       	mov	r15, r16
    501c:	19 91       	ld	r17, Y+
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	60 e0       	ldi	r22, 0x00	; 0
    5022:	41 e0       	ldi	r20, 0x01	; 1
    5024:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	61 e0       	ldi	r22, 0x01	; 1
    502c:	40 e0       	ldi	r20, 0x00	; 0
    502e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5032:	61 2f       	mov	r22, r17
    5034:	62 95       	swap	r22
    5036:	6f 70       	andi	r22, 0x0F	; 15
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	62 e0       	ldi	r22, 0x02	; 2
    5042:	41 e0       	ldi	r20, 0x01	; 1
    5044:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5048:	c7 01       	movw	r24, r14
    504a:	01 97       	sbiw	r24, 0x01	; 1
    504c:	f1 f7       	brne	.-4      	; 0x504a <LCD_enuSendExtraChar+0xbc>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	62 e0       	ldi	r22, 0x02	; 2
    5052:	40 e0       	ldi	r20, 0x00	; 0
    5054:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5058:	c7 01       	movw	r24, r14
    505a:	01 97       	sbiw	r24, 0x01	; 1
    505c:	f1 f7       	brne	.-4      	; 0x505a <LCD_enuSendExtraChar+0xcc>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	61 2f       	mov	r22, r17
    5062:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	62 e0       	ldi	r22, 0x02	; 2
    506a:	41 e0       	ldi	r20, 0x01	; 1
    506c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5070:	c7 01       	movw	r24, r14
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	f1 f7       	brne	.-4      	; 0x5072 <LCD_enuSendExtraChar+0xe4>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	62 e0       	ldi	r22, 0x02	; 2
    507a:	40 e0       	ldi	r20, 0x00	; 0
    507c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5080:	c7 01       	movw	r24, r14
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	f1 f7       	brne	.-4      	; 0x5082 <LCD_enuSendExtraChar+0xf4>
    /* 1- Go To CGRAM            */
    LCD_enuSendCommand(lcd_CGRAM); // Make AC refers to the first Place/Address at CGRAM

    /* 2- Draw Character in CGRAM        */
    /* Hint : it will be copied to DDRAM automatically */
    for (LOC_u8Iterator = 0; LOC_u8Iterator < sizeof(LCD_u8ExtraChar) / sizeof(LCD_u8ExtraChar[0]); LOC_u8Iterator++)
    5086:	c7 01       	movw	r24, r14
    5088:	01 97       	sbiw	r24, 0x01	; 1
    508a:	f1 f7       	brne	.-4      	; 0x5088 <LCD_enuSendExtraChar+0xfa>
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	cb 3e       	cpi	r28, 0xEB	; 235
    5090:	d8 07       	cpc	r29, r24
    5092:	09 f0       	breq	.+2      	; 0x5096 <LCD_enuSendExtraChar+0x108>
    5094:	c3 cf       	rjmp	.-122    	; 0x501c <LCD_enuSendExtraChar+0x8e>
    ES_t Local_EnuErrorState = ES_NOT_OK;

    u8 LOC_u8data;

    /* In These cases will set at (0,0) ==> if the user enter invalid location */
    if (Copy_u8Row > 2 || Copy_u8Row < 1 || Copy_u8Col > 16 || Copy_u8Col < 1) // check
    5096:	8d 2d       	mov	r24, r13
    5098:	81 50       	subi	r24, 0x01	; 1
    509a:	82 30       	cpi	r24, 0x02	; 2
    509c:	08 f4       	brcc	.+2      	; 0x50a0 <LCD_enuSendExtraChar+0x112>
    509e:	ef c1       	rjmp	.+990    	; 0x547e <LCD_enuSendExtraChar+0x4f0>
    }

    else if (Copy_u8Row == LCD_ROW_2)
    {

        LOC_u8data = ((lcd_SetCursor) + (64) + (Copy_u8Col - 1)); // Row2 -> 0xc0+col-1
    50a0:	a0 e8       	ldi	r26, 0x80	; 128
    50a2:	fa 2e       	mov	r15, r26
    50a4:	18 e0       	ldi	r17, 0x08	; 8
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	60 e0       	ldi	r22, 0x00	; 0
    50aa:	40 e0       	ldi	r20, 0x00	; 0
    50ac:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	61 e0       	ldi	r22, 0x01	; 1
    50b4:	40 e0       	ldi	r20, 0x00	; 0
    50b6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	61 2f       	mov	r22, r17
    50be:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	62 e0       	ldi	r22, 0x02	; 2
    50c6:	41 e0       	ldi	r20, 0x01	; 1
    50c8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    50cc:	00 ed       	ldi	r16, 0xD0	; 208
    50ce:	17 e0       	ldi	r17, 0x07	; 7
    50d0:	c8 01       	movw	r24, r16
    50d2:	01 97       	sbiw	r24, 0x01	; 1
    50d4:	f1 f7       	brne	.-4      	; 0x50d2 <LCD_enuSendExtraChar+0x144>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	62 e0       	ldi	r22, 0x02	; 2
    50da:	40 e0       	ldi	r20, 0x00	; 0
    50dc:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    50e0:	c8 01       	movw	r24, r16
    50e2:	01 97       	sbiw	r24, 0x01	; 1
    50e4:	f1 f7       	brne	.-4      	; 0x50e2 <LCD_enuSendExtraChar+0x154>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8LOW);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	6f 2d       	mov	r22, r15
    50ea:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    50ee:	81 e0       	ldi	r24, 0x01	; 1
    50f0:	62 e0       	ldi	r22, 0x02	; 2
    50f2:	41 e0       	ldi	r20, 0x01	; 1
    50f4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    50f8:	c8 01       	movw	r24, r16
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	f1 f7       	brne	.-4      	; 0x50fa <LCD_enuSendExtraChar+0x16c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	62 e0       	ldi	r22, 0x02	; 2
    5102:	40 e0       	ldi	r20, 0x00	; 0
    5104:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5108:	c8 01       	movw	r24, r16
    510a:	01 97       	sbiw	r24, 0x01	; 1
    510c:	f1 f7       	brne	.-4      	; 0x510a <LCD_enuSendExtraChar+0x17c>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    510e:	c8 01       	movw	r24, r16
    5110:	01 97       	sbiw	r24, 0x01	; 1
    5112:	f1 f7       	brne	.-4      	; 0x5110 <LCD_enuSendExtraChar+0x182>
    5114:	c8 01       	movw	r24, r16
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	f1 f7       	brne	.-4      	; 0x5116 <LCD_enuSendExtraChar+0x188>
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	60 e0       	ldi	r22, 0x00	; 0
    511e:	41 e0       	ldi	r20, 0x01	; 1
    5120:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	61 e0       	ldi	r22, 0x01	; 1
    5128:	40 e0       	ldi	r20, 0x00	; 0
    512a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5136:	81 e0       	ldi	r24, 0x01	; 1
    5138:	62 e0       	ldi	r22, 0x02	; 2
    513a:	41 e0       	ldi	r20, 0x01	; 1
    513c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5140:	c8 01       	movw	r24, r16
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	f1 f7       	brne	.-4      	; 0x5142 <LCD_enuSendExtraChar+0x1b4>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	62 e0       	ldi	r22, 0x02	; 2
    514a:	40 e0       	ldi	r20, 0x00	; 0
    514c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5150:	c8 01       	movw	r24, r16
    5152:	01 97       	sbiw	r24, 0x01	; 1
    5154:	f1 f7       	brne	.-4      	; 0x5152 <LCD_enuSendExtraChar+0x1c4>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	60 e0       	ldi	r22, 0x00	; 0
    515a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	62 e0       	ldi	r22, 0x02	; 2
    5162:	41 e0       	ldi	r20, 0x01	; 1
    5164:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5168:	c8 01       	movw	r24, r16
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	f1 f7       	brne	.-4      	; 0x516a <LCD_enuSendExtraChar+0x1dc>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	62 e0       	ldi	r22, 0x02	; 2
    5172:	40 e0       	ldi	r20, 0x00	; 0
    5174:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5178:	c8 01       	movw	r24, r16
    517a:	01 97       	sbiw	r24, 0x01	; 1
    517c:	f1 f7       	brne	.-4      	; 0x517a <LCD_enuSendExtraChar+0x1ec>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    517e:	c8 01       	movw	r24, r16
    5180:	01 97       	sbiw	r24, 0x01	; 1
    5182:	f1 f7       	brne	.-4      	; 0x5180 <LCD_enuSendExtraChar+0x1f2>
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	41 e0       	ldi	r20, 0x01	; 1
    518a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	61 e0       	ldi	r22, 0x01	; 1
    5192:	40 e0       	ldi	r20, 0x00	; 0
    5194:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	60 e0       	ldi	r22, 0x00	; 0
    519c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    51a0:	81 e0       	ldi	r24, 0x01	; 1
    51a2:	62 e0       	ldi	r22, 0x02	; 2
    51a4:	41 e0       	ldi	r20, 0x01	; 1
    51a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    51aa:	c8 01       	movw	r24, r16
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	f1 f7       	brne	.-4      	; 0x51ac <LCD_enuSendExtraChar+0x21e>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	62 e0       	ldi	r22, 0x02	; 2
    51b4:	40 e0       	ldi	r20, 0x00	; 0
    51b6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    51ba:	c8 01       	movw	r24, r16
    51bc:	01 97       	sbiw	r24, 0x01	; 1
    51be:	f1 f7       	brne	.-4      	; 0x51bc <LCD_enuSendExtraChar+0x22e>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	61 e0       	ldi	r22, 0x01	; 1
    51c4:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	62 e0       	ldi	r22, 0x02	; 2
    51cc:	41 e0       	ldi	r20, 0x01	; 1
    51ce:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    51d2:	c8 01       	movw	r24, r16
    51d4:	01 97       	sbiw	r24, 0x01	; 1
    51d6:	f1 f7       	brne	.-4      	; 0x51d4 <LCD_enuSendExtraChar+0x246>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	62 e0       	ldi	r22, 0x02	; 2
    51dc:	40 e0       	ldi	r20, 0x00	; 0
    51de:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    51e2:	c8 01       	movw	r24, r16
    51e4:	01 97       	sbiw	r24, 0x01	; 1
    51e6:	f1 f7       	brne	.-4      	; 0x51e4 <LCD_enuSendExtraChar+0x256>
    51e8:	c8 01       	movw	r24, r16
    51ea:	01 97       	sbiw	r24, 0x01	; 1
    51ec:	f1 f7       	brne	.-4      	; 0x51ea <LCD_enuSendExtraChar+0x25c>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    51ee:	81 e0       	ldi	r24, 0x01	; 1
    51f0:	60 e0       	ldi	r22, 0x00	; 0
    51f2:	41 e0       	ldi	r20, 0x01	; 1
    51f4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	61 e0       	ldi	r22, 0x01	; 1
    51fc:	40 e0       	ldi	r20, 0x00	; 0
    51fe:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5202:	81 e0       	ldi	r24, 0x01	; 1
    5204:	60 e0       	ldi	r22, 0x00	; 0
    5206:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	62 e0       	ldi	r22, 0x02	; 2
    520e:	41 e0       	ldi	r20, 0x01	; 1
    5210:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5214:	c8 01       	movw	r24, r16
    5216:	01 97       	sbiw	r24, 0x01	; 1
    5218:	f1 f7       	brne	.-4      	; 0x5216 <LCD_enuSendExtraChar+0x288>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    521a:	81 e0       	ldi	r24, 0x01	; 1
    521c:	62 e0       	ldi	r22, 0x02	; 2
    521e:	40 e0       	ldi	r20, 0x00	; 0
    5220:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5224:	c8 01       	movw	r24, r16
    5226:	01 97       	sbiw	r24, 0x01	; 1
    5228:	f1 f7       	brne	.-4      	; 0x5226 <LCD_enuSendExtraChar+0x298>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	62 e0       	ldi	r22, 0x02	; 2
    522e:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	62 e0       	ldi	r22, 0x02	; 2
    5236:	41 e0       	ldi	r20, 0x01	; 1
    5238:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    523c:	c8 01       	movw	r24, r16
    523e:	01 97       	sbiw	r24, 0x01	; 1
    5240:	f1 f7       	brne	.-4      	; 0x523e <LCD_enuSendExtraChar+0x2b0>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	62 e0       	ldi	r22, 0x02	; 2
    5246:	40 e0       	ldi	r20, 0x00	; 0
    5248:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    524c:	c8 01       	movw	r24, r16
    524e:	01 97       	sbiw	r24, 0x01	; 1
    5250:	f1 f7       	brne	.-4      	; 0x524e <LCD_enuSendExtraChar+0x2c0>
    5252:	c8 01       	movw	r24, r16
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	f1 f7       	brne	.-4      	; 0x5254 <LCD_enuSendExtraChar+0x2c6>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    5258:	81 e0       	ldi	r24, 0x01	; 1
    525a:	60 e0       	ldi	r22, 0x00	; 0
    525c:	41 e0       	ldi	r20, 0x01	; 1
    525e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    5262:	81 e0       	ldi	r24, 0x01	; 1
    5264:	61 e0       	ldi	r22, 0x01	; 1
    5266:	40 e0       	ldi	r20, 0x00	; 0
    5268:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	62 e0       	ldi	r22, 0x02	; 2
    5278:	41 e0       	ldi	r20, 0x01	; 1
    527a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    527e:	c8 01       	movw	r24, r16
    5280:	01 97       	sbiw	r24, 0x01	; 1
    5282:	f1 f7       	brne	.-4      	; 0x5280 <LCD_enuSendExtraChar+0x2f2>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	62 e0       	ldi	r22, 0x02	; 2
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    528e:	c8 01       	movw	r24, r16
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	f1 f7       	brne	.-4      	; 0x5290 <LCD_enuSendExtraChar+0x302>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	63 e0       	ldi	r22, 0x03	; 3
    5298:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	62 e0       	ldi	r22, 0x02	; 2
    52a0:	41 e0       	ldi	r20, 0x01	; 1
    52a2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    52a6:	c8 01       	movw	r24, r16
    52a8:	01 97       	sbiw	r24, 0x01	; 1
    52aa:	f1 f7       	brne	.-4      	; 0x52a8 <LCD_enuSendExtraChar+0x31a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	62 e0       	ldi	r22, 0x02	; 2
    52b0:	40 e0       	ldi	r20, 0x00	; 0
    52b2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    52b6:	c8 01       	movw	r24, r16
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	f1 f7       	brne	.-4      	; 0x52b8 <LCD_enuSendExtraChar+0x32a>
    52bc:	c8 01       	movw	r24, r16
    52be:	01 97       	sbiw	r24, 0x01	; 1
    52c0:	f1 f7       	brne	.-4      	; 0x52be <LCD_enuSendExtraChar+0x330>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	60 e0       	ldi	r22, 0x00	; 0
    52c6:	41 e0       	ldi	r20, 0x01	; 1
    52c8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	61 e0       	ldi	r22, 0x01	; 1
    52d0:	40 e0       	ldi	r20, 0x00	; 0
    52d2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	62 e0       	ldi	r22, 0x02	; 2
    52e2:	41 e0       	ldi	r20, 0x01	; 1
    52e4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    52e8:	c8 01       	movw	r24, r16
    52ea:	01 97       	sbiw	r24, 0x01	; 1
    52ec:	f1 f7       	brne	.-4      	; 0x52ea <LCD_enuSendExtraChar+0x35c>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	62 e0       	ldi	r22, 0x02	; 2
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    52f8:	c8 01       	movw	r24, r16
    52fa:	01 97       	sbiw	r24, 0x01	; 1
    52fc:	f1 f7       	brne	.-4      	; 0x52fa <LCD_enuSendExtraChar+0x36c>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	64 e0       	ldi	r22, 0x04	; 4
    5302:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	62 e0       	ldi	r22, 0x02	; 2
    530a:	41 e0       	ldi	r20, 0x01	; 1
    530c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5310:	c8 01       	movw	r24, r16
    5312:	01 97       	sbiw	r24, 0x01	; 1
    5314:	f1 f7       	brne	.-4      	; 0x5312 <LCD_enuSendExtraChar+0x384>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5316:	81 e0       	ldi	r24, 0x01	; 1
    5318:	62 e0       	ldi	r22, 0x02	; 2
    531a:	40 e0       	ldi	r20, 0x00	; 0
    531c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5320:	c8 01       	movw	r24, r16
    5322:	01 97       	sbiw	r24, 0x01	; 1
    5324:	f1 f7       	brne	.-4      	; 0x5322 <LCD_enuSendExtraChar+0x394>
    5326:	c8 01       	movw	r24, r16
    5328:	01 97       	sbiw	r24, 0x01	; 1
    532a:	f1 f7       	brne	.-4      	; 0x5328 <LCD_enuSendExtraChar+0x39a>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	60 e0       	ldi	r22, 0x00	; 0
    5330:	41 e0       	ldi	r20, 0x01	; 1
    5332:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	61 e0       	ldi	r22, 0x01	; 1
    533a:	40 e0       	ldi	r20, 0x00	; 0
    533c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	60 e0       	ldi	r22, 0x00	; 0
    5344:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	62 e0       	ldi	r22, 0x02	; 2
    534c:	41 e0       	ldi	r20, 0x01	; 1
    534e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5352:	c8 01       	movw	r24, r16
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	f1 f7       	brne	.-4      	; 0x5354 <LCD_enuSendExtraChar+0x3c6>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	62 e0       	ldi	r22, 0x02	; 2
    535c:	40 e0       	ldi	r20, 0x00	; 0
    535e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5362:	c8 01       	movw	r24, r16
    5364:	01 97       	sbiw	r24, 0x01	; 1
    5366:	f1 f7       	brne	.-4      	; 0x5364 <LCD_enuSendExtraChar+0x3d6>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	65 e0       	ldi	r22, 0x05	; 5
    536c:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5370:	81 e0       	ldi	r24, 0x01	; 1
    5372:	62 e0       	ldi	r22, 0x02	; 2
    5374:	41 e0       	ldi	r20, 0x01	; 1
    5376:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    537a:	c8 01       	movw	r24, r16
    537c:	01 97       	sbiw	r24, 0x01	; 1
    537e:	f1 f7       	brne	.-4      	; 0x537c <LCD_enuSendExtraChar+0x3ee>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	62 e0       	ldi	r22, 0x02	; 2
    5384:	40 e0       	ldi	r20, 0x00	; 0
    5386:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    538a:	c8 01       	movw	r24, r16
    538c:	01 97       	sbiw	r24, 0x01	; 1
    538e:	f1 f7       	brne	.-4      	; 0x538c <LCD_enuSendExtraChar+0x3fe>
    5390:	c8 01       	movw	r24, r16
    5392:	01 97       	sbiw	r24, 0x01	; 1
    5394:	f1 f7       	brne	.-4      	; 0x5392 <LCD_enuSendExtraChar+0x404>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	41 e0       	ldi	r20, 0x01	; 1
    539c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	61 e0       	ldi	r22, 0x01	; 1
    53a4:	40 e0       	ldi	r20, 0x00	; 0
    53a6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	60 e0       	ldi	r22, 0x00	; 0
    53ae:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    53b2:	81 e0       	ldi	r24, 0x01	; 1
    53b4:	62 e0       	ldi	r22, 0x02	; 2
    53b6:	41 e0       	ldi	r20, 0x01	; 1
    53b8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    53bc:	c8 01       	movw	r24, r16
    53be:	01 97       	sbiw	r24, 0x01	; 1
    53c0:	f1 f7       	brne	.-4      	; 0x53be <LCD_enuSendExtraChar+0x430>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	62 e0       	ldi	r22, 0x02	; 2
    53c6:	40 e0       	ldi	r20, 0x00	; 0
    53c8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    53cc:	c8 01       	movw	r24, r16
    53ce:	01 97       	sbiw	r24, 0x01	; 1
    53d0:	f1 f7       	brne	.-4      	; 0x53ce <LCD_enuSendExtraChar+0x440>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	66 e0       	ldi	r22, 0x06	; 6
    53d6:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	62 e0       	ldi	r22, 0x02	; 2
    53de:	41 e0       	ldi	r20, 0x01	; 1
    53e0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    53e4:	c8 01       	movw	r24, r16
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	f1 f7       	brne	.-4      	; 0x53e6 <LCD_enuSendExtraChar+0x458>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	62 e0       	ldi	r22, 0x02	; 2
    53ee:	40 e0       	ldi	r20, 0x00	; 0
    53f0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    53f4:	c8 01       	movw	r24, r16
    53f6:	01 97       	sbiw	r24, 0x01	; 1
    53f8:	f1 f7       	brne	.-4      	; 0x53f6 <LCD_enuSendExtraChar+0x468>
    53fa:	c8 01       	movw	r24, r16
    53fc:	01 97       	sbiw	r24, 0x01	; 1
    53fe:	f1 f7       	brne	.-4      	; 0x53fc <LCD_enuSendExtraChar+0x46e>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	60 e0       	ldi	r22, 0x00	; 0
    5404:	41 e0       	ldi	r20, 0x01	; 1
    5406:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	61 e0       	ldi	r22, 0x01	; 1
    540e:	40 e0       	ldi	r20, 0x00	; 0
    5410:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	60 e0       	ldi	r22, 0x00	; 0
    5418:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	62 e0       	ldi	r22, 0x02	; 2
    5420:	41 e0       	ldi	r20, 0x01	; 1
    5422:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5426:	c8 01       	movw	r24, r16
    5428:	01 97       	sbiw	r24, 0x01	; 1
    542a:	f1 f7       	brne	.-4      	; 0x5428 <LCD_enuSendExtraChar+0x49a>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	62 e0       	ldi	r22, 0x02	; 2
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5436:	c8 01       	movw	r24, r16
    5438:	01 97       	sbiw	r24, 0x01	; 1
    543a:	f1 f7       	brne	.-4      	; 0x5438 <LCD_enuSendExtraChar+0x4aa>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	67 e0       	ldi	r22, 0x07	; 7
    5440:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	62 e0       	ldi	r22, 0x02	; 2
    5448:	41 e0       	ldi	r20, 0x01	; 1
    544a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    544e:	c8 01       	movw	r24, r16
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	f1 f7       	brne	.-4      	; 0x5450 <LCD_enuSendExtraChar+0x4c2>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5454:	81 e0       	ldi	r24, 0x01	; 1
    5456:	62 e0       	ldi	r22, 0x02	; 2
    5458:	40 e0       	ldi	r20, 0x00	; 0
    545a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    545e:	c8 01       	movw	r24, r16
    5460:	01 97       	sbiw	r24, 0x01	; 1
    5462:	f1 f7       	brne	.-4      	; 0x5460 <LCD_enuSendExtraChar+0x4d2>
    5464:	c8 01       	movw	r24, r16
    5466:	01 97       	sbiw	r24, 0x01	; 1
    5468:	f1 f7       	brne	.-4      	; 0x5466 <LCD_enuSendExtraChar+0x4d8>
        LCD_enuSendData(LOC_u8Iterator);
    }
    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	1f 91       	pop	r17
    5472:	0f 91       	pop	r16
    5474:	ff 90       	pop	r15
    5476:	ef 90       	pop	r14
    5478:	df 90       	pop	r13
    547a:	cf 90       	pop	r12
    547c:	08 95       	ret
    ES_t Local_EnuErrorState = ES_NOT_OK;

    u8 LOC_u8data;

    /* In These cases will set at (0,0) ==> if the user enter invalid location */
    if (Copy_u8Row > 2 || Copy_u8Row < 1 || Copy_u8Col > 16 || Copy_u8Col < 1) // check
    547e:	80 e1       	ldi	r24, 0x10	; 16
    5480:	8c 15       	cp	r24, r12
    5482:	08 f4       	brcc	.+2      	; 0x5486 <LCD_enuSendExtraChar+0x4f8>
    5484:	0d ce       	rjmp	.-998    	; 0x50a0 <LCD_enuSendExtraChar+0x112>
    5486:	cc 20       	and	r12, r12
    5488:	09 f4       	brne	.+2      	; 0x548c <LCD_enuSendExtraChar+0x4fe>
    548a:	0a ce       	rjmp	.-1004   	; 0x50a0 <LCD_enuSendExtraChar+0x112>
    {
        LOC_u8data = lcd_SetCursor; // first location
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    else if (Copy_u8Row == LCD_ROW_1)
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	d8 16       	cp	r13, r24
    5490:	59 f0       	breq	.+22     	; 0x54a8 <LCD_enuSendExtraChar+0x51a>
    {

        LOC_u8data = ((lcd_SetCursor) + (Copy_u8Col - 1)); // Row1 -> 0x80+col-1
    }

    else if (Copy_u8Row == LCD_ROW_2)
    5492:	82 e0       	ldi	r24, 0x02	; 2
    5494:	d8 16       	cp	r13, r24
    5496:	19 f0       	breq	.+6      	; 0x549e <LCD_enuSendExtraChar+0x510>
    5498:	ff 24       	eor	r15, r15
    549a:	10 e0       	ldi	r17, 0x00	; 0
    549c:	04 ce       	rjmp	.-1016   	; 0x50a6 <LCD_enuSendExtraChar+0x118>
    {

        LOC_u8data = ((lcd_SetCursor) + (64) + (Copy_u8Col - 1)); // Row2 -> 0xc0+col-1
    549e:	bf eb       	ldi	r27, 0xBF	; 191
    54a0:	fb 2e       	mov	r15, r27
    54a2:	fc 0c       	add	r15, r12
    54a4:	1c e0       	ldi	r17, 0x0C	; 12
    54a6:	ff cd       	rjmp	.-1026   	; 0x50a6 <LCD_enuSendExtraChar+0x118>
    }

    else if (Copy_u8Row == LCD_ROW_1)
    {

        LOC_u8data = ((lcd_SetCursor) + (Copy_u8Col - 1)); // Row1 -> 0x80+col-1
    54a8:	1f e7       	ldi	r17, 0x7F	; 127
    54aa:	f1 2e       	mov	r15, r17
    54ac:	fc 0c       	add	r15, r12
    54ae:	18 e0       	ldi	r17, 0x08	; 8
    54b0:	fa cd       	rjmp	.-1036   	; 0x50a6 <LCD_enuSendExtraChar+0x118>

000054b2 <LCD_enuSendNumber>:

    return Local_EnuErrorState;
}

ES_t LCD_enuSendNumber(s64 Copy_s64Number)
{
    54b2:	2f 92       	push	r2
    54b4:	3f 92       	push	r3
    54b6:	4f 92       	push	r4
    54b8:	5f 92       	push	r5
    54ba:	6f 92       	push	r6
    54bc:	7f 92       	push	r7
    54be:	8f 92       	push	r8
    54c0:	9f 92       	push	r9
    54c2:	af 92       	push	r10
    54c4:	bf 92       	push	r11
    54c6:	cf 92       	push	r12
    54c8:	df 92       	push	r13
    54ca:	ef 92       	push	r14
    54cc:	ff 92       	push	r15
    54ce:	0f 93       	push	r16
    54d0:	1f 93       	push	r17
    54d2:	df 93       	push	r29
    54d4:	cf 93       	push	r28
    54d6:	cd b7       	in	r28, 0x3d	; 61
    54d8:	de b7       	in	r29, 0x3e	; 62
    54da:	2a 97       	sbiw	r28, 0x0a	; 10
    54dc:	0f b6       	in	r0, 0x3f	; 63
    54de:	f8 94       	cli
    54e0:	de bf       	out	0x3e, r29	; 62
    54e2:	0f be       	out	0x3f, r0	; 63
    54e4:	cd bf       	out	0x3d, r28	; 61
    54e6:	2b 83       	std	Y+3, r18	; 0x03
    54e8:	3c 83       	std	Y+4, r19	; 0x04
    54ea:	4d 83       	std	Y+5, r20	; 0x05
    54ec:	5e 83       	std	Y+6, r21	; 0x06
    54ee:	6f 83       	std	Y+7, r22	; 0x07
    54f0:	78 87       	std	Y+8, r23	; 0x08
    54f2:	89 87       	std	Y+9, r24	; 0x09
    54f4:	9a 87       	std	Y+10, r25	; 0x0a
    ES_t Local_EnuErrorState = ES_NOT_OK;
    u64 LOC_s64Reversed = 1;

    if (Copy_s64Number == 0)
    54f6:	82 2f       	mov	r24, r18
    54f8:	83 2b       	or	r24, r19
    54fa:	84 2b       	or	r24, r20
    54fc:	85 2b       	or	r24, r21
    54fe:	86 2b       	or	r24, r22
    5500:	87 2b       	or	r24, r23
    5502:	49 85       	ldd	r20, Y+9	; 0x09
    5504:	84 2b       	or	r24, r20
    5506:	89 2b       	or	r24, r25
    5508:	09 f4       	brne	.+2      	; 0x550c <LCD_enuSendNumber+0x5a>
    550a:	88 c1       	rjmp	.+784    	; 0x581c <LCD_enuSendNumber+0x36a>
        LCD_enuSendData('0');
    }

    else
    {
        if(Copy_s64Number<0){
    550c:	97 fd       	sbrc	r25, 7
    550e:	ec c1       	rjmp	.+984    	; 0x58e8 <LCD_enuSendNumber+0x436>
    5510:	99 24       	eor	r9, r9
    5512:	93 94       	inc	r9
    5514:	88 24       	eor	r8, r8
    5516:	55 24       	eor	r5, r5
    5518:	22 24       	eor	r2, r2
    551a:	33 24       	eor	r3, r3
    551c:	44 24       	eor	r4, r4
    551e:	66 24       	eor	r6, r6
    5520:	77 24       	eor	r7, r7
        }

        while (Copy_s64Number != 0)
        {

            LOC_s64Reversed = (LOC_s64Reversed * 10) + (Copy_s64Number % 10);
    5522:	29 2d       	mov	r18, r9
    5524:	38 2d       	mov	r19, r8
    5526:	45 2d       	mov	r20, r5
    5528:	52 2d       	mov	r21, r2
    552a:	63 2d       	mov	r22, r3
    552c:	74 2d       	mov	r23, r4
    552e:	c3 01       	movw	r24, r6
    5530:	01 e0       	ldi	r16, 0x01	; 1
    5532:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5536:	12 2f       	mov	r17, r18
    5538:	f3 2e       	mov	r15, r19
    553a:	e4 2e       	mov	r14, r20
    553c:	d5 2e       	mov	r13, r21
    553e:	c6 2e       	mov	r12, r22
    5540:	b7 2e       	mov	r11, r23
    5542:	a8 2e       	mov	r10, r24
    5544:	79 2e       	mov	r7, r25
    5546:	02 e0       	ldi	r16, 0x02	; 2
    5548:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    554c:	82 2e       	mov	r8, r18
    554e:	81 0e       	add	r8, r17
    5550:	e1 e0       	ldi	r30, 0x01	; 1
    5552:	81 16       	cp	r8, r17
    5554:	08 f0       	brcs	.+2      	; 0x5558 <LCD_enuSendNumber+0xa6>
    5556:	e0 e0       	ldi	r30, 0x00	; 0
    5558:	3f 0d       	add	r19, r15
    555a:	21 e0       	ldi	r18, 0x01	; 1
    555c:	3f 15       	cp	r19, r15
    555e:	08 f0       	brcs	.+2      	; 0x5562 <LCD_enuSendNumber+0xb0>
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	6e 2e       	mov	r6, r30
    5564:	63 0e       	add	r6, r19
    5566:	e1 e0       	ldi	r30, 0x01	; 1
    5568:	63 16       	cp	r6, r19
    556a:	08 f0       	brcs	.+2      	; 0x556e <LCD_enuSendNumber+0xbc>
    556c:	e0 e0       	ldi	r30, 0x00	; 0
    556e:	2e 2b       	or	r18, r30
    5570:	4e 0d       	add	r20, r14
    5572:	31 e0       	ldi	r19, 0x01	; 1
    5574:	4e 15       	cp	r20, r14
    5576:	08 f0       	brcs	.+2      	; 0x557a <LCD_enuSendNumber+0xc8>
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	52 2e       	mov	r5, r18
    557c:	54 0e       	add	r5, r20
    557e:	21 e0       	ldi	r18, 0x01	; 1
    5580:	54 16       	cp	r5, r20
    5582:	08 f0       	brcs	.+2      	; 0x5586 <LCD_enuSendNumber+0xd4>
    5584:	20 e0       	ldi	r18, 0x00	; 0
    5586:	32 2b       	or	r19, r18
    5588:	5d 0d       	add	r21, r13
    558a:	21 e0       	ldi	r18, 0x01	; 1
    558c:	5d 15       	cp	r21, r13
    558e:	08 f0       	brcs	.+2      	; 0x5592 <LCD_enuSendNumber+0xe0>
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	43 2e       	mov	r4, r19
    5594:	45 0e       	add	r4, r21
    5596:	31 e0       	ldi	r19, 0x01	; 1
    5598:	45 16       	cp	r4, r21
    559a:	08 f0       	brcs	.+2      	; 0x559e <LCD_enuSendNumber+0xec>
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	23 2b       	or	r18, r19
    55a0:	6c 0d       	add	r22, r12
    55a2:	31 e0       	ldi	r19, 0x01	; 1
    55a4:	6c 15       	cp	r22, r12
    55a6:	08 f0       	brcs	.+2      	; 0x55aa <LCD_enuSendNumber+0xf8>
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	32 2e       	mov	r3, r18
    55ac:	36 0e       	add	r3, r22
    55ae:	21 e0       	ldi	r18, 0x01	; 1
    55b0:	36 16       	cp	r3, r22
    55b2:	08 f0       	brcs	.+2      	; 0x55b6 <LCD_enuSendNumber+0x104>
    55b4:	20 e0       	ldi	r18, 0x00	; 0
    55b6:	32 2b       	or	r19, r18
    55b8:	7b 0d       	add	r23, r11
    55ba:	21 e0       	ldi	r18, 0x01	; 1
    55bc:	7b 15       	cp	r23, r11
    55be:	08 f0       	brcs	.+2      	; 0x55c2 <LCD_enuSendNumber+0x110>
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	23 2e       	mov	r2, r19
    55c4:	27 0e       	add	r2, r23
    55c6:	31 e0       	ldi	r19, 0x01	; 1
    55c8:	27 16       	cp	r2, r23
    55ca:	08 f0       	brcs	.+2      	; 0x55ce <LCD_enuSendNumber+0x11c>
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	23 2b       	or	r18, r19
    55d0:	8a 0d       	add	r24, r10
    55d2:	31 e0       	ldi	r19, 0x01	; 1
    55d4:	8a 15       	cp	r24, r10
    55d6:	08 f0       	brcs	.+2      	; 0x55da <LCD_enuSendNumber+0x128>
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	28 0f       	add	r18, r24
    55dc:	29 83       	std	Y+1, r18	; 0x01
    55de:	21 e0       	ldi	r18, 0x01	; 1
    55e0:	a9 81       	ldd	r26, Y+1	; 0x01
    55e2:	a8 17       	cp	r26, r24
    55e4:	08 f0       	brcs	.+2      	; 0x55e8 <LCD_enuSendNumber+0x136>
    55e6:	20 e0       	ldi	r18, 0x00	; 0
    55e8:	93 2e       	mov	r9, r19
    55ea:	92 2a       	or	r9, r18
    55ec:	97 0d       	add	r25, r7
    55ee:	99 0e       	add	r9, r25
    55f0:	2b 81       	ldd	r18, Y+3	; 0x03
    55f2:	3c 81       	ldd	r19, Y+4	; 0x04
    55f4:	4d 81       	ldd	r20, Y+5	; 0x05
    55f6:	5e 81       	ldd	r21, Y+6	; 0x06
    55f8:	6f 81       	ldd	r22, Y+7	; 0x07
    55fa:	78 85       	ldd	r23, Y+8	; 0x08
    55fc:	89 85       	ldd	r24, Y+9	; 0x09
    55fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5600:	aa e0       	ldi	r26, 0x0A	; 10
    5602:	aa 2e       	mov	r10, r26
    5604:	bb 24       	eor	r11, r11
    5606:	cc 24       	eor	r12, r12
    5608:	dd 24       	eor	r13, r13
    560a:	ee 24       	eor	r14, r14
    560c:	ff 24       	eor	r15, r15
    560e:	00 e0       	ldi	r16, 0x00	; 0
    5610:	10 e0       	ldi	r17, 0x00	; 0
    5612:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    5616:	12 2f       	mov	r17, r18
    5618:	18 0d       	add	r17, r8
    561a:	f1 e0       	ldi	r31, 0x01	; 1
    561c:	12 17       	cp	r17, r18
    561e:	08 f0       	brcs	.+2      	; 0x5622 <LCD_enuSendNumber+0x170>
    5620:	f0 e0       	ldi	r31, 0x00	; 0
    5622:	23 2f       	mov	r18, r19
    5624:	26 0d       	add	r18, r6
    5626:	e1 e0       	ldi	r30, 0x01	; 1
    5628:	23 17       	cp	r18, r19
    562a:	08 f0       	brcs	.+2      	; 0x562e <LCD_enuSendNumber+0x17c>
    562c:	e0 e0       	ldi	r30, 0x00	; 0
    562e:	0f 2f       	mov	r16, r31
    5630:	02 0f       	add	r16, r18
    5632:	31 e0       	ldi	r19, 0x01	; 1
    5634:	02 17       	cp	r16, r18
    5636:	08 f0       	brcs	.+2      	; 0x563a <LCD_enuSendNumber+0x188>
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	e3 2b       	or	r30, r19
    563c:	24 2f       	mov	r18, r20
    563e:	25 0d       	add	r18, r5
    5640:	31 e0       	ldi	r19, 0x01	; 1
    5642:	24 17       	cp	r18, r20
    5644:	08 f0       	brcs	.+2      	; 0x5648 <LCD_enuSendNumber+0x196>
    5646:	30 e0       	ldi	r19, 0x00	; 0
    5648:	fe 2f       	mov	r31, r30
    564a:	f2 0f       	add	r31, r18
    564c:	41 e0       	ldi	r20, 0x01	; 1
    564e:	f2 17       	cp	r31, r18
    5650:	08 f0       	brcs	.+2      	; 0x5654 <LCD_enuSendNumber+0x1a2>
    5652:	40 e0       	ldi	r20, 0x00	; 0
    5654:	34 2b       	or	r19, r20
    5656:	25 2f       	mov	r18, r21
    5658:	24 0d       	add	r18, r4
    565a:	41 e0       	ldi	r20, 0x01	; 1
    565c:	25 17       	cp	r18, r21
    565e:	08 f0       	brcs	.+2      	; 0x5662 <LCD_enuSendNumber+0x1b0>
    5660:	40 e0       	ldi	r20, 0x00	; 0
    5662:	e3 2f       	mov	r30, r19
    5664:	e2 0f       	add	r30, r18
    5666:	31 e0       	ldi	r19, 0x01	; 1
    5668:	e2 17       	cp	r30, r18
    566a:	08 f0       	brcs	.+2      	; 0x566e <LCD_enuSendNumber+0x1bc>
    566c:	30 e0       	ldi	r19, 0x00	; 0
    566e:	43 2b       	or	r20, r19
    5670:	26 2f       	mov	r18, r22
    5672:	23 0d       	add	r18, r3
    5674:	31 e0       	ldi	r19, 0x01	; 1
    5676:	26 17       	cp	r18, r22
    5678:	08 f0       	brcs	.+2      	; 0x567c <LCD_enuSendNumber+0x1ca>
    567a:	30 e0       	ldi	r19, 0x00	; 0
    567c:	64 2f       	mov	r22, r20
    567e:	62 0f       	add	r22, r18
    5680:	41 e0       	ldi	r20, 0x01	; 1
    5682:	62 17       	cp	r22, r18
    5684:	08 f0       	brcs	.+2      	; 0x5688 <LCD_enuSendNumber+0x1d6>
    5686:	40 e0       	ldi	r20, 0x00	; 0
    5688:	34 2b       	or	r19, r20
    568a:	27 2f       	mov	r18, r23
    568c:	22 0d       	add	r18, r2
    568e:	41 e0       	ldi	r20, 0x01	; 1
    5690:	27 17       	cp	r18, r23
    5692:	08 f0       	brcs	.+2      	; 0x5696 <LCD_enuSendNumber+0x1e4>
    5694:	40 e0       	ldi	r20, 0x00	; 0
    5696:	53 2f       	mov	r21, r19
    5698:	52 0f       	add	r21, r18
    569a:	31 e0       	ldi	r19, 0x01	; 1
    569c:	52 17       	cp	r21, r18
    569e:	08 f0       	brcs	.+2      	; 0x56a2 <LCD_enuSendNumber+0x1f0>
    56a0:	30 e0       	ldi	r19, 0x00	; 0
    56a2:	43 2b       	or	r20, r19
    56a4:	29 81       	ldd	r18, Y+1	; 0x01
    56a6:	28 0f       	add	r18, r24
    56a8:	31 e0       	ldi	r19, 0x01	; 1
    56aa:	28 17       	cp	r18, r24
    56ac:	08 f0       	brcs	.+2      	; 0x56b0 <LCD_enuSendNumber+0x1fe>
    56ae:	30 e0       	ldi	r19, 0x00	; 0
    56b0:	42 0f       	add	r20, r18
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	42 17       	cp	r20, r18
    56b6:	08 f0       	brcs	.+2      	; 0x56ba <LCD_enuSendNumber+0x208>
    56b8:	80 e0       	ldi	r24, 0x00	; 0
    56ba:	38 2b       	or	r19, r24
    56bc:	99 0e       	add	r9, r25
    56be:	b3 2f       	mov	r27, r19
    56c0:	b9 0d       	add	r27, r9
    56c2:	ba 83       	std	Y+2, r27	; 0x02
    56c4:	48 01       	movw	r8, r16
    56c6:	5f 2e       	mov	r5, r31
    56c8:	2e 2e       	mov	r2, r30
    56ca:	36 2e       	mov	r3, r22
    56cc:	45 2e       	mov	r4, r21
    56ce:	64 2e       	mov	r6, r20
    56d0:	7b 2e       	mov	r7, r27
            Copy_s64Number /= 10;
    56d2:	2b 81       	ldd	r18, Y+3	; 0x03
    56d4:	3c 81       	ldd	r19, Y+4	; 0x04
    56d6:	4d 81       	ldd	r20, Y+5	; 0x05
    56d8:	5e 81       	ldd	r21, Y+6	; 0x06
    56da:	6f 81       	ldd	r22, Y+7	; 0x07
    56dc:	78 85       	ldd	r23, Y+8	; 0x08
    56de:	89 85       	ldd	r24, Y+9	; 0x09
    56e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e2:	fa e0       	ldi	r31, 0x0A	; 10
    56e4:	af 2e       	mov	r10, r31
    56e6:	bb 24       	eor	r11, r11
    56e8:	cc 24       	eor	r12, r12
    56ea:	dd 24       	eor	r13, r13
    56ec:	ee 24       	eor	r14, r14
    56ee:	ff 24       	eor	r15, r15
    56f0:	00 e0       	ldi	r16, 0x00	; 0
    56f2:	10 e0       	ldi	r17, 0x00	; 0
    56f4:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    56f8:	2b 83       	std	Y+3, r18	; 0x03
    56fa:	3c 83       	std	Y+4, r19	; 0x04
    56fc:	4d 83       	std	Y+5, r20	; 0x05
    56fe:	5e 83       	std	Y+6, r21	; 0x06
    5700:	6f 83       	std	Y+7, r22	; 0x07
    5702:	78 87       	std	Y+8, r23	; 0x08
    5704:	89 87       	std	Y+9, r24	; 0x09
    5706:	9a 87       	std	Y+10, r25	; 0x0a
        if(Copy_s64Number<0){
            Copy_s64Number*=-1;
            LCD_enuSendData('-');
        }

        while (Copy_s64Number != 0)
    5708:	82 2f       	mov	r24, r18
    570a:	83 2b       	or	r24, r19
    570c:	84 2b       	or	r24, r20
    570e:	85 2b       	or	r24, r21
    5710:	86 2b       	or	r24, r22
    5712:	87 2b       	or	r24, r23
    5714:	e9 85       	ldd	r30, Y+9	; 0x09
    5716:	8e 2b       	or	r24, r30
    5718:	89 2b       	or	r24, r25
    571a:	09 f0       	breq	.+2      	; 0x571e <LCD_enuSendNumber+0x26c>
    571c:	02 cf       	rjmp	.-508    	; 0x5522 <LCD_enuSendNumber+0x70>
        {

            LOC_s64Reversed = (LOC_s64Reversed * 10) + (Copy_s64Number % 10);
            Copy_s64Number /= 10;
        }
        while (LOC_s64Reversed != 1)
    571e:	f1 e0       	ldi	r31, 0x01	; 1
    5720:	9f 16       	cp	r9, r31
    5722:	09 f4       	brne	.+2      	; 0x5726 <LCD_enuSendNumber+0x274>
    5724:	cc c0       	rjmp	.+408    	; 0x58be <LCD_enuSendNumber+0x40c>
        {

            LCD_enuSendData((LOC_s64Reversed % 10) + 48);
    5726:	29 2d       	mov	r18, r9
    5728:	38 2d       	mov	r19, r8
    572a:	45 2d       	mov	r20, r5
    572c:	52 2d       	mov	r21, r2
    572e:	63 2d       	mov	r22, r3
    5730:	74 2d       	mov	r23, r4
    5732:	c3 01       	movw	r24, r6
    5734:	ea e0       	ldi	r30, 0x0A	; 10
    5736:	ae 2e       	mov	r10, r30
    5738:	bb 24       	eor	r11, r11
    573a:	cc 24       	eor	r12, r12
    573c:	dd 24       	eor	r13, r13
    573e:	ee 24       	eor	r14, r14
    5740:	ff 24       	eor	r15, r15
    5742:	00 e0       	ldi	r16, 0x00	; 0
    5744:	10 e0       	ldi	r17, 0x00	; 0
    5746:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__umoddi3>
    574a:	12 2f       	mov	r17, r18
    574c:	10 5d       	subi	r17, 0xD0	; 208
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	60 e0       	ldi	r22, 0x00	; 0
    5752:	41 e0       	ldi	r20, 0x01	; 1
    5754:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	61 e0       	ldi	r22, 0x01	; 1
    575c:	40 e0       	ldi	r20, 0x00	; 0
    575e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5762:	61 2f       	mov	r22, r17
    5764:	62 95       	swap	r22
    5766:	6f 70       	andi	r22, 0x0F	; 15
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	62 e0       	ldi	r22, 0x02	; 2
    5772:	41 e0       	ldi	r20, 0x01	; 1
    5774:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5778:	80 ed       	ldi	r24, 0xD0	; 208
    577a:	97 e0       	ldi	r25, 0x07	; 7
    577c:	01 97       	sbiw	r24, 0x01	; 1
    577e:	f1 f7       	brne	.-4      	; 0x577c <LCD_enuSendNumber+0x2ca>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5780:	81 e0       	ldi	r24, 0x01	; 1
    5782:	62 e0       	ldi	r22, 0x02	; 2
    5784:	40 e0       	ldi	r20, 0x00	; 0
    5786:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    578a:	80 ed       	ldi	r24, 0xD0	; 208
    578c:	97 e0       	ldi	r25, 0x07	; 7
    578e:	01 97       	sbiw	r24, 0x01	; 1
    5790:	f1 f7       	brne	.-4      	; 0x578e <LCD_enuSendNumber+0x2dc>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	61 2f       	mov	r22, r17
    5796:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    579a:	81 e0       	ldi	r24, 0x01	; 1
    579c:	62 e0       	ldi	r22, 0x02	; 2
    579e:	41 e0       	ldi	r20, 0x01	; 1
    57a0:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    57a4:	80 ed       	ldi	r24, 0xD0	; 208
    57a6:	97 e0       	ldi	r25, 0x07	; 7
    57a8:	01 97       	sbiw	r24, 0x01	; 1
    57aa:	f1 f7       	brne	.-4      	; 0x57a8 <LCD_enuSendNumber+0x2f6>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	62 e0       	ldi	r22, 0x02	; 2
    57b0:	40 e0       	ldi	r20, 0x00	; 0
    57b2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    57b6:	80 ed       	ldi	r24, 0xD0	; 208
    57b8:	97 e0       	ldi	r25, 0x07	; 7
    57ba:	01 97       	sbiw	r24, 0x01	; 1
    57bc:	f1 f7       	brne	.-4      	; 0x57ba <LCD_enuSendNumber+0x308>
        }
        while (LOC_s64Reversed != 1)
        {

            LCD_enuSendData((LOC_s64Reversed % 10) + 48);
            LOC_s64Reversed /= 10;
    57be:	80 ed       	ldi	r24, 0xD0	; 208
    57c0:	97 e0       	ldi	r25, 0x07	; 7
    57c2:	01 97       	sbiw	r24, 0x01	; 1
    57c4:	f1 f7       	brne	.-4      	; 0x57c2 <LCD_enuSendNumber+0x310>
    57c6:	29 2d       	mov	r18, r9
    57c8:	38 2d       	mov	r19, r8
    57ca:	45 2d       	mov	r20, r5
    57cc:	52 2d       	mov	r21, r2
    57ce:	63 2d       	mov	r22, r3
    57d0:	74 2d       	mov	r23, r4
    57d2:	c3 01       	movw	r24, r6
    57d4:	10 e0       	ldi	r17, 0x00	; 0
    57d6:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivdi3>
    57da:	92 2e       	mov	r9, r18
    57dc:	83 2e       	mov	r8, r19
    57de:	54 2e       	mov	r5, r20
    57e0:	25 2e       	mov	r2, r21
    57e2:	36 2e       	mov	r3, r22
    57e4:	47 2e       	mov	r4, r23
    57e6:	3c 01       	movw	r6, r24
        {

            LOC_s64Reversed = (LOC_s64Reversed * 10) + (Copy_s64Number % 10);
            Copy_s64Number /= 10;
        }
        while (LOC_s64Reversed != 1)
    57e8:	41 e0       	ldi	r20, 0x01	; 1
    57ea:	94 16       	cp	r9, r20
    57ec:	09 f0       	breq	.+2      	; 0x57f0 <LCD_enuSendNumber+0x33e>
    57ee:	9b cf       	rjmp	.-202    	; 0x5726 <LCD_enuSendNumber+0x274>
    57f0:	88 20       	and	r8, r8
    57f2:	09 f0       	breq	.+2      	; 0x57f6 <LCD_enuSendNumber+0x344>
    57f4:	98 cf       	rjmp	.-208    	; 0x5726 <LCD_enuSendNumber+0x274>
    57f6:	55 20       	and	r5, r5
    57f8:	09 f0       	breq	.+2      	; 0x57fc <LCD_enuSendNumber+0x34a>
    57fa:	95 cf       	rjmp	.-214    	; 0x5726 <LCD_enuSendNumber+0x274>
    57fc:	22 20       	and	r2, r2
    57fe:	09 f0       	breq	.+2      	; 0x5802 <LCD_enuSendNumber+0x350>
    5800:	92 cf       	rjmp	.-220    	; 0x5726 <LCD_enuSendNumber+0x274>
    5802:	33 20       	and	r3, r3
    5804:	09 f0       	breq	.+2      	; 0x5808 <LCD_enuSendNumber+0x356>
    5806:	8f cf       	rjmp	.-226    	; 0x5726 <LCD_enuSendNumber+0x274>
    5808:	44 20       	and	r4, r4
    580a:	09 f0       	breq	.+2      	; 0x580e <LCD_enuSendNumber+0x35c>
    580c:	8c cf       	rjmp	.-232    	; 0x5726 <LCD_enuSendNumber+0x274>
    580e:	66 20       	and	r6, r6
    5810:	09 f0       	breq	.+2      	; 0x5814 <LCD_enuSendNumber+0x362>
    5812:	89 cf       	rjmp	.-238    	; 0x5726 <LCD_enuSendNumber+0x274>
    5814:	99 23       	and	r25, r25
    5816:	09 f0       	breq	.+2      	; 0x581a <LCD_enuSendNumber+0x368>
    5818:	86 cf       	rjmp	.-244    	; 0x5726 <LCD_enuSendNumber+0x274>
    581a:	37 c0       	rjmp	.+110    	; 0x588a <LCD_enuSendNumber+0x3d8>
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	60 e0       	ldi	r22, 0x00	; 0
    5820:	41 e0       	ldi	r20, 0x01	; 1
    5822:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	61 e0       	ldi	r22, 0x01	; 1
    582a:	40 e0       	ldi	r20, 0x00	; 0
    582c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    5830:	81 e0       	ldi	r24, 0x01	; 1
    5832:	63 e0       	ldi	r22, 0x03	; 3
    5834:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5838:	81 e0       	ldi	r24, 0x01	; 1
    583a:	62 e0       	ldi	r22, 0x02	; 2
    583c:	41 e0       	ldi	r20, 0x01	; 1
    583e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5842:	00 ed       	ldi	r16, 0xD0	; 208
    5844:	17 e0       	ldi	r17, 0x07	; 7
    5846:	c8 01       	movw	r24, r16
    5848:	01 97       	sbiw	r24, 0x01	; 1
    584a:	f1 f7       	brne	.-4      	; 0x5848 <LCD_enuSendNumber+0x396>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	62 e0       	ldi	r22, 0x02	; 2
    5850:	40 e0       	ldi	r20, 0x00	; 0
    5852:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5856:	c8 01       	movw	r24, r16
    5858:	01 97       	sbiw	r24, 0x01	; 1
    585a:	f1 f7       	brne	.-4      	; 0x5858 <LCD_enuSendNumber+0x3a6>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	60 e3       	ldi	r22, 0x30	; 48
    5860:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    5864:	81 e0       	ldi	r24, 0x01	; 1
    5866:	62 e0       	ldi	r22, 0x02	; 2
    5868:	41 e0       	ldi	r20, 0x01	; 1
    586a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    586e:	c8 01       	movw	r24, r16
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	f1 f7       	brne	.-4      	; 0x5870 <LCD_enuSendNumber+0x3be>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    5874:	81 e0       	ldi	r24, 0x01	; 1
    5876:	62 e0       	ldi	r22, 0x02	; 2
    5878:	40 e0       	ldi	r20, 0x00	; 0
    587a:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    587e:	c8 01       	movw	r24, r16
    5880:	01 97       	sbiw	r24, 0x01	; 1
    5882:	f1 f7       	brne	.-4      	; 0x5880 <LCD_enuSendNumber+0x3ce>
    }

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    5884:	c8 01       	movw	r24, r16
    5886:	01 97       	sbiw	r24, 0x01	; 1
    5888:	f1 f7       	brne	.-4      	; 0x5886 <LCD_enuSendNumber+0x3d4>
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	2a 96       	adiw	r28, 0x0a	; 10
    588e:	0f b6       	in	r0, 0x3f	; 63
    5890:	f8 94       	cli
    5892:	de bf       	out	0x3e, r29	; 62
    5894:	0f be       	out	0x3f, r0	; 63
    5896:	cd bf       	out	0x3d, r28	; 61
    5898:	cf 91       	pop	r28
    589a:	df 91       	pop	r29
    589c:	1f 91       	pop	r17
    589e:	0f 91       	pop	r16
    58a0:	ff 90       	pop	r15
    58a2:	ef 90       	pop	r14
    58a4:	df 90       	pop	r13
    58a6:	cf 90       	pop	r12
    58a8:	bf 90       	pop	r11
    58aa:	af 90       	pop	r10
    58ac:	9f 90       	pop	r9
    58ae:	8f 90       	pop	r8
    58b0:	7f 90       	pop	r7
    58b2:	6f 90       	pop	r6
    58b4:	5f 90       	pop	r5
    58b6:	4f 90       	pop	r4
    58b8:	3f 90       	pop	r3
    58ba:	2f 90       	pop	r2
    58bc:	08 95       	ret
        {

            LOC_s64Reversed = (LOC_s64Reversed * 10) + (Copy_s64Number % 10);
            Copy_s64Number /= 10;
        }
        while (LOC_s64Reversed != 1)
    58be:	88 20       	and	r8, r8
    58c0:	09 f0       	breq	.+2      	; 0x58c4 <LCD_enuSendNumber+0x412>
    58c2:	31 cf       	rjmp	.-414    	; 0x5726 <LCD_enuSendNumber+0x274>
    58c4:	55 20       	and	r5, r5
    58c6:	09 f0       	breq	.+2      	; 0x58ca <LCD_enuSendNumber+0x418>
    58c8:	2e cf       	rjmp	.-420    	; 0x5726 <LCD_enuSendNumber+0x274>
    58ca:	22 20       	and	r2, r2
    58cc:	09 f0       	breq	.+2      	; 0x58d0 <LCD_enuSendNumber+0x41e>
    58ce:	2b cf       	rjmp	.-426    	; 0x5726 <LCD_enuSendNumber+0x274>
    58d0:	33 20       	and	r3, r3
    58d2:	09 f0       	breq	.+2      	; 0x58d6 <LCD_enuSendNumber+0x424>
    58d4:	28 cf       	rjmp	.-432    	; 0x5726 <LCD_enuSendNumber+0x274>
    58d6:	44 20       	and	r4, r4
    58d8:	09 f0       	breq	.+2      	; 0x58dc <LCD_enuSendNumber+0x42a>
    58da:	25 cf       	rjmp	.-438    	; 0x5726 <LCD_enuSendNumber+0x274>
    58dc:	66 20       	and	r6, r6
    58de:	09 f0       	breq	.+2      	; 0x58e2 <LCD_enuSendNumber+0x430>
    58e0:	22 cf       	rjmp	.-444    	; 0x5726 <LCD_enuSendNumber+0x274>
    58e2:	77 20       	and	r7, r7
    58e4:	91 f2       	breq	.-92     	; 0x588a <LCD_enuSendNumber+0x3d8>
    58e6:	1f cf       	rjmp	.-450    	; 0x5726 <LCD_enuSendNumber+0x274>
    }

    else
    {
        if(Copy_s64Number<0){
            Copy_s64Number*=-1;
    58e8:	2b 81       	ldd	r18, Y+3	; 0x03
    58ea:	21 95       	neg	r18
    58ec:	41 e0       	ldi	r20, 0x01	; 1
    58ee:	12 16       	cp	r1, r18
    58f0:	08 f0       	brcs	.+2      	; 0x58f4 <LCD_enuSendNumber+0x442>
    58f2:	40 e0       	ldi	r20, 0x00	; 0
    58f4:	3c 81       	ldd	r19, Y+4	; 0x04
    58f6:	31 95       	neg	r19
    58f8:	91 e0       	ldi	r25, 0x01	; 1
    58fa:	13 16       	cp	r1, r19
    58fc:	08 f0       	brcs	.+2      	; 0x5900 <LCD_enuSendNumber+0x44e>
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	f3 2e       	mov	r15, r19
    5902:	f4 1a       	sub	r15, r20
    5904:	41 e0       	ldi	r20, 0x01	; 1
    5906:	3f 15       	cp	r19, r15
    5908:	08 f0       	brcs	.+2      	; 0x590c <LCD_enuSendNumber+0x45a>
    590a:	40 e0       	ldi	r20, 0x00	; 0
    590c:	94 2b       	or	r25, r20
    590e:	4d 81       	ldd	r20, Y+5	; 0x05
    5910:	41 95       	neg	r20
    5912:	61 e0       	ldi	r22, 0x01	; 1
    5914:	14 16       	cp	r1, r20
    5916:	08 f0       	brcs	.+2      	; 0x591a <LCD_enuSendNumber+0x468>
    5918:	60 e0       	ldi	r22, 0x00	; 0
    591a:	04 2f       	mov	r16, r20
    591c:	09 1b       	sub	r16, r25
    591e:	91 e0       	ldi	r25, 0x01	; 1
    5920:	40 17       	cp	r20, r16
    5922:	08 f0       	brcs	.+2      	; 0x5926 <LCD_enuSendNumber+0x474>
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	69 2b       	or	r22, r25
    5928:	5e 81       	ldd	r21, Y+6	; 0x06
    592a:	51 95       	neg	r21
    592c:	91 e0       	ldi	r25, 0x01	; 1
    592e:	15 16       	cp	r1, r21
    5930:	08 f0       	brcs	.+2      	; 0x5934 <LCD_enuSendNumber+0x482>
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	15 2f       	mov	r17, r21
    5936:	16 1b       	sub	r17, r22
    5938:	61 e0       	ldi	r22, 0x01	; 1
    593a:	51 17       	cp	r21, r17
    593c:	08 f0       	brcs	.+2      	; 0x5940 <LCD_enuSendNumber+0x48e>
    593e:	60 e0       	ldi	r22, 0x00	; 0
    5940:	96 2b       	or	r25, r22
    5942:	6f 81       	ldd	r22, Y+7	; 0x07
    5944:	61 95       	neg	r22
    5946:	e1 e0       	ldi	r30, 0x01	; 1
    5948:	16 16       	cp	r1, r22
    594a:	08 f0       	brcs	.+2      	; 0x594e <LCD_enuSendNumber+0x49c>
    594c:	e0 e0       	ldi	r30, 0x00	; 0
    594e:	e6 2e       	mov	r14, r22
    5950:	e9 1a       	sub	r14, r25
    5952:	91 e0       	ldi	r25, 0x01	; 1
    5954:	6e 15       	cp	r22, r14
    5956:	08 f0       	brcs	.+2      	; 0x595a <LCD_enuSendNumber+0x4a8>
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	e9 2b       	or	r30, r25
    595c:	78 85       	ldd	r23, Y+8	; 0x08
    595e:	71 95       	neg	r23
    5960:	91 e0       	ldi	r25, 0x01	; 1
    5962:	17 16       	cp	r1, r23
    5964:	08 f0       	brcs	.+2      	; 0x5968 <LCD_enuSendNumber+0x4b6>
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	d7 2e       	mov	r13, r23
    596a:	de 1a       	sub	r13, r30
    596c:	e1 e0       	ldi	r30, 0x01	; 1
    596e:	7d 15       	cp	r23, r13
    5970:	08 f0       	brcs	.+2      	; 0x5974 <LCD_enuSendNumber+0x4c2>
    5972:	e0 e0       	ldi	r30, 0x00	; 0
    5974:	9e 2b       	or	r25, r30
    5976:	89 85       	ldd	r24, Y+9	; 0x09
    5978:	81 95       	neg	r24
    597a:	e1 e0       	ldi	r30, 0x01	; 1
    597c:	18 16       	cp	r1, r24
    597e:	08 f0       	brcs	.+2      	; 0x5982 <LCD_enuSendNumber+0x4d0>
    5980:	e0 e0       	ldi	r30, 0x00	; 0
    5982:	f8 2f       	mov	r31, r24
    5984:	f9 1b       	sub	r31, r25
    5986:	91 e0       	ldi	r25, 0x01	; 1
    5988:	8f 17       	cp	r24, r31
    598a:	08 f0       	brcs	.+2      	; 0x598e <LCD_enuSendNumber+0x4dc>
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	e9 2b       	or	r30, r25
    5990:	9a 85       	ldd	r25, Y+10	; 0x0a
    5992:	91 95       	neg	r25
    5994:	2b 83       	std	Y+3, r18	; 0x03
    5996:	fc 82       	std	Y+4, r15	; 0x04
    5998:	0d 83       	std	Y+5, r16	; 0x05
    599a:	1e 83       	std	Y+6, r17	; 0x06
    599c:	ef 82       	std	Y+7, r14	; 0x07
    599e:	d8 86       	std	Y+8, r13	; 0x08
    59a0:	f9 87       	std	Y+9, r31	; 0x09
    59a2:	9e 1b       	sub	r25, r30
    59a4:	9a 87       	std	Y+10, r25	; 0x0a
    LCD_voidSendFallingEdge();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#elif LCD_MODE == 4

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    59a6:	81 e0       	ldi	r24, 0x01	; 1
    59a8:	60 e0       	ldi	r22, 0x00	; 0
    59aa:	41 e0       	ldi	r20, 0x01	; 1
    59ac:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    59b0:	81 e0       	ldi	r24, 0x01	; 1
    59b2:	61 e0       	ldi	r22, 0x01	; 1
    59b4:	40 e0       	ldi	r20, 0x00	; 0
    59b6:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    59ba:	81 e0       	ldi	r24, 0x01	; 1
    59bc:	62 e0       	ldi	r22, 0x02	; 2
    59be:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    59c2:	81 e0       	ldi	r24, 0x01	; 1
    59c4:	62 e0       	ldi	r22, 0x02	; 2
    59c6:	41 e0       	ldi	r20, 0x01	; 1
    59c8:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    59cc:	00 ed       	ldi	r16, 0xD0	; 208
    59ce:	17 e0       	ldi	r17, 0x07	; 7
    59d0:	c8 01       	movw	r24, r16
    59d2:	01 97       	sbiw	r24, 0x01	; 1
    59d4:	f1 f7       	brne	.-4      	; 0x59d2 <LCD_enuSendNumber+0x520>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	62 e0       	ldi	r22, 0x02	; 2
    59da:	40 e0       	ldi	r20, 0x00	; 0
    59dc:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    59e0:	c8 01       	movw	r24, r16
    59e2:	01 97       	sbiw	r24, 0x01	; 1
    59e4:	f1 f7       	brne	.-4      	; 0x59e2 <LCD_enuSendNumber+0x530>

    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_u8HIGH);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_u8LOW);
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data >> 4); // send the most 4 bits of data to high nibbles
    LCD_voidSendFallingEdge();
    DIO_Enu_WriteHighNibbles(LCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	6d e2       	ldi	r22, 0x2D	; 45
    59ea:	0e 94 4e 33 	call	0x669c	; 0x669c <DIO_Enu_WriteHighNibbles>
    return Local_EnuErrorState;
}

static void LCD_voidSendFallingEdge(void)
{
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8HIGH);
    59ee:	81 e0       	ldi	r24, 0x01	; 1
    59f0:	62 e0       	ldi	r22, 0x02	; 2
    59f2:	41 e0       	ldi	r20, 0x01	; 1
    59f4:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    59f8:	c8 01       	movw	r24, r16
    59fa:	01 97       	sbiw	r24, 0x01	; 1
    59fc:	f1 f7       	brne	.-4      	; 0x59fa <LCD_enuSendNumber+0x548>
    _delay_ms(1);
    DIO_Enu_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8LOW);
    59fe:	81 e0       	ldi	r24, 0x01	; 1
    5a00:	62 e0       	ldi	r22, 0x02	; 2
    5a02:	40 e0       	ldi	r20, 0x00	; 0
    5a04:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5a08:	c8 01       	movw	r24, r16
    5a0a:	01 97       	sbiw	r24, 0x01	; 1
    5a0c:	f1 f7       	brne	.-4      	; 0x5a0a <LCD_enuSendNumber+0x558>
    5a0e:	c8 01       	movw	r24, r16
    5a10:	01 97       	sbiw	r24, 0x01	; 1
    5a12:	f1 f7       	brne	.-4      	; 0x5a10 <LCD_enuSendNumber+0x55e>
    5a14:	7d cd       	rjmp	.-1286   	; 0x5510 <LCD_enuSendNumber+0x5e>

00005a16 <KPD_enu_GetPressed>:

	return Local_EnuErrorState;
}

ES_t KPD_enu_GetPressed(u8 *Copy_pu8Value)
{
    5a16:	af 92       	push	r10
    5a18:	bf 92       	push	r11
    5a1a:	cf 92       	push	r12
    5a1c:	df 92       	push	r13
    5a1e:	ef 92       	push	r14
    5a20:	ff 92       	push	r15
    5a22:	0f 93       	push	r16
    5a24:	1f 93       	push	r17
    5a26:	df 93       	push	r29
    5a28:	cf 93       	push	r28
    5a2a:	0f 92       	push	r0
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	5c 01       	movw	r10, r24
	ES_t Local_EnuErrorState = ES_NOT_OK;
	u8 LOC_u8PinState;
	u8 LOC_u8ColumnIndex, LOC_u8RowIndex;
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
	static u8 LOC_u8KPDRowArr[ROWS_NUM] = {KPD_R0, KPD_R1, KPD_R2, KPD_R3};
	*Copy_pu8Value = NOTPRESSED;
    5a32:	fc 01       	movw	r30, r24
    5a34:	10 82       	st	Z, r1
    5a36:	00 e0       	ldi	r16, 0x00	; 0
    5a38:	10 e0       	ldi	r17, 0x00	; 0
    5a3a:	6e 01       	movw	r12, r28
    5a3c:	08 94       	sec
    5a3e:	c1 1c       	adc	r12, r1
    5a40:	d1 1c       	adc	r13, r1
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
    5a42:	f8 01       	movw	r30, r16
    5a44:	e5 50       	subi	r30, 0x05	; 5
    5a46:	fe 4f       	sbci	r31, 0xFE	; 254
    5a48:	e0 80       	ld	r14, Z
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	6e 2d       	mov	r22, r14
    5a4e:	40 e0       	ldi	r20, 0x00	; 0
    5a50:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
    5a54:	ff 24       	eor	r15, r15
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	60 e0       	ldi	r22, 0x00	; 0
    5a5a:	a6 01       	movw	r20, r12
    5a5c:	0e 94 27 33 	call	0x664e	; 0x664e <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
    5a60:	89 81       	ldd	r24, Y+1	; 0x01
    5a62:	88 23       	and	r24, r24
    5a64:	b1 f1       	breq	.+108    	; 0x5ad2 <KPD_enu_GetPressed+0xbc>
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
    5a66:	ff 24       	eor	r15, r15
    5a68:	f3 94       	inc	r15
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	61 e0       	ldi	r22, 0x01	; 1
    5a6e:	a6 01       	movw	r20, r12
    5a70:	0e 94 27 33 	call	0x664e	; 0x664e <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
    5a74:	89 81       	ldd	r24, Y+1	; 0x01
    5a76:	88 23       	and	r24, r24
    5a78:	09 f4       	brne	.+2      	; 0x5a7c <KPD_enu_GetPressed+0x66>
    5a7a:	41 c0       	rjmp	.+130    	; 0x5afe <KPD_enu_GetPressed+0xe8>
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
    5a7c:	22 e0       	ldi	r18, 0x02	; 2
    5a7e:	f2 2e       	mov	r15, r18
    5a80:	80 e0       	ldi	r24, 0x00	; 0
    5a82:	62 e0       	ldi	r22, 0x02	; 2
    5a84:	a6 01       	movw	r20, r12
    5a86:	0e 94 27 33 	call	0x664e	; 0x664e <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
    5a8a:	89 81       	ldd	r24, Y+1	; 0x01
    5a8c:	88 23       	and	r24, r24
    5a8e:	d1 f1       	breq	.+116    	; 0x5b04 <KPD_enu_GetPressed+0xee>
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
    5a90:	93 e0       	ldi	r25, 0x03	; 3
    5a92:	f9 2e       	mov	r15, r25
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	63 e0       	ldi	r22, 0x03	; 3
    5a98:	a6 01       	movw	r20, r12
    5a9a:	0e 94 27 33 	call	0x664e	; 0x664e <DIO_Enu_GetPinValue>
			if (LOC_u8PinState == DIO_u8LOW)
    5a9e:	89 81       	ldd	r24, Y+1	; 0x01
    5aa0:	88 23       	and	r24, r24
    5aa2:	99 f1       	breq	.+102    	; 0x5b0a <KPD_enu_GetPressed+0xf4>
				}
				Local_EnuErrorState = ES_OK;
				return Local_EnuErrorState;
			}
		}
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
    5aa4:	80 e0       	ldi	r24, 0x00	; 0
    5aa6:	6e 2d       	mov	r22, r14
    5aa8:	41 e0       	ldi	r20, 0x01	; 1
    5aaa:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
    5aae:	0f 5f       	subi	r16, 0xFF	; 255
    5ab0:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 LOC_u8PinState;
	u8 LOC_u8ColumnIndex, LOC_u8RowIndex;
	static u8 LOC_u8KPDColumnArr[COLS_NUM] = {KPD_C0, KPD_C1, KPD_C2, KPD_C3};
	static u8 LOC_u8KPDRowArr[ROWS_NUM] = {KPD_R0, KPD_R1, KPD_R2, KPD_R3};
	*Copy_pu8Value = NOTPRESSED;
	for (LOC_u8ColumnIndex = 0; LOC_u8ColumnIndex < COLS_NUM; LOC_u8ColumnIndex++)
    5ab2:	04 30       	cpi	r16, 0x04	; 4
    5ab4:	11 05       	cpc	r17, r1
    5ab6:	29 f6       	brne	.-118    	; 0x5a42 <KPD_enu_GetPressed+0x2c>
		}
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8HIGH);
	}
	Local_EnuErrorState = ES_OK;
	return Local_EnuErrorState;
}
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	0f 90       	pop	r0
    5abc:	cf 91       	pop	r28
    5abe:	df 91       	pop	r29
    5ac0:	1f 91       	pop	r17
    5ac2:	0f 91       	pop	r16
    5ac4:	ff 90       	pop	r15
    5ac6:	ef 90       	pop	r14
    5ac8:	df 90       	pop	r13
    5aca:	cf 90       	pop	r12
    5acc:	bf 90       	pop	r11
    5ace:	af 90       	pop	r10
    5ad0:	08 95       	ret
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
			if (LOC_u8PinState == DIO_u8LOW)
    5ad2:	e0 e0       	ldi	r30, 0x00	; 0
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
    5ad6:	ee 0f       	add	r30, r30
    5ad8:	ff 1f       	adc	r31, r31
    5ada:	ee 0f       	add	r30, r30
    5adc:	ff 1f       	adc	r31, r31
    5ade:	e0 0f       	add	r30, r16
    5ae0:	f1 1f       	adc	r31, r17
    5ae2:	e5 51       	subi	r30, 0x15	; 21
    5ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ae6:	80 81       	ld	r24, Z
    5ae8:	f5 01       	movw	r30, r10
    5aea:	80 83       	st	Z, r24
				while (LOC_u8PinState == DIO_u8LOW)
				{
					DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
    5aec:	80 e0       	ldi	r24, 0x00	; 0
    5aee:	6f 2d       	mov	r22, r15
    5af0:	a6 01       	movw	r20, r12
    5af2:	0e 94 27 33 	call	0x664e	; 0x664e <DIO_Enu_GetPinValue>
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
			if (LOC_u8PinState == DIO_u8LOW)
			{
				*Copy_pu8Value = KPD_u8Buttons[LOC_u8RowIndex][LOC_u8ColumnIndex];
				while (LOC_u8PinState == DIO_u8LOW)
    5af6:	89 81       	ldd	r24, Y+1	; 0x01
    5af8:	88 23       	and	r24, r24
    5afa:	c1 f3       	breq	.-16     	; 0x5aec <KPD_enu_GetPressed+0xd6>
    5afc:	dd cf       	rjmp	.-70     	; 0x5ab8 <KPD_enu_GetPressed+0xa2>
	{
		DIO_Enu_SetPinValue(KPD_PORT, LOC_u8KPDColumnArr[LOC_u8ColumnIndex], DIO_u8LOW);
		for (LOC_u8RowIndex = 0; LOC_u8RowIndex < ROWS_NUM; LOC_u8RowIndex++)
		{
			DIO_Enu_GetPinValue(KPD_PORT, LOC_u8KPDRowArr[LOC_u8RowIndex], &LOC_u8PinState);
			if (LOC_u8PinState == DIO_u8LOW)
    5afe:	e1 e0       	ldi	r30, 0x01	; 1
    5b00:	f0 e0       	ldi	r31, 0x00	; 0
    5b02:	e9 cf       	rjmp	.-46     	; 0x5ad6 <KPD_enu_GetPressed+0xc0>
    5b04:	e2 e0       	ldi	r30, 0x02	; 2
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	e6 cf       	rjmp	.-52     	; 0x5ad6 <KPD_enu_GetPressed+0xc0>
    5b0a:	e3 e0       	ldi	r30, 0x03	; 3
    5b0c:	f0 e0       	ldi	r31, 0x00	; 0
    5b0e:	e3 cf       	rjmp	.-58     	; 0x5ad6 <KPD_enu_GetPressed+0xc0>

00005b10 <KPD_enu_Init>:
{
	ES_t Local_EnuErrorState = ES_NOT_OK;

	/*This code equivalent to connect pull up for the pins of the rows */

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R0, DIO_u8INPUT);
    5b10:	80 e0       	ldi	r24, 0x00	; 0
    5b12:	60 e0       	ldi	r22, 0x00	; 0
    5b14:	40 e0       	ldi	r20, 0x00	; 0
    5b16:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R1, DIO_u8INPUT);
    5b1a:	80 e0       	ldi	r24, 0x00	; 0
    5b1c:	61 e0       	ldi	r22, 0x01	; 1
    5b1e:	40 e0       	ldi	r20, 0x00	; 0
    5b20:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R2, DIO_u8INPUT);
    5b24:	80 e0       	ldi	r24, 0x00	; 0
    5b26:	62 e0       	ldi	r22, 0x02	; 2
    5b28:	40 e0       	ldi	r20, 0x00	; 0
    5b2a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_R3, DIO_u8INPUT);
    5b2e:	80 e0       	ldi	r24, 0x00	; 0
    5b30:	63 e0       	ldi	r22, 0x03	; 3
    5b32:	40 e0       	ldi	r20, 0x00	; 0
    5b34:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_R0, DIO_u8HIGH);
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	60 e0       	ldi	r22, 0x00	; 0
    5b3c:	41 e0       	ldi	r20, 0x01	; 1
    5b3e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R1, DIO_u8HIGH);
    5b42:	80 e0       	ldi	r24, 0x00	; 0
    5b44:	61 e0       	ldi	r22, 0x01	; 1
    5b46:	41 e0       	ldi	r20, 0x01	; 1
    5b48:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R2, DIO_u8HIGH);
    5b4c:	80 e0       	ldi	r24, 0x00	; 0
    5b4e:	62 e0       	ldi	r22, 0x02	; 2
    5b50:	41 e0       	ldi	r20, 0x01	; 1
    5b52:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_R3, DIO_u8HIGH);
    5b56:	80 e0       	ldi	r24, 0x00	; 0
    5b58:	63 e0       	ldi	r22, 0x03	; 3
    5b5a:	41 e0       	ldi	r20, 0x01	; 1
    5b5c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>

	/*connect the pins of the columns as output pins (HIGH)*/

	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C0, DIO_u8OUTPUT);
    5b60:	80 e0       	ldi	r24, 0x00	; 0
    5b62:	64 e0       	ldi	r22, 0x04	; 4
    5b64:	41 e0       	ldi	r20, 0x01	; 1
    5b66:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C1, DIO_u8OUTPUT);
    5b6a:	80 e0       	ldi	r24, 0x00	; 0
    5b6c:	65 e0       	ldi	r22, 0x05	; 5
    5b6e:	41 e0       	ldi	r20, 0x01	; 1
    5b70:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C2, DIO_u8OUTPUT);
    5b74:	80 e0       	ldi	r24, 0x00	; 0
    5b76:	66 e0       	ldi	r22, 0x06	; 6
    5b78:	41 e0       	ldi	r20, 0x01	; 1
    5b7a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(KPD_PORT, KPD_C3, DIO_u8OUTPUT);
    5b7e:	80 e0       	ldi	r24, 0x00	; 0
    5b80:	67 e0       	ldi	r22, 0x07	; 7
    5b82:	41 e0       	ldi	r20, 0x01	; 1
    5b84:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>

	DIO_Enu_SetPinValue(KPD_PORT, KPD_C0, DIO_u8HIGH);
    5b88:	80 e0       	ldi	r24, 0x00	; 0
    5b8a:	64 e0       	ldi	r22, 0x04	; 4
    5b8c:	41 e0       	ldi	r20, 0x01	; 1
    5b8e:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C1, DIO_u8HIGH);
    5b92:	80 e0       	ldi	r24, 0x00	; 0
    5b94:	65 e0       	ldi	r22, 0x05	; 5
    5b96:	41 e0       	ldi	r20, 0x01	; 1
    5b98:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C2, DIO_u8HIGH);
    5b9c:	80 e0       	ldi	r24, 0x00	; 0
    5b9e:	66 e0       	ldi	r22, 0x06	; 6
    5ba0:	41 e0       	ldi	r20, 0x01	; 1
    5ba2:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(KPD_PORT, KPD_C3, DIO_u8HIGH);
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	67 e0       	ldi	r22, 0x07	; 7
    5baa:	41 e0       	ldi	r20, 0x01	; 1
    5bac:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>

	Local_EnuErrorState = ES_OK;

	return Local_EnuErrorState;
}
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	08 95       	ret

00005bb4 <EEPROM_u8ReadDataByte>:
	_delay_ms(10);

}

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    5bb4:	1f 93       	push	r17
    5bb6:	df 93       	push	r29
    5bb8:	cf 93       	push	r28
    5bba:	0f 92       	push	r0
    5bbc:	cd b7       	in	r28, 0x3d	; 61
    5bbe:	de b7       	in	r29, 0x3e	; 62
    5bc0:	18 2f       	mov	r17, r24
		//Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
	//if 24C02 :
	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;

	/*Send start condition*/
	TWI_SendStartCondition();
    5bc2:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    5bc6:	80 e5       	ldi	r24, 0x50	; 80
    5bc8:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    5bcc:	81 2f       	mov	r24, r17
    5bce:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    5bd2:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    5bd6:	80 e5       	ldi	r24, 0x50	; 80
    5bd8:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByteWithACK(&Local_u8Data);
    5bdc:	ce 01       	movw	r24, r28
    5bde:	01 96       	adiw	r24, 0x01	; 1
    5be0:	0e 94 b3 2e 	call	0x5d66	; 0x5d66 <TWI_MasterReadDataByteWithACK>

    /* Send NACK after last byte */
    TWI_SendNACK();
    5be4:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <TWI_SendNACK>

	/*send the stop condition*/
	TWI_SendStopCondition();
    5be8:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <TWI_SendStopCondition>

	return Local_u8Data;
}
    5bec:	89 81       	ldd	r24, Y+1	; 0x01
    5bee:	0f 90       	pop	r0
    5bf0:	cf 91       	pop	r28
    5bf2:	df 91       	pop	r29
    5bf4:	1f 91       	pop	r17
    5bf6:	08 95       	ret

00005bf8 <EEPROM_voidSendDataByte>:
	TWI_voidInitMaster(0x0);
	TWI_voidInitSlave(0xA0);
}

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    5bf8:	0f 93       	push	r16
    5bfa:	1f 93       	push	r17
    5bfc:	18 2f       	mov	r17, r24
    5bfe:	06 2f       	mov	r16, r22
	//if 24C02 :
	 Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;


	/*Send start condition*/
	TWI_SendStartCondition();
    5c00:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    5c04:	80 e5       	ldi	r24, 0x50	; 80
    5c06:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    5c0a:	81 2f       	mov	r24, r17
    5c0c:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    5c10:	80 2f       	mov	r24, r16
    5c12:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    5c16:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <TWI_SendStopCondition>
    5c1a:	80 e2       	ldi	r24, 0x20	; 32
    5c1c:	9e e4       	ldi	r25, 0x4E	; 78
    5c1e:	01 97       	sbiw	r24, 0x01	; 1
    5c20:	f1 f7       	brne	.-4      	; 0x5c1e <EEPROM_voidSendDataByte+0x26>

	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    5c22:	1f 91       	pop	r17
    5c24:	0f 91       	pop	r16
    5c26:	08 95       	ret

00005c28 <EEPROM_voidInit>:
#include <util/delay.h>

//----------------------------------------------------------------------------------------------------------------------------------------------------

void EEPROM_voidInit(void){
	DIO_Enu_SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8INPUT);
    5c28:	82 e0       	ldi	r24, 0x02	; 2
    5c2a:	60 e0       	ldi	r22, 0x00	; 0
    5c2c:	40 e0       	ldi	r20, 0x00	; 0
    5c2e:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8INPUT);
    5c32:	82 e0       	ldi	r24, 0x02	; 2
    5c34:	61 e0       	ldi	r22, 0x01	; 1
    5c36:	40 e0       	ldi	r20, 0x00	; 0
    5c38:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8LOW);
    5c3c:	82 e0       	ldi	r24, 0x02	; 2
    5c3e:	60 e0       	ldi	r22, 0x00	; 0
    5c40:	40 e0       	ldi	r20, 0x00	; 0
    5c42:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8LOW);
    5c46:	82 e0       	ldi	r24, 0x02	; 2
    5c48:	61 e0       	ldi	r22, 0x01	; 1
    5c4a:	40 e0       	ldi	r20, 0x00	; 0
    5c4c:	0e 94 3b 32 	call	0x6476	; 0x6476 <DIO_Enu_SetPinValue>
	TWI_voidInitMaster(0x0);
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <TWI_voidInitMaster>
	TWI_voidInitSlave(0xA0);
    5c56:	80 ea       	ldi	r24, 0xA0	; 160
    5c58:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <TWI_voidInitSlave>
}
    5c5c:	08 95       	ret

00005c5e <TWI_voidInitMaster>:
#include "TWI_config.h"
#include "TWI_interface.h"
#include "TWI_private.h"

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address) {
    5c5e:	98 2f       	mov	r25, r24

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR = (u8) (((F_CPU / SCL_Clock) - 16) / (2 * TWI_PRESCALLER));
    5c60:	82 e0       	ldi	r24, 0x02	; 2
    5c62:	80 b9       	out	0x00, r24	; 0

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER == PRESCALLER_BY_1) {
		TWSR = 0;
    5c64:	11 b8       	out	0x01, r1	; 1
	} else if (TWI_PRESCALLER == PRESCALLER_BY_64) {
		TWSR = 3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if (Copy_u8Address != 0) {
    5c66:	99 23       	and	r25, r25
    5c68:	11 f0       	breq	.+4      	; 0x5c6e <TWI_voidInitMaster+0x10>
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address << 1;
    5c6a:	99 0f       	add	r25, r25
    5c6c:	92 b9       	out	0x02, r25	; 2
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    5c6e:	86 b7       	in	r24, 0x36	; 54
    5c70:	80 64       	ori	r24, 0x40	; 64
    5c72:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR, TWCR_TWEN);
    5c74:	86 b7       	in	r24, 0x36	; 54
    5c76:	84 60       	ori	r24, 0x04	; 4
    5c78:	86 bf       	out	0x36, r24	; 54
}
    5c7a:	08 95       	ret

00005c7c <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address) {
	/*Set the slave address*/
	TWAR = Copy_u8Address << 1;
    5c7c:	88 0f       	add	r24, r24
    5c7e:	82 b9       	out	0x02, r24	; 2

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    5c80:	86 b7       	in	r24, 0x36	; 54
    5c82:	80 64       	ori	r24, 0x40	; 64
    5c84:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    5c86:	86 b7       	in	r24, 0x36	; 54
    5c88:	84 60       	ori	r24, 0x04	; 4
    5c8a:	86 bf       	out	0x36, r24	; 54
}
    5c8c:	08 95       	ret

00005c8e <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void) {
	TWI_ErrStatus Local_Error = NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    5c8e:	86 b7       	in	r24, 0x36	; 54
    5c90:	80 62       	ori	r24, 0x20	; 32
    5c92:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5c94:	86 b7       	in	r24, 0x36	; 54
    5c96:	80 68       	ori	r24, 0x80	; 128
    5c98:	86 bf       	out	0x36, r24	; 54

	SET_BIT(TWCR, TWCR_TWEN);
    5c9a:	86 b7       	in	r24, 0x36	; 54
    5c9c:	84 60       	ori	r24, 0x04	; 4
    5c9e:	86 bf       	out	0x36, r24	; 54
//	 Hint : we could use
//	 TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTA);


	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5ca0:	06 b6       	in	r0, 0x36	; 54
    5ca2:	07 fe       	sbrs	r0, 7
    5ca4:	fd cf       	rjmp	.-6      	; 0x5ca0 <TWI_SendStartCondition+0x12>
		;

	/*Check the operation status (Bit Masking) */
	if ((TWSR & 0xF8) != START_ACK) {
    5ca6:	81 b1       	in	r24, 0x01	; 1
    5ca8:	88 7f       	andi	r24, 0xF8	; 248
    5caa:	88 30       	cpi	r24, 0x08	; 8
    5cac:	11 f0       	breq	.+4      	; 0x5cb2 <TWI_SendStartCondition+0x24>
    5cae:	88 e0       	ldi	r24, 0x08	; 8
    5cb0:	08 95       	ret
    5cb2:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    5cb4:	08 95       	ret

00005cb6 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void) {
	TWI_ErrStatus Local_Error = NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    5cb6:	86 b7       	in	r24, 0x36	; 54
    5cb8:	80 62       	ori	r24, 0x20	; 32
    5cba:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5cbc:	86 b7       	in	r24, 0x36	; 54
    5cbe:	80 68       	ori	r24, 0x80	; 128
    5cc0:	86 bf       	out	0x36, r24	; 54
	 Hint : we could use
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5cc2:	06 b6       	in	r0, 0x36	; 54
    5cc4:	07 fe       	sbrs	r0, 7
    5cc6:	fd cf       	rjmp	.-6      	; 0x5cc2 <TWI_SendRepeatedStart+0xc>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != REP_START_ACK) {
    5cc8:	81 b1       	in	r24, 0x01	; 1
    5cca:	88 7f       	andi	r24, 0xF8	; 248
    5ccc:	80 31       	cpi	r24, 0x10	; 16
    5cce:	11 f0       	breq	.+4      	; 0x5cd4 <TWI_SendRepeatedStart+0x1e>
    5cd0:	87 e0       	ldi	r24, 0x07	; 7
    5cd2:	08 95       	ret
    5cd4:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    5cd6:	08 95       	ret

00005cd8 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress) {
	TWI_ErrStatus Local_Error = NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    5cd8:	88 0f       	add	r24, r24
    5cda:	83 b9       	out	0x03, r24	; 3
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR, 0);
    5cdc:	18 98       	cbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    5cde:	86 b7       	in	r24, 0x36	; 54
    5ce0:	8f 7d       	andi	r24, 0xDF	; 223
    5ce2:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5ce4:	86 b7       	in	r24, 0x36	; 54
    5ce6:	80 68       	ori	r24, 0x80	; 128
    5ce8:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5cea:	06 b6       	in	r0, 0x36	; 54
    5cec:	07 fe       	sbrs	r0, 7
    5cee:	fd cf       	rjmp	.-6      	; 0x5cea <TWI_SendSlaveAddressWithWrite+0x12>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK) {
    5cf0:	81 b1       	in	r24, 0x01	; 1
    5cf2:	88 7f       	andi	r24, 0xF8	; 248
    5cf4:	88 31       	cpi	r24, 0x18	; 24
    5cf6:	11 f0       	breq	.+4      	; 0x5cfc <TWI_SendSlaveAddressWithWrite+0x24>
    5cf8:	86 e0       	ldi	r24, 0x06	; 6
    5cfa:	08 95       	ret
    5cfc:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    5cfe:	08 95       	ret

00005d00 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress) {
	TWI_ErrStatus Local_Error = NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    5d00:	88 0f       	add	r24, r24
    5d02:	83 b9       	out	0x03, r24	; 3
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR, 0);
    5d04:	18 9a       	sbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    5d06:	86 b7       	in	r24, 0x36	; 54
    5d08:	8f 7d       	andi	r24, 0xDF	; 223
    5d0a:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5d0c:	86 b7       	in	r24, 0x36	; 54
    5d0e:	80 68       	ori	r24, 0x80	; 128
    5d10:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5d12:	06 b6       	in	r0, 0x36	; 54
    5d14:	07 fe       	sbrs	r0, 7
    5d16:	fd cf       	rjmp	.-6      	; 0x5d12 <TWI_SendSlaveAddressWithRead+0x12>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK) {
    5d18:	81 b1       	in	r24, 0x01	; 1
    5d1a:	88 7f       	andi	r24, 0xF8	; 248
    5d1c:	80 34       	cpi	r24, 0x40	; 64
    5d1e:	11 f0       	breq	.+4      	; 0x5d24 <TWI_SendSlaveAddressWithRead+0x24>
    5d20:	85 e0       	ldi	r24, 0x05	; 5
    5d22:	08 95       	ret
    5d24:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    5d26:	08 95       	ret

00005d28 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte) {
	TWI_ErrStatus Local_Error = NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    5d28:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5d2a:	86 b7       	in	r24, 0x36	; 54
    5d2c:	80 68       	ori	r24, 0x80	; 128
    5d2e:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5d30:	06 b6       	in	r0, 0x36	; 54
    5d32:	07 fe       	sbrs	r0, 7
    5d34:	fd cf       	rjmp	.-6      	; 0x5d30 <TWI_MasterWriteDataByte+0x8>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK) {
    5d36:	81 b1       	in	r24, 0x01	; 1
    5d38:	88 7f       	andi	r24, 0xF8	; 248
    5d3a:	88 32       	cpi	r24, 0x28	; 40
    5d3c:	11 f0       	breq	.+4      	; 0x5d42 <TWI_MasterWriteDataByte+0x1a>
    5d3e:	84 e0       	ldi	r24, 0x04	; 4
    5d40:	08 95       	ret
    5d42:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    5d44:	08 95       	ret

00005d46 <TWI_MasterReadDataByteWithoutACK>:

TWI_ErrStatus TWI_MasterReadDataByteWithoutACK(u8 *Copy_pu8DataByte) {
    5d46:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error = NoError;

	/* Receive Data */
	TWCR = (1<< TWCR_TWINT) | (1 << TWCR_TWEN);
    5d48:	84 e8       	ldi	r24, 0x84	; 132
    5d4a:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5d4c:	06 b6       	in	r0, 0x36	; 54
    5d4e:	07 fe       	sbrs	r0, 7
    5d50:	fd cf       	rjmp	.-6      	; 0x5d4c <TWI_MasterReadDataByteWithoutACK+0x6>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK) {
    5d52:	81 b1       	in	r24, 0x01	; 1
    5d54:	88 7f       	andi	r24, 0xF8	; 248
    5d56:	80 35       	cpi	r24, 0x50	; 80
    5d58:	11 f0       	breq	.+4      	; 0x5d5e <TWI_MasterReadDataByteWithoutACK+0x18>
    5d5a:	80 e0       	ldi	r24, 0x00	; 0
    5d5c:	08 95       	ret
		Local_Error = MasterReadByteErr;
	} else {
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    5d5e:	83 b1       	in	r24, 0x03	; 3
    5d60:	80 83       	st	Z, r24
    5d62:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_Error;
}
    5d64:	08 95       	ret

00005d66 <TWI_MasterReadDataByteWithACK>:
TWI_ErrStatus TWI_MasterReadDataByteWithACK(u8 *Copy_pu8DataByte) {
    5d66:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error = NoError;

	/* Receive Data */
	TWCR = (1<< TWCR_TWEA) | (1<< TWCR_TWINT) | (1 << TWCR_TWEN);
    5d68:	84 ec       	ldi	r24, 0xC4	; 196
    5d6a:	86 bf       	out	0x36, r24	; 54


	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5d6c:	06 b6       	in	r0, 0x36	; 54
    5d6e:	07 fe       	sbrs	r0, 7
    5d70:	fd cf       	rjmp	.-6      	; 0x5d6c <TWI_MasterReadDataByteWithACK+0x6>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK) {
    5d72:	81 b1       	in	r24, 0x01	; 1
    5d74:	88 7f       	andi	r24, 0xF8	; 248
    5d76:	80 35       	cpi	r24, 0x50	; 80
    5d78:	11 f0       	breq	.+4      	; 0x5d7e <TWI_MasterReadDataByteWithACK+0x18>
    5d7a:	80 e0       	ldi	r24, 0x00	; 0
    5d7c:	08 95       	ret
		Local_Error = MasterReadByteErr;
	} else {
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    5d7e:	83 b1       	in	r24, 0x03	; 3
    5d80:	80 83       	st	Z, r24
    5d82:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_Error;
}
    5d84:	08 95       	ret

00005d86 <TWI_SlaveWriteDataByte>:
TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte) {
	TWI_ErrStatus Local_Error = NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    5d86:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5d88:	86 b7       	in	r24, 0x36	; 54
    5d8a:	80 68       	ori	r24, 0x80	; 128
    5d8c:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5d8e:	06 b6       	in	r0, 0x36	; 54
    5d90:	07 fe       	sbrs	r0, 7
    5d92:	fd cf       	rjmp	.-6      	; 0x5d8e <TWI_SlaveWriteDataByte+0x8>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED) {
    5d94:	81 b1       	in	r24, 0x01	; 1
    5d96:	88 7f       	andi	r24, 0xF8	; 248
    5d98:	88 3b       	cpi	r24, 0xB8	; 184
    5d9a:	11 f0       	breq	.+4      	; 0x5da0 <TWI_SlaveWriteDataByte+0x1a>
    5d9c:	81 e0       	ldi	r24, 0x01	; 1
    5d9e:	08 95       	ret
    5da0:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    5da2:	08 95       	ret

00005da4 <TWI_SlaveReadDataByte>:


TWI_ErrStatus TWI_SlaveReadDataByte(u8 *Copy_pu8DataByte) {
    5da4:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error = NoError;

	// Set the TWINT flag to clear it and enable TWI operations
	SET_BIT(TWCR, TWCR_TWINT);
    5da6:	86 b7       	in	r24, 0x36	; 54
    5da8:	80 68       	ori	r24, 0x80	; 128
    5daa:	86 bf       	out	0x36, r24	; 54

	// Wait until the operation finishes and the flag is raised
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5dac:	06 b6       	in	r0, 0x36	; 54
    5dae:	07 fe       	sbrs	r0, 7
    5db0:	fd cf       	rjmp	.-6      	; 0x5dac <TWI_SlaveReadDataByte+0x8>
		;

	// Check the operation status for data received
	if ((TWSR & 0xF8) != SLAVE_DATA_RECEIVED) {
    5db2:	81 b1       	in	r24, 0x01	; 1
    5db4:	88 7f       	andi	r24, 0xF8	; 248
    5db6:	80 38       	cpi	r24, 0x80	; 128
    5db8:	11 f0       	breq	.+4      	; 0x5dbe <TWI_SlaveReadDataByte+0x1a>
    5dba:	83 e0       	ldi	r24, 0x03	; 3
    5dbc:	08 95       	ret
		Local_Error = SlaveReadByteErr;
	} else {
		// Read the received data
		*Copy_pu8DataByte = TWDR;
    5dbe:	83 b1       	in	r24, 0x03	; 3
    5dc0:	80 83       	st	Z, r24
    5dc2:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_Error;
}
    5dc4:	08 95       	ret

00005dc6 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void) {
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    5dc6:	86 b7       	in	r24, 0x36	; 54
    5dc8:	80 61       	ori	r24, 0x10	; 16
    5dca:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5dcc:	86 b7       	in	r24, 0x36	; 54
    5dce:	80 68       	ori	r24, 0x80	; 128
    5dd0:	86 bf       	out	0x36, r24	; 54

}
    5dd2:	08 95       	ret

00005dd4 <TWI_voidDisableACK>:
	TWI_SendStopCondition();
	return state;
}
void TWI_voidDisableACK(void){
	/*Disable Acknowledge bit*/
	CLR_BIT(TWCR, TWCR_TWEA);
    5dd4:	86 b7       	in	r24, 0x36	; 54
    5dd6:	8f 7b       	andi	r24, 0xBF	; 191
    5dd8:	86 bf       	out	0x36, r24	; 54
}
    5dda:	08 95       	ret

00005ddc <TWI_voidDisableTWI>:
void TWI_voidDisableTWI(void){
	/*Disable TWI Peripheral*/
	CLR_BIT(TWCR, TWCR_TWEN);
    5ddc:	86 b7       	in	r24, 0x36	; 54
    5dde:	8b 7f       	andi	r24, 0xFB	; 251
    5de0:	86 bf       	out	0x36, r24	; 54
}
    5de2:	08 95       	ret

00005de4 <TWI_voidEnableACK>:
void TWI_voidEnableACK(void){
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    5de4:	86 b7       	in	r24, 0x36	; 54
    5de6:	80 64       	ori	r24, 0x40	; 64
    5de8:	86 bf       	out	0x36, r24	; 54
}
    5dea:	08 95       	ret

00005dec <TWI_voidEnableTWI>:
void TWI_voidEnableTWI(void){
	/*Enable TWI Peripheral*/
	SET_BIT(TWCR, TWCR_TWEN);
    5dec:	86 b7       	in	r24, 0x36	; 54
    5dee:	84 60       	ori	r24, 0x04	; 4
    5df0:	86 bf       	out	0x36, r24	; 54
}
    5df2:	08 95       	ret

00005df4 <TWI_SendACK>:
void TWI_SendACK(void) {
    // Enable ACK generation (TWEA bit set to 1)
    SET_BIT(TWCR, TWCR_TWEA);
    5df4:	86 b7       	in	r24, 0x36	; 54
    5df6:	80 64       	ori	r24, 0x40	; 64
    5df8:	86 bf       	out	0x36, r24	; 54
    // Clear the interrupt flag to start the next operation
    SET_BIT(TWCR, TWCR_TWINT);
    5dfa:	86 b7       	in	r24, 0x36	; 54
    5dfc:	80 68       	ori	r24, 0x80	; 128
    5dfe:	86 bf       	out	0x36, r24	; 54
    // Wait until the operation finishes and the flag is raised
    while (!(GIT_BIT(TWCR, TWCR_TWINT)))
    5e00:	06 b6       	in	r0, 0x36	; 54
    5e02:	07 fe       	sbrs	r0, 7
    5e04:	fd cf       	rjmp	.-6      	; 0x5e00 <TWI_SendACK+0xc>
        ;
}
    5e06:	08 95       	ret

00005e08 <TWI_SendNACK>:
void TWI_SendNACK(void) {
    // Disable ACK generation (TWEA bit set to 0)
    CLR_BIT(TWCR, TWCR_TWEA);
    5e08:	86 b7       	in	r24, 0x36	; 54
    5e0a:	8f 7b       	andi	r24, 0xBF	; 191
    5e0c:	86 bf       	out	0x36, r24	; 54
    // Clear the interrupt flag to start the next operation
    SET_BIT(TWCR, TWCR_TWINT);
    5e0e:	86 b7       	in	r24, 0x36	; 54
    5e10:	80 68       	ori	r24, 0x80	; 128
    5e12:	86 bf       	out	0x36, r24	; 54
    // Wait until the operation finishes and the flag is raised
    while (!(GIT_BIT(TWCR, TWCR_TWINT)))
    5e14:	06 b6       	in	r0, 0x36	; 54
    5e16:	07 fe       	sbrs	r0, 7
    5e18:	fd cf       	rjmp	.-6      	; 0x5e14 <TWI_SendNACK+0xc>
        ;
}
    5e1a:	08 95       	ret

00005e1c <TWI_u8SendFrame>:
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);

}

TWI_ErrStatus TWI_u8SendFrame(u8 A_u8Address,u8 *PA_u8buffer,u8 len){
    5e1c:	98 2f       	mov	r25, r24

TWI_ErrStatus TWI_SendStartCondition(void) {
	TWI_ErrStatus Local_Error = NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    5e1e:	86 b7       	in	r24, 0x36	; 54
    5e20:	80 62       	ori	r24, 0x20	; 32
    5e22:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5e24:	86 b7       	in	r24, 0x36	; 54
    5e26:	80 68       	ori	r24, 0x80	; 128
    5e28:	86 bf       	out	0x36, r24	; 54

	SET_BIT(TWCR, TWCR_TWEN);
    5e2a:	86 b7       	in	r24, 0x36	; 54
    5e2c:	84 60       	ori	r24, 0x04	; 4
    5e2e:	86 bf       	out	0x36, r24	; 54
//	 Hint : we could use
//	 TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTA);


	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5e30:	06 b6       	in	r0, 0x36	; 54
    5e32:	07 fe       	sbrs	r0, 7
    5e34:	fd cf       	rjmp	.-6      	; 0x5e30 <TWI_u8SendFrame+0x14>
		;

	/*Check the operation status (Bit Masking) */
	if ((TWSR & 0xF8) != START_ACK) {
    5e36:	81 b1       	in	r24, 0x01	; 1
    5e38:	88 7f       	andi	r24, 0xF8	; 248
    5e3a:	88 30       	cpi	r24, 0x08	; 8
    5e3c:	11 f0       	breq	.+4      	; 0x5e42 <TWI_u8SendFrame+0x26>
    5e3e:	88 e0       	ldi	r24, 0x08	; 8
    5e40:	08 95       	ret

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress) {
	TWI_ErrStatus Local_Error = NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    5e42:	99 0f       	add	r25, r25
    5e44:	93 b9       	out	0x03, r25	; 3
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR, 0);
    5e46:	18 98       	cbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    5e48:	86 b7       	in	r24, 0x36	; 54
    5e4a:	8f 7d       	andi	r24, 0xDF	; 223
    5e4c:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5e4e:	86 b7       	in	r24, 0x36	; 54
    5e50:	80 68       	ori	r24, 0x80	; 128
    5e52:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5e54:	06 b6       	in	r0, 0x36	; 54
    5e56:	07 fe       	sbrs	r0, 7
    5e58:	fd cf       	rjmp	.-6      	; 0x5e54 <TWI_u8SendFrame+0x38>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK) {
    5e5a:	81 b1       	in	r24, 0x01	; 1
    5e5c:	88 7f       	andi	r24, 0xF8	; 248
    5e5e:	88 31       	cpi	r24, 0x18	; 24
    5e60:	11 f0       	breq	.+4      	; 0x5e66 <TWI_u8SendFrame+0x4a>
    5e62:	86 e0       	ldi	r24, 0x06	; 6
    5e64:	08 95       	ret
	if(state != NoError)
		return state;
	state=TWI_SendSlaveAddressWithWrite(A_u8Address);
	if(state != NoError)
		return state;
	for(u8 itr=0;itr<len;itr++){
    5e66:	44 23       	and	r20, r20
    5e68:	a1 f0       	breq	.+40     	; 0x5e92 <TWI_u8SendFrame+0x76>
    5e6a:	fb 01       	movw	r30, r22
		state=TWI_MasterWriteDataByte(PA_u8buffer[itr]);
    5e6c:	80 81       	ld	r24, Z

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte) {
	TWI_ErrStatus Local_Error = NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    5e6e:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5e70:	86 b7       	in	r24, 0x36	; 54
    5e72:	80 68       	ori	r24, 0x80	; 128
    5e74:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    5e76:	06 b6       	in	r0, 0x36	; 54
    5e78:	07 fe       	sbrs	r0, 7
    5e7a:	fd cf       	rjmp	.-6      	; 0x5e76 <TWI_u8SendFrame+0x5a>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK) {
    5e7c:	81 b1       	in	r24, 0x01	; 1
    5e7e:	88 7f       	andi	r24, 0xF8	; 248
    5e80:	88 32       	cpi	r24, 0x28	; 40
    5e82:	11 f0       	breq	.+4      	; 0x5e88 <TWI_u8SendFrame+0x6c>
    5e84:	84 e0       	ldi	r24, 0x04	; 4
    5e86:	08 95       	ret
    5e88:	31 96       	adiw	r30, 0x01	; 1
	if(state != NoError)
		return state;
	state=TWI_SendSlaveAddressWithWrite(A_u8Address);
	if(state != NoError)
		return state;
	for(u8 itr=0;itr<len;itr++){
    5e8a:	8e 2f       	mov	r24, r30
    5e8c:	86 1b       	sub	r24, r22
    5e8e:	84 17       	cp	r24, r20
    5e90:	68 f3       	brcs	.-38     	; 0x5e6c <TWI_u8SendFrame+0x50>
	return Local_Error;
}

void TWI_SendStopCondition(void) {
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    5e92:	86 b7       	in	r24, 0x36	; 54
    5e94:	80 61       	ori	r24, 0x10	; 16
    5e96:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    5e98:	86 b7       	in	r24, 0x36	; 54
    5e9a:	80 68       	ori	r24, 0x80	; 128
    5e9c:	86 bf       	out	0x36, r24	; 54
    5e9e:	82 e0       	ldi	r24, 0x02	; 2
		if(state != NoError)
			return state;
	}
	TWI_SendStopCondition();
	return state;
}
    5ea0:	08 95       	ret

00005ea2 <TIMER0_voidInit>:
{
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    5ea2:	83 b7       	in	r24, 0x33	; 51
    5ea4:	8f 7b       	andi	r24, 0xBF	; 191
    5ea6:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    5ea8:	83 b7       	in	r24, 0x33	; 51
    5eaa:	87 7f       	andi	r24, 0xF7	; 247
    5eac:	83 bf       	out	0x33, r24	; 51

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    5eae:	88 e3       	ldi	r24, 0x38	; 56
    5eb0:	82 bf       	out	0x32, r24	; 50

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    5eb2:	89 b7       	in	r24, 0x39	; 57
    5eb4:	81 60       	ori	r24, 0x01	; 1
    5eb6:	89 bf       	out	0x39, r24	; 57
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    5eb8:	83 b7       	in	r24, 0x33	; 51
    5eba:	88 7f       	andi	r24, 0xF8	; 248
    5ebc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER ;
    5ebe:	83 b7       	in	r24, 0x33	; 51
    5ec0:	82 60       	ori	r24, 0x02	; 2
    5ec2:	83 bf       	out	0x33, r24	; 51
}
    5ec4:	08 95       	ret

00005ec6 <TIMER1_voidInit>:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    5ec6:	8f b5       	in	r24, 0x2f	; 47
    5ec8:	8e 7f       	andi	r24, 0xFE	; 254
    5eca:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    5ecc:	8f b5       	in	r24, 0x2f	; 47
    5ece:	82 60       	ori	r24, 0x02	; 2
    5ed0:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    5ed2:	8e b5       	in	r24, 0x2e	; 46
    5ed4:	88 60       	ori	r24, 0x08	; 8
    5ed6:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    5ed8:	8e b5       	in	r24, 0x2e	; 46
    5eda:	80 61       	ori	r24, 0x10	; 16
    5edc:	8e bd       	out	0x2e, r24	; 46
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    5ede:	8c eb       	ldi	r24, 0xBC	; 188
    5ee0:	92 e0       	ldi	r25, 0x02	; 2
    5ee2:	9b bd       	out	0x2b, r25	; 43
    5ee4:	8a bd       	out	0x2a, r24	; 42
			OCR1B = TIMER1_CTCB_VAL ;
    5ee6:	19 bc       	out	0x29, r1	; 41
    5ee8:	18 bc       	out	0x28, r1	; 40

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    5eea:	80 e2       	ldi	r24, 0x20	; 32
    5eec:	9e e4       	ldi	r25, 0x4E	; 78
    5eee:	97 bd       	out	0x27, r25	; 39
    5ef0:	86 bd       	out	0x26, r24	; 38

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    5ef2:	8e b5       	in	r24, 0x2e	; 46
    5ef4:	80 64       	ori	r24, 0x40	; 64
    5ef6:	8e bd       	out	0x2e, r24	; 46
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    5ef8:	8f b5       	in	r24, 0x2f	; 47
    5efa:	8f 7b       	andi	r24, 0xBF	; 191
    5efc:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    5efe:	8f b5       	in	r24, 0x2f	; 47
    5f00:	80 68       	ori	r24, 0x80	; 128
    5f02:	8f bd       	out	0x2f, r24	; 47
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    5f04:	8f b5       	in	r24, 0x2f	; 47
    5f06:	8f 7e       	andi	r24, 0xEF	; 239
    5f08:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    5f0a:	8f b5       	in	r24, 0x2f	; 47
    5f0c:	80 62       	ori	r24, 0x20	; 32
    5f0e:	8f bd       	out	0x2f, r24	; 47
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    5f10:	89 b7       	in	r24, 0x39	; 57
    5f12:	8b 7f       	andi	r24, 0xFB	; 251
    5f14:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    5f16:	89 b7       	in	r24, 0x39	; 57
    5f18:	8f 7e       	andi	r24, 0xEF	; 239
    5f1a:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    5f1c:	89 b7       	in	r24, 0x39	; 57
    5f1e:	87 7f       	andi	r24, 0xF7	; 247
    5f20:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    5f22:	89 b7       	in	r24, 0x39	; 57
    5f24:	8f 7d       	andi	r24, 0xDF	; 223
    5f26:	89 bf       	out	0x39, r24	; 57
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    5f28:	8e b5       	in	r24, 0x2e	; 46
    5f2a:	88 7f       	andi	r24, 0xF8	; 248
    5f2c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    5f2e:	8e b5       	in	r24, 0x2e	; 46
    5f30:	82 60       	ori	r24, 0x02	; 2
    5f32:	8e bd       	out	0x2e, r24	; 46


}
    5f34:	08 95       	ret

00005f36 <TIMER2_voidInit>:
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    5f36:	85 b5       	in	r24, 0x25	; 37
    5f38:	8f 7b       	andi	r24, 0xBF	; 191
    5f3a:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    5f3c:	85 b5       	in	r24, 0x25	; 37
    5f3e:	88 60       	ori	r24, 0x08	; 8
    5f40:	85 bd       	out	0x25, r24	; 37

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    5f42:	8a ef       	ldi	r24, 0xFA	; 250
    5f44:	83 bd       	out	0x23, r24	; 35
            /*Set OCR2 mode*/
            #if TIMER2_OC2_MODE == TIMER_OC_DISCONNECTED
            CLR_BIT(TCCR2 , TCCR2_COM20) ;
    5f46:	85 b5       	in	r24, 0x25	; 37
    5f48:	8f 7e       	andi	r24, 0xEF	; 239
    5f4a:	85 bd       	out	0x25, r24	; 37
            CLR_BIT(TCCR2 , TCCR2_COM21) ;
    5f4c:	85 b5       	in	r24, 0x25	; 37
    5f4e:	8f 7d       	andi	r24, 0xDF	; 223
    5f50:	85 bd       	out	0x25, r24	; 37
            #endif
			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    5f52:	89 b7       	in	r24, 0x39	; 57
    5f54:	80 68       	ori	r24, 0x80	; 128
    5f56:	89 bf       	out	0x39, r24	; 57
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    5f58:	85 b5       	in	r24, 0x25	; 37
    5f5a:	88 7f       	andi	r24, 0xF8	; 248
    5f5c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER ;
    5f5e:	85 b5       	in	r24, 0x25	; 37
    5f60:	82 60       	ori	r24, 0x02	; 2
    5f62:	85 bd       	out	0x25, r24	; 37
}
    5f64:	08 95       	ret

00005f66 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
	TCNT0 = Copy_u8Preload ;
    5f66:	82 bf       	out	0x32, r24	; 50
}
    5f68:	08 95       	ret

00005f6a <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
	TCNT1 = Copy_u16Preload ;
    5f6a:	9d bd       	out	0x2d, r25	; 45
    5f6c:	8c bd       	out	0x2c, r24	; 44
}
    5f6e:	08 95       	ret

00005f70 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
	TCNT2 = Copy_u8Preload ;
    5f70:	84 bd       	out	0x24, r24	; 36
}
    5f72:	08 95       	ret

00005f74 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
	OCR0 = Copy_u8CTC ;
    5f74:	8c bf       	out	0x3c, r24	; 60
}
    5f76:	08 95       	ret

00005f78 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)//ton
{
	OCR1A = Copy_u16CTCA ;
    5f78:	9b bd       	out	0x2b, r25	; 43
    5f7a:	8a bd       	out	0x2a, r24	; 42
}
    5f7c:	08 95       	ret

00005f7e <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
	OCR1B = Copy_u16CTCB ;
    5f7e:	99 bd       	out	0x29, r25	; 41
    5f80:	88 bd       	out	0x28, r24	; 40
}
    5f82:	08 95       	ret

00005f84 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
	OCR2 = Copy_u8CTC ;
    5f84:	83 bd       	out	0x23, r24	; 35
}
    5f86:	08 95       	ret

00005f88 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)//period
{
	ICR1 = Copy_u16ICR1 ;
    5f88:	97 bd       	out	0x27, r25	; 39
    5f8a:	86 bd       	out	0x26, r24	; 38
}
    5f8c:	08 95       	ret

00005f8e <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
	return TCNT0 ;
    5f8e:	82 b7       	in	r24, 0x32	; 50
}
    5f90:	08 95       	ret

00005f92 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
	return TCNT1 ;
    5f92:	2c b5       	in	r18, 0x2c	; 44
    5f94:	3d b5       	in	r19, 0x2d	; 45
}
    5f96:	c9 01       	movw	r24, r18
    5f98:	08 95       	ret

00005f9a <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
	return TCNT2 ;
    5f9a:	84 b5       	in	r24, 0x24	; 36
}
    5f9c:	08 95       	ret

00005f9e <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
	OCR1A = Copy_u16CompareValue;
    5f9e:	9b bd       	out	0x2b, r25	; 43
    5fa0:	8a bd       	out	0x2a, r24	; 42
}
    5fa2:	08 95       	ret

00005fa4 <TIMER_voidICUInitEnable>:
*/
void TIMER_voidICUInitEnable(void)
{
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    5fa4:	8e b5       	in	r24, 0x2e	; 46
    5fa6:	80 64       	ori	r24, 0x40	; 64
    5fa8:	8e bd       	out	0x2e, r24	; 46
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    5faa:	89 b7       	in	r24, 0x39	; 57
    5fac:	80 62       	ori	r24, 0x20	; 32
    5fae:	89 bf       	out	0x39, r24	; 57
}
    5fb0:	08 95       	ret

00005fb2 <TIMER_voidICUSetTriggerEdge>:
ES_t TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
	ES_t Local_u8ErrorStatus = ES_OK ;

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    5fb2:	81 30       	cpi	r24, 0x01	; 1
    5fb4:	49 f0       	breq	.+18     	; 0x5fc8 <TIMER_voidICUSetTriggerEdge+0x16>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    5fb6:	88 23       	and	r24, r24
    5fb8:	29 f4       	brne	.+10     	; 0x5fc4 <TIMER_voidICUSetTriggerEdge+0x12>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    5fba:	8e b5       	in	r24, 0x2e	; 46
    5fbc:	8f 7b       	andi	r24, 0xBF	; 191
    5fbe:	8e bd       	out	0x2e, r24	; 46
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorStatus = ES_NOT_OK ;
	}
	return Local_u8ErrorStatus;

}
    5fc2:	08 95       	ret
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    5fc4:	80 e0       	ldi	r24, 0x00	; 0
    5fc6:	08 95       	ret
	ES_t Local_u8ErrorStatus = ES_OK ;

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    5fc8:	8e b5       	in	r24, 0x2e	; 46
    5fca:	80 64       	ori	r24, 0x40	; 64
    5fcc:	8e bd       	out	0x2e, r24	; 46
    5fce:	81 e0       	ldi	r24, 0x01	; 1
    5fd0:	08 95       	ret

00005fd2 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    5fd2:	89 b7       	in	r24, 0x39	; 57
    5fd4:	80 62       	ori	r24, 0x20	; 32
    5fd6:	89 bf       	out	0x39, r24	; 57
}
    5fd8:	08 95       	ret

00005fda <TIMER_voidICUDisableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    5fda:	89 b7       	in	r24, 0x39	; 57
    5fdc:	8f 7d       	andi	r24, 0xDF	; 223
    5fde:	89 bf       	out	0x39, r24	; 57
}
    5fe0:	08 95       	ret

00005fe2 <Timer0_OV_InterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Timer0_OV_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE0);
    5fe2:	89 b7       	in	r24, 0x39	; 57
    5fe4:	81 60       	ori	r24, 0x01	; 1
    5fe6:	89 bf       	out	0x39, r24	; 57
}
    5fe8:	08 95       	ret

00005fea <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    5fea:	89 b7       	in	r24, 0x39	; 57
    5fec:	8e 7f       	andi	r24, 0xFE	; 254
    5fee:	89 bf       	out	0x39, r24	; 57
}
    5ff0:	08 95       	ret

00005ff2 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE0);
    5ff2:	89 b7       	in	r24, 0x39	; 57
    5ff4:	82 60       	ori	r24, 0x02	; 2
    5ff6:	89 bf       	out	0x39, r24	; 57
}
    5ff8:	08 95       	ret

00005ffa <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    5ffa:	89 b7       	in	r24, 0x39	; 57
    5ffc:	8d 7f       	andi	r24, 0xFD	; 253
    5ffe:	89 bf       	out	0x39, r24	; 57
}
    6000:	08 95       	ret

00006002 <Timer1_OVF_InterruptEnable>:

void Timer1_OVF_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE1);
    6002:	89 b7       	in	r24, 0x39	; 57
    6004:	84 60       	ori	r24, 0x04	; 4
    6006:	89 bf       	out	0x39, r24	; 57
}
    6008:	08 95       	ret

0000600a <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    600a:	89 b7       	in	r24, 0x39	; 57
    600c:	8b 7f       	andi	r24, 0xFB	; 251
    600e:	89 bf       	out	0x39, r24	; 57
}
    6010:	08 95       	ret

00006012 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1A);
    6012:	89 b7       	in	r24, 0x39	; 57
    6014:	80 61       	ori	r24, 0x10	; 16
    6016:	89 bf       	out	0x39, r24	; 57
}
    6018:	08 95       	ret

0000601a <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
    601a:	89 b7       	in	r24, 0x39	; 57
    601c:	8f 7e       	andi	r24, 0xEF	; 239
    601e:	89 bf       	out	0x39, r24	; 57
}
    6020:	08 95       	ret

00006022 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1B);
    6022:	89 b7       	in	r24, 0x39	; 57
    6024:	88 60       	ori	r24, 0x08	; 8
    6026:	89 bf       	out	0x39, r24	; 57
}
    6028:	08 95       	ret

0000602a <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
    602a:	89 b7       	in	r24, 0x39	; 57
    602c:	87 7f       	andi	r24, 0xF7	; 247
    602e:	89 bf       	out	0x39, r24	; 57
}
    6030:	08 95       	ret

00006032 <Timer2_OV_InterruptEnable>:

void Timer2_OV_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE2);
    6032:	89 b7       	in	r24, 0x39	; 57
    6034:	80 64       	ori	r24, 0x40	; 64
    6036:	89 bf       	out	0x39, r24	; 57
}
    6038:	08 95       	ret

0000603a <Timer2_OV_InterruptDisable>:
void Timer2_OV_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_TOIE2);
    603a:	89 b7       	in	r24, 0x39	; 57
    603c:	8f 7b       	andi	r24, 0xBF	; 191
    603e:	89 bf       	out	0x39, r24	; 57
}
    6040:	08 95       	ret

00006042 <Timer2_OC_InterruptEnable>:
void Timer2_OC_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE2);
    6042:	89 b7       	in	r24, 0x39	; 57
    6044:	80 68       	ori	r24, 0x80	; 128
    6046:	89 bf       	out	0x39, r24	; 57
}
    6048:	08 95       	ret

0000604a <Timer2_OC_InterruptDisable>:

void Timer2_OC_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE2);
    604a:	89 b7       	in	r24, 0x39	; 57
    604c:	8f 77       	andi	r24, 0x7F	; 127
    604e:	89 bf       	out	0x39, r24	; 57
}
    6050:	08 95       	ret

00006052 <TIMER_u16GetICR>:



u16 TIMER_u16GetICR(void)
{
	return ICR1;
    6052:	26 b5       	in	r18, 0x26	; 38
    6054:	37 b5       	in	r19, 0x27	; 39
}
    6056:	c9 01       	movw	r24, r18
    6058:	08 95       	ret

0000605a <TIMER_voidWDTSleep>:

/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    605a:	81 b5       	in	r24, 0x21	; 33
    605c:	88 7f       	andi	r24, 0xF8	; 248
    605e:	81 bd       	out	0x21, r24	; 33
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    6060:	81 b5       	in	r24, 0x21	; 33
    6062:	86 60       	ori	r24, 0x06	; 6
    6064:	81 bd       	out	0x21, r24	; 33
}
    6066:	08 95       	ret

00006068 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
	SET_BIT (WDTCR , WDTCR_WDE);
    6068:	81 b5       	in	r24, 0x21	; 33
    606a:	88 60       	ori	r24, 0x08	; 8
    606c:	81 bd       	out	0x21, r24	; 33
}
    606e:	08 95       	ret

00006070 <TIMER_voidWDTDisable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    6070:	81 b5       	in	r24, 0x21	; 33
    6072:	88 61       	ori	r24, 0x18	; 24
    6074:	81 bd       	out	0x21, r24	; 33
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    6076:	11 bc       	out	0x21, r1	; 33
}
    6078:	08 95       	ret

0000607a <TIMER_u8SetCallBack>:

ES_t TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	ES_t Local_u8ErrorState = ES_OK ;

	if (Copy_pvCallBackFunc != NULL)
    607a:	00 97       	sbiw	r24, 0x00	; 0
    607c:	51 f0       	breq	.+20     	; 0x6092 <TIMER_u8SetCallBack+0x18>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    607e:	e6 2f       	mov	r30, r22
    6080:	f0 e0       	ldi	r31, 0x00	; 0
    6082:	ee 0f       	add	r30, r30
    6084:	ff 1f       	adc	r31, r31
    6086:	e0 50       	subi	r30, 0x00	; 0
    6088:	fe 4f       	sbci	r31, 0xFE	; 254
    608a:	91 83       	std	Z+1, r25	; 0x01
    608c:	80 83       	st	Z, r24
    608e:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
	}

	return Local_u8ErrorState ;
}
    6090:	08 95       	ret

ES_t TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	ES_t Local_u8ErrorState = ES_OK ;

	if (Copy_pvCallBackFunc != NULL)
    6092:	82 e0       	ldi	r24, 0x02	; 2
    6094:	08 95       	ret

00006096 <__vector_11>:
}

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    6096:	1f 92       	push	r1
    6098:	0f 92       	push	r0
    609a:	0f b6       	in	r0, 0x3f	; 63
    609c:	0f 92       	push	r0
    609e:	11 24       	eor	r1, r1
    60a0:	2f 93       	push	r18
    60a2:	3f 93       	push	r19
    60a4:	4f 93       	push	r20
    60a6:	5f 93       	push	r21
    60a8:	6f 93       	push	r22
    60aa:	7f 93       	push	r23
    60ac:	8f 93       	push	r24
    60ae:	9f 93       	push	r25
    60b0:	af 93       	push	r26
    60b2:	bf 93       	push	r27
    60b4:	ef 93       	push	r30
    60b6:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    60b8:	e0 91 16 02 	lds	r30, 0x0216
    60bc:	f0 91 17 02 	lds	r31, 0x0217
    60c0:	30 97       	sbiw	r30, 0x00	; 0
    60c2:	09 f0       	breq	.+2      	; 0x60c6 <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    60c4:	09 95       	icall
	}
}
    60c6:	ff 91       	pop	r31
    60c8:	ef 91       	pop	r30
    60ca:	bf 91       	pop	r27
    60cc:	af 91       	pop	r26
    60ce:	9f 91       	pop	r25
    60d0:	8f 91       	pop	r24
    60d2:	7f 91       	pop	r23
    60d4:	6f 91       	pop	r22
    60d6:	5f 91       	pop	r21
    60d8:	4f 91       	pop	r20
    60da:	3f 91       	pop	r19
    60dc:	2f 91       	pop	r18
    60de:	0f 90       	pop	r0
    60e0:	0f be       	out	0x3f, r0	; 63
    60e2:	0f 90       	pop	r0
    60e4:	1f 90       	pop	r1
    60e6:	18 95       	reti

000060e8 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    60e8:	1f 92       	push	r1
    60ea:	0f 92       	push	r0
    60ec:	0f b6       	in	r0, 0x3f	; 63
    60ee:	0f 92       	push	r0
    60f0:	11 24       	eor	r1, r1
    60f2:	2f 93       	push	r18
    60f4:	3f 93       	push	r19
    60f6:	4f 93       	push	r20
    60f8:	5f 93       	push	r21
    60fa:	6f 93       	push	r22
    60fc:	7f 93       	push	r23
    60fe:	8f 93       	push	r24
    6100:	9f 93       	push	r25
    6102:	af 93       	push	r26
    6104:	bf 93       	push	r27
    6106:	ef 93       	push	r30
    6108:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    610a:	e0 91 14 02 	lds	r30, 0x0214
    610e:	f0 91 15 02 	lds	r31, 0x0215
    6112:	30 97       	sbiw	r30, 0x00	; 0
    6114:	09 f0       	breq	.+2      	; 0x6118 <__vector_10+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    6116:	09 95       	icall
	}
}
    6118:	ff 91       	pop	r31
    611a:	ef 91       	pop	r30
    611c:	bf 91       	pop	r27
    611e:	af 91       	pop	r26
    6120:	9f 91       	pop	r25
    6122:	8f 91       	pop	r24
    6124:	7f 91       	pop	r23
    6126:	6f 91       	pop	r22
    6128:	5f 91       	pop	r21
    612a:	4f 91       	pop	r20
    612c:	3f 91       	pop	r19
    612e:	2f 91       	pop	r18
    6130:	0f 90       	pop	r0
    6132:	0f be       	out	0x3f, r0	; 63
    6134:	0f 90       	pop	r0
    6136:	1f 90       	pop	r1
    6138:	18 95       	reti

0000613a <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    613a:	1f 92       	push	r1
    613c:	0f 92       	push	r0
    613e:	0f b6       	in	r0, 0x3f	; 63
    6140:	0f 92       	push	r0
    6142:	11 24       	eor	r1, r1
    6144:	2f 93       	push	r18
    6146:	3f 93       	push	r19
    6148:	4f 93       	push	r20
    614a:	5f 93       	push	r21
    614c:	6f 93       	push	r22
    614e:	7f 93       	push	r23
    6150:	8f 93       	push	r24
    6152:	9f 93       	push	r25
    6154:	af 93       	push	r26
    6156:	bf 93       	push	r27
    6158:	ef 93       	push	r30
    615a:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    615c:	e0 91 12 02 	lds	r30, 0x0212
    6160:	f0 91 13 02 	lds	r31, 0x0213
    6164:	30 97       	sbiw	r30, 0x00	; 0
    6166:	09 f0       	breq	.+2      	; 0x616a <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    6168:	09 95       	icall
	}
}
    616a:	ff 91       	pop	r31
    616c:	ef 91       	pop	r30
    616e:	bf 91       	pop	r27
    6170:	af 91       	pop	r26
    6172:	9f 91       	pop	r25
    6174:	8f 91       	pop	r24
    6176:	7f 91       	pop	r23
    6178:	6f 91       	pop	r22
    617a:	5f 91       	pop	r21
    617c:	4f 91       	pop	r20
    617e:	3f 91       	pop	r19
    6180:	2f 91       	pop	r18
    6182:	0f 90       	pop	r0
    6184:	0f be       	out	0x3f, r0	; 63
    6186:	0f 90       	pop	r0
    6188:	1f 90       	pop	r1
    618a:	18 95       	reti

0000618c <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    618c:	1f 92       	push	r1
    618e:	0f 92       	push	r0
    6190:	0f b6       	in	r0, 0x3f	; 63
    6192:	0f 92       	push	r0
    6194:	11 24       	eor	r1, r1
    6196:	2f 93       	push	r18
    6198:	3f 93       	push	r19
    619a:	4f 93       	push	r20
    619c:	5f 93       	push	r21
    619e:	6f 93       	push	r22
    61a0:	7f 93       	push	r23
    61a2:	8f 93       	push	r24
    61a4:	9f 93       	push	r25
    61a6:	af 93       	push	r26
    61a8:	bf 93       	push	r27
    61aa:	ef 93       	push	r30
    61ac:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    61ae:	e0 91 10 02 	lds	r30, 0x0210
    61b2:	f0 91 11 02 	lds	r31, 0x0211
    61b6:	30 97       	sbiw	r30, 0x00	; 0
    61b8:	09 f0       	breq	.+2      	; 0x61bc <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    61ba:	09 95       	icall
	}
}
    61bc:	ff 91       	pop	r31
    61be:	ef 91       	pop	r30
    61c0:	bf 91       	pop	r27
    61c2:	af 91       	pop	r26
    61c4:	9f 91       	pop	r25
    61c6:	8f 91       	pop	r24
    61c8:	7f 91       	pop	r23
    61ca:	6f 91       	pop	r22
    61cc:	5f 91       	pop	r21
    61ce:	4f 91       	pop	r20
    61d0:	3f 91       	pop	r19
    61d2:	2f 91       	pop	r18
    61d4:	0f 90       	pop	r0
    61d6:	0f be       	out	0x3f, r0	; 63
    61d8:	0f 90       	pop	r0
    61da:	1f 90       	pop	r1
    61dc:	18 95       	reti

000061de <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    61de:	1f 92       	push	r1
    61e0:	0f 92       	push	r0
    61e2:	0f b6       	in	r0, 0x3f	; 63
    61e4:	0f 92       	push	r0
    61e6:	11 24       	eor	r1, r1
    61e8:	2f 93       	push	r18
    61ea:	3f 93       	push	r19
    61ec:	4f 93       	push	r20
    61ee:	5f 93       	push	r21
    61f0:	6f 93       	push	r22
    61f2:	7f 93       	push	r23
    61f4:	8f 93       	push	r24
    61f6:	9f 93       	push	r25
    61f8:	af 93       	push	r26
    61fa:	bf 93       	push	r27
    61fc:	ef 93       	push	r30
    61fe:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    6200:	e0 91 0e 02 	lds	r30, 0x020E
    6204:	f0 91 0f 02 	lds	r31, 0x020F
    6208:	30 97       	sbiw	r30, 0x00	; 0
    620a:	09 f0       	breq	.+2      	; 0x620e <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    620c:	09 95       	icall
	}
}
    620e:	ff 91       	pop	r31
    6210:	ef 91       	pop	r30
    6212:	bf 91       	pop	r27
    6214:	af 91       	pop	r26
    6216:	9f 91       	pop	r25
    6218:	8f 91       	pop	r24
    621a:	7f 91       	pop	r23
    621c:	6f 91       	pop	r22
    621e:	5f 91       	pop	r21
    6220:	4f 91       	pop	r20
    6222:	3f 91       	pop	r19
    6224:	2f 91       	pop	r18
    6226:	0f 90       	pop	r0
    6228:	0f be       	out	0x3f, r0	; 63
    622a:	0f 90       	pop	r0
    622c:	1f 90       	pop	r1
    622e:	18 95       	reti

00006230 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    6230:	1f 92       	push	r1
    6232:	0f 92       	push	r0
    6234:	0f b6       	in	r0, 0x3f	; 63
    6236:	0f 92       	push	r0
    6238:	11 24       	eor	r1, r1
    623a:	2f 93       	push	r18
    623c:	3f 93       	push	r19
    623e:	4f 93       	push	r20
    6240:	5f 93       	push	r21
    6242:	6f 93       	push	r22
    6244:	7f 93       	push	r23
    6246:	8f 93       	push	r24
    6248:	9f 93       	push	r25
    624a:	af 93       	push	r26
    624c:	bf 93       	push	r27
    624e:	ef 93       	push	r30
    6250:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    6252:	e0 91 0c 02 	lds	r30, 0x020C
    6256:	f0 91 0d 02 	lds	r31, 0x020D
    625a:	30 97       	sbiw	r30, 0x00	; 0
    625c:	09 f0       	breq	.+2      	; 0x6260 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    625e:	09 95       	icall
	}
}
    6260:	ff 91       	pop	r31
    6262:	ef 91       	pop	r30
    6264:	bf 91       	pop	r27
    6266:	af 91       	pop	r26
    6268:	9f 91       	pop	r25
    626a:	8f 91       	pop	r24
    626c:	7f 91       	pop	r23
    626e:	6f 91       	pop	r22
    6270:	5f 91       	pop	r21
    6272:	4f 91       	pop	r20
    6274:	3f 91       	pop	r19
    6276:	2f 91       	pop	r18
    6278:	0f 90       	pop	r0
    627a:	0f be       	out	0x3f, r0	; 63
    627c:	0f 90       	pop	r0
    627e:	1f 90       	pop	r1
    6280:	18 95       	reti

00006282 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    6282:	1f 92       	push	r1
    6284:	0f 92       	push	r0
    6286:	0f b6       	in	r0, 0x3f	; 63
    6288:	0f 92       	push	r0
    628a:	11 24       	eor	r1, r1
    628c:	2f 93       	push	r18
    628e:	3f 93       	push	r19
    6290:	4f 93       	push	r20
    6292:	5f 93       	push	r21
    6294:	6f 93       	push	r22
    6296:	7f 93       	push	r23
    6298:	8f 93       	push	r24
    629a:	9f 93       	push	r25
    629c:	af 93       	push	r26
    629e:	bf 93       	push	r27
    62a0:	ef 93       	push	r30
    62a2:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    62a4:	e0 91 0a 02 	lds	r30, 0x020A
    62a8:	f0 91 0b 02 	lds	r31, 0x020B
    62ac:	30 97       	sbiw	r30, 0x00	; 0
    62ae:	09 f0       	breq	.+2      	; 0x62b2 <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    62b0:	09 95       	icall
	}
}
    62b2:	ff 91       	pop	r31
    62b4:	ef 91       	pop	r30
    62b6:	bf 91       	pop	r27
    62b8:	af 91       	pop	r26
    62ba:	9f 91       	pop	r25
    62bc:	8f 91       	pop	r24
    62be:	7f 91       	pop	r23
    62c0:	6f 91       	pop	r22
    62c2:	5f 91       	pop	r21
    62c4:	4f 91       	pop	r20
    62c6:	3f 91       	pop	r19
    62c8:	2f 91       	pop	r18
    62ca:	0f 90       	pop	r0
    62cc:	0f be       	out	0x3f, r0	; 63
    62ce:	0f 90       	pop	r0
    62d0:	1f 90       	pop	r1
    62d2:	18 95       	reti

000062d4 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    62d4:	1f 92       	push	r1
    62d6:	0f 92       	push	r0
    62d8:	0f b6       	in	r0, 0x3f	; 63
    62da:	0f 92       	push	r0
    62dc:	11 24       	eor	r1, r1
    62de:	2f 93       	push	r18
    62e0:	3f 93       	push	r19
    62e2:	4f 93       	push	r20
    62e4:	5f 93       	push	r21
    62e6:	6f 93       	push	r22
    62e8:	7f 93       	push	r23
    62ea:	8f 93       	push	r24
    62ec:	9f 93       	push	r25
    62ee:	af 93       	push	r26
    62f0:	bf 93       	push	r27
    62f2:	ef 93       	push	r30
    62f4:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    62f6:	e0 91 08 02 	lds	r30, 0x0208
    62fa:	f0 91 09 02 	lds	r31, 0x0209
    62fe:	30 97       	sbiw	r30, 0x00	; 0
    6300:	09 f0       	breq	.+2      	; 0x6304 <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    6302:	09 95       	icall
	}
}
    6304:	ff 91       	pop	r31
    6306:	ef 91       	pop	r30
    6308:	bf 91       	pop	r27
    630a:	af 91       	pop	r26
    630c:	9f 91       	pop	r25
    630e:	8f 91       	pop	r24
    6310:	7f 91       	pop	r23
    6312:	6f 91       	pop	r22
    6314:	5f 91       	pop	r21
    6316:	4f 91       	pop	r20
    6318:	3f 91       	pop	r19
    631a:	2f 91       	pop	r18
    631c:	0f 90       	pop	r0
    631e:	0f be       	out	0x3f, r0	; 63
    6320:	0f 90       	pop	r0
    6322:	1f 90       	pop	r1
    6324:	18 95       	reti

00006326 <DIO_Enu_Init>:

ES_t DIO_Enu_Init(void)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    6326:	8f ef       	ldi	r24, 0xFF	; 255
    6328:	8a bb       	out	0x1a, r24	; 26
    DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    632a:	87 bb       	out	0x17, r24	; 23
    DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    632c:	84 bb       	out	0x14, r24	; 20
    DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    632e:	81 bb       	out	0x11, r24	; 17

    PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    6330:	1b ba       	out	0x1b, r1	; 27
    PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    6332:	18 ba       	out	0x18, r1	; 24
    PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    6334:	15 ba       	out	0x15, r1	; 21
    PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    6336:	12 ba       	out	0x12, r1	; 18

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    6338:	81 e0       	ldi	r24, 0x01	; 1
    633a:	08 95       	ret

0000633c <DIO_Enu_SetPortDirection>:

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    633c:	84 30       	cpi	r24, 0x04	; 4
    633e:	50 f4       	brcc	.+20     	; 0x6354 <DIO_Enu_SetPortDirection+0x18>
    {
        switch (Copy_u8PortID)
    6340:	81 30       	cpi	r24, 0x01	; 1
    6342:	69 f0       	breq	.+26     	; 0x635e <DIO_Enu_SetPortDirection+0x22>
    6344:	81 30       	cpi	r24, 0x01	; 1
    6346:	40 f0       	brcs	.+16     	; 0x6358 <DIO_Enu_SetPortDirection+0x1c>
    6348:	82 30       	cpi	r24, 0x02	; 2
    634a:	79 f0       	breq	.+30     	; 0x636a <DIO_Enu_SetPortDirection+0x2e>
    634c:	83 30       	cpi	r24, 0x03	; 3
    634e:	51 f0       	breq	.+20     	; 0x6364 <DIO_Enu_SetPortDirection+0x28>
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
    6350:	81 e0       	ldi	r24, 0x01	; 1
    6352:	08 95       	ret

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    6354:	83 e0       	ldi	r24, 0x03	; 3
    6356:	08 95       	ret
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            DDRA = Copy_u8Value;
    6358:	6a bb       	out	0x1a, r22	; 26
    635a:	81 e0       	ldi	r24, 0x01	; 1
    635c:	08 95       	ret
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
    635e:	67 bb       	out	0x17, r22	; 23
    6360:	81 e0       	ldi	r24, 0x01	; 1
    6362:	08 95       	ret
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
            break;
        case DIO_PORTD:
            DDRD = Copy_u8Value;
    6364:	61 bb       	out	0x11, r22	; 17
    6366:	81 e0       	ldi	r24, 0x01	; 1
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }
    return Local_EnuErrorState;
}
    6368:	08 95       	ret
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
    636a:	64 bb       	out	0x14, r22	; 20
    636c:	81 e0       	ldi	r24, 0x01	; 1
    636e:	08 95       	ret

00006370 <DIO_Enu_SetPortValue>:

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    6370:	84 30       	cpi	r24, 0x04	; 4
    6372:	50 f4       	brcc	.+20     	; 0x6388 <DIO_Enu_SetPortValue+0x18>
    {
        switch (Copy_u8PortID)
    6374:	81 30       	cpi	r24, 0x01	; 1
    6376:	69 f0       	breq	.+26     	; 0x6392 <DIO_Enu_SetPortValue+0x22>
    6378:	81 30       	cpi	r24, 0x01	; 1
    637a:	40 f0       	brcs	.+16     	; 0x638c <DIO_Enu_SetPortValue+0x1c>
    637c:	82 30       	cpi	r24, 0x02	; 2
    637e:	79 f0       	breq	.+30     	; 0x639e <DIO_Enu_SetPortValue+0x2e>
    6380:	83 30       	cpi	r24, 0x03	; 3
    6382:	51 f0       	breq	.+20     	; 0x6398 <DIO_Enu_SetPortValue+0x28>
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
    6384:	81 e0       	ldi	r24, 0x01	; 1
    6386:	08 95       	ret

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    6388:	83 e0       	ldi	r24, 0x03	; 3
    638a:	08 95       	ret
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            PORTA = Copy_u8Value;
    638c:	6b bb       	out	0x1b, r22	; 27
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
    6392:	68 bb       	out	0x18, r22	; 24
    6394:	81 e0       	ldi	r24, 0x01	; 1
    6396:	08 95       	ret
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
            break;
        case DIO_PORTD:
            PORTD = Copy_u8Value;
    6398:	62 bb       	out	0x12, r22	; 18
    639a:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    639c:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
    639e:	65 bb       	out	0x15, r22	; 21
    63a0:	81 e0       	ldi	r24, 0x01	; 1
    63a2:	08 95       	ret

000063a4 <DIO_Enu_SetPinDirection>:
}

ES_t DIO_Enu_SetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;
    if (Copy_u8PortID <= DIO_PORTD &&
    63a4:	84 30       	cpi	r24, 0x04	; 4
    63a6:	20 f4       	brcc	.+8      	; 0x63b0 <DIO_Enu_SetPinDirection+0xc>
    63a8:	68 30       	cpi	r22, 0x08	; 8
    63aa:	10 f4       	brcc	.+4      	; 0x63b0 <DIO_Enu_SetPinDirection+0xc>
    63ac:	42 30       	cpi	r20, 0x02	; 2
    63ae:	10 f0       	brcs	.+4      	; 0x63b4 <DIO_Enu_SetPinDirection+0x10>
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    63b0:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    63b2:	08 95       	ret
    ES_t Local_EnuErrorState = ES_NOT_OK;
    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
    63b4:	81 30       	cpi	r24, 0x01	; 1
    63b6:	09 f4       	brne	.+2      	; 0x63ba <DIO_Enu_SetPinDirection+0x16>
    63b8:	48 c0       	rjmp	.+144    	; 0x644a <DIO_Enu_SetPinDirection+0xa6>
    63ba:	81 30       	cpi	r24, 0x01	; 1
    63bc:	b0 f4       	brcc	.+44     	; 0x63ea <DIO_Enu_SetPinDirection+0x46>
        {
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    63be:	8a b3       	in	r24, 0x1a	; 26
    63c0:	21 e0       	ldi	r18, 0x01	; 1
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	06 2e       	mov	r0, r22
    63c6:	02 c0       	rjmp	.+4      	; 0x63cc <DIO_Enu_SetPinDirection+0x28>
    63c8:	22 0f       	add	r18, r18
    63ca:	33 1f       	adc	r19, r19
    63cc:	0a 94       	dec	r0
    63ce:	e2 f7       	brpl	.-8      	; 0x63c8 <DIO_Enu_SetPinDirection+0x24>
    63d0:	20 95       	com	r18
    63d2:	28 23       	and	r18, r24
            DDRA |= (Copy_u8Value << Copy_u8PinID);
    63d4:	84 2f       	mov	r24, r20
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	02 c0       	rjmp	.+4      	; 0x63de <DIO_Enu_SetPinDirection+0x3a>
    63da:	88 0f       	add	r24, r24
    63dc:	99 1f       	adc	r25, r25
    63de:	6a 95       	dec	r22
    63e0:	e2 f7       	brpl	.-8      	; 0x63da <DIO_Enu_SetPinDirection+0x36>
    63e2:	28 2b       	or	r18, r24
    63e4:	2a bb       	out	0x1a, r18	; 26
    63e6:	81 e0       	ldi	r24, 0x01	; 1
    63e8:	08 95       	ret
    ES_t Local_EnuErrorState = ES_NOT_OK;
    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
    63ea:	82 30       	cpi	r24, 0x02	; 2
    63ec:	c1 f0       	breq	.+48     	; 0x641e <DIO_Enu_SetPinDirection+0x7a>
    63ee:	83 30       	cpi	r24, 0x03	; 3
    63f0:	a1 f4       	brne	.+40     	; 0x641a <DIO_Enu_SetPinDirection+0x76>
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    63f2:	81 b3       	in	r24, 0x11	; 17
    63f4:	21 e0       	ldi	r18, 0x01	; 1
    63f6:	30 e0       	ldi	r19, 0x00	; 0
    63f8:	06 2e       	mov	r0, r22
    63fa:	02 c0       	rjmp	.+4      	; 0x6400 <DIO_Enu_SetPinDirection+0x5c>
    63fc:	22 0f       	add	r18, r18
    63fe:	33 1f       	adc	r19, r19
    6400:	0a 94       	dec	r0
    6402:	e2 f7       	brpl	.-8      	; 0x63fc <DIO_Enu_SetPinDirection+0x58>
    6404:	20 95       	com	r18
    6406:	28 23       	and	r18, r24
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    6408:	84 2f       	mov	r24, r20
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	02 c0       	rjmp	.+4      	; 0x6412 <DIO_Enu_SetPinDirection+0x6e>
    640e:	88 0f       	add	r24, r24
    6410:	99 1f       	adc	r25, r25
    6412:	6a 95       	dec	r22
    6414:	e2 f7       	brpl	.-8      	; 0x640e <DIO_Enu_SetPinDirection+0x6a>
    6416:	28 2b       	or	r18, r24
    6418:	21 bb       	out	0x11, r18	; 17
    641a:	81 e0       	ldi	r24, 0x01	; 1
    641c:	08 95       	ret
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRB |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    641e:	84 b3       	in	r24, 0x14	; 20
    6420:	21 e0       	ldi	r18, 0x01	; 1
    6422:	30 e0       	ldi	r19, 0x00	; 0
    6424:	06 2e       	mov	r0, r22
    6426:	02 c0       	rjmp	.+4      	; 0x642c <DIO_Enu_SetPinDirection+0x88>
    6428:	22 0f       	add	r18, r18
    642a:	33 1f       	adc	r19, r19
    642c:	0a 94       	dec	r0
    642e:	e2 f7       	brpl	.-8      	; 0x6428 <DIO_Enu_SetPinDirection+0x84>
    6430:	20 95       	com	r18
    6432:	28 23       	and	r18, r24
            DDRC |= (Copy_u8Value << Copy_u8PinID);
    6434:	84 2f       	mov	r24, r20
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	02 c0       	rjmp	.+4      	; 0x643e <DIO_Enu_SetPinDirection+0x9a>
    643a:	88 0f       	add	r24, r24
    643c:	99 1f       	adc	r25, r25
    643e:	6a 95       	dec	r22
    6440:	e2 f7       	brpl	.-8      	; 0x643a <DIO_Enu_SetPinDirection+0x96>
    6442:	28 2b       	or	r18, r24
    6444:	24 bb       	out	0x14, r18	; 20
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	08 95       	ret
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRA |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    644a:	87 b3       	in	r24, 0x17	; 23
    644c:	21 e0       	ldi	r18, 0x01	; 1
    644e:	30 e0       	ldi	r19, 0x00	; 0
    6450:	06 2e       	mov	r0, r22
    6452:	02 c0       	rjmp	.+4      	; 0x6458 <DIO_Enu_SetPinDirection+0xb4>
    6454:	22 0f       	add	r18, r18
    6456:	33 1f       	adc	r19, r19
    6458:	0a 94       	dec	r0
    645a:	e2 f7       	brpl	.-8      	; 0x6454 <DIO_Enu_SetPinDirection+0xb0>
    645c:	20 95       	com	r18
    645e:	28 23       	and	r18, r24
            DDRB |= (Copy_u8Value << Copy_u8PinID);
    6460:	84 2f       	mov	r24, r20
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	02 c0       	rjmp	.+4      	; 0x646a <DIO_Enu_SetPinDirection+0xc6>
    6466:	88 0f       	add	r24, r24
    6468:	99 1f       	adc	r25, r25
    646a:	6a 95       	dec	r22
    646c:	e2 f7       	brpl	.-8      	; 0x6466 <DIO_Enu_SetPinDirection+0xc2>
    646e:	28 2b       	or	r18, r24
    6470:	27 bb       	out	0x17, r18	; 23
    6472:	81 e0       	ldi	r24, 0x01	; 1
    6474:	08 95       	ret

00006476 <DIO_Enu_SetPinValue>:

ES_t DIO_Enu_SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD &&
    6476:	84 30       	cpi	r24, 0x04	; 4
    6478:	20 f4       	brcc	.+8      	; 0x6482 <DIO_Enu_SetPinValue+0xc>
    647a:	68 30       	cpi	r22, 0x08	; 8
    647c:	10 f4       	brcc	.+4      	; 0x6482 <DIO_Enu_SetPinValue+0xc>
    647e:	42 30       	cpi	r20, 0x02	; 2
    6480:	10 f0       	brcs	.+4      	; 0x6486 <DIO_Enu_SetPinValue+0x10>
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    6482:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    6484:	08 95       	ret

    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    6486:	81 30       	cpi	r24, 0x01	; 1
    6488:	09 f4       	brne	.+2      	; 0x648c <DIO_Enu_SetPinValue+0x16>
    648a:	48 c0       	rjmp	.+144    	; 0x651c <DIO_Enu_SetPinValue+0xa6>
    648c:	81 30       	cpi	r24, 0x01	; 1
    648e:	b0 f4       	brcc	.+44     	; 0x64bc <DIO_Enu_SetPinValue+0x46>
        {
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    6490:	8b b3       	in	r24, 0x1b	; 27
    6492:	21 e0       	ldi	r18, 0x01	; 1
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	06 2e       	mov	r0, r22
    6498:	02 c0       	rjmp	.+4      	; 0x649e <DIO_Enu_SetPinValue+0x28>
    649a:	22 0f       	add	r18, r18
    649c:	33 1f       	adc	r19, r19
    649e:	0a 94       	dec	r0
    64a0:	e2 f7       	brpl	.-8      	; 0x649a <DIO_Enu_SetPinValue+0x24>
    64a2:	20 95       	com	r18
    64a4:	28 23       	and	r18, r24
            PORTA |= (Copy_u8Value << Copy_u8PinID);
    64a6:	84 2f       	mov	r24, r20
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	02 c0       	rjmp	.+4      	; 0x64b0 <DIO_Enu_SetPinValue+0x3a>
    64ac:	88 0f       	add	r24, r24
    64ae:	99 1f       	adc	r25, r25
    64b0:	6a 95       	dec	r22
    64b2:	e2 f7       	brpl	.-8      	; 0x64ac <DIO_Enu_SetPinValue+0x36>
    64b4:	28 2b       	or	r18, r24
    64b6:	2b bb       	out	0x1b, r18	; 27
    64b8:	81 e0       	ldi	r24, 0x01	; 1
    64ba:	08 95       	ret

    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    64bc:	82 30       	cpi	r24, 0x02	; 2
    64be:	c1 f0       	breq	.+48     	; 0x64f0 <DIO_Enu_SetPinValue+0x7a>
    64c0:	83 30       	cpi	r24, 0x03	; 3
    64c2:	a1 f4       	brne	.+40     	; 0x64ec <DIO_Enu_SetPinValue+0x76>
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    64c4:	82 b3       	in	r24, 0x12	; 18
    64c6:	21 e0       	ldi	r18, 0x01	; 1
    64c8:	30 e0       	ldi	r19, 0x00	; 0
    64ca:	06 2e       	mov	r0, r22
    64cc:	02 c0       	rjmp	.+4      	; 0x64d2 <DIO_Enu_SetPinValue+0x5c>
    64ce:	22 0f       	add	r18, r18
    64d0:	33 1f       	adc	r19, r19
    64d2:	0a 94       	dec	r0
    64d4:	e2 f7       	brpl	.-8      	; 0x64ce <DIO_Enu_SetPinValue+0x58>
    64d6:	20 95       	com	r18
    64d8:	28 23       	and	r18, r24
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    64da:	84 2f       	mov	r24, r20
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	02 c0       	rjmp	.+4      	; 0x64e4 <DIO_Enu_SetPinValue+0x6e>
    64e0:	88 0f       	add	r24, r24
    64e2:	99 1f       	adc	r25, r25
    64e4:	6a 95       	dec	r22
    64e6:	e2 f7       	brpl	.-8      	; 0x64e0 <DIO_Enu_SetPinValue+0x6a>
    64e8:	28 2b       	or	r18, r24
    64ea:	22 bb       	out	0x12, r18	; 18
    64ec:	81 e0       	ldi	r24, 0x01	; 1
    64ee:	08 95       	ret
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTB |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    64f0:	85 b3       	in	r24, 0x15	; 21
    64f2:	21 e0       	ldi	r18, 0x01	; 1
    64f4:	30 e0       	ldi	r19, 0x00	; 0
    64f6:	06 2e       	mov	r0, r22
    64f8:	02 c0       	rjmp	.+4      	; 0x64fe <DIO_Enu_SetPinValue+0x88>
    64fa:	22 0f       	add	r18, r18
    64fc:	33 1f       	adc	r19, r19
    64fe:	0a 94       	dec	r0
    6500:	e2 f7       	brpl	.-8      	; 0x64fa <DIO_Enu_SetPinValue+0x84>
    6502:	20 95       	com	r18
    6504:	28 23       	and	r18, r24
            PORTC |= (Copy_u8Value << Copy_u8PinID);
    6506:	84 2f       	mov	r24, r20
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <DIO_Enu_SetPinValue+0x9a>
    650c:	88 0f       	add	r24, r24
    650e:	99 1f       	adc	r25, r25
    6510:	6a 95       	dec	r22
    6512:	e2 f7       	brpl	.-8      	; 0x650c <DIO_Enu_SetPinValue+0x96>
    6514:	28 2b       	or	r18, r24
    6516:	25 bb       	out	0x15, r18	; 21
    6518:	81 e0       	ldi	r24, 0x01	; 1
    651a:	08 95       	ret
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTA |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    651c:	88 b3       	in	r24, 0x18	; 24
    651e:	21 e0       	ldi	r18, 0x01	; 1
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	06 2e       	mov	r0, r22
    6524:	02 c0       	rjmp	.+4      	; 0x652a <DIO_Enu_SetPinValue+0xb4>
    6526:	22 0f       	add	r18, r18
    6528:	33 1f       	adc	r19, r19
    652a:	0a 94       	dec	r0
    652c:	e2 f7       	brpl	.-8      	; 0x6526 <DIO_Enu_SetPinValue+0xb0>
    652e:	20 95       	com	r18
    6530:	28 23       	and	r18, r24
            PORTB |= (Copy_u8Value << Copy_u8PinID);
    6532:	84 2f       	mov	r24, r20
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	02 c0       	rjmp	.+4      	; 0x653c <DIO_Enu_SetPinValue+0xc6>
    6538:	88 0f       	add	r24, r24
    653a:	99 1f       	adc	r25, r25
    653c:	6a 95       	dec	r22
    653e:	e2 f7       	brpl	.-8      	; 0x6538 <DIO_Enu_SetPinValue+0xc2>
    6540:	28 2b       	or	r18, r24
    6542:	28 bb       	out	0x18, r18	; 24
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	08 95       	ret

00006548 <DIO_Enu_TogPortValue>:

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    6548:	84 30       	cpi	r24, 0x04	; 4
    654a:	50 f4       	brcc	.+20     	; 0x6560 <DIO_Enu_TogPortValue+0x18>
    {
        switch (Copy_u8PortID)
    654c:	81 30       	cpi	r24, 0x01	; 1
    654e:	79 f0       	breq	.+30     	; 0x656e <DIO_Enu_TogPortValue+0x26>
    6550:	81 30       	cpi	r24, 0x01	; 1
    6552:	40 f0       	brcs	.+16     	; 0x6564 <DIO_Enu_TogPortValue+0x1c>
    6554:	82 30       	cpi	r24, 0x02	; 2
    6556:	a9 f0       	breq	.+42     	; 0x6582 <DIO_Enu_TogPortValue+0x3a>
    6558:	83 30       	cpi	r24, 0x03	; 3
    655a:	71 f0       	breq	.+28     	; 0x6578 <DIO_Enu_TogPortValue+0x30>
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    655c:	81 e0       	ldi	r24, 0x01	; 1
    655e:	08 95       	ret

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    6560:	83 e0       	ldi	r24, 0x03	; 3
    6562:	08 95       	ret
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            PORTA = ~PORTA;
    6564:	8b b3       	in	r24, 0x1b	; 27
    6566:	80 95       	com	r24
    6568:	8b bb       	out	0x1b, r24	; 27
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
    656e:	88 b3       	in	r24, 0x18	; 24
    6570:	80 95       	com	r24
    6572:	88 bb       	out	0x18, r24	; 24
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	08 95       	ret
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
            break;
        case DIO_PORTD:
            PORTD = ~PORTD;
    6578:	82 b3       	in	r24, 0x12	; 18
    657a:	80 95       	com	r24
    657c:	82 bb       	out	0x12, r24	; 18
    657e:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    6580:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    6582:	85 b3       	in	r24, 0x15	; 21
    6584:	80 95       	com	r24
    6586:	85 bb       	out	0x15, r24	; 21
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	08 95       	ret

0000658c <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD &&
    658c:	84 30       	cpi	r24, 0x04	; 4
    658e:	b0 f4       	brcc	.+44     	; 0x65bc <DIO_Enu_TogPinValue+0x30>
    6590:	68 30       	cpi	r22, 0x08	; 8
    6592:	a0 f4       	brcc	.+40     	; 0x65bc <DIO_Enu_TogPinValue+0x30>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
    6594:	81 30       	cpi	r24, 0x01	; 1
    6596:	61 f1       	breq	.+88     	; 0x65f0 <DIO_Enu_TogPinValue+0x64>
    6598:	81 30       	cpi	r24, 0x01	; 1
    659a:	90 f0       	brcs	.+36     	; 0x65c0 <DIO_Enu_TogPinValue+0x34>
    659c:	82 30       	cpi	r24, 0x02	; 2
    659e:	e1 f0       	breq	.+56     	; 0x65d8 <DIO_Enu_TogPinValue+0x4c>
    65a0:	83 30       	cpi	r24, 0x03	; 3
    65a2:	51 f4       	brne	.+20     	; 0x65b8 <DIO_Enu_TogPinValue+0x2c>
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
    65a4:	22 b3       	in	r18, 0x12	; 18
    65a6:	81 e0       	ldi	r24, 0x01	; 1
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	02 c0       	rjmp	.+4      	; 0x65b0 <DIO_Enu_TogPinValue+0x24>
    65ac:	88 0f       	add	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	6a 95       	dec	r22
    65b2:	e2 f7       	brpl	.-8      	; 0x65ac <DIO_Enu_TogPinValue+0x20>
    65b4:	28 27       	eor	r18, r24
    65b6:	22 bb       	out	0x12, r18	; 18
    65b8:	81 e0       	ldi	r24, 0x01	; 1
    65ba:	08 95       	ret
    65bc:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    65be:	08 95       	ret
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
    65c0:	2b b3       	in	r18, 0x1b	; 27
    65c2:	81 e0       	ldi	r24, 0x01	; 1
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	02 c0       	rjmp	.+4      	; 0x65cc <DIO_Enu_TogPinValue+0x40>
    65c8:	88 0f       	add	r24, r24
    65ca:	99 1f       	adc	r25, r25
    65cc:	6a 95       	dec	r22
    65ce:	e2 f7       	brpl	.-8      	; 0x65c8 <DIO_Enu_TogPinValue+0x3c>
    65d0:	28 27       	eor	r18, r24
    65d2:	2b bb       	out	0x1b, r18	; 27
    65d4:	81 e0       	ldi	r24, 0x01	; 1
    65d6:	08 95       	ret
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
    65d8:	25 b3       	in	r18, 0x15	; 21
    65da:	81 e0       	ldi	r24, 0x01	; 1
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	02 c0       	rjmp	.+4      	; 0x65e4 <DIO_Enu_TogPinValue+0x58>
    65e0:	88 0f       	add	r24, r24
    65e2:	99 1f       	adc	r25, r25
    65e4:	6a 95       	dec	r22
    65e6:	e2 f7       	brpl	.-8      	; 0x65e0 <DIO_Enu_TogPinValue+0x54>
    65e8:	28 27       	eor	r18, r24
    65ea:	25 bb       	out	0x15, r18	; 21
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	08 95       	ret
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
    65f0:	28 b3       	in	r18, 0x18	; 24
    65f2:	81 e0       	ldi	r24, 0x01	; 1
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	02 c0       	rjmp	.+4      	; 0x65fc <DIO_Enu_TogPinValue+0x70>
    65f8:	88 0f       	add	r24, r24
    65fa:	99 1f       	adc	r25, r25
    65fc:	6a 95       	dec	r22
    65fe:	e2 f7       	brpl	.-8      	; 0x65f8 <DIO_Enu_TogPinValue+0x6c>
    6600:	28 27       	eor	r18, r24
    6602:	28 bb       	out	0x18, r18	; 24
    6604:	81 e0       	ldi	r24, 0x01	; 1
    6606:	08 95       	ret

00006608 <DIO_Enu_GetPortValue>:

    return Local_EnuErrorState;
}

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    6608:	fb 01       	movw	r30, r22
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    660a:	61 15       	cp	r22, r1
    660c:	71 05       	cpc	r23, r1
    660e:	e9 f0       	breq	.+58     	; 0x664a <DIO_Enu_GetPortValue+0x42>
    {
        if (Copy_u8PortID <= DIO_PORTD)
    6610:	84 30       	cpi	r24, 0x04	; 4
    6612:	50 f4       	brcc	.+20     	; 0x6628 <DIO_Enu_GetPortValue+0x20>
        {
            switch (Copy_u8PortID)
    6614:	81 30       	cpi	r24, 0x01	; 1
    6616:	a9 f0       	breq	.+42     	; 0x6642 <DIO_Enu_GetPortValue+0x3a>
    6618:	81 30       	cpi	r24, 0x01	; 1
    661a:	40 f0       	brcs	.+16     	; 0x662c <DIO_Enu_GetPortValue+0x24>
    661c:	82 30       	cpi	r24, 0x02	; 2
    661e:	71 f0       	breq	.+28     	; 0x663c <DIO_Enu_GetPortValue+0x34>
    6620:	83 30       	cpi	r24, 0x03	; 3
    6622:	41 f0       	breq	.+16     	; 0x6634 <DIO_Enu_GetPortValue+0x2c>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    6624:	81 e0       	ldi	r24, 0x01	; 1
    6626:	08 95       	ret
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    {
        if (Copy_u8PortID <= DIO_PORTD)
    6628:	83 e0       	ldi	r24, 0x03	; 3
    662a:	08 95       	ret
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
    662c:	89 b3       	in	r24, 0x19	; 25
    662e:	80 83       	st	Z, r24
    6630:	81 e0       	ldi	r24, 0x01	; 1
    6632:	08 95       	ret
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
                break;
            case DIO_PORTD:
                *Copy_pu8Value = PIND;
    6634:	80 b3       	in	r24, 0x10	; 16
    6636:	80 83       	st	Z, r24
    6638:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
    663a:	08 95       	ret
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    663c:	83 b3       	in	r24, 0x13	; 19
    663e:	80 83       	st	Z, r24
    6640:	f1 cf       	rjmp	.-30     	; 0x6624 <DIO_Enu_GetPortValue+0x1c>
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
    6642:	86 b3       	in	r24, 0x16	; 22
    6644:	80 83       	st	Z, r24
    6646:	81 e0       	ldi	r24, 0x01	; 1
    6648:	08 95       	ret

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    664a:	82 e0       	ldi	r24, 0x02	; 2
    664c:	08 95       	ret

0000664e <DIO_Enu_GetPinValue>:

    return Local_EnuErrorState;
}

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    664e:	fa 01       	movw	r30, r20
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    6650:	41 15       	cp	r20, r1
    6652:	51 05       	cpc	r21, r1
    6654:	d9 f0       	breq	.+54     	; 0x668c <DIO_Enu_GetPinValue+0x3e>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
    6656:	84 30       	cpi	r24, 0x04	; 4
    6658:	60 f4       	brcc	.+24     	; 0x6672 <DIO_Enu_GetPinValue+0x24>
    665a:	68 30       	cpi	r22, 0x08	; 8
    665c:	50 f4       	brcc	.+20     	; 0x6672 <DIO_Enu_GetPinValue+0x24>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
    665e:	81 30       	cpi	r24, 0x01	; 1
    6660:	b9 f0       	breq	.+46     	; 0x6690 <DIO_Enu_GetPinValue+0x42>
    6662:	81 30       	cpi	r24, 0x01	; 1
    6664:	40 f0       	brcs	.+16     	; 0x6676 <DIO_Enu_GetPinValue+0x28>
    6666:	82 30       	cpi	r24, 0x02	; 2
    6668:	b9 f0       	breq	.+46     	; 0x6698 <DIO_Enu_GetPinValue+0x4a>
    666a:	83 30       	cpi	r24, 0x03	; 3
    666c:	99 f0       	breq	.+38     	; 0x6694 <DIO_Enu_GetPinValue+0x46>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    666e:	81 e0       	ldi	r24, 0x01	; 1
    6670:	08 95       	ret
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    6672:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
    6674:	08 95       	ret
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
    6676:	89 b3       	in	r24, 0x19	; 25
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	02 c0       	rjmp	.+4      	; 0x6680 <DIO_Enu_GetPinValue+0x32>
    667c:	95 95       	asr	r25
    667e:	87 95       	ror	r24
    6680:	6a 95       	dec	r22
    6682:	e2 f7       	brpl	.-8      	; 0x667c <DIO_Enu_GetPinValue+0x2e>
    6684:	81 70       	andi	r24, 0x01	; 1
    6686:	80 83       	st	Z, r24
    6688:	81 e0       	ldi	r24, 0x01	; 1
    668a:	08 95       	ret

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    668c:	82 e0       	ldi	r24, 0x02	; 2
    668e:	08 95       	ret
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    6690:	86 b3       	in	r24, 0x16	; 22
    6692:	f2 cf       	rjmp	.-28     	; 0x6678 <DIO_Enu_GetPinValue+0x2a>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    6694:	80 b3       	in	r24, 0x10	; 16
    6696:	f0 cf       	rjmp	.-32     	; 0x6678 <DIO_Enu_GetPinValue+0x2a>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
    6698:	83 b3       	in	r24, 0x13	; 19
    669a:	ee cf       	rjmp	.-36     	; 0x6678 <DIO_Enu_GetPinValue+0x2a>

0000669c <DIO_Enu_WriteHighNibbles>:
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    669c:	84 30       	cpi	r24, 0x04	; 4
    669e:	60 f4       	brcc	.+24     	; 0x66b8 <DIO_Enu_WriteHighNibbles+0x1c>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
    66a0:	62 95       	swap	r22
    66a2:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PortID)
    66a4:	81 30       	cpi	r24, 0x01	; 1
    66a6:	81 f0       	breq	.+32     	; 0x66c8 <DIO_Enu_WriteHighNibbles+0x2c>
    66a8:	81 30       	cpi	r24, 0x01	; 1
    66aa:	40 f0       	brcs	.+16     	; 0x66bc <DIO_Enu_WriteHighNibbles+0x20>
    66ac:	82 30       	cpi	r24, 0x02	; 2
    66ae:	c1 f0       	breq	.+48     	; 0x66e0 <DIO_Enu_WriteHighNibbles+0x44>
    66b0:	83 30       	cpi	r24, 0x03	; 3
    66b2:	81 f0       	breq	.+32     	; 0x66d4 <DIO_Enu_WriteHighNibbles+0x38>
			PORTB &=0x0f;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
			PORTC |=Copy_u8Value;
    66b4:	81 e0       	ldi	r24, 0x01	; 1
    66b6:	08 95       	ret
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    66b8:	83 e0       	ldi	r24, 0x03	; 3
    66ba:	08 95       	ret
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
		switch(Copy_u8PortID)
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
    66bc:	8b b3       	in	r24, 0x1b	; 27
    66be:	8f 70       	andi	r24, 0x0F	; 15
			PORTA |=Copy_u8Value;			
    66c0:	68 2b       	or	r22, r24
    66c2:	6b bb       	out	0x1b, r22	; 27
    66c4:	81 e0       	ldi	r24, 0x01	; 1
    66c6:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
    66c8:	88 b3       	in	r24, 0x18	; 24
    66ca:	8f 70       	andi	r24, 0x0F	; 15
			PORTB |=Copy_u8Value;
    66cc:	68 2b       	or	r22, r24
    66ce:	68 bb       	out	0x18, r22	; 24
    66d0:	81 e0       	ldi	r24, 0x01	; 1
    66d2:	08 95       	ret
		case DIO_PORTC :
			PORTC &=0x0f;                 
			PORTC |=Copy_u8Value;
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
    66d4:	82 b3       	in	r24, 0x12	; 18
    66d6:	8f 70       	andi	r24, 0x0F	; 15
			PORTD |=Copy_u8Value;
    66d8:	68 2b       	or	r22, r24
    66da:	62 bb       	out	0x12, r22	; 18
    66dc:	81 e0       	ldi	r24, 0x01	; 1
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

	return Local_EnuErrorState ;

}
    66de:	08 95       	ret
		case DIO_PORTB:
			PORTB &=0x0f;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
    66e0:	85 b3       	in	r24, 0x15	; 21
    66e2:	8f 70       	andi	r24, 0x0F	; 15
			PORTC |=Copy_u8Value;
    66e4:	68 2b       	or	r22, r24
    66e6:	65 bb       	out	0x15, r22	; 21
    66e8:	81 e0       	ldi	r24, 0x01	; 1
    66ea:	08 95       	ret

000066ec <DIO_Enu_WriteLowNibbles>:

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    66ec:	84 30       	cpi	r24, 0x04	; 4
    66ee:	58 f4       	brcc	.+22     	; 0x6706 <DIO_Enu_WriteLowNibbles+0x1a>
	{
		Copy_u8Value&=0x0f;
    66f0:	6f 70       	andi	r22, 0x0F	; 15
		switch(Copy_u8PortID)
    66f2:	81 30       	cpi	r24, 0x01	; 1
    66f4:	81 f0       	breq	.+32     	; 0x6716 <DIO_Enu_WriteLowNibbles+0x2a>
    66f6:	81 30       	cpi	r24, 0x01	; 1
    66f8:	40 f0       	brcs	.+16     	; 0x670a <DIO_Enu_WriteLowNibbles+0x1e>
    66fa:	82 30       	cpi	r24, 0x02	; 2
    66fc:	c1 f0       	breq	.+48     	; 0x672e <DIO_Enu_WriteLowNibbles+0x42>
    66fe:	83 30       	cpi	r24, 0x03	; 3
    6700:	81 f0       	breq	.+32     	; 0x6722 <DIO_Enu_WriteLowNibbles+0x36>
			PORTB &=0xf0;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
			PORTC |=Copy_u8Value;
    6702:	81 e0       	ldi	r24, 0x01	; 1
    6704:	08 95       	ret

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    6706:	83 e0       	ldi	r24, 0x03	; 3
    6708:	08 95       	ret
	{
		Copy_u8Value&=0x0f;
		switch(Copy_u8PortID)
		{
		case DIO_PORTA :
			PORTA &=0xf0;                   
    670a:	8b b3       	in	r24, 0x1b	; 27
    670c:	80 7f       	andi	r24, 0xF0	; 240
			PORTA |=Copy_u8Value;			
    670e:	68 2b       	or	r22, r24
    6710:	6b bb       	out	0x1b, r22	; 27
    6712:	81 e0       	ldi	r24, 0x01	; 1
    6714:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB &=0xf0;                 
    6716:	88 b3       	in	r24, 0x18	; 24
    6718:	80 7f       	andi	r24, 0xF0	; 240
			PORTB |=Copy_u8Value;
    671a:	68 2b       	or	r22, r24
    671c:	68 bb       	out	0x18, r22	; 24
    671e:	81 e0       	ldi	r24, 0x01	; 1
    6720:	08 95       	ret
		case DIO_PORTC :
			PORTC &=0xf0;                 
			PORTC |=Copy_u8Value;
			break ;
		case DIO_PORTD:
			PORTD &=0xf0;                 
    6722:	82 b3       	in	r24, 0x12	; 18
    6724:	80 7f       	andi	r24, 0xF0	; 240
			PORTD |=Copy_u8Value;
    6726:	68 2b       	or	r22, r24
    6728:	62 bb       	out	0x12, r22	; 18
    672a:	81 e0       	ldi	r24, 0x01	; 1
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

	return Local_EnuErrorState ;

}
    672c:	08 95       	ret
		case DIO_PORTB:
			PORTB &=0xf0;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
    672e:	85 b3       	in	r24, 0x15	; 21
    6730:	80 7f       	andi	r24, 0xF0	; 240
			PORTC |=Copy_u8Value;
    6732:	68 2b       	or	r22, r24
    6734:	65 bb       	out	0x15, r22	; 21
    6736:	81 e0       	ldi	r24, 0x01	; 1
    6738:	08 95       	ret

0000673a <__mulsi3>:
    673a:	62 9f       	mul	r22, r18
    673c:	d0 01       	movw	r26, r0
    673e:	73 9f       	mul	r23, r19
    6740:	f0 01       	movw	r30, r0
    6742:	82 9f       	mul	r24, r18
    6744:	e0 0d       	add	r30, r0
    6746:	f1 1d       	adc	r31, r1
    6748:	64 9f       	mul	r22, r20
    674a:	e0 0d       	add	r30, r0
    674c:	f1 1d       	adc	r31, r1
    674e:	92 9f       	mul	r25, r18
    6750:	f0 0d       	add	r31, r0
    6752:	83 9f       	mul	r24, r19
    6754:	f0 0d       	add	r31, r0
    6756:	74 9f       	mul	r23, r20
    6758:	f0 0d       	add	r31, r0
    675a:	65 9f       	mul	r22, r21
    675c:	f0 0d       	add	r31, r0
    675e:	99 27       	eor	r25, r25
    6760:	72 9f       	mul	r23, r18
    6762:	b0 0d       	add	r27, r0
    6764:	e1 1d       	adc	r30, r1
    6766:	f9 1f       	adc	r31, r25
    6768:	63 9f       	mul	r22, r19
    676a:	b0 0d       	add	r27, r0
    676c:	e1 1d       	adc	r30, r1
    676e:	f9 1f       	adc	r31, r25
    6770:	bd 01       	movw	r22, r26
    6772:	cf 01       	movw	r24, r30
    6774:	11 24       	eor	r1, r1
    6776:	08 95       	ret

00006778 <__udivmodsi4>:
    6778:	a1 e2       	ldi	r26, 0x21	; 33
    677a:	1a 2e       	mov	r1, r26
    677c:	aa 1b       	sub	r26, r26
    677e:	bb 1b       	sub	r27, r27
    6780:	fd 01       	movw	r30, r26
    6782:	0d c0       	rjmp	.+26     	; 0x679e <__udivmodsi4_ep>

00006784 <__udivmodsi4_loop>:
    6784:	aa 1f       	adc	r26, r26
    6786:	bb 1f       	adc	r27, r27
    6788:	ee 1f       	adc	r30, r30
    678a:	ff 1f       	adc	r31, r31
    678c:	a2 17       	cp	r26, r18
    678e:	b3 07       	cpc	r27, r19
    6790:	e4 07       	cpc	r30, r20
    6792:	f5 07       	cpc	r31, r21
    6794:	20 f0       	brcs	.+8      	; 0x679e <__udivmodsi4_ep>
    6796:	a2 1b       	sub	r26, r18
    6798:	b3 0b       	sbc	r27, r19
    679a:	e4 0b       	sbc	r30, r20
    679c:	f5 0b       	sbc	r31, r21

0000679e <__udivmodsi4_ep>:
    679e:	66 1f       	adc	r22, r22
    67a0:	77 1f       	adc	r23, r23
    67a2:	88 1f       	adc	r24, r24
    67a4:	99 1f       	adc	r25, r25
    67a6:	1a 94       	dec	r1
    67a8:	69 f7       	brne	.-38     	; 0x6784 <__udivmodsi4_loop>
    67aa:	60 95       	com	r22
    67ac:	70 95       	com	r23
    67ae:	80 95       	com	r24
    67b0:	90 95       	com	r25
    67b2:	9b 01       	movw	r18, r22
    67b4:	ac 01       	movw	r20, r24
    67b6:	bd 01       	movw	r22, r26
    67b8:	cf 01       	movw	r24, r30
    67ba:	08 95       	ret

000067bc <__prologue_saves__>:
    67bc:	2f 92       	push	r2
    67be:	3f 92       	push	r3
    67c0:	4f 92       	push	r4
    67c2:	5f 92       	push	r5
    67c4:	6f 92       	push	r6
    67c6:	7f 92       	push	r7
    67c8:	8f 92       	push	r8
    67ca:	9f 92       	push	r9
    67cc:	af 92       	push	r10
    67ce:	bf 92       	push	r11
    67d0:	cf 92       	push	r12
    67d2:	df 92       	push	r13
    67d4:	ef 92       	push	r14
    67d6:	ff 92       	push	r15
    67d8:	0f 93       	push	r16
    67da:	1f 93       	push	r17
    67dc:	cf 93       	push	r28
    67de:	df 93       	push	r29
    67e0:	cd b7       	in	r28, 0x3d	; 61
    67e2:	de b7       	in	r29, 0x3e	; 62
    67e4:	ca 1b       	sub	r28, r26
    67e6:	db 0b       	sbc	r29, r27
    67e8:	0f b6       	in	r0, 0x3f	; 63
    67ea:	f8 94       	cli
    67ec:	de bf       	out	0x3e, r29	; 62
    67ee:	0f be       	out	0x3f, r0	; 63
    67f0:	cd bf       	out	0x3d, r28	; 61
    67f2:	09 94       	ijmp

000067f4 <__epilogue_restores__>:
    67f4:	2a 88       	ldd	r2, Y+18	; 0x12
    67f6:	39 88       	ldd	r3, Y+17	; 0x11
    67f8:	48 88       	ldd	r4, Y+16	; 0x10
    67fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    67fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    67fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    6800:	8c 84       	ldd	r8, Y+12	; 0x0c
    6802:	9b 84       	ldd	r9, Y+11	; 0x0b
    6804:	aa 84       	ldd	r10, Y+10	; 0x0a
    6806:	b9 84       	ldd	r11, Y+9	; 0x09
    6808:	c8 84       	ldd	r12, Y+8	; 0x08
    680a:	df 80       	ldd	r13, Y+7	; 0x07
    680c:	ee 80       	ldd	r14, Y+6	; 0x06
    680e:	fd 80       	ldd	r15, Y+5	; 0x05
    6810:	0c 81       	ldd	r16, Y+4	; 0x04
    6812:	1b 81       	ldd	r17, Y+3	; 0x03
    6814:	aa 81       	ldd	r26, Y+2	; 0x02
    6816:	b9 81       	ldd	r27, Y+1	; 0x01
    6818:	ce 0f       	add	r28, r30
    681a:	d1 1d       	adc	r29, r1
    681c:	0f b6       	in	r0, 0x3f	; 63
    681e:	f8 94       	cli
    6820:	de bf       	out	0x3e, r29	; 62
    6822:	0f be       	out	0x3f, r0	; 63
    6824:	cd bf       	out	0x3d, r28	; 61
    6826:	ed 01       	movw	r28, r26
    6828:	08 95       	ret

0000682a <strcpy>:
    682a:	fb 01       	movw	r30, r22
    682c:	dc 01       	movw	r26, r24
    682e:	01 90       	ld	r0, Z+
    6830:	0d 92       	st	X+, r0
    6832:	00 20       	and	r0, r0
    6834:	e1 f7       	brne	.-8      	; 0x682e <strcpy+0x4>
    6836:	08 95       	ret

00006838 <strncmp>:
    6838:	fb 01       	movw	r30, r22
    683a:	dc 01       	movw	r26, r24
    683c:	41 50       	subi	r20, 0x01	; 1
    683e:	50 40       	sbci	r21, 0x00	; 0
    6840:	30 f0       	brcs	.+12     	; 0x684e <strncmp+0x16>
    6842:	8d 91       	ld	r24, X+
    6844:	01 90       	ld	r0, Z+
    6846:	80 19       	sub	r24, r0
    6848:	19 f4       	brne	.+6      	; 0x6850 <strncmp+0x18>
    684a:	00 20       	and	r0, r0
    684c:	b9 f7       	brne	.-18     	; 0x683c <strncmp+0x4>
    684e:	88 1b       	sub	r24, r24
    6850:	99 0b       	sbc	r25, r25
    6852:	08 95       	ret

00006854 <_exit>:
    6854:	f8 94       	cli

00006856 <__stop_program>:
    6856:	ff cf       	rjmp	.-2      	; 0x6856 <__stop_program>
