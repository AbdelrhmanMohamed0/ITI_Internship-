
lab9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001914  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001914  000019a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800064  00800064  000019ac  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe9  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_4>
      14:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_5>
      18:	0c 94 76 06 	jmp	0xcec	; 0xcec <__vector_6>
      1c:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__vector_7>
      20:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__vector_8>
      24:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__vector_9>
      28:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_10>
      2c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

extern LED_t LED_Arr_Str_LedConfig[LED_NUM];
void isr(void) ;
void led(void);

int main(void) {
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	LED_EnuInit(&LED_Arr_Str_LedConfig);
      9a:	80 e6       	ldi	r24, 0x60	; 96
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 a7 00 	call	0x14e	; 0x14e <LED_EnuInit>
	TIMER2_voidInit();
      a2:	0e 94 0b 03 	call	0x616	; 0x616 <TIMER2_voidInit>
	TIMER_u8SetCallBack(isr, TIMER2_CTC_VECTOR_ID);
      a6:	8a e5       	ldi	r24, 0x5A	; 90
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	64 e0       	ldi	r22, 0x04	; 4
      ac:	0e 94 51 05 	call	0xaa2	; 0xaa2 <TIMER_u8SetCallBack>
	SGI();
      b0:	78 94       	sei
      b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x20>

000000b4 <isr>:
	while (1) {
	}
	return 0;
}
void isr(void) {
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	volatile static u32 count = 0;
	count++;
      bc:	80 91 64 00 	lds	r24, 0x0064
      c0:	90 91 65 00 	lds	r25, 0x0065
      c4:	a0 91 66 00 	lds	r26, 0x0066
      c8:	b0 91 67 00 	lds	r27, 0x0067
      cc:	01 96       	adiw	r24, 0x01	; 1
      ce:	a1 1d       	adc	r26, r1
      d0:	b1 1d       	adc	r27, r1
      d2:	80 93 64 00 	sts	0x0064, r24
      d6:	90 93 65 00 	sts	0x0065, r25
      da:	a0 93 66 00 	sts	0x0066, r26
      de:	b0 93 67 00 	sts	0x0067, r27
	if (count == 2000) {
      e2:	80 91 64 00 	lds	r24, 0x0064
      e6:	90 91 65 00 	lds	r25, 0x0065
      ea:	a0 91 66 00 	lds	r26, 0x0066
      ee:	b0 91 67 00 	lds	r27, 0x0067
      f2:	80 3d       	cpi	r24, 0xD0	; 208
      f4:	27 e0       	ldi	r18, 0x07	; 7
      f6:	92 07       	cpc	r25, r18
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a2 07       	cpc	r26, r18
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	b2 07       	cpc	r27, r18
     100:	51 f4       	brne	.+20     	; 0x116 <isr+0x62>

		led();
     102:	0e 94 8e 00 	call	0x11c	; 0x11c <led>
		count = 0;
     106:	10 92 64 00 	sts	0x0064, r1
     10a:	10 92 65 00 	sts	0x0065, r1
     10e:	10 92 66 00 	sts	0x0066, r1
     112:	10 92 67 00 	sts	0x0067, r1
	}
}
     116:	cf 91       	pop	r28
     118:	df 91       	pop	r29
     11a:	08 95       	ret

0000011c <led>:

void led(void) {
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
	volatile static u8 led = 0;
	if (led == 0) {
     124:	80 91 68 00 	lds	r24, 0x0068
     128:	88 23       	and	r24, r24
     12a:	41 f4       	brne	.+16     	; 0x13c <led+0x20>
		LED_EnuTurnON(&LED_Arr_Str_LedConfig[0]);
     12c:	80 e6       	ldi	r24, 0x60	; 96
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_EnuTurnON>
		led = 1;
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	80 93 68 00 	sts	0x0068, r24
     13a:	06 c0       	rjmp	.+12     	; 0x148 <led+0x2c>
	} else {
		LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[0]);
     13c:	80 e6       	ldi	r24, 0x60	; 96
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 22 02 	call	0x444	; 0x444 <LED_EnuTurnOFF>
		led = 0;
     144:	10 92 68 00 	sts	0x0068, r1
	}
}
     148:	cf 91       	pop	r28
     14a:	df 91       	pop	r29
     14c:	08 95       	ret

0000014e <LED_EnuInit>:
#include"../../1_MCAL/DIO/DIO_INTERFACE.h"
#include "LED_CONFIG.h"
#include "LED_PRIVATE.h"

ES_t LED_EnuInit(LED_t *Copy_P_Str_LedConfig)
{
     14e:	df 93       	push	r29
     150:	cf 93       	push	r28
     152:	00 d0       	rcall	.+0      	; 0x154 <LED_EnuInit+0x6>
     154:	00 d0       	rcall	.+0      	; 0x156 <LED_EnuInit+0x8>
     156:	0f 92       	push	r0
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	9c 83       	std	Y+4, r25	; 0x04
     15e:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_enuErrorState = ES_NOT_OK;
     160:	1a 82       	std	Y+2, r1	; 0x02

    if (Copy_P_Str_LedConfig != NULL)
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	00 97       	sbiw	r24, 0x00	; 0
     168:	09 f4       	brne	.+2      	; 0x16c <LED_EnuInit+0x1e>
     16a:	24 c1       	rjmp	.+584    	; 0x3b4 <LED_EnuInit+0x266>
    {
        u8 Local_enuIterator = 0;
     16c:	19 82       	std	Y+1, r1	; 0x01
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
     16e:	19 82       	std	Y+1, r1	; 0x01
     170:	1c c1       	rjmp	.+568    	; 0x3aa <LED_EnuInit+0x25c>
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	9c 01       	movw	r18, r24
     17a:	22 0f       	add	r18, r18
     17c:	33 1f       	adc	r19, r19
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	8b 81       	ldd	r24, Y+3	; 0x03
     184:	9c 81       	ldd	r25, Y+4	; 0x04
     186:	fc 01       	movw	r30, r24
     188:	e2 0f       	add	r30, r18
     18a:	f3 1f       	adc	r31, r19
     18c:	40 81       	ld	r20, Z
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	9c 01       	movw	r18, r24
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	9c 81       	ldd	r25, Y+4	; 0x04
     1a2:	fc 01       	movw	r30, r24
     1a4:	e2 0f       	add	r30, r18
     1a6:	f3 1f       	adc	r31, r19
     1a8:	91 81       	ldd	r25, Z+1	; 0x01
     1aa:	84 2f       	mov	r24, r20
     1ac:	69 2f       	mov	r22, r25
     1ae:	41 e0       	ldi	r20, 0x01	; 1
     1b0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <DIO_Enu_SetPinDirection>
     1b4:	8a 83       	std	Y+2, r24	; 0x02
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	88 2f       	mov	r24, r24
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	9c 01       	movw	r18, r24
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	22 0f       	add	r18, r18
     1c4:	33 1f       	adc	r19, r19
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ca:	fc 01       	movw	r30, r24
     1cc:	e2 0f       	add	r30, r18
     1ce:	f3 1f       	adc	r31, r19
     1d0:	82 81       	ldd	r24, Z+2	; 0x02
     1d2:	88 23       	and	r24, r24
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <LED_EnuInit+0x8a>
     1d6:	69 c0       	rjmp	.+210    	; 0x2aa <LED_EnuInit+0x15c>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	88 2f       	mov	r24, r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9c 01       	movw	r18, r24
     1e0:	22 0f       	add	r18, r18
     1e2:	33 1f       	adc	r19, r19
     1e4:	22 0f       	add	r18, r18
     1e6:	33 1f       	adc	r19, r19
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	fc 01       	movw	r30, r24
     1ee:	e2 0f       	add	r30, r18
     1f0:	f3 1f       	adc	r31, r19
     1f2:	83 81       	ldd	r24, Z+3	; 0x03
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	19 f5       	brne	.+70     	; 0x23e <LED_EnuInit+0xf0>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	88 2f       	mov	r24, r24
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	9c 01       	movw	r18, r24
     200:	22 0f       	add	r18, r18
     202:	33 1f       	adc	r19, r19
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	8b 81       	ldd	r24, Y+3	; 0x03
     20a:	9c 81       	ldd	r25, Y+4	; 0x04
     20c:	fc 01       	movw	r30, r24
     20e:	e2 0f       	add	r30, r18
     210:	f3 1f       	adc	r31, r19
     212:	40 81       	ld	r20, Z
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	88 2f       	mov	r24, r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	9c 01       	movw	r18, r24
     21c:	22 0f       	add	r18, r18
     21e:	33 1f       	adc	r19, r19
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	fc 01       	movw	r30, r24
     22a:	e2 0f       	add	r30, r18
     22c:	f3 1f       	adc	r31, r19
     22e:	91 81       	ldd	r25, Z+1	; 0x01
     230:	84 2f       	mov	r24, r20
     232:	69 2f       	mov	r22, r25
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     23a:	8a 83       	std	Y+2, r24	; 0x02
     23c:	b3 c0       	rjmp	.+358    	; 0x3a4 <LED_EnuInit+0x256>
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9c 01       	movw	r18, r24
     246:	22 0f       	add	r18, r18
     248:	33 1f       	adc	r19, r19
     24a:	22 0f       	add	r18, r18
     24c:	33 1f       	adc	r19, r19
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	9c 81       	ldd	r25, Y+4	; 0x04
     252:	fc 01       	movw	r30, r24
     254:	e2 0f       	add	r30, r18
     256:	f3 1f       	adc	r31, r19
     258:	83 81       	ldd	r24, Z+3	; 0x03
     25a:	88 23       	and	r24, r24
     25c:	19 f5       	brne	.+70     	; 0x2a4 <LED_EnuInit+0x156>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9c 01       	movw	r18, r24
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	22 0f       	add	r18, r18
     26c:	33 1f       	adc	r19, r19
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	fc 01       	movw	r30, r24
     274:	e2 0f       	add	r30, r18
     276:	f3 1f       	adc	r31, r19
     278:	40 81       	ld	r20, Z
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	9c 01       	movw	r18, r24
     282:	22 0f       	add	r18, r18
     284:	33 1f       	adc	r19, r19
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	9c 81       	ldd	r25, Y+4	; 0x04
     28e:	fc 01       	movw	r30, r24
     290:	e2 0f       	add	r30, r18
     292:	f3 1f       	adc	r31, r19
     294:	91 81       	ldd	r25, Z+1	; 0x01
     296:	84 2f       	mov	r24, r20
     298:	69 2f       	mov	r22, r25
     29a:	41 e0       	ldi	r20, 0x01	; 1
     29c:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     2a0:	8a 83       	std	Y+2, r24	; 0x02
     2a2:	80 c0       	rjmp	.+256    	; 0x3a4 <LED_EnuInit+0x256>
                }
                else
                {
                    return ES_OUT_OF_RANGE;
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	8d 83       	std	Y+5, r24	; 0x05
     2a8:	89 c0       	rjmp	.+274    	; 0x3bc <LED_EnuInit+0x26e>
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	88 2f       	mov	r24, r24
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	9c 01       	movw	r18, r24
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	22 0f       	add	r18, r18
     2b8:	33 1f       	adc	r19, r19
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	9c 81       	ldd	r25, Y+4	; 0x04
     2be:	fc 01       	movw	r30, r24
     2c0:	e2 0f       	add	r30, r18
     2c2:	f3 1f       	adc	r31, r19
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	09 f0       	breq	.+2      	; 0x2cc <LED_EnuInit+0x17e>
     2ca:	69 c0       	rjmp	.+210    	; 0x39e <LED_EnuInit+0x250>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9c 01       	movw	r18, r24
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	fc 01       	movw	r30, r24
     2e2:	e2 0f       	add	r30, r18
     2e4:	f3 1f       	adc	r31, r19
     2e6:	83 81       	ldd	r24, Z+3	; 0x03
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	19 f5       	brne	.+70     	; 0x332 <LED_EnuInit+0x1e4>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9c 01       	movw	r18, r24
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	22 0f       	add	r18, r18
     2fa:	33 1f       	adc	r19, r19
     2fc:	8b 81       	ldd	r24, Y+3	; 0x03
     2fe:	9c 81       	ldd	r25, Y+4	; 0x04
     300:	fc 01       	movw	r30, r24
     302:	e2 0f       	add	r30, r18
     304:	f3 1f       	adc	r31, r19
     306:	40 81       	ld	r20, Z
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	88 2f       	mov	r24, r24
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	9c 01       	movw	r18, r24
     310:	22 0f       	add	r18, r18
     312:	33 1f       	adc	r19, r19
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	fc 01       	movw	r30, r24
     31e:	e2 0f       	add	r30, r18
     320:	f3 1f       	adc	r31, r19
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	84 2f       	mov	r24, r20
     326:	69 2f       	mov	r22, r25
     328:	41 e0       	ldi	r20, 0x01	; 1
     32a:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     32e:	8a 83       	std	Y+2, r24	; 0x02
     330:	39 c0       	rjmp	.+114    	; 0x3a4 <LED_EnuInit+0x256>
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	9c 01       	movw	r18, r24
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	22 0f       	add	r18, r18
     340:	33 1f       	adc	r19, r19
     342:	8b 81       	ldd	r24, Y+3	; 0x03
     344:	9c 81       	ldd	r25, Y+4	; 0x04
     346:	fc 01       	movw	r30, r24
     348:	e2 0f       	add	r30, r18
     34a:	f3 1f       	adc	r31, r19
     34c:	83 81       	ldd	r24, Z+3	; 0x03
     34e:	88 23       	and	r24, r24
     350:	19 f5       	brne	.+70     	; 0x398 <LED_EnuInit+0x24a>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9c 01       	movw	r18, r24
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	22 0f       	add	r18, r18
     360:	33 1f       	adc	r19, r19
     362:	8b 81       	ldd	r24, Y+3	; 0x03
     364:	9c 81       	ldd	r25, Y+4	; 0x04
     366:	fc 01       	movw	r30, r24
     368:	e2 0f       	add	r30, r18
     36a:	f3 1f       	adc	r31, r19
     36c:	40 81       	ld	r20, Z
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	88 2f       	mov	r24, r24
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9c 01       	movw	r18, r24
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	e2 0f       	add	r30, r18
     386:	f3 1f       	adc	r31, r19
     388:	91 81       	ldd	r25, Z+1	; 0x01
     38a:	84 2f       	mov	r24, r20
     38c:	69 2f       	mov	r22, r25
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     394:	8a 83       	std	Y+2, r24	; 0x02
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <LED_EnuInit+0x256>
                }
                else
                {
                    return ES_OUT_OF_RANGE;
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	8d 83       	std	Y+5, r24	; 0x05
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <LED_EnuInit+0x26e>
                }
            }
            else
            {
                return ES_OUT_OF_RANGE;
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	8d 83       	std	Y+5, r24	; 0x05
     3a2:	0c c0       	rjmp	.+24     	; 0x3bc <LED_EnuInit+0x26e>
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	88 23       	and	r24, r24
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <LED_EnuInit+0x264>
     3b0:	e0 ce       	rjmp	.-576    	; 0x172 <LED_EnuInit+0x24>
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <LED_EnuInit+0x26a>
            }
        }
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	8a 83       	std	Y+2, r24	; 0x02
    }

    return Local_enuErrorState;
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	8d 83       	std	Y+5, r24	; 0x05
     3bc:	8d 81       	ldd	r24, Y+5	; 0x05
}
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	cf 91       	pop	r28
     3ca:	df 91       	pop	r29
     3cc:	08 95       	ret

000003ce <LED_EnuTurnON>:

ES_t LED_EnuTurnON(LED_t *Copy_P_Str_LedID)
{
     3ce:	df 93       	push	r29
     3d0:	cf 93       	push	r28
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <LED_EnuTurnON+0x6>
     3d4:	0f 92       	push	r0
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	9b 83       	std	Y+3, r25	; 0x03
     3dc:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState = ES_NOT_OK;
     3de:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_P_Str_LedID != NULL)
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	00 97       	sbiw	r24, 0x00	; 0
     3e6:	29 f1       	breq	.+74     	; 0x432 <LED_EnuTurnON+0x64>
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
     3e8:	ea 81       	ldd	r30, Y+2	; 0x02
     3ea:	fb 81       	ldd	r31, Y+3	; 0x03
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	88 23       	and	r24, r24
     3f0:	61 f4       	brne	.+24     	; 0x40a <LED_EnuTurnON+0x3c>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
     3f2:	ea 81       	ldd	r30, Y+2	; 0x02
     3f4:	fb 81       	ldd	r31, Y+3	; 0x03
     3f6:	80 81       	ld	r24, Z
     3f8:	ea 81       	ldd	r30, Y+2	; 0x02
     3fa:	fb 81       	ldd	r31, Y+3	; 0x03
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	69 2f       	mov	r22, r25
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     406:	89 83       	std	Y+1, r24	; 0x01
     408:	16 c0       	rjmp	.+44     	; 0x436 <LED_EnuTurnON+0x68>
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
     40a:	ea 81       	ldd	r30, Y+2	; 0x02
     40c:	fb 81       	ldd	r31, Y+3	; 0x03
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	61 f4       	brne	.+24     	; 0x42c <LED_EnuTurnON+0x5e>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
     414:	ea 81       	ldd	r30, Y+2	; 0x02
     416:	fb 81       	ldd	r31, Y+3	; 0x03
     418:	80 81       	ld	r24, Z
     41a:	ea 81       	ldd	r30, Y+2	; 0x02
     41c:	fb 81       	ldd	r31, Y+3	; 0x03
     41e:	91 81       	ldd	r25, Z+1	; 0x01
     420:	69 2f       	mov	r22, r25
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     428:	89 83       	std	Y+1, r24	; 0x01
     42a:	05 c0       	rjmp	.+10     	; 0x436 <LED_EnuTurnON+0x68>
        }
        else
        {
            Local_enuErrorState = ES_OUT_OF_RANGE;
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	89 83       	std	Y+1, r24	; 0x01
     430:	02 c0       	rjmp	.+4      	; 0x436 <LED_EnuTurnON+0x68>
        }
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
     436:	89 81       	ldd	r24, Y+1	; 0x01
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	08 95       	ret

00000444 <LED_EnuTurnOFF>:

ES_t LED_EnuTurnOFF(LED_t *Copy_P_Str_LedID)
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	00 d0       	rcall	.+0      	; 0x44a <LED_EnuTurnOFF+0x6>
     44a:	0f 92       	push	r0
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	9b 83       	std	Y+3, r25	; 0x03
     452:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState = ES_NOT_OK;
     454:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_P_Str_LedID != NULL)
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	9b 81       	ldd	r25, Y+3	; 0x03
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	29 f1       	breq	.+74     	; 0x4a8 <LED_EnuTurnOFF+0x64>
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
     45e:	ea 81       	ldd	r30, Y+2	; 0x02
     460:	fb 81       	ldd	r31, Y+3	; 0x03
     462:	82 81       	ldd	r24, Z+2	; 0x02
     464:	88 23       	and	r24, r24
     466:	61 f4       	brne	.+24     	; 0x480 <LED_EnuTurnOFF+0x3c>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
     468:	ea 81       	ldd	r30, Y+2	; 0x02
     46a:	fb 81       	ldd	r31, Y+3	; 0x03
     46c:	80 81       	ld	r24, Z
     46e:	ea 81       	ldd	r30, Y+2	; 0x02
     470:	fb 81       	ldd	r31, Y+3	; 0x03
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	69 2f       	mov	r22, r25
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	16 c0       	rjmp	.+44     	; 0x4ac <LED_EnuTurnOFF+0x68>
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
     480:	ea 81       	ldd	r30, Y+2	; 0x02
     482:	fb 81       	ldd	r31, Y+3	; 0x03
     484:	82 81       	ldd	r24, Z+2	; 0x02
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	61 f4       	brne	.+24     	; 0x4a2 <LED_EnuTurnOFF+0x5e>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
     48a:	ea 81       	ldd	r30, Y+2	; 0x02
     48c:	fb 81       	ldd	r31, Y+3	; 0x03
     48e:	80 81       	ld	r24, Z
     490:	ea 81       	ldd	r30, Y+2	; 0x02
     492:	fb 81       	ldd	r31, Y+3	; 0x03
     494:	91 81       	ldd	r25, Z+1	; 0x01
     496:	69 2f       	mov	r22, r25
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	0e 94 bf 08 	call	0x117e	; 0x117e <DIO_Enu_SetPinValue>
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <LED_EnuTurnOFF+0x68>
        }
        else
        {
            Local_enuErrorState = ES_OUT_OF_RANGE;
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <LED_EnuTurnOFF+0x68>
        }
    }
    else
    {
        Local_enuErrorState = ES_NULL_POINTER;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_enuErrorState;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
     4c2:	a3 e5       	ldi	r26, 0x53	; 83
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e3 e5       	ldi	r30, 0x53	; 83
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 7b       	andi	r24, 0xBF	; 191
     4ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
     4d0:	a3 e5       	ldi	r26, 0x53	; 83
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	e3 e5       	ldi	r30, 0x53	; 83
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	87 7f       	andi	r24, 0xF7	; 247
     4dc:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
     4de:	e2 e5       	ldi	r30, 0x52	; 82
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	88 e3       	ldi	r24, 0x38	; 56
     4e4:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
     4e6:	a9 e5       	ldi	r26, 0x59	; 89
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	e9 e5       	ldi	r30, 0x59	; 89
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
     4f4:	a3 e5       	ldi	r26, 0x53	; 83
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	e3 e5       	ldi	r30, 0x53	; 83
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	88 7f       	andi	r24, 0xF8	; 248
     500:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
     502:	a3 e5       	ldi	r26, 0x53	; 83
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	e3 e5       	ldi	r30, 0x53	; 83
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	82 60       	ori	r24, 0x02	; 2
     50e:	8c 93       	st	X, r24
}
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	08 95       	ret

00000516 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
     51e:	af e4       	ldi	r26, 0x4F	; 79
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	ef e4       	ldi	r30, 0x4F	; 79
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
     52c:	af e4       	ldi	r26, 0x4F	; 79
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	ef e4       	ldi	r30, 0x4F	; 79
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	82 60       	ori	r24, 0x02	; 2
     538:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
     53a:	ae e4       	ldi	r26, 0x4E	; 78
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	ee e4       	ldi	r30, 0x4E	; 78
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	88 60       	ori	r24, 0x08	; 8
     546:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
     548:	ae e4       	ldi	r26, 0x4E	; 78
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	ee e4       	ldi	r30, 0x4E	; 78
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	80 61       	ori	r24, 0x10	; 16
     554:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
     556:	ea e4       	ldi	r30, 0x4A	; 74
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	84 ef       	ldi	r24, 0xF4	; 244
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	91 83       	std	Z+1, r25	; 0x01
     560:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
     562:	e8 e4       	ldi	r30, 0x48	; 72
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	11 82       	std	Z+1, r1	; 0x01
     568:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
     56a:	e6 e4       	ldi	r30, 0x46	; 70
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 e2       	ldi	r24, 0x20	; 32
     570:	9e e4       	ldi	r25, 0x4E	; 78
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
     576:	ae e4       	ldi	r26, 0x4E	; 78
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	ee e4       	ldi	r30, 0x4E	; 78
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	80 64       	ori	r24, 0x40	; 64
     582:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
     584:	af e4       	ldi	r26, 0x4F	; 79
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	ef e4       	ldi	r30, 0x4F	; 79
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	8f 7b       	andi	r24, 0xBF	; 191
     590:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
     592:	af e4       	ldi	r26, 0x4F	; 79
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	ef e4       	ldi	r30, 0x4F	; 79
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
     5a0:	af e4       	ldi	r26, 0x4F	; 79
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	ef e4       	ldi	r30, 0x4F	; 79
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	8f 7e       	andi	r24, 0xEF	; 239
     5ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
     5ae:	af e4       	ldi	r26, 0x4F	; 79
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	ef e4       	ldi	r30, 0x4F	; 79
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	80 62       	ori	r24, 0x20	; 32
     5ba:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
     5bc:	a9 e5       	ldi	r26, 0x59	; 89
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	e9 e5       	ldi	r30, 0x59	; 89
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	8b 7f       	andi	r24, 0xFB	; 251
     5c8:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
     5ca:	a9 e5       	ldi	r26, 0x59	; 89
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e9 e5       	ldi	r30, 0x59	; 89
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	8f 7e       	andi	r24, 0xEF	; 239
     5d6:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
     5d8:	a9 e5       	ldi	r26, 0x59	; 89
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e9 e5       	ldi	r30, 0x59	; 89
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	87 7f       	andi	r24, 0xF7	; 247
     5e4:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
     5e6:	a9 e5       	ldi	r26, 0x59	; 89
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e9 e5       	ldi	r30, 0x59	; 89
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8f 7d       	andi	r24, 0xDF	; 223
     5f2:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
     5f4:	ae e4       	ldi	r26, 0x4E	; 78
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	ee e4       	ldi	r30, 0x4E	; 78
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	88 7f       	andi	r24, 0xF8	; 248
     600:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
     602:	ae e4       	ldi	r26, 0x4E	; 78
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	ee e4       	ldi	r30, 0x4E	; 78
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	8c 93       	st	X, r24


}
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
     61e:	a5 e4       	ldi	r26, 0x45	; 69
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e5 e4       	ldi	r30, 0x45	; 69
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	8f 7b       	andi	r24, 0xBF	; 191
     62a:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
     62c:	a5 e4       	ldi	r26, 0x45	; 69
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	e5 e4       	ldi	r30, 0x45	; 69
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	88 60       	ori	r24, 0x08	; 8
     638:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
     63a:	e3 e4       	ldi	r30, 0x43	; 67
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	8a ef       	ldi	r24, 0xFA	; 250
     640:	80 83       	st	Z, r24
            /*Set OCR2 mode*/
            #if TIMER2_OC2_MODE == TIMER_OC_DISCONNECTED
            CLR_BIT(TCCR2 , TCCR2_COM20) ;
     642:	a5 e4       	ldi	r26, 0x45	; 69
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	e5 e4       	ldi	r30, 0x45	; 69
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	8f 7e       	andi	r24, 0xEF	; 239
     64e:	8c 93       	st	X, r24
            CLR_BIT(TCCR2 , TCCR2_COM21) ;
     650:	a5 e4       	ldi	r26, 0x45	; 69
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	e5 e4       	ldi	r30, 0x45	; 69
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	8f 7d       	andi	r24, 0xDF	; 223
     65c:	8c 93       	st	X, r24
            #endif
			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
     65e:	a9 e5       	ldi	r26, 0x59	; 89
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	e9 e5       	ldi	r30, 0x59	; 89
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	80 68       	ori	r24, 0x80	; 128
     66a:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
     66c:	a5 e4       	ldi	r26, 0x45	; 69
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e5 e4       	ldi	r30, 0x45	; 69
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	88 7f       	andi	r24, 0xF8	; 248
     678:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
     67a:	a5 e4       	ldi	r26, 0x45	; 69
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	e5 e4       	ldi	r30, 0x45	; 69
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	82 60       	ori	r24, 0x02	; 2
     686:	8c 93       	st	X, r24
}
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	0f 92       	push	r0
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
     69a:	e2 e5       	ldi	r30, 0x52	; 82
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	80 83       	st	Z, r24
}
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <TIMER1_voidSetPreload+0x6>
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
     6b8:	ec e4       	ldi	r30, 0x4C	; 76
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	80 83       	st	Z, r24
}
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	cf 91       	pop	r28
     6ca:	df 91       	pop	r29
     6cc:	08 95       	ret

000006ce <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
     6ce:	df 93       	push	r29
     6d0:	cf 93       	push	r28
     6d2:	0f 92       	push	r0
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
     6da:	e4 e4       	ldi	r30, 0x44	; 68
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	80 83       	st	Z, r24
}
     6e2:	0f 90       	pop	r0
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	08 95       	ret

000006ea <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
     6ea:	df 93       	push	r29
     6ec:	cf 93       	push	r28
     6ee:	0f 92       	push	r0
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
     6f6:	ec e5       	ldi	r30, 0x5C	; 92
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	80 83       	st	Z, r24
}
     6fe:	0f 90       	pop	r0
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <TIMER1_voidSetCTCA+0x6>
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
     714:	ea e4       	ldi	r30, 0x4A	; 74
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
}
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cf 91       	pop	r28
     726:	df 91       	pop	r29
     728:	08 95       	ret

0000072a <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
     72a:	df 93       	push	r29
     72c:	cf 93       	push	r28
     72e:	00 d0       	rcall	.+0      	; 0x730 <TIMER1_voidSetCTCB+0x6>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
     738:	e8 e4       	ldi	r30, 0x48	; 72
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	08 95       	ret

0000074e <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	0f 92       	push	r0
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
     75a:	e3 e4       	ldi	r30, 0x43	; 67
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	80 83       	st	Z, r24
}
     762:	0f 90       	pop	r0
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	08 95       	ret

0000076a <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	00 d0       	rcall	.+0      	; 0x770 <TIMER1_voidSetICR1+0x6>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
     778:	e6 e4       	ldi	r30, 0x46	; 70
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	80 83       	st	Z, r24
}
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
     796:	e2 e5       	ldi	r30, 0x52	; 82
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
}
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	08 95       	ret

000007a2 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
     7aa:	ec e4       	ldi	r30, 0x4C	; 76
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
}
     7b2:	cf 91       	pop	r28
     7b4:	df 91       	pop	r29
     7b6:	08 95       	ret

000007b8 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
     7c0:	e4 e4       	ldi	r30, 0x44	; 68
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
}
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <TIMER_voidSetPWM+0x6>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
     7da:	ea e4       	ldi	r30, 0x4A	; 74
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24
}
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	cf 91       	pop	r28
     7ec:	df 91       	pop	r29
     7ee:	08 95       	ret

000007f0 <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     7f8:	ae e4       	ldi	r26, 0x4E	; 78
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	ee e4       	ldi	r30, 0x4E	; 78
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	80 64       	ori	r24, 0x40	; 64
     804:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
     806:	a9 e5       	ldi	r26, 0x59	; 89
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	e9 e5       	ldi	r30, 0x59	; 89
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	80 62       	ori	r24, 0x20	; 32
     812:	8c 93       	st	X, r24
}
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
ES_t TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	00 d0       	rcall	.+0      	; 0x820 <TIMER_voidICUSetTriggerEdge+0x6>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorStatus = ES_OK ;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	89 83       	std	Y+1, r24	; 0x01

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	41 f4       	brne	.+16     	; 0x840 <TIMER_voidICUSetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     830:	ae e4       	ldi	r26, 0x4E	; 78
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	ee e4       	ldi	r30, 0x4E	; 78
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	80 64       	ori	r24, 0x40	; 64
     83c:	8c 93       	st	X, r24
     83e:	0c c0       	rjmp	.+24     	; 0x858 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	88 23       	and	r24, r24
     844:	41 f4       	brne	.+16     	; 0x856 <TIMER_voidICUSetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
     846:	ae e4       	ldi	r26, 0x4E	; 78
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	ee e4       	ldi	r30, 0x4E	; 78
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	8f 7b       	andi	r24, 0xBF	; 191
     852:	8c 93       	st	X, r24
     854:	01 c0       	rjmp	.+2      	; 0x858 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = ES_NOT_OK ;
     856:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
     858:	89 81       	ldd	r24, Y+1	; 0x01

}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	cf 91       	pop	r28
     860:	df 91       	pop	r29
     862:	08 95       	ret

00000864 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
     86c:	a9 e5       	ldi	r26, 0x59	; 89
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	e9 e5       	ldi	r30, 0x59	; 89
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	80 62       	ori	r24, 0x20	; 32
     878:	8c 93       	st	X, r24
}
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	08 95       	ret

00000880 <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
     880:	df 93       	push	r29
     882:	cf 93       	push	r28
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
     888:	a9 e5       	ldi	r26, 0x59	; 89
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e9 e5       	ldi	r30, 0x59	; 89
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	8f 7d       	andi	r24, 0xDF	; 223
     894:	8c 93       	st	X, r24
}
     896:	cf 91       	pop	r28
     898:	df 91       	pop	r29
     89a:	08 95       	ret

0000089c <Timer0_OV_InterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
void Timer0_OV_InterruptEnable(void)
{
     89c:	df 93       	push	r29
     89e:	cf 93       	push	r28
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
     8a4:	a9 e5       	ldi	r26, 0x59	; 89
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e9 e5       	ldi	r30, 0x59	; 89
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	81 60       	ori	r24, 0x01	; 1
     8b0:	8c 93       	st	X, r24
}
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
     8c0:	a9 e5       	ldi	r26, 0x59	; 89
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	e9 e5       	ldi	r30, 0x59	; 89
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8e 7f       	andi	r24, 0xFE	; 254
     8cc:	8c 93       	st	X, r24
}
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	08 95       	ret

000008d4 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE0);
     8dc:	a9 e5       	ldi	r26, 0x59	; 89
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	e9 e5       	ldi	r30, 0x59	; 89
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	8c 93       	st	X, r24
}
     8ea:	cf 91       	pop	r28
     8ec:	df 91       	pop	r29
     8ee:	08 95       	ret

000008f0 <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE0);
     8f8:	a9 e5       	ldi	r26, 0x59	; 89
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e9 e5       	ldi	r30, 0x59	; 89
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8d 7f       	andi	r24, 0xFD	; 253
     904:	8c 93       	st	X, r24
}
     906:	cf 91       	pop	r28
     908:	df 91       	pop	r29
     90a:	08 95       	ret

0000090c <Timer1_OVF_InterruptEnable>:

void Timer1_OVF_InterruptEnable(void)
{
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE1);
     914:	a9 e5       	ldi	r26, 0x59	; 89
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e9 e5       	ldi	r30, 0x59	; 89
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	84 60       	ori	r24, 0x04	; 4
     920:	8c 93       	st	X, r24
}
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE1);
     930:	a9 e5       	ldi	r26, 0x59	; 89
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	e9 e5       	ldi	r30, 0x59	; 89
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	8b 7f       	andi	r24, 0xFB	; 251
     93c:	8c 93       	st	X, r24
}
     93e:	cf 91       	pop	r28
     940:	df 91       	pop	r29
     942:	08 95       	ret

00000944 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE1A);
     94c:	a9 e5       	ldi	r26, 0x59	; 89
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e9 e5       	ldi	r30, 0x59	; 89
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	80 61       	ori	r24, 0x10	; 16
     958:	8c 93       	st	X, r24
}
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
     968:	a9 e5       	ldi	r26, 0x59	; 89
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	e9 e5       	ldi	r30, 0x59	; 89
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	8f 7e       	andi	r24, 0xEF	; 239
     974:	8c 93       	st	X, r24
}
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE1B);
     984:	a9 e5       	ldi	r26, 0x59	; 89
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e9 e5       	ldi	r30, 0x59	; 89
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	88 60       	ori	r24, 0x08	; 8
     990:	8c 93       	st	X, r24
}
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
     9a0:	a9 e5       	ldi	r26, 0x59	; 89
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	e9 e5       	ldi	r30, 0x59	; 89
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	8c 93       	st	X, r24
}
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	08 95       	ret

000009b4 <Timer2_OV_InterruptEnable>:

void Timer2_OV_InterruptEnable(void)
{
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE2);
     9bc:	a9 e5       	ldi	r26, 0x59	; 89
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e9 e5       	ldi	r30, 0x59	; 89
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	80 64       	ori	r24, 0x40	; 64
     9c8:	8c 93       	st	X, r24
}
     9ca:	cf 91       	pop	r28
     9cc:	df 91       	pop	r29
     9ce:	08 95       	ret

000009d0 <Timer2_OV_InterruptDisable>:
void Timer2_OV_InterruptDisable(void)
{
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE2);
     9d8:	a9 e5       	ldi	r26, 0x59	; 89
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	e9 e5       	ldi	r30, 0x59	; 89
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	8f 7b       	andi	r24, 0xBF	; 191
     9e4:	8c 93       	st	X, r24
}
     9e6:	cf 91       	pop	r28
     9e8:	df 91       	pop	r29
     9ea:	08 95       	ret

000009ec <Timer2_OC_InterruptEnable>:
void Timer2_OC_InterruptEnable(void)
{
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_OCIE2);
     9f4:	a9 e5       	ldi	r26, 0x59	; 89
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e9 e5       	ldi	r30, 0x59	; 89
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	80 68       	ori	r24, 0x80	; 128
     a00:	8c 93       	st	X, r24
}
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	08 95       	ret

00000a08 <Timer2_OC_InterruptDisable>:

void Timer2_OC_InterruptDisable(void)
{
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE2);
     a10:	a9 e5       	ldi	r26, 0x59	; 89
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e9 e5       	ldi	r30, 0x59	; 89
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	8f 77       	andi	r24, 0x7F	; 127
     a1c:	8c 93       	st	X, r24
}
     a1e:	cf 91       	pop	r28
     a20:	df 91       	pop	r29
     a22:	08 95       	ret

00000a24 <TIMER_u16GetICR>:



u16 TIMER_u16GetICR(void)
{
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     a2c:	e6 e4       	ldi	r30, 0x46	; 70
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	91 81       	ldd	r25, Z+1	; 0x01
}
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	08 95       	ret

00000a3a <TIMER_voidWDTSleep>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
     a42:	a1 e4       	ldi	r26, 0x41	; 65
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e1 e4       	ldi	r30, 0x41	; 65
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	88 7f       	andi	r24, 0xF8	; 248
     a4e:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
     a50:	a1 e4       	ldi	r26, 0x41	; 65
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	e1 e4       	ldi	r30, 0x41	; 65
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	86 60       	ori	r24, 0x06	; 6
     a5c:	8c 93       	st	X, r24
}
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
     a6c:	a1 e4       	ldi	r26, 0x41	; 65
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e1 e4       	ldi	r30, 0x41	; 65
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	88 60       	ori	r24, 0x08	; 8
     a78:	8c 93       	st	X, r24
}
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	08 95       	ret

00000a80 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
     a88:	a1 e4       	ldi	r26, 0x41	; 65
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e1 e4       	ldi	r30, 0x41	; 65
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	88 61       	ori	r24, 0x18	; 24
     a94:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
     a96:	e1 e4       	ldi	r30, 0x41	; 65
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	10 82       	st	Z, r1
}
     a9c:	cf 91       	pop	r28
     a9e:	df 91       	pop	r29
     aa0:	08 95       	ret

00000aa2 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

ES_t TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
     aa2:	df 93       	push	r29
     aa4:	cf 93       	push	r28
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <TIMER_u8SetCallBack+0x6>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <TIMER_u8SetCallBack+0x8>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	9b 83       	std	Y+3, r25	; 0x03
     ab0:	8a 83       	std	Y+2, r24	; 0x02
     ab2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_u8ErrorState = ES_OK ;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	9b 81       	ldd	r25, Y+3	; 0x03
     abc:	00 97       	sbiw	r24, 0x00	; 0
     abe:	69 f0       	breq	.+26     	; 0xada <TIMER_u8SetCallBack+0x38>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	fc 01       	movw	r30, r24
     acc:	e7 59       	subi	r30, 0x97	; 151
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	9b 81       	ldd	r25, Y+3	; 0x03
     ad4:	91 83       	std	Z+1, r25	; 0x01
     ad6:	80 83       	st	Z, r24
     ad8:	02 c0       	rjmp	.+4      	; 0xade <TIMER_u8SetCallBack+0x3c>
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     ade:	89 81       	ldd	r24, Y+1	; 0x01
}
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	4f 93       	push	r20
     afe:	5f 93       	push	r21
     b00:	6f 93       	push	r22
     b02:	7f 93       	push	r23
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
     b18:	80 91 7f 00 	lds	r24, 0x007F
     b1c:	90 91 80 00 	lds	r25, 0x0080
     b20:	00 97       	sbiw	r24, 0x00	; 0
     b22:	29 f0       	breq	.+10     	; 0xb2e <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
     b24:	e0 91 7f 00 	lds	r30, 0x007F
     b28:	f0 91 80 00 	lds	r31, 0x0080
     b2c:	09 95       	icall
	}
}
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	ff 91       	pop	r31
     b34:	ef 91       	pop	r30
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
     b7e:	80 91 7d 00 	lds	r24, 0x007D
     b82:	90 91 7e 00 	lds	r25, 0x007E
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	29 f0       	breq	.+10     	; 0xb94 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
     b8a:	e0 91 7d 00 	lds	r30, 0x007D
     b8e:	f0 91 7e 00 	lds	r31, 0x007E
     b92:	09 95       	icall
	}
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	ff 91       	pop	r31
     b9a:	ef 91       	pop	r30
     b9c:	bf 91       	pop	r27
     b9e:	af 91       	pop	r26
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	7f 91       	pop	r23
     ba6:	6f 91       	pop	r22
     ba8:	5f 91       	pop	r21
     baa:	4f 91       	pop	r20
     bac:	3f 91       	pop	r19
     bae:	2f 91       	pop	r18
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
     bdc:	df 93       	push	r29
     bde:	cf 93       	push	r28
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
     be4:	80 91 7b 00 	lds	r24, 0x007B
     be8:	90 91 7c 00 	lds	r25, 0x007C
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	29 f0       	breq	.+10     	; 0xbfa <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
     bf0:	e0 91 7b 00 	lds	r30, 0x007B
     bf4:	f0 91 7c 00 	lds	r31, 0x007C
     bf8:	09 95       	icall
	}
}
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
     c4a:	80 91 79 00 	lds	r24, 0x0079
     c4e:	90 91 7a 00 	lds	r25, 0x007A
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	29 f0       	breq	.+10     	; 0xc60 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
     c56:	e0 91 79 00 	lds	r30, 0x0079
     c5a:	f0 91 7a 00 	lds	r31, 0x007A
     c5e:	09 95       	icall
	}
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	ff 91       	pop	r31
     c66:	ef 91       	pop	r30
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	7f 91       	pop	r23
     c72:	6f 91       	pop	r22
     c74:	5f 91       	pop	r21
     c76:	4f 91       	pop	r20
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	0f 92       	push	r0
     c8e:	11 24       	eor	r1, r1
     c90:	2f 93       	push	r18
     c92:	3f 93       	push	r19
     c94:	4f 93       	push	r20
     c96:	5f 93       	push	r21
     c98:	6f 93       	push	r22
     c9a:	7f 93       	push	r23
     c9c:	8f 93       	push	r24
     c9e:	9f 93       	push	r25
     ca0:	af 93       	push	r26
     ca2:	bf 93       	push	r27
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
     cb0:	80 91 77 00 	lds	r24, 0x0077
     cb4:	90 91 78 00 	lds	r25, 0x0078
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	29 f0       	breq	.+10     	; 0xcc6 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
     cbc:	e0 91 77 00 	lds	r30, 0x0077
     cc0:	f0 91 78 00 	lds	r31, 0x0078
     cc4:	09 95       	icall
	}
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0
     ce8:	1f 90       	pop	r1
     cea:	18 95       	reti

00000cec <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
     cec:	1f 92       	push	r1
     cee:	0f 92       	push	r0
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	0f 92       	push	r0
     cf4:	11 24       	eor	r1, r1
     cf6:	2f 93       	push	r18
     cf8:	3f 93       	push	r19
     cfa:	4f 93       	push	r20
     cfc:	5f 93       	push	r21
     cfe:	6f 93       	push	r22
     d00:	7f 93       	push	r23
     d02:	8f 93       	push	r24
     d04:	9f 93       	push	r25
     d06:	af 93       	push	r26
     d08:	bf 93       	push	r27
     d0a:	ef 93       	push	r30
     d0c:	ff 93       	push	r31
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
     d16:	80 91 75 00 	lds	r24, 0x0075
     d1a:	90 91 76 00 	lds	r25, 0x0076
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	29 f0       	breq	.+10     	; 0xd2c <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
     d22:	e0 91 75 00 	lds	r30, 0x0075
     d26:	f0 91 76 00 	lds	r31, 0x0076
     d2a:	09 95       	icall
	}
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
     d7c:	80 91 73 00 	lds	r24, 0x0073
     d80:	90 91 74 00 	lds	r25, 0x0074
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	29 f0       	breq	.+10     	; 0xd92 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
     d88:	e0 91 73 00 	lds	r30, 0x0073
     d8c:	f0 91 74 00 	lds	r31, 0x0074
     d90:	09 95       	icall
	}
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	ff 91       	pop	r31
     d98:	ef 91       	pop	r30
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	2f 93       	push	r18
     dc4:	3f 93       	push	r19
     dc6:	4f 93       	push	r20
     dc8:	5f 93       	push	r21
     dca:	6f 93       	push	r22
     dcc:	7f 93       	push	r23
     dce:	8f 93       	push	r24
     dd0:	9f 93       	push	r25
     dd2:	af 93       	push	r26
     dd4:	bf 93       	push	r27
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
     de2:	80 91 71 00 	lds	r24, 0x0071
     de6:	90 91 72 00 	lds	r25, 0x0072
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	29 f0       	breq	.+10     	; 0xdf8 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
     dee:	e0 91 71 00 	lds	r30, 0x0071
     df2:	f0 91 72 00 	lds	r31, 0x0072
     df6:	09 95       	icall
	}
}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <DIO_Enu_Init>:
#include "DIO_PRIVATE.h"
#include "DIO_CONFIG.h"
#include "DIO_INTERFACE.h"

ES_t DIO_Enu_Init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_EnuErrorState = ES_NOT_OK;
     e28:	19 82       	std	Y+1, r1	; 0x01

    DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 ef       	ldi	r24, 0xF0	; 240
     e30:	80 83       	st	Z, r24
    DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
     e32:	e7 e3       	ldi	r30, 0x37	; 55
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	80 83       	st	Z, r24
    DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
     e3a:	e4 e3       	ldi	r30, 0x34	; 52
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	80 83       	st	Z, r24
    DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
     e42:	e1 e3       	ldi	r30, 0x31	; 49
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	8b ef       	ldi	r24, 0xFB	; 251
     e48:	80 83       	st	Z, r24

    PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
     e4a:	eb e3       	ldi	r30, 0x3B	; 59
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	80 83       	st	Z, r24
    PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
     e52:	e8 e3       	ldi	r30, 0x38	; 56
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	10 82       	st	Z, r1
    PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
     e58:	e5 e3       	ldi	r30, 0x35	; 53
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	10 82       	st	Z, r1
    PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
     e5e:	e2 e3       	ldi	r30, 0x32	; 50
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	10 82       	st	Z, r1

    Local_EnuErrorState = ES_OK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01

    return Local_EnuErrorState;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <DIO_Enu_SetPortDirection>:

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <DIO_Enu_SetPortDirection+0x6>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <DIO_Enu_SetPortDirection+0x8>
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	8a 83       	std	Y+2, r24	; 0x02
     e82:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     e84:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	a8 f5       	brcc	.+106    	; 0xef6 <DIO_Enu_SetPortDirection+0x84>
    {
        switch (Copy_u8PortID)
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3d 83       	std	Y+5, r19	; 0x05
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	d1 f0       	breq	.+52     	; 0xed4 <DIO_Enu_SetPortDirection+0x62>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <DIO_Enu_SetPortDirection+0x42>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	61 f0       	breq	.+24     	; 0xeca <DIO_Enu_SetPortDirection+0x58>
     eb2:	1e c0       	rjmp	.+60     	; 0xef0 <DIO_Enu_SetPortDirection+0x7e>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	81 f0       	breq	.+32     	; 0xede <DIO_Enu_SetPortDirection+0x6c>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	81 f0       	breq	.+32     	; 0xee8 <DIO_Enu_SetPortDirection+0x76>
     ec8:	13 c0       	rjmp	.+38     	; 0xef0 <DIO_Enu_SetPortDirection+0x7e>
        {
        case DIO_PORTA:
            DDRA = Copy_u8Value;
     eca:	ea e3       	ldi	r30, 0x3A	; 58
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	80 83       	st	Z, r24
     ed2:	0e c0       	rjmp	.+28     	; 0xef0 <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
     ed4:	e7 e3       	ldi	r30, 0x37	; 55
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	80 83       	st	Z, r24
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	80 83       	st	Z, r24
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <DIO_Enu_SetPortDirection+0x7e>
            break;
        case DIO_PORTD:
            DDRD = Copy_u8Value;
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_Enu_SetPortDirection+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_EnuErrorState;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <DIO_Enu_SetPortValue>:

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <DIO_Enu_SetPortValue+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <DIO_Enu_SetPortValue+0x8>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
     f1e:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	84 30       	cpi	r24, 0x04	; 4
     f24:	a8 f5       	brcc	.+106    	; 0xf90 <DIO_Enu_SetPortValue+0x84>
    {
        switch (Copy_u8PortID)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3d 83       	std	Y+5, r19	; 0x05
     f2e:	2c 83       	std	Y+4, r18	; 0x04
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	d1 f0       	breq	.+52     	; 0xf6e <DIO_Enu_SetPortValue+0x62>
     f3a:	2c 81       	ldd	r18, Y+4	; 0x04
     f3c:	3d 81       	ldd	r19, Y+5	; 0x05
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <DIO_Enu_SetPortValue+0x42>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	61 f0       	breq	.+24     	; 0xf64 <DIO_Enu_SetPortValue+0x58>
     f4c:	1e c0       	rjmp	.+60     	; 0xf8a <DIO_Enu_SetPortValue+0x7e>
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	81 f0       	breq	.+32     	; 0xf78 <DIO_Enu_SetPortValue+0x6c>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	81 f0       	breq	.+32     	; 0xf82 <DIO_Enu_SetPortValue+0x76>
     f62:	13 c0       	rjmp	.+38     	; 0xf8a <DIO_Enu_SetPortValue+0x7e>
        {
        case DIO_PORTA:
            PORTA = Copy_u8Value;
     f64:	eb e3       	ldi	r30, 0x3B	; 59
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	80 83       	st	Z, r24
     f6c:	0e c0       	rjmp	.+28     	; 0xf8a <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
     f6e:	e8 e3       	ldi	r30, 0x38	; 56
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	80 83       	st	Z, r24
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	80 83       	st	Z, r24
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <DIO_Enu_SetPortValue+0x7e>
            break;
        case DIO_PORTD:
            PORTD = Copy_u8Value;
     f82:	e2 e3       	ldi	r30, 0x32	; 50
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	80 83       	st	Z, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_Enu_SetPortValue+0x88>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <DIO_Enu_SetPinDirection>:

ES_t DIO_Enu_SetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <DIO_Enu_SetPinDirection+0x6>
     fac:	00 d0       	rcall	.+0      	; 0xfae <DIO_Enu_SetPinDirection+0x8>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <DIO_Enu_SetPinDirection+0xa>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	8a 83       	std	Y+2, r24	; 0x02
     fb6:	6b 83       	std	Y+3, r22	; 0x03
     fb8:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
     fba:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8PortID <= DIO_PORTD &&
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	84 30       	cpi	r24, 0x04	; 4
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <DIO_Enu_SetPinDirection+0x1e>
     fc2:	d1 c0       	rjmp	.+418    	; 0x1166 <DIO_Enu_SetPinDirection+0x1c0>
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <DIO_Enu_SetPinDirection+0x26>
     fca:	cd c0       	rjmp	.+410    	; 0x1166 <DIO_Enu_SetPinDirection+0x1c0>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_Enu_SetPinDirection+0x2e>
     fd2:	c9 c0       	rjmp	.+402    	; 0x1166 <DIO_Enu_SetPinDirection+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3e 83       	std	Y+6, r19	; 0x06
     fdc:	2d 83       	std	Y+5, r18	; 0x05
     fde:	6d 81       	ldd	r22, Y+5	; 0x05
     fe0:	7e 81       	ldd	r23, Y+6	; 0x06
     fe2:	61 30       	cpi	r22, 0x01	; 1
     fe4:	71 05       	cpc	r23, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_Enu_SetPinDirection+0x44>
     fe8:	41 c0       	rjmp	.+130    	; 0x106c <DIO_Enu_SetPinDirection+0xc6>
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	34 f4       	brge	.+12     	; 0x1000 <DIO_Enu_SetPinDirection+0x5a>
     ff4:	2d 81       	ldd	r18, Y+5	; 0x05
     ff6:	3e 81       	ldd	r19, Y+6	; 0x06
     ff8:	21 15       	cp	r18, r1
     ffa:	31 05       	cpc	r19, r1
     ffc:	71 f0       	breq	.+28     	; 0x101a <DIO_Enu_SetPinDirection+0x74>
     ffe:	b0 c0       	rjmp	.+352    	; 0x1160 <DIO_Enu_SetPinDirection+0x1ba>
    1000:	6d 81       	ldd	r22, Y+5	; 0x05
    1002:	7e 81       	ldd	r23, Y+6	; 0x06
    1004:	62 30       	cpi	r22, 0x02	; 2
    1006:	71 05       	cpc	r23, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_Enu_SetPinDirection+0x66>
    100a:	59 c0       	rjmp	.+178    	; 0x10be <DIO_Enu_SetPinDirection+0x118>
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_Enu_SetPinDirection+0x72>
    1016:	7c c0       	rjmp	.+248    	; 0x1110 <DIO_Enu_SetPinDirection+0x16a>
    1018:	a3 c0       	rjmp	.+326    	; 0x1160 <DIO_Enu_SetPinDirection+0x1ba>
        {
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_Enu_SetPinDirection+0x90>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	2a 95       	dec	r18
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_Enu_SetPinDirection+0x8c>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
            DDRA |= (Copy_u8Value << Copy_u8PinID);
    1040:	aa e3       	ldi	r26, 0x3A	; 58
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ea e3       	ldi	r30, 0x3A	; 58
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	b9 01       	movw	r22, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_Enu_SetPinDirection+0xba>
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	8a 95       	dec	r24
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_Enu_SetPinDirection+0xb6>
    1064:	cb 01       	movw	r24, r22
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	7a c0       	rjmp	.+244    	; 0x1160 <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    106c:	a7 e3       	ldi	r26, 0x37	; 55
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e7 e3       	ldi	r30, 0x37	; 55
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_Enu_SetPinDirection+0xe2>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	2a 95       	dec	r18
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_Enu_SetPinDirection+0xde>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
            DDRB |= (Copy_u8Value << Copy_u8PinID);
    1092:	a7 e3       	ldi	r26, 0x37	; 55
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e7 e3       	ldi	r30, 0x37	; 55
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	b9 01       	movw	r22, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_Enu_SetPinDirection+0x10c>
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_Enu_SetPinDirection+0x108>
    10b6:	cb 01       	movw	r24, r22
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	51 c0       	rjmp	.+162    	; 0x1160 <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    10be:	a4 e3       	ldi	r26, 0x34	; 52
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e4 e3       	ldi	r30, 0x34	; 52
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_Enu_SetPinDirection+0x134>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	2a 95       	dec	r18
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_Enu_SetPinDirection+0x130>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
            DDRC |= (Copy_u8Value << Copy_u8PinID);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	b9 01       	movw	r22, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_Enu_SetPinDirection+0x15e>
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_Enu_SetPinDirection+0x15a>
    1108:	cb 01       	movw	r24, r22
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	28 c0       	rjmp	.+80     	; 0x1160 <DIO_Enu_SetPinDirection+0x1ba>
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1110:	a1 e3       	ldi	r26, 0x31	; 49
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_Enu_SetPinDirection+0x186>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	2a 95       	dec	r18
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_Enu_SetPinDirection+0x182>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    1136:	a1 e3       	ldi	r26, 0x31	; 49
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_Enu_SetPinDirection+0x1b0>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_Enu_SetPinDirection+0x1ac>
    115a:	cb 01       	movw	r24, r22
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_Enu_SetPinDirection+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
}
    116c:	26 96       	adiw	r28, 0x06	; 6
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <DIO_Enu_SetPinValue>:

ES_t DIO_Enu_SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_Enu_SetPinValue+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <DIO_Enu_SetPinValue+0x8>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <DIO_Enu_SetPinValue+0xa>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
    118e:	6b 83       	std	Y+3, r22	; 0x03
    1190:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1192:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	08 f0       	brcs	.+2      	; 0x119c <DIO_Enu_SetPinValue+0x1e>
    119a:	d1 c0       	rjmp	.+418    	; 0x133e <DIO_Enu_SetPinValue+0x1c0>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_Enu_SetPinValue+0x26>
    11a2:	cd c0       	rjmp	.+410    	; 0x133e <DIO_Enu_SetPinValue+0x1c0>
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <DIO_Enu_SetPinValue+0x2e>
    11aa:	c9 c0       	rjmp	.+402    	; 0x133e <DIO_Enu_SetPinValue+0x1c0>
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	3e 83       	std	Y+6, r19	; 0x06
    11b4:	2d 83       	std	Y+5, r18	; 0x05
    11b6:	6d 81       	ldd	r22, Y+5	; 0x05
    11b8:	7e 81       	ldd	r23, Y+6	; 0x06
    11ba:	61 30       	cpi	r22, 0x01	; 1
    11bc:	71 05       	cpc	r23, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <DIO_Enu_SetPinValue+0x44>
    11c0:	41 c0       	rjmp	.+130    	; 0x1244 <DIO_Enu_SetPinValue+0xc6>
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	34 f4       	brge	.+12     	; 0x11d8 <DIO_Enu_SetPinValue+0x5a>
    11cc:	2d 81       	ldd	r18, Y+5	; 0x05
    11ce:	3e 81       	ldd	r19, Y+6	; 0x06
    11d0:	21 15       	cp	r18, r1
    11d2:	31 05       	cpc	r19, r1
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <DIO_Enu_SetPinValue+0x74>
    11d6:	b0 c0       	rjmp	.+352    	; 0x1338 <DIO_Enu_SetPinValue+0x1ba>
    11d8:	6d 81       	ldd	r22, Y+5	; 0x05
    11da:	7e 81       	ldd	r23, Y+6	; 0x06
    11dc:	62 30       	cpi	r22, 0x02	; 2
    11de:	71 05       	cpc	r23, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <DIO_Enu_SetPinValue+0x66>
    11e2:	59 c0       	rjmp	.+178    	; 0x1296 <DIO_Enu_SetPinValue+0x118>
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <DIO_Enu_SetPinValue+0x72>
    11ee:	7c c0       	rjmp	.+248    	; 0x12e8 <DIO_Enu_SetPinValue+0x16a>
    11f0:	a3 c0       	rjmp	.+326    	; 0x1338 <DIO_Enu_SetPinValue+0x1ba>
        {
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    11f2:	ab e3       	ldi	r26, 0x3B	; 59
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	eb e3       	ldi	r30, 0x3B	; 59
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_Enu_SetPinValue+0x90>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	2a 95       	dec	r18
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_Enu_SetPinValue+0x8c>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
            PORTA |= (Copy_u8Value << Copy_u8PinID);
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	b9 01       	movw	r22, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_Enu_SetPinValue+0xba>
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_Enu_SetPinValue+0xb6>
    123c:	cb 01       	movw	r24, r22
    123e:	84 2b       	or	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	7a c0       	rjmp	.+244    	; 0x1338 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1244:	a8 e3       	ldi	r26, 0x38	; 56
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e3       	ldi	r30, 0x38	; 56
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_Enu_SetPinValue+0xe2>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	2a 95       	dec	r18
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_Enu_SetPinValue+0xde>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
            PORTB |= (Copy_u8Value << Copy_u8PinID);
    126a:	a8 e3       	ldi	r26, 0x38	; 56
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 e3       	ldi	r30, 0x38	; 56
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_Enu_SetPinValue+0x10c>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_Enu_SetPinValue+0x108>
    128e:	cb 01       	movw	r24, r22
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	51 c0       	rjmp	.+162    	; 0x1338 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    1296:	a5 e3       	ldi	r26, 0x35	; 53
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_Enu_SetPinValue+0x134>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	2a 95       	dec	r18
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_Enu_SetPinValue+0x130>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
            PORTC |= (Copy_u8Value << Copy_u8PinID);
    12bc:	a5 e3       	ldi	r26, 0x35	; 53
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e5 e3       	ldi	r30, 0x35	; 53
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	b9 01       	movw	r22, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_Enu_SetPinValue+0x15e>
    12d8:	66 0f       	add	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_Enu_SetPinValue+0x15a>
    12e0:	cb 01       	movw	r24, r22
    12e2:	84 2b       	or	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	28 c0       	rjmp	.+80     	; 0x1338 <DIO_Enu_SetPinValue+0x1ba>
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    12e8:	a2 e3       	ldi	r26, 0x32	; 50
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e2 e3       	ldi	r30, 0x32	; 50
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_Enu_SetPinValue+0x186>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	2a 95       	dec	r18
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_Enu_SetPinValue+0x182>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    130e:	a2 e3       	ldi	r26, 0x32	; 50
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	b9 01       	movw	r22, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_Enu_SetPinValue+0x1b0>
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_Enu_SetPinValue+0x1ac>
    1332:	cb 01       	movw	r24, r22
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_Enu_SetPinValue+0x1c4>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
}
    1344:	26 96       	adiw	r28, 0x06	; 6
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <DIO_Enu_TogPortValue>:

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_Enu_TogPortValue+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_Enu_TogPortValue+0x8>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1364:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	08 f0       	brcs	.+2      	; 0x136e <DIO_Enu_TogPortValue+0x18>
    136c:	41 c0       	rjmp	.+130    	; 0x13f0 <DIO_Enu_TogPortValue+0x9a>
    {
        switch (Copy_u8PortID)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3c 83       	std	Y+4, r19	; 0x04
    1376:	2b 83       	std	Y+3, r18	; 0x03
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	e9 f0       	breq	.+58     	; 0x13bc <DIO_Enu_TogPortValue+0x66>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <DIO_Enu_TogPortValue+0x40>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	61 f0       	breq	.+24     	; 0x13ac <DIO_Enu_TogPortValue+0x56>
    1394:	2a c0       	rjmp	.+84     	; 0x13ea <DIO_Enu_TogPortValue+0x94>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	b1 f0       	breq	.+44     	; 0x13cc <DIO_Enu_TogPortValue+0x76>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	c9 f0       	breq	.+50     	; 0x13dc <DIO_Enu_TogPortValue+0x86>
    13aa:	1f c0       	rjmp	.+62     	; 0x13ea <DIO_Enu_TogPortValue+0x94>
        {
        case DIO_PORTA:
            PORTA = ~PORTA;
    13ac:	ab e3       	ldi	r26, 0x3B	; 59
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e3       	ldi	r30, 0x3B	; 59
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 95       	com	r24
    13b8:	8c 93       	st	X, r24
    13ba:	17 c0       	rjmp	.+46     	; 0x13ea <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
    13bc:	a8 e3       	ldi	r26, 0x38	; 56
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e8 e3       	ldi	r30, 0x38	; 56
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	80 95       	com	r24
    13c8:	8c 93       	st	X, r24
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    13cc:	a5 e3       	ldi	r26, 0x35	; 53
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 95       	com	r24
    13d8:	8c 93       	st	X, r24
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <DIO_Enu_TogPortValue+0x94>
            break;
        case DIO_PORTD:
            PORTD = ~PORTD;
    13dc:	a2 e3       	ldi	r26, 0x32	; 50
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e2 e3       	ldi	r30, 0x32	; 50
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 95       	com	r24
    13e8:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_Enu_TogPortValue+0x9e>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <DIO_Enu_TogPinValue+0x6>
    140a:	00 d0       	rcall	.+0      	; 0x140c <DIO_Enu_TogPinValue+0x8>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	8a 83       	std	Y+2, r24	; 0x02
    1414:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1416:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8PortID <= DIO_PORTD &&
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	08 f0       	brcs	.+2      	; 0x1420 <DIO_Enu_TogPinValue+0x1c>
    141e:	75 c0       	rjmp	.+234    	; 0x150a <DIO_Enu_TogPinValue+0x106>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 30       	cpi	r24, 0x08	; 8
    1424:	08 f0       	brcs	.+2      	; 0x1428 <DIO_Enu_TogPinValue+0x24>
    1426:	71 c0       	rjmp	.+226    	; 0x150a <DIO_Enu_TogPinValue+0x106>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3d 83       	std	Y+5, r19	; 0x05
    1430:	2c 83       	std	Y+4, r18	; 0x04
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	9d 81       	ldd	r25, Y+5	; 0x05
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	49 f1       	breq	.+82     	; 0x148e <DIO_Enu_TogPinValue+0x8a>
    143c:	2c 81       	ldd	r18, Y+4	; 0x04
    143e:	3d 81       	ldd	r19, Y+5	; 0x05
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	2c f4       	brge	.+10     	; 0x1450 <DIO_Enu_TogPinValue+0x4c>
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	61 f0       	breq	.+24     	; 0x1466 <DIO_Enu_TogPinValue+0x62>
    144e:	5a c0       	rjmp	.+180    	; 0x1504 <DIO_Enu_TogPinValue+0x100>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	71 f1       	breq	.+92     	; 0x14b6 <DIO_Enu_TogPinValue+0xb2>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	e9 f1       	breq	.+122    	; 0x14de <DIO_Enu_TogPinValue+0xda>
    1464:	4f c0       	rjmp	.+158    	; 0x1504 <DIO_Enu_TogPinValue+0x100>
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
    1466:	ab e3       	ldi	r26, 0x3B	; 59
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e3       	ldi	r30, 0x3B	; 59
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_Enu_TogPinValue+0x80>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_Enu_TogPinValue+0x7c>
    1488:	84 27       	eor	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	3b c0       	rjmp	.+118    	; 0x1504 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
    148e:	a8 e3       	ldi	r26, 0x38	; 56
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e3       	ldi	r30, 0x38	; 56
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_Enu_TogPinValue+0xa8>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_Enu_TogPinValue+0xa4>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	27 c0       	rjmp	.+78     	; 0x1504 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
    14b6:	a5 e3       	ldi	r26, 0x35	; 53
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e3       	ldi	r30, 0x35	; 53
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_Enu_TogPinValue+0xd0>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_Enu_TogPinValue+0xcc>
    14d8:	84 27       	eor	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	13 c0       	rjmp	.+38     	; 0x1504 <DIO_Enu_TogPinValue+0x100>
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
    14de:	a2 e3       	ldi	r26, 0x32	; 50
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_Enu_TogPinValue+0xf8>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_Enu_TogPinValue+0xf4>
    1500:	84 27       	eor	r24, r20
    1502:	8c 93       	st	X, r24
            break;
        }
        Local_EnuErrorState = ES_OK;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_Enu_TogPinValue+0x10a>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_Enu_GetPortValue>:

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <DIO_Enu_GetPortValue+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_Enu_GetPortValue+0x8>
    1528:	00 d0       	rcall	.+0      	; 0x152a <DIO_Enu_GetPortValue+0xa>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	7c 83       	std	Y+4, r23	; 0x04
    1532:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1534:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	09 f4       	brne	.+2      	; 0x1540 <DIO_Enu_GetPortValue+0x20>
    153e:	43 c0       	rjmp	.+134    	; 0x15c6 <DIO_Enu_GetPortValue+0xa6>
    {
        if (Copy_u8PortID <= DIO_PORTD)
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	e8 f5       	brcc	.+122    	; 0x15c0 <DIO_Enu_GetPortValue+0xa0>
        {
            switch (Copy_u8PortID)
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3e 83       	std	Y+6, r19	; 0x06
    154e:	2d 83       	std	Y+5, r18	; 0x05
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	e1 f0       	breq	.+56     	; 0x1592 <DIO_Enu_GetPortValue+0x72>
    155a:	2d 81       	ldd	r18, Y+5	; 0x05
    155c:	3e 81       	ldd	r19, Y+6	; 0x06
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	2c f4       	brge	.+10     	; 0x156e <DIO_Enu_GetPortValue+0x4e>
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	61 f0       	breq	.+24     	; 0x1584 <DIO_Enu_GetPortValue+0x64>
    156c:	26 c0       	rjmp	.+76     	; 0x15ba <DIO_Enu_GetPortValue+0x9a>
    156e:	2d 81       	ldd	r18, Y+5	; 0x05
    1570:	3e 81       	ldd	r19, Y+6	; 0x06
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	a1 f0       	breq	.+40     	; 0x15a0 <DIO_Enu_GetPortValue+0x80>
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	b1 f0       	breq	.+44     	; 0x15ae <DIO_Enu_GetPortValue+0x8e>
    1582:	1b c0       	rjmp	.+54     	; 0x15ba <DIO_Enu_GetPortValue+0x9a>
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
    1584:	e9 e3       	ldi	r30, 0x39	; 57
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	eb 81       	ldd	r30, Y+3	; 0x03
    158c:	fc 81       	ldd	r31, Y+4	; 0x04
    158e:	80 83       	st	Z, r24
    1590:	14 c0       	rjmp	.+40     	; 0x15ba <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
    1592:	e6 e3       	ldi	r30, 0x36	; 54
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	80 83       	st	Z, r24
    159e:	0d c0       	rjmp	.+26     	; 0x15ba <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    15a0:	e3 e3       	ldi	r30, 0x33	; 51
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	80 83       	st	Z, r24
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <DIO_Enu_GetPortValue+0x9a>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = PIND;
    15ae:	e0 e3       	ldi	r30, 0x30	; 48
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	eb 81       	ldd	r30, Y+3	; 0x03
    15b6:	fc 81       	ldd	r31, Y+4	; 0x04
    15b8:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <DIO_Enu_GetPortValue+0xaa>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_Enu_GetPortValue+0xaa>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    15cc:	26 96       	adiw	r28, 0x06	; 6
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <DIO_Enu_GetPinValue>:

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	27 97       	sbiw	r28, 0x07	; 7
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    15f4:	6b 83       	std	Y+3, r22	; 0x03
    15f6:	5d 83       	std	Y+5, r21	; 0x05
    15f8:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_EnuErrorState = ES_NOT_OK;
    15fa:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_pu8Value != NULL)
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_Enu_GetPinValue+0x28>
    1604:	7e c0       	rjmp	.+252    	; 0x1702 <DIO_Enu_GetPinValue+0x124>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	08 f0       	brcs	.+2      	; 0x160e <DIO_Enu_GetPinValue+0x30>
    160c:	77 c0       	rjmp	.+238    	; 0x16fc <DIO_Enu_GetPinValue+0x11e>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 30       	cpi	r24, 0x08	; 8
    1612:	08 f0       	brcs	.+2      	; 0x1616 <DIO_Enu_GetPinValue+0x38>
    1614:	73 c0       	rjmp	.+230    	; 0x16fc <DIO_Enu_GetPinValue+0x11e>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3f 83       	std	Y+7, r19	; 0x07
    161e:	2e 83       	std	Y+6, r18	; 0x06
    1620:	4e 81       	ldd	r20, Y+6	; 0x06
    1622:	5f 81       	ldd	r21, Y+7	; 0x07
    1624:	41 30       	cpi	r20, 0x01	; 1
    1626:	51 05       	cpc	r21, r1
    1628:	59 f1       	breq	.+86     	; 0x1680 <DIO_Enu_GetPinValue+0xa2>
    162a:	8e 81       	ldd	r24, Y+6	; 0x06
    162c:	9f 81       	ldd	r25, Y+7	; 0x07
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	91 05       	cpc	r25, r1
    1632:	34 f4       	brge	.+12     	; 0x1640 <DIO_Enu_GetPinValue+0x62>
    1634:	2e 81       	ldd	r18, Y+6	; 0x06
    1636:	3f 81       	ldd	r19, Y+7	; 0x07
    1638:	21 15       	cp	r18, r1
    163a:	31 05       	cpc	r19, r1
    163c:	69 f0       	breq	.+26     	; 0x1658 <DIO_Enu_GetPinValue+0x7a>
    163e:	5b c0       	rjmp	.+182    	; 0x16f6 <DIO_Enu_GetPinValue+0x118>
    1640:	4e 81       	ldd	r20, Y+6	; 0x06
    1642:	5f 81       	ldd	r21, Y+7	; 0x07
    1644:	42 30       	cpi	r20, 0x02	; 2
    1646:	51 05       	cpc	r21, r1
    1648:	79 f1       	breq	.+94     	; 0x16a8 <DIO_Enu_GetPinValue+0xca>
    164a:	8e 81       	ldd	r24, Y+6	; 0x06
    164c:	9f 81       	ldd	r25, Y+7	; 0x07
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	91 05       	cpc	r25, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <DIO_Enu_GetPinValue+0x78>
    1654:	3d c0       	rjmp	.+122    	; 0x16d0 <DIO_Enu_GetPinValue+0xf2>
    1656:	4f c0       	rjmp	.+158    	; 0x16f6 <DIO_Enu_GetPinValue+0x118>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
    1658:	e9 e3       	ldi	r30, 0x39	; 57
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_Enu_GetPinValue+0x92>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_Enu_GetPinValue+0x8e>
    1674:	ca 01       	movw	r24, r20
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	ec 81       	ldd	r30, Y+4	; 0x04
    167a:	fd 81       	ldd	r31, Y+5	; 0x05
    167c:	80 83       	st	Z, r24
    167e:	3b c0       	rjmp	.+118    	; 0x16f6 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    1680:	e6 e3       	ldi	r30, 0x36	; 54
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_Enu_GetPinValue+0xba>
    1694:	55 95       	asr	r21
    1696:	47 95       	ror	r20
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_Enu_GetPinValue+0xb6>
    169c:	ca 01       	movw	r24, r20
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	ec 81       	ldd	r30, Y+4	; 0x04
    16a2:	fd 81       	ldd	r31, Y+5	; 0x05
    16a4:	80 83       	st	Z, r24
    16a6:	27 c0       	rjmp	.+78     	; 0x16f6 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
    16a8:	e3 e3       	ldi	r30, 0x33	; 51
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_Enu_GetPinValue+0xe2>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_Enu_GetPinValue+0xde>
    16c4:	ca 01       	movw	r24, r20
    16c6:	81 70       	andi	r24, 0x01	; 1
    16c8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ca:	fd 81       	ldd	r31, Y+5	; 0x05
    16cc:	80 83       	st	Z, r24
    16ce:	13 c0       	rjmp	.+38     	; 0x16f6 <DIO_Enu_GetPinValue+0x118>
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    16d0:	e0 e3       	ldi	r30, 0x30	; 48
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a9 01       	movw	r20, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_Enu_GetPinValue+0x10a>
    16e4:	55 95       	asr	r21
    16e6:	47 95       	ror	r20
    16e8:	8a 95       	dec	r24
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_Enu_GetPinValue+0x106>
    16ec:	ca 01       	movw	r24, r20
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	80 83       	st	Z, r24
                break;
            }
            Local_EnuErrorState = ES_OK;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <DIO_Enu_GetPinValue+0x128>
        }
        else
        {
            Local_EnuErrorState = ES_OUT_OF_RANGE;
    16fc:	83 e0       	ldi	r24, 0x03	; 3
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_Enu_GetPinValue+0x128>
        }
    }
    else
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_EnuErrorState;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
}
    1708:	27 96       	adiw	r28, 0x07	; 7
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <DIO_Enu_WriteHighNibbles>:

ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <DIO_Enu_WriteHighNibbles+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <DIO_Enu_WriteHighNibbles+0x8>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	6b 83       	std	Y+3, r22	; 0x03

    ES_t Local_EnuErrorState = ES_NOT_OK;
    172c:	19 82       	std	Y+1, r1	; 0x01

	if ( (Copy_u8PortID <= DIO_PORTD))
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	08 f0       	brcs	.+2      	; 0x1736 <DIO_Enu_WriteHighNibbles+0x1c>
    1734:	65 c0       	rjmp	.+202    	; 0x1800 <DIO_Enu_WriteHighNibbles+0xe6>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	82 95       	swap	r24
    173a:	80 7f       	andi	r24, 0xF0	; 240
    173c:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PortID)
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3d 83       	std	Y+5, r19	; 0x05
    1746:	2c 83       	std	Y+4, r18	; 0x04
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	29 f1       	breq	.+74     	; 0x179c <DIO_Enu_WriteHighNibbles+0x82>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <DIO_Enu_WriteHighNibbles+0x4c>
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	61 f0       	breq	.+24     	; 0x177c <DIO_Enu_WriteHighNibbles+0x62>
    1764:	4a c0       	rjmp	.+148    	; 0x17fa <DIO_Enu_WriteHighNibbles+0xe0>
    1766:	2c 81       	ldd	r18, Y+4	; 0x04
    1768:	3d 81       	ldd	r19, Y+5	; 0x05
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	31 f1       	breq	.+76     	; 0x17bc <DIO_Enu_WriteHighNibbles+0xa2>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	91 05       	cpc	r25, r1
    1778:	89 f1       	breq	.+98     	; 0x17dc <DIO_Enu_WriteHighNibbles+0xc2>
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <DIO_Enu_WriteHighNibbles+0xe0>
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
    177c:	ab e3       	ldi	r26, 0x3B	; 59
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	eb e3       	ldi	r30, 0x3B	; 59
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8f 70       	andi	r24, 0x0F	; 15
    1788:	8c 93       	st	X, r24
			PORTA |=Copy_u8Value;			
    178a:	ab e3       	ldi	r26, 0x3B	; 59
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	eb e3       	ldi	r30, 0x3B	; 59
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	89 2b       	or	r24, r25
    1798:	8c 93       	st	X, r24
    179a:	2f c0       	rjmp	.+94     	; 0x17fa <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8f 70       	andi	r24, 0x0F	; 15
    17a8:	8c 93       	st	X, r24
			PORTB |=Copy_u8Value;
    17aa:	a8 e3       	ldi	r26, 0x38	; 56
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	90 81       	ld	r25, Z
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	89 2b       	or	r24, r25
    17b8:	8c 93       	st	X, r24
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
    17bc:	a5 e3       	ldi	r26, 0x35	; 53
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 70       	andi	r24, 0x0F	; 15
    17c8:	8c 93       	st	X, r24
			PORTC |=Copy_u8Value;
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	90 81       	ld	r25, Z
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	89 2b       	or	r24, r25
    17d8:	8c 93       	st	X, r24
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <DIO_Enu_WriteHighNibbles+0xe0>
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 70       	andi	r24, 0x0F	; 15
    17e8:	8c 93       	st	X, r24
			PORTD |=Copy_u8Value;
    17ea:	a2 e3       	ldi	r26, 0x32	; 50
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e2 e3       	ldi	r30, 0x32	; 50
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	90 81       	ld	r25, Z
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	89 2b       	or	r24, r25
    17f8:	8c 93       	st	X, r24
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_Enu_WriteHighNibbles+0xea>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	89 83       	std	Y+1, r24	; 0x01
    }

	return Local_EnuErrorState ;
    1804:	89 81       	ldd	r24, Y+1	; 0x01

}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <DIO_Enu_WriteLowNibbles>:

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <DIO_Enu_WriteLowNibbles+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_Enu_WriteLowNibbles+0x8>
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	8a 83       	std	Y+2, r24	; 0x02
    1826:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_EnuErrorState = ES_NOT_OK;
    1828:	19 82       	std	Y+1, r1	; 0x01

	if ( (Copy_u8PortID <= DIO_PORTD))
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	08 f0       	brcs	.+2      	; 0x1832 <DIO_Enu_WriteLowNibbles+0x1c>
    1830:	64 c0       	rjmp	.+200    	; 0x18fa <DIO_Enu_WriteLowNibbles+0xe4>
	{
		Copy_u8Value&=0x0f;
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	8f 70       	andi	r24, 0x0F	; 15
    1836:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PortID)
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	3d 83       	std	Y+5, r19	; 0x05
    1840:	2c 83       	std	Y+4, r18	; 0x04
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	91 05       	cpc	r25, r1
    184a:	29 f1       	breq	.+74     	; 0x1896 <DIO_Enu_WriteLowNibbles+0x80>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	2c f4       	brge	.+10     	; 0x1860 <DIO_Enu_WriteLowNibbles+0x4a>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	61 f0       	breq	.+24     	; 0x1876 <DIO_Enu_WriteLowNibbles+0x60>
    185e:	4a c0       	rjmp	.+148    	; 0x18f4 <DIO_Enu_WriteLowNibbles+0xde>
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	31 f1       	breq	.+76     	; 0x18b6 <DIO_Enu_WriteLowNibbles+0xa0>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	89 f1       	breq	.+98     	; 0x18d6 <DIO_Enu_WriteLowNibbles+0xc0>
    1874:	3f c0       	rjmp	.+126    	; 0x18f4 <DIO_Enu_WriteLowNibbles+0xde>
		{
		case DIO_PORTA :
			PORTA &=0xf0;                   
    1876:	ab e3       	ldi	r26, 0x3B	; 59
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	80 7f       	andi	r24, 0xF0	; 240
    1882:	8c 93       	st	X, r24
			PORTA |=Copy_u8Value;			
    1884:	ab e3       	ldi	r26, 0x3B	; 59
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e3       	ldi	r30, 0x3B	; 59
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	90 81       	ld	r25, Z
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	89 2b       	or	r24, r25
    1892:	8c 93       	st	X, r24
    1894:	2f c0       	rjmp	.+94     	; 0x18f4 <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTB:
			PORTB &=0xf0;                 
    1896:	a8 e3       	ldi	r26, 0x38	; 56
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e8 e3       	ldi	r30, 0x38	; 56
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 7f       	andi	r24, 0xF0	; 240
    18a2:	8c 93       	st	X, r24
			PORTB |=Copy_u8Value;
    18a4:	a8 e3       	ldi	r26, 0x38	; 56
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e3       	ldi	r30, 0x38	; 56
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	90 81       	ld	r25, Z
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	89 2b       	or	r24, r25
    18b2:	8c 93       	st	X, r24
    18b4:	1f c0       	rjmp	.+62     	; 0x18f4 <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
    18b6:	a5 e3       	ldi	r26, 0x35	; 53
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e3       	ldi	r30, 0x35	; 53
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 7f       	andi	r24, 0xF0	; 240
    18c2:	8c 93       	st	X, r24
			PORTC |=Copy_u8Value;
    18c4:	a5 e3       	ldi	r26, 0x35	; 53
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e3       	ldi	r30, 0x35	; 53
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	90 81       	ld	r25, Z
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	89 2b       	or	r24, r25
    18d2:	8c 93       	st	X, r24
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <DIO_Enu_WriteLowNibbles+0xde>
			break ;
		case DIO_PORTD:
			PORTD &=0xf0;                 
    18d6:	a2 e3       	ldi	r26, 0x32	; 50
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e2 e3       	ldi	r30, 0x32	; 50
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 7f       	andi	r24, 0xF0	; 240
    18e2:	8c 93       	st	X, r24
			PORTD |=Copy_u8Value;
    18e4:	a2 e3       	ldi	r26, 0x32	; 50
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e2 e3       	ldi	r30, 0x32	; 50
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	90 81       	ld	r25, Z
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	89 2b       	or	r24, r25
    18f2:	8c 93       	st	X, r24
			break ;
		default: break ;

        }
        Local_EnuErrorState = ES_OK;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_Enu_WriteLowNibbles+0xe8>
    }
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	89 83       	std	Y+1, r24	; 0x01
    }

	return Local_EnuErrorState ;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <_exit>:
    1910:	f8 94       	cli

00001912 <__stop_program>:
    1912:	ff cf       	rjmp	.-2      	; 0x1912 <__stop_program>
