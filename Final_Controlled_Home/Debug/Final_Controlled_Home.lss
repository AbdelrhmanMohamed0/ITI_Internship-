
Final_Controlled_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000720  00800060  000028a8  0000293c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00800780  00800780  0000305c  2**0
                  ALLOC
  3 .debug_aranges 00000480  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b1e  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028d5  00000000  00000000  00003ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010ab  00000000  00000000  000068cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003365  00000000  00000000  0000797a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  0000ace0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fe3  00000000  00000000  0000b440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000174f  00000000  00000000  0000c423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b8  00000000  00000000  0000db72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__vector_6>
      1c:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__vector_7>
      20:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__vector_8>
      24:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 0a 	call	0x1406	; 0x1406 <main>
      8a:	0c 94 52 14 	jmp	0x28a4	; 0x28a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <funn>:
		&USER_NINE,
		&USER_TEN*/
};
u8 volatile ff=0;
void funn(void){
	ff=1;
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	80 93 81 07 	sts	0x0781, r24
}
      98:	08 95       	ret

0000009a <isFreeSlot>:

u8 isFreeSlot(ST_userData_t *_user)
{

		u8 ret = 0;
		if(strcmp("FREE",(char *)_user->userName)==0)
      9a:	bc 01       	movw	r22, r24
      9c:	6c 5f       	subi	r22, 0xFC	; 252
      9e:	7f 4f       	sbci	r23, 0xFF	; 255
      a0:	80 e6       	ldi	r24, 0x60	; 96
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
      a8:	9c 01       	movw	r18, r24
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	23 2b       	or	r18, r19
      ae:	09 f4       	brne	.+2      	; 0xb2 <isFreeSlot+0x18>
      b0:	81 e0       	ldi	r24, 0x01	; 1
		{
			ret = 1;
		}

		return ret;
}
      b2:	08 95       	ret

000000b4 <eraseUser>:
		i++;
	}
}

void eraseUser(ST_userData_t *_user)
{
      b4:	dc 01       	movw	r26, r24
	u8 i = 0;
	u8 j = 0;
	while(i < USER_NAME_MAX_SIZE)
	{
		strcpy((char *)_user->userName[i],"\0");
      b6:	14 96       	adiw	r26, 0x04	; 4
      b8:	ec 91       	ld	r30, X
      ba:	14 97       	sbiw	r26, 0x04	; 4
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	10 82       	st	Z, r1
      c0:	15 96       	adiw	r26, 0x05	; 5
      c2:	ec 91       	ld	r30, X
      c4:	15 97       	sbiw	r26, 0x05	; 5
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	10 82       	st	Z, r1
      ca:	16 96       	adiw	r26, 0x06	; 6
      cc:	ec 91       	ld	r30, X
      ce:	16 97       	sbiw	r26, 0x06	; 6
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	10 82       	st	Z, r1
      d4:	17 96       	adiw	r26, 0x07	; 7
      d6:	ec 91       	ld	r30, X
      d8:	17 97       	sbiw	r26, 0x07	; 7
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	10 82       	st	Z, r1
      de:	18 96       	adiw	r26, 0x08	; 8
      e0:	ec 91       	ld	r30, X
      e2:	18 97       	sbiw	r26, 0x08	; 8
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	10 82       	st	Z, r1
      e8:	19 96       	adiw	r26, 0x09	; 9
      ea:	ec 91       	ld	r30, X
      ec:	19 97       	sbiw	r26, 0x09	; 9
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	10 82       	st	Z, r1
      f2:	1a 96       	adiw	r26, 0x0a	; 10
      f4:	ec 91       	ld	r30, X
      f6:	1a 97       	sbiw	r26, 0x0a	; 10
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	10 82       	st	Z, r1
      fc:	1b 96       	adiw	r26, 0x0b	; 11
      fe:	ec 91       	ld	r30, X
     100:	1b 97       	sbiw	r26, 0x0b	; 11
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	10 82       	st	Z, r1
     106:	1c 96       	adiw	r26, 0x0c	; 12
     108:	ec 91       	ld	r30, X
     10a:	1c 97       	sbiw	r26, 0x0c	; 12
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	10 82       	st	Z, r1
     110:	1d 96       	adiw	r26, 0x0d	; 13
     112:	ec 91       	ld	r30, X
     114:	1d 97       	sbiw	r26, 0x0d	; 13
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	10 82       	st	Z, r1
		i++;
	}
	while(j < USER_PASS_MAX_SIZE)
	{
		strcpy((char *)_user->userPass[j],"\0");
     11a:	1e 96       	adiw	r26, 0x0e	; 14
     11c:	ec 91       	ld	r30, X
     11e:	1e 97       	sbiw	r26, 0x0e	; 14
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	10 82       	st	Z, r1
     124:	1f 96       	adiw	r26, 0x0f	; 15
     126:	ec 91       	ld	r30, X
     128:	1f 97       	sbiw	r26, 0x0f	; 15
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	10 82       	st	Z, r1
     12e:	50 96       	adiw	r26, 0x10	; 16
     130:	ec 91       	ld	r30, X
     132:	50 97       	sbiw	r26, 0x10	; 16
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	10 82       	st	Z, r1
     138:	51 96       	adiw	r26, 0x11	; 17
     13a:	ec 91       	ld	r30, X
     13c:	51 97       	sbiw	r26, 0x11	; 17
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	10 82       	st	Z, r1
     142:	52 96       	adiw	r26, 0x12	; 18
     144:	ec 91       	ld	r30, X
     146:	52 97       	sbiw	r26, 0x12	; 18
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	10 82       	st	Z, r1
     14c:	53 96       	adiw	r26, 0x13	; 19
     14e:	ec 91       	ld	r30, X
     150:	53 97       	sbiw	r26, 0x13	; 19
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	10 82       	st	Z, r1
     156:	54 96       	adiw	r26, 0x14	; 20
     158:	ec 91       	ld	r30, X
     15a:	54 97       	sbiw	r26, 0x14	; 20
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	10 82       	st	Z, r1
     160:	55 96       	adiw	r26, 0x15	; 21
     162:	ec 91       	ld	r30, X
     164:	55 97       	sbiw	r26, 0x15	; 21
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	10 82       	st	Z, r1
     16a:	56 96       	adiw	r26, 0x16	; 22
     16c:	ec 91       	ld	r30, X
     16e:	56 97       	sbiw	r26, 0x16	; 22
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	10 82       	st	Z, r1
     174:	57 96       	adiw	r26, 0x17	; 23
     176:	ec 91       	ld	r30, X
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	10 82       	st	Z, r1
		j++;
	}
}
     17c:	08 95       	ret

0000017e <removeUser>:

void removeUser(ST_userData_t *_user)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
	strcpy((char *)_user->userName,"FREE");
     184:	dc 01       	movw	r26, r24
     186:	14 96       	adiw	r26, 0x04	; 4
     188:	e0 e6       	ldi	r30, 0x60	; 96
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	85 e0       	ldi	r24, 0x05	; 5
     18e:	01 90       	ld	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	81 50       	subi	r24, 0x01	; 1
     194:	e1 f7       	brne	.-8      	; 0x18e <removeUser+0x10>
	strcpy((char *)_user->userPass,"FREE");
     196:	de 01       	movw	r26, r28
     198:	1e 96       	adiw	r26, 0x0e	; 14
     19a:	e0 e6       	ldi	r30, 0x60	; 96
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	85 e0       	ldi	r24, 0x05	; 5
     1a0:	01 90       	ld	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	81 50       	subi	r24, 0x01	; 1
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <removeUser+0x22>
	EEPROM_voidSendFrame(_user->userNameAdd,"FREE",strlen("FREE"));
     1a8:	88 81       	ld	r24, Y
     1aa:	99 81       	ldd	r25, Y+1	; 0x01
     1ac:	60 e6       	ldi	r22, 0x60	; 96
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	44 e0       	ldi	r20, 0x04	; 4
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(_user->userNameAdd+strlen("FREE"),'\0');
     1b8:	88 81       	ld	r24, Y
     1ba:	99 81       	ldd	r25, Y+1	; 0x01
     1bc:	04 96       	adiw	r24, 0x04	; 4
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	EEPROM_voidSendFrame(_user->userPassAdd,"FREE",strlen("FREE"));
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	9b 81       	ldd	r25, Y+3	; 0x03
     1c8:	60 e6       	ldi	r22, 0x60	; 96
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	44 e0       	ldi	r20, 0x04	; 4
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(_user->userPassAdd+strlen("FREE"),'\0');
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	9b 81       	ldd	r25, Y+3	; 0x03
     1d8:	04 96       	adiw	r24, 0x04	; 4
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	NumberOfRegistars--;
     1e0:	80 91 82 07 	lds	r24, 0x0782
     1e4:	81 50       	subi	r24, 0x01	; 1
     1e6:	80 93 82 07 	sts	0x0782, r24
	USART_u8SendStringSynch((u8 *)"\n\rUser Removed Successfully ");
     1ea:	85 e6       	ldi	r24, 0x65	; 101
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <UsersList>:
	}
	return ret;
}

void UsersList()
{
     1f8:	1f 93       	push	r17
	u8 i = 0;
	while(i < userSlots)
     1fa:	80 91 cb 06 	lds	r24, 0x06CB
     1fe:	88 23       	and	r24, r24
     200:	e9 f0       	breq	.+58     	; 0x23c <UsersList+0x44>
     202:	10 e0       	ldi	r17, 0x00	; 0
	{
		USART_u8SendStringSynch((u8 *)"\n\r");
     204:	82 e8       	ldi	r24, 0x82	; 130
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8SendData((i) + '0');
     20c:	81 2f       	mov	r24, r17
     20e:	80 5d       	subi	r24, 0xD0	; 208
     210:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <USART_u8SendData>
		USART_u8SendStringSynch((u8 *)" - User Name :   ");
     214:	85 e8       	ldi	r24, 0x85	; 133
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8SendStringSynch((dbAccounts[i]->userName));
     21c:	e1 2f       	mov	r30, r17
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	ee 0f       	add	r30, r30
     222:	ff 1f       	adc	r31, r31
     224:	e9 5b       	subi	r30, 0xB9	; 185
     226:	f8 4f       	sbci	r31, 0xF8	; 248
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	04 96       	adiw	r24, 0x04	; 4
     22e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		i++;
     232:	1f 5f       	subi	r17, 0xFF	; 255
}

void UsersList()
{
	u8 i = 0;
	while(i < userSlots)
     234:	80 91 cb 06 	lds	r24, 0x06CB
     238:	18 17       	cp	r17, r24
     23a:	20 f3       	brcs	.-56     	; 0x204 <UsersList+0xc>
		USART_u8SendData((i) + '0');
		USART_u8SendStringSynch((u8 *)" - User Name :   ");
		USART_u8SendStringSynch((dbAccounts[i]->userName));
		i++;
	}
}
     23c:	1f 91       	pop	r17
     23e:	08 95       	ret

00000240 <isUserExist>:
	}
	return ret;
}

u8 isUserExist(ST_userData_t *userName)
{
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	1f 93       	push	r17
     24e:	df 93       	push	r29
     250:	cf 93       	push	r28
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	2a 97       	sbiw	r28, 0x0a	; 10
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	5c 01       	movw	r10, r24
	u8 i = 0;
	u8 name[10]={0};
	while(i < (userSlots-5))
     264:	80 91 cb 06 	lds	r24, 0x06CB
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	06 97       	sbiw	r24, 0x06	; 6
     26c:	64 f1       	brlt	.+88     	; 0x2c6 <isUserExist+0x86>
}

u8 isUserExist(ST_userData_t *userName)
{
	u8 i = 0;
	u8 name[10]={0};
     26e:	7e 01       	movw	r14, r28
     270:	08 94       	sec
     272:	e1 1c       	adc	r14, r1
     274:	f1 1c       	adc	r15, r1
     276:	8a e0       	ldi	r24, 0x0A	; 10
     278:	f7 01       	movw	r30, r14
     27a:	11 92       	st	Z+, r1
     27c:	8a 95       	dec	r24
     27e:	e9 f7       	brne	.-6      	; 0x27a <isUserExist+0x3a>
	while(i < (userSlots-5))
	{
		EEPROM_voidReadFrame(userName->userNameAdd,name,USER_NAME_MAX_SIZE);
		if(!strcmp((char *)userName->userName,(char *)name))
     280:	94 e0       	ldi	r25, 0x04	; 4
     282:	c9 2e       	mov	r12, r25
     284:	d1 2c       	mov	r13, r1
     286:	ca 0c       	add	r12, r10
     288:	db 1c       	adc	r13, r11
     28a:	10 e0       	ldi	r17, 0x00	; 0
     28c:	0a c0       	rjmp	.+20     	; 0x2a2 <isUserExist+0x62>
		{
			ret = 1;
			return ret;
		}
		i++;
     28e:	1f 5f       	subi	r17, 0xFF	; 255

u8 isUserExist(ST_userData_t *userName)
{
	u8 i = 0;
	u8 name[10]={0};
	while(i < (userSlots-5))
     290:	21 2f       	mov	r18, r17
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	80 91 cb 06 	lds	r24, 0x06CB
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	05 97       	sbiw	r24, 0x05	; 5
     29c:	28 17       	cp	r18, r24
     29e:	39 07       	cpc	r19, r25
     2a0:	94 f4       	brge	.+36     	; 0x2c6 <isUserExist+0x86>
	{
		EEPROM_voidReadFrame(userName->userNameAdd,name,USER_NAME_MAX_SIZE);
     2a2:	f5 01       	movw	r30, r10
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	b7 01       	movw	r22, r14
     2aa:	4a e0       	ldi	r20, 0x0A	; 10
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		if(!strcmp((char *)userName->userName,(char *)name))
     2b2:	c6 01       	movw	r24, r12
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     2ba:	00 97       	sbiw	r24, 0x00	; 0
     2bc:	41 f7       	brne	.-48     	; 0x28e <isUserExist+0x4e>
		{
			ret = 1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 80 07 	sts	0x0780, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <isUserExist+0x8a>
			return ret;
		}
		i++;
	}
	return ret;
     2c6:	80 91 80 07 	lds	r24, 0x0780
}
     2ca:	2a 96       	adiw	r28, 0x0a	; 10
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	1f 91       	pop	r17
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	bf 90       	pop	r11
     2e6:	af 90       	pop	r10
     2e8:	08 95       	ret

000002ea <User_init>:
};
u8 volatile ff=0;
void funn(void){
	ff=1;
}
void User_init(ST_userData_t *dbAccounts){
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24
	USART_voidInit();
     2f8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <USART_voidInit>
	EEPROM_voidInit();
     2fc:	0e 94 85 0c 	call	0x190a	; 0x190a <EEPROM_voidInit>
	FLAG=EEPROM_u8ReadDataByte(FLAG_ADDRESS);
     300:	80 91 cd 06 	lds	r24, 0x06CD
     304:	90 91 ce 06 	lds	r25, 0x06CE
     308:	0e 94 4b 0c 	call	0x1896	; 0x1896 <EEPROM_u8ReadDataByte>
     30c:	80 93 cc 06 	sts	0x06CC, r24
	for(u8 i=0;i<255;i++)
	{
		EEPROM_voidSendDataByte(i,0xff);
	}
*/
	if(FLAG!='Y'){
     310:	89 35       	cpi	r24, 0x59	; 89
     312:	09 f4       	brne	.+2      	; 0x316 <User_init+0x2c>
     314:	65 c1       	rjmp	.+714    	; 0x5e0 <User_init+0x2f6>
	for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++){
	EEPROM_voidSendFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen(dbAccounts[i].userName));
     316:	8e 01       	movw	r16, r28
     318:	0c 5f       	subi	r16, 0xFC	; 252
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	d8 01       	movw	r26, r16
     31e:	0d 90       	ld	r0, X+
     320:	00 20       	and	r0, r0
     322:	e9 f7       	brne	.-6      	; 0x31e <User_init+0x34>
     324:	11 97       	sbiw	r26, 0x01	; 1
     326:	a0 1b       	sub	r26, r16
     328:	b1 0b       	sbc	r27, r17
     32a:	88 81       	ld	r24, Y
     32c:	99 81       	ldd	r25, Y+1	; 0x01
     32e:	b8 01       	movw	r22, r16
     330:	ad 01       	movw	r20, r26
     332:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userNameAdd+strlen(dbAccounts[i].userName),'\0');
     336:	f8 01       	movw	r30, r16
     338:	01 90       	ld	r0, Z+
     33a:	00 20       	and	r0, r0
     33c:	e9 f7       	brne	.-6      	; 0x338 <User_init+0x4e>
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	e0 1b       	sub	r30, r16
     342:	f1 0b       	sbc	r31, r17
     344:	88 81       	ld	r24, Y
     346:	99 81       	ldd	r25, Y+1	; 0x01
     348:	8e 0f       	add	r24, r30
     34a:	9f 1f       	adc	r25, r31
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	EEPROM_voidSendFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen(dbAccounts[i].userPass));
     352:	8e 01       	movw	r16, r28
     354:	02 5f       	subi	r16, 0xF2	; 242
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	d8 01       	movw	r26, r16
     35a:	0d 90       	ld	r0, X+
     35c:	00 20       	and	r0, r0
     35e:	e9 f7       	brne	.-6      	; 0x35a <User_init+0x70>
     360:	11 97       	sbiw	r26, 0x01	; 1
     362:	a0 1b       	sub	r26, r16
     364:	b1 0b       	sbc	r27, r17
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	9b 81       	ldd	r25, Y+3	; 0x03
     36a:	b8 01       	movw	r22, r16
     36c:	ad 01       	movw	r20, r26
     36e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
     372:	f8 01       	movw	r30, r16
     374:	01 90       	ld	r0, Z+
     376:	00 20       	and	r0, r0
     378:	e9 f7       	brne	.-6      	; 0x374 <User_init+0x8a>
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	e0 1b       	sub	r30, r16
     37e:	f1 0b       	sbc	r31, r17
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	9b 81       	ldd	r25, Y+3	; 0x03
     384:	8e 0f       	add	r24, r30
     386:	9f 1f       	adc	r25, r31
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
		EEPROM_voidSendDataByte(i,0xff);
	}
*/
	if(FLAG!='Y'){
	for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++){
	EEPROM_voidSendFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen(dbAccounts[i].userName));
     38e:	58 e1       	ldi	r21, 0x18	; 24
     390:	e5 2e       	mov	r14, r21
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	8e 01       	movw	r16, r28
     39a:	04 5e       	subi	r16, 0xE4	; 228
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	d8 01       	movw	r26, r16
     3a0:	0d 90       	ld	r0, X+
     3a2:	00 20       	and	r0, r0
     3a4:	e9 f7       	brne	.-6      	; 0x3a0 <User_init+0xb6>
     3a6:	11 97       	sbiw	r26, 0x01	; 1
     3a8:	a0 1b       	sub	r26, r16
     3aa:	b1 0b       	sbc	r27, r17
     3ac:	88 8d       	ldd	r24, Y+24	; 0x18
     3ae:	99 8d       	ldd	r25, Y+25	; 0x19
     3b0:	b8 01       	movw	r22, r16
     3b2:	ad 01       	movw	r20, r26
     3b4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userNameAdd+strlen(dbAccounts[i].userName),'\0');
     3b8:	f8 01       	movw	r30, r16
     3ba:	01 90       	ld	r0, Z+
     3bc:	00 20       	and	r0, r0
     3be:	e9 f7       	brne	.-6      	; 0x3ba <User_init+0xd0>
     3c0:	31 97       	sbiw	r30, 0x01	; 1
     3c2:	e0 1b       	sub	r30, r16
     3c4:	f1 0b       	sbc	r31, r17
     3c6:	88 8d       	ldd	r24, Y+24	; 0x18
     3c8:	99 8d       	ldd	r25, Y+25	; 0x19
     3ca:	8e 0f       	add	r24, r30
     3cc:	9f 1f       	adc	r25, r31
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	EEPROM_voidSendFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen(dbAccounts[i].userPass));
     3d4:	8e 01       	movw	r16, r28
     3d6:	0a 5d       	subi	r16, 0xDA	; 218
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	d8 01       	movw	r26, r16
     3dc:	0d 90       	ld	r0, X+
     3de:	00 20       	and	r0, r0
     3e0:	e9 f7       	brne	.-6      	; 0x3dc <User_init+0xf2>
     3e2:	11 97       	sbiw	r26, 0x01	; 1
     3e4:	a0 1b       	sub	r26, r16
     3e6:	b1 0b       	sbc	r27, r17
     3e8:	f7 01       	movw	r30, r14
     3ea:	82 81       	ldd	r24, Z+2	; 0x02
     3ec:	93 81       	ldd	r25, Z+3	; 0x03
     3ee:	b8 01       	movw	r22, r16
     3f0:	ad 01       	movw	r20, r26
     3f2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
     3f6:	f8 01       	movw	r30, r16
     3f8:	01 90       	ld	r0, Z+
     3fa:	00 20       	and	r0, r0
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <User_init+0x10e>
     3fe:	31 97       	sbiw	r30, 0x01	; 1
     400:	e0 1b       	sub	r30, r16
     402:	f1 0b       	sbc	r31, r17
     404:	d7 01       	movw	r26, r14
     406:	12 96       	adiw	r26, 0x02	; 2
     408:	8d 91       	ld	r24, X+
     40a:	9c 91       	ld	r25, X
     40c:	13 97       	sbiw	r26, 0x03	; 3
     40e:	8e 0f       	add	r24, r30
     410:	9f 1f       	adc	r25, r31
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
		EEPROM_voidSendDataByte(i,0xff);
	}
*/
	if(FLAG!='Y'){
	for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++){
	EEPROM_voidSendFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen(dbAccounts[i].userName));
     418:	40 e3       	ldi	r20, 0x30	; 48
     41a:	e4 2e       	mov	r14, r20
     41c:	f1 2c       	mov	r15, r1
     41e:	ec 0e       	add	r14, r28
     420:	fd 1e       	adc	r15, r29
     422:	8e 01       	movw	r16, r28
     424:	0c 5c       	subi	r16, 0xCC	; 204
     426:	1f 4f       	sbci	r17, 0xFF	; 255
     428:	d8 01       	movw	r26, r16
     42a:	0d 90       	ld	r0, X+
     42c:	00 20       	and	r0, r0
     42e:	e9 f7       	brne	.-6      	; 0x42a <User_init+0x140>
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	a0 1b       	sub	r26, r16
     434:	b1 0b       	sbc	r27, r17
     436:	88 a9       	ldd	r24, Y+48	; 0x30
     438:	99 a9       	ldd	r25, Y+49	; 0x31
     43a:	b8 01       	movw	r22, r16
     43c:	ad 01       	movw	r20, r26
     43e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userNameAdd+strlen(dbAccounts[i].userName),'\0');
     442:	f8 01       	movw	r30, r16
     444:	01 90       	ld	r0, Z+
     446:	00 20       	and	r0, r0
     448:	e9 f7       	brne	.-6      	; 0x444 <User_init+0x15a>
     44a:	31 97       	sbiw	r30, 0x01	; 1
     44c:	e0 1b       	sub	r30, r16
     44e:	f1 0b       	sbc	r31, r17
     450:	88 a9       	ldd	r24, Y+48	; 0x30
     452:	99 a9       	ldd	r25, Y+49	; 0x31
     454:	8e 0f       	add	r24, r30
     456:	9f 1f       	adc	r25, r31
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	EEPROM_voidSendFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen(dbAccounts[i].userPass));
     45e:	8e 01       	movw	r16, r28
     460:	02 5c       	subi	r16, 0xC2	; 194
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	d8 01       	movw	r26, r16
     466:	0d 90       	ld	r0, X+
     468:	00 20       	and	r0, r0
     46a:	e9 f7       	brne	.-6      	; 0x466 <User_init+0x17c>
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	a0 1b       	sub	r26, r16
     470:	b1 0b       	sbc	r27, r17
     472:	f7 01       	movw	r30, r14
     474:	82 81       	ldd	r24, Z+2	; 0x02
     476:	93 81       	ldd	r25, Z+3	; 0x03
     478:	b8 01       	movw	r22, r16
     47a:	ad 01       	movw	r20, r26
     47c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
     480:	f8 01       	movw	r30, r16
     482:	01 90       	ld	r0, Z+
     484:	00 20       	and	r0, r0
     486:	e9 f7       	brne	.-6      	; 0x482 <User_init+0x198>
     488:	31 97       	sbiw	r30, 0x01	; 1
     48a:	e0 1b       	sub	r30, r16
     48c:	f1 0b       	sbc	r31, r17
     48e:	d7 01       	movw	r26, r14
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	8d 91       	ld	r24, X+
     494:	9c 91       	ld	r25, X
     496:	13 97       	sbiw	r26, 0x03	; 3
     498:	8e 0f       	add	r24, r30
     49a:	9f 1f       	adc	r25, r31
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
		EEPROM_voidSendDataByte(i,0xff);
	}
*/
	if(FLAG!='Y'){
	for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++){
	EEPROM_voidSendFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen(dbAccounts[i].userName));
     4a2:	38 e4       	ldi	r19, 0x48	; 72
     4a4:	e3 2e       	mov	r14, r19
     4a6:	f1 2c       	mov	r15, r1
     4a8:	ec 0e       	add	r14, r28
     4aa:	fd 1e       	adc	r15, r29
     4ac:	87 01       	movw	r16, r14
     4ae:	0c 5f       	subi	r16, 0xFC	; 252
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	d8 01       	movw	r26, r16
     4b4:	0d 90       	ld	r0, X+
     4b6:	00 20       	and	r0, r0
     4b8:	e9 f7       	brne	.-6      	; 0x4b4 <User_init+0x1ca>
     4ba:	11 97       	sbiw	r26, 0x01	; 1
     4bc:	a0 1b       	sub	r26, r16
     4be:	b1 0b       	sbc	r27, r17
     4c0:	f7 01       	movw	r30, r14
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	b8 01       	movw	r22, r16
     4c8:	ad 01       	movw	r20, r26
     4ca:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userNameAdd+strlen(dbAccounts[i].userName),'\0');
     4ce:	f8 01       	movw	r30, r16
     4d0:	01 90       	ld	r0, Z+
     4d2:	00 20       	and	r0, r0
     4d4:	e9 f7       	brne	.-6      	; 0x4d0 <User_init+0x1e6>
     4d6:	31 97       	sbiw	r30, 0x01	; 1
     4d8:	e0 1b       	sub	r30, r16
     4da:	f1 0b       	sbc	r31, r17
     4dc:	d7 01       	movw	r26, r14
     4de:	8d 91       	ld	r24, X+
     4e0:	9c 91       	ld	r25, X
     4e2:	8e 0f       	add	r24, r30
     4e4:	9f 1f       	adc	r25, r31
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	EEPROM_voidSendFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen(dbAccounts[i].userPass));
     4ec:	87 01       	movw	r16, r14
     4ee:	02 5f       	subi	r16, 0xF2	; 242
     4f0:	1f 4f       	sbci	r17, 0xFF	; 255
     4f2:	d8 01       	movw	r26, r16
     4f4:	0d 90       	ld	r0, X+
     4f6:	00 20       	and	r0, r0
     4f8:	e9 f7       	brne	.-6      	; 0x4f4 <User_init+0x20a>
     4fa:	11 97       	sbiw	r26, 0x01	; 1
     4fc:	a0 1b       	sub	r26, r16
     4fe:	b1 0b       	sbc	r27, r17
     500:	f7 01       	movw	r30, r14
     502:	82 81       	ldd	r24, Z+2	; 0x02
     504:	93 81       	ldd	r25, Z+3	; 0x03
     506:	b8 01       	movw	r22, r16
     508:	ad 01       	movw	r20, r26
     50a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
     50e:	f8 01       	movw	r30, r16
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <User_init+0x226>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	e0 1b       	sub	r30, r16
     51a:	f1 0b       	sbc	r31, r17
     51c:	d7 01       	movw	r26, r14
     51e:	12 96       	adiw	r26, 0x02	; 2
     520:	8d 91       	ld	r24, X+
     522:	9c 91       	ld	r25, X
     524:	13 97       	sbiw	r26, 0x03	; 3
     526:	8e 0f       	add	r24, r30
     528:	9f 1f       	adc	r25, r31
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
		EEPROM_voidSendDataByte(i,0xff);
	}
*/
	if(FLAG!='Y'){
	for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++){
	EEPROM_voidSendFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen(dbAccounts[i].userName));
     530:	20 e6       	ldi	r18, 0x60	; 96
     532:	e2 2e       	mov	r14, r18
     534:	f1 2c       	mov	r15, r1
     536:	ec 0e       	add	r14, r28
     538:	fd 1e       	adc	r15, r29
     53a:	87 01       	movw	r16, r14
     53c:	0c 5f       	subi	r16, 0xFC	; 252
     53e:	1f 4f       	sbci	r17, 0xFF	; 255
     540:	d8 01       	movw	r26, r16
     542:	0d 90       	ld	r0, X+
     544:	00 20       	and	r0, r0
     546:	e9 f7       	brne	.-6      	; 0x542 <User_init+0x258>
     548:	11 97       	sbiw	r26, 0x01	; 1
     54a:	a0 1b       	sub	r26, r16
     54c:	b1 0b       	sbc	r27, r17
     54e:	f7 01       	movw	r30, r14
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	b8 01       	movw	r22, r16
     556:	ad 01       	movw	r20, r26
     558:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userNameAdd+strlen(dbAccounts[i].userName),'\0');
     55c:	f8 01       	movw	r30, r16
     55e:	01 90       	ld	r0, Z+
     560:	00 20       	and	r0, r0
     562:	e9 f7       	brne	.-6      	; 0x55e <User_init+0x274>
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	e0 1b       	sub	r30, r16
     568:	f1 0b       	sbc	r31, r17
     56a:	d7 01       	movw	r26, r14
     56c:	8d 91       	ld	r24, X+
     56e:	9c 91       	ld	r25, X
     570:	8e 0f       	add	r24, r30
     572:	9f 1f       	adc	r25, r31
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	EEPROM_voidSendFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen(dbAccounts[i].userPass));
     57a:	87 01       	movw	r16, r14
     57c:	02 5f       	subi	r16, 0xF2	; 242
     57e:	1f 4f       	sbci	r17, 0xFF	; 255
     580:	d8 01       	movw	r26, r16
     582:	0d 90       	ld	r0, X+
     584:	00 20       	and	r0, r0
     586:	e9 f7       	brne	.-6      	; 0x582 <User_init+0x298>
     588:	11 97       	sbiw	r26, 0x01	; 1
     58a:	a0 1b       	sub	r26, r16
     58c:	b1 0b       	sbc	r27, r17
     58e:	f7 01       	movw	r30, r14
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	b8 01       	movw	r22, r16
     596:	ad 01       	movw	r20, r26
     598:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
     59c:	f8 01       	movw	r30, r16
     59e:	01 90       	ld	r0, Z+
     5a0:	00 20       	and	r0, r0
     5a2:	e9 f7       	brne	.-6      	; 0x59e <User_init+0x2b4>
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	e0 1b       	sub	r30, r16
     5a8:	f1 0b       	sbc	r31, r17
     5aa:	d7 01       	movw	r26, r14
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	8d 91       	ld	r24, X+
     5b0:	9c 91       	ld	r25, X
     5b2:	13 97       	sbiw	r26, 0x03	; 3
     5b4:	8e 0f       	add	r24, r30
     5b6:	9f 1f       	adc	r25, r31
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	0e 94 6d 0c 	call	0x18da	; 0x18da <EEPROM_voidSendDataByte>
	}
	EEPROM_voidSendFrame(FLAG_ADDRESS,"Y",1);
     5be:	80 91 cd 06 	lds	r24, 0x06CD
     5c2:	90 91 ce 06 	lds	r25, 0x06CE
     5c6:	67 e9       	ldi	r22, 0x97	; 151
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	41 e0       	ldi	r20, 0x01	; 1
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
		}
	}
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret
	EEPROM_voidSendFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen(dbAccounts[i].userName));
	EEPROM_voidSendDataByte(dbAccounts[i].userNameAdd+strlen(dbAccounts[i].userName),'\0');
	EEPROM_voidSendFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen(dbAccounts[i].userPass));
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
	}
	EEPROM_voidSendFrame(FLAG_ADDRESS,"Y",1);
     5e0:	de 01       	movw	r26, r28
     5e2:	80 e0       	ldi	r24, 0x00	; 0
{
	u8 i = 0;
	u8 j = 0;
	while(i < USER_NAME_MAX_SIZE)
	{
		strcpy((char *)_user->userName[i],"\0");
     5e4:	14 96       	adiw	r26, 0x04	; 4
     5e6:	ec 91       	ld	r30, X
     5e8:	14 97       	sbiw	r26, 0x04	; 4
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	10 82       	st	Z, r1
     5ee:	15 96       	adiw	r26, 0x05	; 5
     5f0:	ec 91       	ld	r30, X
     5f2:	15 97       	sbiw	r26, 0x05	; 5
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	10 82       	st	Z, r1
     5f8:	16 96       	adiw	r26, 0x06	; 6
     5fa:	ec 91       	ld	r30, X
     5fc:	16 97       	sbiw	r26, 0x06	; 6
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	10 82       	st	Z, r1
     602:	17 96       	adiw	r26, 0x07	; 7
     604:	ec 91       	ld	r30, X
     606:	17 97       	sbiw	r26, 0x07	; 7
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	10 82       	st	Z, r1
     60c:	18 96       	adiw	r26, 0x08	; 8
     60e:	ec 91       	ld	r30, X
     610:	18 97       	sbiw	r26, 0x08	; 8
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	10 82       	st	Z, r1
     616:	19 96       	adiw	r26, 0x09	; 9
     618:	ec 91       	ld	r30, X
     61a:	19 97       	sbiw	r26, 0x09	; 9
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	10 82       	st	Z, r1
     620:	1a 96       	adiw	r26, 0x0a	; 10
     622:	ec 91       	ld	r30, X
     624:	1a 97       	sbiw	r26, 0x0a	; 10
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	10 82       	st	Z, r1
     62a:	1b 96       	adiw	r26, 0x0b	; 11
     62c:	ec 91       	ld	r30, X
     62e:	1b 97       	sbiw	r26, 0x0b	; 11
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	10 82       	st	Z, r1
     634:	1c 96       	adiw	r26, 0x0c	; 12
     636:	ec 91       	ld	r30, X
     638:	1c 97       	sbiw	r26, 0x0c	; 12
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	10 82       	st	Z, r1
     63e:	1d 96       	adiw	r26, 0x0d	; 13
     640:	ec 91       	ld	r30, X
     642:	1d 97       	sbiw	r26, 0x0d	; 13
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	10 82       	st	Z, r1
		i++;
	}
	while(j < USER_PASS_MAX_SIZE)
	{
		strcpy((char *)_user->userPass[j],"\0");
     648:	1e 96       	adiw	r26, 0x0e	; 14
     64a:	ec 91       	ld	r30, X
     64c:	1e 97       	sbiw	r26, 0x0e	; 14
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	10 82       	st	Z, r1
     652:	1f 96       	adiw	r26, 0x0f	; 15
     654:	ec 91       	ld	r30, X
     656:	1f 97       	sbiw	r26, 0x0f	; 15
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	10 82       	st	Z, r1
     65c:	50 96       	adiw	r26, 0x10	; 16
     65e:	ec 91       	ld	r30, X
     660:	50 97       	sbiw	r26, 0x10	; 16
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	10 82       	st	Z, r1
     666:	51 96       	adiw	r26, 0x11	; 17
     668:	ec 91       	ld	r30, X
     66a:	51 97       	sbiw	r26, 0x11	; 17
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	10 82       	st	Z, r1
     670:	52 96       	adiw	r26, 0x12	; 18
     672:	ec 91       	ld	r30, X
     674:	52 97       	sbiw	r26, 0x12	; 18
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	10 82       	st	Z, r1
     67a:	53 96       	adiw	r26, 0x13	; 19
     67c:	ec 91       	ld	r30, X
     67e:	53 97       	sbiw	r26, 0x13	; 19
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	10 82       	st	Z, r1
     684:	54 96       	adiw	r26, 0x14	; 20
     686:	ec 91       	ld	r30, X
     688:	54 97       	sbiw	r26, 0x14	; 20
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	10 82       	st	Z, r1
     68e:	55 96       	adiw	r26, 0x15	; 21
     690:	ec 91       	ld	r30, X
     692:	55 97       	sbiw	r26, 0x15	; 21
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	10 82       	st	Z, r1
     698:	56 96       	adiw	r26, 0x16	; 22
     69a:	ec 91       	ld	r30, X
     69c:	56 97       	sbiw	r26, 0x16	; 22
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
     6a2:	57 96       	adiw	r26, 0x17	; 23
     6a4:	ec 91       	ld	r30, X
     6a6:	57 97       	sbiw	r26, 0x17	; 23
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	10 82       	st	Z, r1
	EEPROM_voidSendDataByte(dbAccounts[i].userPassAdd+strlen(dbAccounts[i].userPass),'\0');
	}
	EEPROM_voidSendFrame(FLAG_ADDRESS,"Y",1);
	}
	else{
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	58 96       	adiw	r26, 0x18	; 24
     6b0:	85 30       	cpi	r24, 0x05	; 5
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <User_init+0x3cc>
     6b4:	97 cf       	rjmp	.-210    	; 0x5e4 <User_init+0x2fa>
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     6b6:	be 01       	movw	r22, r28
     6b8:	6c 5f       	subi	r22, 0xFC	; 252
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	db 01       	movw	r26, r22
     6be:	0d 90       	ld	r0, X+
     6c0:	00 20       	and	r0, r0
     6c2:	e9 f7       	brne	.-6      	; 0x6be <User_init+0x3d4>
     6c4:	a6 1b       	sub	r26, r22
     6c6:	b7 0b       	sbc	r27, r23
     6c8:	88 81       	ld	r24, Y
     6ca:	99 81       	ldd	r25, Y+1	; 0x01
     6cc:	ad 01       	movw	r20, r26
     6ce:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     6d2:	be 01       	movw	r22, r28
     6d4:	62 5f       	subi	r22, 0xF2	; 242
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255
     6d8:	db 01       	movw	r26, r22
     6da:	0d 90       	ld	r0, X+
     6dc:	00 20       	and	r0, r0
     6de:	e9 f7       	brne	.-6      	; 0x6da <User_init+0x3f0>
     6e0:	a6 1b       	sub	r26, r22
     6e2:	b7 0b       	sbc	r27, r23
     6e4:	8a 81       	ldd	r24, Y+2	; 0x02
     6e6:	9b 81       	ldd	r25, Y+3	; 0x03
     6e8:	ad 01       	movw	r20, r26
     6ea:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     6ee:	be 01       	movw	r22, r28
     6f0:	64 5e       	subi	r22, 0xE4	; 228
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	db 01       	movw	r26, r22
     6f6:	0d 90       	ld	r0, X+
     6f8:	00 20       	and	r0, r0
     6fa:	e9 f7       	brne	.-6      	; 0x6f6 <User_init+0x40c>
     6fc:	a6 1b       	sub	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	88 8d       	ldd	r24, Y+24	; 0x18
     702:	99 8d       	ldd	r25, Y+25	; 0x19
     704:	ad 01       	movw	r20, r26
     706:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     70a:	be 01       	movw	r22, r28
     70c:	6a 5d       	subi	r22, 0xDA	; 218
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	db 01       	movw	r26, r22
     712:	0d 90       	ld	r0, X+
     714:	00 20       	and	r0, r0
     716:	e9 f7       	brne	.-6      	; 0x712 <User_init+0x428>
     718:	a6 1b       	sub	r26, r22
     71a:	b7 0b       	sbc	r27, r23
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     71c:	68 96       	adiw	r28, 0x18	; 24
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	9b 81       	ldd	r25, Y+3	; 0x03
     722:	68 97       	sbiw	r28, 0x18	; 24
     724:	ad 01       	movw	r20, r26
     726:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     72a:	be 01       	movw	r22, r28
     72c:	6c 5c       	subi	r22, 0xCC	; 204
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	db 01       	movw	r26, r22
     732:	0d 90       	ld	r0, X+
     734:	00 20       	and	r0, r0
     736:	e9 f7       	brne	.-6      	; 0x732 <User_init+0x448>
     738:	a6 1b       	sub	r26, r22
     73a:	b7 0b       	sbc	r27, r23
     73c:	88 a9       	ldd	r24, Y+48	; 0x30
     73e:	99 a9       	ldd	r25, Y+49	; 0x31
     740:	ad 01       	movw	r20, r26
     742:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     746:	be 01       	movw	r22, r28
     748:	62 5c       	subi	r22, 0xC2	; 194
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	db 01       	movw	r26, r22
     74e:	0d 90       	ld	r0, X+
     750:	00 20       	and	r0, r0
     752:	e9 f7       	brne	.-6      	; 0x74e <User_init+0x464>
     754:	a6 1b       	sub	r26, r22
     756:	b7 0b       	sbc	r27, r23
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     758:	e0 96       	adiw	r28, 0x30	; 48
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	9b 81       	ldd	r25, Y+3	; 0x03
     75e:	e0 97       	sbiw	r28, 0x30	; 48
     760:	ad 01       	movw	r20, r26
     762:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     766:	8e 01       	movw	r16, r28
     768:	08 5b       	subi	r16, 0xB8	; 184
     76a:	1f 4f       	sbci	r17, 0xFF	; 255
     76c:	b8 01       	movw	r22, r16
     76e:	6c 5f       	subi	r22, 0xFC	; 252
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	db 01       	movw	r26, r22
     774:	0d 90       	ld	r0, X+
     776:	00 20       	and	r0, r0
     778:	e9 f7       	brne	.-6      	; 0x774 <User_init+0x48a>
     77a:	a6 1b       	sub	r26, r22
     77c:	b7 0b       	sbc	r27, r23
     77e:	f8 01       	movw	r30, r16
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	ad 01       	movw	r20, r26
     786:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     78a:	b8 01       	movw	r22, r16
     78c:	62 5f       	subi	r22, 0xF2	; 242
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	db 01       	movw	r26, r22
     792:	0d 90       	ld	r0, X+
     794:	00 20       	and	r0, r0
     796:	e9 f7       	brne	.-6      	; 0x792 <User_init+0x4a8>
     798:	a6 1b       	sub	r26, r22
     79a:	b7 0b       	sbc	r27, r23
     79c:	f8 01       	movw	r30, r16
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	93 81       	ldd	r25, Z+3	; 0x03
     7a2:	ad 01       	movw	r20, r26
     7a4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		{
			eraseUser(&dbAccounts[i]);
		}
		for(u8 i=0;i<MAX_NUMBER_OF_USERS-5;i++)
		{
			EEPROM_voidReadFrame(dbAccounts[i].userNameAdd,dbAccounts[i].userName,strlen((dbAccounts[i].userName))+1);
     7a8:	8e 01       	movw	r16, r28
     7aa:	00 5a       	subi	r16, 0xA0	; 160
     7ac:	1f 4f       	sbci	r17, 0xFF	; 255
     7ae:	b8 01       	movw	r22, r16
     7b0:	6c 5f       	subi	r22, 0xFC	; 252
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	db 01       	movw	r26, r22
     7b6:	0d 90       	ld	r0, X+
     7b8:	00 20       	and	r0, r0
     7ba:	e9 f7       	brne	.-6      	; 0x7b6 <User_init+0x4cc>
     7bc:	a6 1b       	sub	r26, r22
     7be:	b7 0b       	sbc	r27, r23
     7c0:	f8 01       	movw	r30, r16
     7c2:	80 81       	ld	r24, Z
     7c4:	91 81       	ldd	r25, Z+1	; 0x01
     7c6:	ad 01       	movw	r20, r26
     7c8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
			EEPROM_voidReadFrame(dbAccounts[i].userPassAdd,dbAccounts[i].userPass,strlen((dbAccounts[i].userPass))+1);
     7cc:	b8 01       	movw	r22, r16
     7ce:	62 5f       	subi	r22, 0xF2	; 242
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	db 01       	movw	r26, r22
     7d4:	0d 90       	ld	r0, X+
     7d6:	00 20       	and	r0, r0
     7d8:	e9 f7       	brne	.-6      	; 0x7d4 <User_init+0x4ea>
     7da:	a6 1b       	sub	r26, r22
     7dc:	b7 0b       	sbc	r27, r23
     7de:	f8 01       	movw	r30, r16
     7e0:	82 81       	ldd	r24, Z+2	; 0x02
     7e2:	93 81       	ldd	r25, Z+3	; 0x03
     7e4:	ad 01       	movw	r20, r26
     7e6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		}
	}
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	08 95       	ret

000007f8 <editUser>:
		}
	}
	return ret;
}
u8 editUser(ST_userData_t *_user)
{
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	6e 97       	sbiw	r28, 0x1e	; 30
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	5c 01       	movw	r10, r24
	u8 ret = 0;
	USART_u8SendStringSynch((u8 *)"\n\r===== Editing User =====");
     822:	89 e9       	ldi	r24, 0x99	; 153
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>

	u8 tempname[USER_NAME_MAX_SIZE];
	u8 temppass[USER_PASS_MAX_SIZE];
	USART_u8SendStringSynch((u8 *)"\n\rEnter User Name : ");
     82a:	84 eb       	ldi	r24, 0xB4	; 180
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8ReceiveBufferAsynch(tempname,USER_NAME_MAX_SIZE,funn);
     832:	4e 01       	movw	r8, r28
     834:	08 94       	sec
     836:	81 1c       	adc	r8, r1
     838:	91 1c       	adc	r9, r1
     83a:	c4 01       	movw	r24, r8
     83c:	4a e0       	ldi	r20, 0x0A	; 10
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	29 e4       	ldi	r18, 0x49	; 73
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while(ff==0);
     84c:	80 91 81 07 	lds	r24, 0x0781
     850:	88 23       	and	r24, r24
     852:	e1 f3       	breq	.-8      	; 0x84c <editUser+0x54>
	ff=0;
     854:	10 92 81 07 	sts	0x0781, r1
}

u8 isUserExist(ST_userData_t *userName)
{
	u8 i = 0;
	u8 name[10]={0};
     858:	f5 e1       	ldi	r31, 0x15	; 21
     85a:	ef 2e       	mov	r14, r31
     85c:	f1 2c       	mov	r15, r1
     85e:	ec 0e       	add	r14, r28
     860:	fd 1e       	adc	r15, r29
     862:	8a e0       	ldi	r24, 0x0A	; 10
     864:	f7 01       	movw	r30, r14
     866:	11 92       	st	Z+, r1
     868:	8a 95       	dec	r24
     86a:	e9 f7       	brne	.-6      	; 0x866 <__stack+0x7>
	while(i < (userSlots-5))
     86c:	80 91 cb 06 	lds	r24, 0x06CB
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	06 97       	sbiw	r24, 0x06	; 6
     874:	0c f4       	brge	.+2      	; 0x878 <__stack+0x19>
     876:	71 c0       	rjmp	.+226    	; 0x95a <__stack+0xfb>
	{
		EEPROM_voidReadFrame(userName->userNameAdd,name,USER_NAME_MAX_SIZE);
		if(!strcmp((char *)userName->userName,(char *)name))
     878:	e4 e0       	ldi	r30, 0x04	; 4
     87a:	ce 2e       	mov	r12, r30
     87c:	d1 2c       	mov	r13, r1
     87e:	ca 0c       	add	r12, r10
     880:	db 1c       	adc	r13, r11
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	0b c0       	rjmp	.+22     	; 0x89c <__stack+0x3d>
		{
			ret = 1;
			return ret;
		}
		i++;
     886:	0f 5f       	subi	r16, 0xFF	; 255

u8 isUserExist(ST_userData_t *userName)
{
	u8 i = 0;
	u8 name[10]={0};
	while(i < (userSlots-5))
     888:	20 2f       	mov	r18, r16
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	80 91 cb 06 	lds	r24, 0x06CB
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	05 97       	sbiw	r24, 0x05	; 5
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	0c f0       	brlt	.+2      	; 0x89c <__stack+0x3d>
     89a:	5f c0       	rjmp	.+190    	; 0x95a <__stack+0xfb>
	{
		EEPROM_voidReadFrame(userName->userNameAdd,name,USER_NAME_MAX_SIZE);
     89c:	f5 01       	movw	r30, r10
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	b7 01       	movw	r22, r14
     8a4:	4a e0       	ldi	r20, 0x0A	; 10
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		if(!strcmp((char *)userName->userName,(char *)name))
     8ac:	c6 01       	movw	r24, r12
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	39 f7       	brne	.-50     	; 0x886 <__stack+0x27>
		{
			ret = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 80 07 	sts	0x0780, r24

u8 isFreeSlot(ST_userData_t *_user)
{

		u8 ret = 0;
		if(strcmp("FREE",(char *)_user->userName)==0)
     8be:	80 e6       	ldi	r24, 0x60	; 96
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	b6 01       	movw	r22, r12
     8c4:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__stack+0x6f>
     8cc:	4a c0       	rjmp	.+148    	; 0x962 <__stack+0x103>
	if(isUserExist(_user))
	{
		u8 func_ret = isFreeSlot(_user);
		if(func_ret == 0)
		{
			eraseUser(_user);
     8ce:	c5 01       	movw	r24, r10
     8d0:	0e 94 5a 00 	call	0xb4	; 0xb4 <eraseUser>
			strcpy((char *)_user->userName,(char *)tempname);
     8d4:	c6 01       	movw	r24, r12
     8d6:	b4 01       	movw	r22, r8
     8d8:	0e 94 4b 14 	call	0x2896	; 0x2896 <strcpy>
			ret = 1;
		}
	}
	if(ret == 1)
	{
		USART_u8SendStringSynch((u8 *)"\n\rEnter User Password : ");
     8dc:	89 ec       	ldi	r24, 0xC9	; 201
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8ReceiveBufferAsynch(temppass,USER_PASS_MAX_SIZE,funn);
     8e4:	6b e0       	ldi	r22, 0x0B	; 11
     8e6:	e6 2e       	mov	r14, r22
     8e8:	f1 2c       	mov	r15, r1
     8ea:	ec 0e       	add	r14, r28
     8ec:	fd 1e       	adc	r15, r29
     8ee:	c7 01       	movw	r24, r14
     8f0:	4a e0       	ldi	r20, 0x0A	; 10
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	29 e4       	ldi	r18, 0x49	; 73
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
		while(ff==0);
     900:	80 91 81 07 	lds	r24, 0x0781
     904:	88 23       	and	r24, r24
     906:	e1 f3       	breq	.-8      	; 0x900 <__stack+0xa1>
		ff=0;
     908:	10 92 81 07 	sts	0x0781, r1
		strcpy((char *)_user->userPass,(char *)temppass);
     90c:	85 01       	movw	r16, r10
     90e:	02 5f       	subi	r16, 0xF2	; 242
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	c8 01       	movw	r24, r16
     914:	b7 01       	movw	r22, r14
     916:	0e 94 4b 14 	call	0x2896	; 0x2896 <strcpy>
		EEPROM_voidSendFrame(_user->userNameAdd,_user->userName,strlen((_user->userName))+1);
     91a:	d6 01       	movw	r26, r12
     91c:	0d 90       	ld	r0, X+
     91e:	00 20       	and	r0, r0
     920:	e9 f7       	brne	.-6      	; 0x91c <__stack+0xbd>
     922:	ac 19       	sub	r26, r12
     924:	bd 09       	sbc	r27, r13
     926:	f5 01       	movw	r30, r10
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	b6 01       	movw	r22, r12
     92e:	ad 01       	movw	r20, r26
     930:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
		EEPROM_voidSendFrame(_user->userPassAdd,_user->userPass,strlen((_user->userPass))+1);
     934:	d8 01       	movw	r26, r16
     936:	0d 90       	ld	r0, X+
     938:	00 20       	and	r0, r0
     93a:	e9 f7       	brne	.-6      	; 0x936 <__stack+0xd7>
     93c:	a0 1b       	sub	r26, r16
     93e:	b1 0b       	sbc	r27, r17
     940:	f5 01       	movw	r30, r10
     942:	82 81       	ldd	r24, Z+2	; 0x02
     944:	93 81       	ldd	r25, Z+3	; 0x03
     946:	b8 01       	movw	r22, r16
     948:	ad 01       	movw	r20, r26
     94a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
		USART_u8SendStringSynch((u8 *)"\n\rUser Edited Successfully ");
     94e:	86 ef       	ldi	r24, 0xF6	; 246
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	09 c0       	rjmp	.+18     	; 0x96c <__stack+0x10d>
	u8 temppass[USER_PASS_MAX_SIZE];
	USART_u8SendStringSynch((u8 *)"\n\rEnter User Name : ");
	USART_u8ReceiveBufferAsynch(tempname,USER_NAME_MAX_SIZE,funn);
	while(ff==0);
	ff=0;
	if(isUserExist(_user))
     95a:	80 91 80 07 	lds	r24, 0x0780
     95e:	88 23       	and	r24, r24
     960:	c1 f4       	brne	.+48     	; 0x992 <__stack+0x133>
		EEPROM_voidSendFrame(_user->userPassAdd,_user->userPass,strlen((_user->userPass))+1);
		USART_u8SendStringSynch((u8 *)"\n\rUser Edited Successfully ");
	}
	else
	{
		USART_u8SendStringSynch((u8 *)"\n\rUser Is Not Exist");
     962:	82 ee       	ldi	r24, 0xE2	; 226
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     96a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ret;
}
     96c:	6e 96       	adiw	r28, 0x1e	; 30
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	9f 90       	pop	r9
     98e:	8f 90       	pop	r8
     990:	08 95       	ret
     992:	74 e0       	ldi	r23, 0x04	; 4
     994:	c7 2e       	mov	r12, r23
     996:	d1 2c       	mov	r13, r1
     998:	ca 0c       	add	r12, r10
     99a:	db 1c       	adc	r13, r11
     99c:	90 cf       	rjmp	.-224    	; 0x8be <__stack+0x5f>

0000099e <addNewUser>:
		}
	}
}

u8 addNewUser(ST_userData_t *_user)
{
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	6e 97       	sbiw	r28, 0x1e	; 30
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	7c 01       	movw	r14, r24
	u8 ret = 0;
	USART_u8SendStringSynch((u8 *)"\n\r===== Adding New User =====");
     9c8:	82 e1       	ldi	r24, 0x12	; 18
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	if(NumberOfRegistars == MAX_NUMBER_OF_USERS)
     9d0:	80 91 82 07 	lds	r24, 0x0782
     9d4:	8a 30       	cpi	r24, 0x0A	; 10
     9d6:	09 f4       	brne	.+2      	; 0x9da <addNewUser+0x3c>
     9d8:	1a c1       	rjmp	.+564    	; 0xc0e <addNewUser+0x270>
	{
		USART_u8SendStringSynch((u8 *)"\n\r You Reach The Max Number Of Users");
	}
	else
	{
		u8 tempname[USER_NAME_MAX_SIZE]={0};
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	6e 01       	movw	r12, r28
     9de:	08 94       	sec
     9e0:	c1 1c       	adc	r12, r1
     9e2:	d1 1c       	adc	r13, r1
     9e4:	d6 01       	movw	r26, r12
     9e6:	e8 2f       	mov	r30, r24
     9e8:	1d 92       	st	X+, r1
     9ea:	ea 95       	dec	r30
     9ec:	e9 f7       	brne	.-6      	; 0x9e8 <addNewUser+0x4a>
		u8 temppass[USER_PASS_MAX_SIZE]={0};
     9ee:	1b e0       	ldi	r17, 0x0B	; 11
     9f0:	81 2e       	mov	r8, r17
     9f2:	91 2c       	mov	r9, r1
     9f4:	8c 0e       	add	r8, r28
     9f6:	9d 1e       	adc	r9, r29
     9f8:	d4 01       	movw	r26, r8
     9fa:	1d 92       	st	X+, r1
     9fc:	8a 95       	dec	r24
     9fe:	e9 f7       	brne	.-6      	; 0x9fa <addNewUser+0x5c>
		USART_u8SendStringSynch((u8 *)"\n\rEnter User Name : ");
     a00:	84 eb       	ldi	r24, 0xB4	; 180
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8ReceiveBufferAsynch(tempname,USER_NAME_MAX_SIZE,funn);
     a08:	c6 01       	movw	r24, r12
     a0a:	4a e0       	ldi	r20, 0x0A	; 10
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	29 e4       	ldi	r18, 0x49	; 73
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
		while(ff==0);
     a1a:	80 91 81 07 	lds	r24, 0x0781
     a1e:	88 23       	and	r24, r24
     a20:	e1 f3       	breq	.-8      	; 0xa1a <addNewUser+0x7c>
		ff=0;
     a22:	10 92 81 07 	sts	0x0781, r1
{
	u8 i = 0;
	u8 j = 0;
	while(i < USER_NAME_MAX_SIZE)
	{
		strcpy((char *)_user->userName[i],"\0");
     a26:	d7 01       	movw	r26, r14
     a28:	14 96       	adiw	r26, 0x04	; 4
     a2a:	ec 91       	ld	r30, X
     a2c:	14 97       	sbiw	r26, 0x04	; 4
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	10 82       	st	Z, r1
     a32:	15 96       	adiw	r26, 0x05	; 5
     a34:	ec 91       	ld	r30, X
     a36:	15 97       	sbiw	r26, 0x05	; 5
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	10 82       	st	Z, r1
     a3c:	16 96       	adiw	r26, 0x06	; 6
     a3e:	ec 91       	ld	r30, X
     a40:	16 97       	sbiw	r26, 0x06	; 6
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	10 82       	st	Z, r1
     a46:	17 96       	adiw	r26, 0x07	; 7
     a48:	ec 91       	ld	r30, X
     a4a:	17 97       	sbiw	r26, 0x07	; 7
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	10 82       	st	Z, r1
     a50:	18 96       	adiw	r26, 0x08	; 8
     a52:	ec 91       	ld	r30, X
     a54:	18 97       	sbiw	r26, 0x08	; 8
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	10 82       	st	Z, r1
     a5a:	19 96       	adiw	r26, 0x09	; 9
     a5c:	ec 91       	ld	r30, X
     a5e:	19 97       	sbiw	r26, 0x09	; 9
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	10 82       	st	Z, r1
     a64:	1a 96       	adiw	r26, 0x0a	; 10
     a66:	ec 91       	ld	r30, X
     a68:	1a 97       	sbiw	r26, 0x0a	; 10
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	10 82       	st	Z, r1
     a6e:	1b 96       	adiw	r26, 0x0b	; 11
     a70:	ec 91       	ld	r30, X
     a72:	1b 97       	sbiw	r26, 0x0b	; 11
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	10 82       	st	Z, r1
     a78:	1c 96       	adiw	r26, 0x0c	; 12
     a7a:	ec 91       	ld	r30, X
     a7c:	1c 97       	sbiw	r26, 0x0c	; 12
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	10 82       	st	Z, r1
     a82:	1d 96       	adiw	r26, 0x0d	; 13
     a84:	ec 91       	ld	r30, X
     a86:	1d 97       	sbiw	r26, 0x0d	; 13
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	10 82       	st	Z, r1
		i++;
	}
	while(j < USER_PASS_MAX_SIZE)
	{
		strcpy((char *)_user->userPass[j],"\0");
     a8c:	1e 96       	adiw	r26, 0x0e	; 14
     a8e:	ec 91       	ld	r30, X
     a90:	1e 97       	sbiw	r26, 0x0e	; 14
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	10 82       	st	Z, r1
     a96:	1f 96       	adiw	r26, 0x0f	; 15
     a98:	ec 91       	ld	r30, X
     a9a:	1f 97       	sbiw	r26, 0x0f	; 15
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	10 82       	st	Z, r1
     aa0:	50 96       	adiw	r26, 0x10	; 16
     aa2:	ec 91       	ld	r30, X
     aa4:	50 97       	sbiw	r26, 0x10	; 16
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	10 82       	st	Z, r1
     aaa:	51 96       	adiw	r26, 0x11	; 17
     aac:	ec 91       	ld	r30, X
     aae:	51 97       	sbiw	r26, 0x11	; 17
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	10 82       	st	Z, r1
     ab4:	52 96       	adiw	r26, 0x12	; 18
     ab6:	ec 91       	ld	r30, X
     ab8:	52 97       	sbiw	r26, 0x12	; 18
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	10 82       	st	Z, r1
     abe:	53 96       	adiw	r26, 0x13	; 19
     ac0:	ec 91       	ld	r30, X
     ac2:	53 97       	sbiw	r26, 0x13	; 19
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	10 82       	st	Z, r1
     ac8:	54 96       	adiw	r26, 0x14	; 20
     aca:	ec 91       	ld	r30, X
     acc:	54 97       	sbiw	r26, 0x14	; 20
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	10 82       	st	Z, r1
     ad2:	55 96       	adiw	r26, 0x15	; 21
     ad4:	ec 91       	ld	r30, X
     ad6:	55 97       	sbiw	r26, 0x15	; 21
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	10 82       	st	Z, r1
     adc:	56 96       	adiw	r26, 0x16	; 22
     ade:	ec 91       	ld	r30, X
     ae0:	56 97       	sbiw	r26, 0x16	; 22
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	10 82       	st	Z, r1
     ae6:	57 96       	adiw	r26, 0x17	; 23
     ae8:	ec 91       	ld	r30, X
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	10 82       	st	Z, r1
		USART_u8SendStringSynch((u8 *)"\n\rEnter User Name : ");
		USART_u8ReceiveBufferAsynch(tempname,USER_NAME_MAX_SIZE,funn);
		while(ff==0);
		ff=0;
		eraseUser(_user);
		strcpy((char *)_user->userName,(char *)tempname);
     aee:	b4 e0       	ldi	r27, 0x04	; 4
     af0:	ab 2e       	mov	r10, r27
     af2:	b1 2c       	mov	r11, r1
     af4:	ae 0c       	add	r10, r14
     af6:	bf 1c       	adc	r11, r15
     af8:	c5 01       	movw	r24, r10
     afa:	b6 01       	movw	r22, r12
     afc:	0e 94 4b 14 	call	0x2896	; 0x2896 <strcpy>
}

u8 isUserExist(ST_userData_t *userName)
{
	u8 i = 0;
	u8 name[10]={0};
     b00:	a5 e1       	ldi	r26, 0x15	; 21
     b02:	ca 2e       	mov	r12, r26
     b04:	d1 2c       	mov	r13, r1
     b06:	cc 0e       	add	r12, r28
     b08:	dd 1e       	adc	r13, r29
     b0a:	8a e0       	ldi	r24, 0x0A	; 10
     b0c:	f6 01       	movw	r30, r12
     b0e:	11 92       	st	Z+, r1
     b10:	8a 95       	dec	r24
     b12:	e9 f7       	brne	.-6      	; 0xb0e <addNewUser+0x170>
	while(i < (userSlots-5))
     b14:	80 91 cb 06 	lds	r24, 0x06CB
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	06 97       	sbiw	r24, 0x06	; 6
     b1c:	ac f1       	brlt	.+106    	; 0xb88 <addNewUser+0x1ea>
     b1e:	00 e0       	ldi	r16, 0x00	; 0
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <addNewUser+0x198>
		if(!strcmp((char *)userName->userName,(char *)name))
		{
			ret = 1;
			return ret;
		}
		i++;
     b22:	0f 5f       	subi	r16, 0xFF	; 255

u8 isUserExist(ST_userData_t *userName)
{
	u8 i = 0;
	u8 name[10]={0};
	while(i < (userSlots-5))
     b24:	20 2f       	mov	r18, r16
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	80 91 cb 06 	lds	r24, 0x06CB
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	05 97       	sbiw	r24, 0x05	; 5
     b30:	28 17       	cp	r18, r24
     b32:	39 07       	cpc	r19, r25
     b34:	4c f5       	brge	.+82     	; 0xb88 <addNewUser+0x1ea>
	{
		EEPROM_voidReadFrame(userName->userNameAdd,name,USER_NAME_MAX_SIZE);
     b36:	d7 01       	movw	r26, r14
     b38:	8d 91       	ld	r24, X+
     b3a:	9c 91       	ld	r25, X
     b3c:	b6 01       	movw	r22, r12
     b3e:	4a e0       	ldi	r20, 0x0A	; 10
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <EEPROM_voidReadFrame>
		if(!strcmp((char *)userName->userName,(char *)name))
     b46:	c5 01       	movw	r24, r10
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	41 f7       	brne	.-48     	; 0xb22 <addNewUser+0x184>
		{
			ret = 1;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 80 07 	sts	0x0780, r24
			USART_u8SendStringSynch((u8 *)"\n\rUser Added Successfully ");
			NumberOfRegistars++;
		}
		else
		{
			USART_u8SendStringSynch((u8 *)"\n\rUser Is Already Exist");
     b58:	85 e5       	ldi	r24, 0x55	; 85
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     b60:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
     b62:	6e 96       	adiw	r28, 0x1e	; 30
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	08 95       	ret
		USART_u8ReceiveBufferAsynch(tempname,USER_NAME_MAX_SIZE,funn);
		while(ff==0);
		ff=0;
		eraseUser(_user);
		strcpy((char *)_user->userName,(char *)tempname);
		if(!isUserExist(_user))
     b88:	80 91 80 07 	lds	r24, 0x0780
     b8c:	88 23       	and	r24, r24
     b8e:	21 f7       	brne	.-56     	; 0xb58 <addNewUser+0x1ba>
		{
			ret = 1;
		}
		if(ret == 1)
		{
			USART_u8SendStringSynch((u8 *)"\n\rEnter User Password : ");
     b90:	89 ec       	ldi	r24, 0xC9	; 201
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8ReceiveBufferAsynch(temppass,USER_PASS_MAX_SIZE,funn);
     b98:	c4 01       	movw	r24, r8
     b9a:	4a e0       	ldi	r20, 0x0A	; 10
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	29 e4       	ldi	r18, 0x49	; 73
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
			while(ff==0);
     baa:	80 91 81 07 	lds	r24, 0x0781
     bae:	88 23       	and	r24, r24
     bb0:	e1 f3       	breq	.-8      	; 0xbaa <addNewUser+0x20c>
			ff=0;
     bb2:	10 92 81 07 	sts	0x0781, r1
			strcpy((char *)_user->userPass,(char *)temppass);
     bb6:	87 01       	movw	r16, r14
     bb8:	02 5f       	subi	r16, 0xF2	; 242
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
     bbc:	c8 01       	movw	r24, r16
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 4b 14 	call	0x2896	; 0x2896 <strcpy>
			EEPROM_voidSendFrame(_user->userNameAdd,_user->userName,strlen((_user->userName))+1);
     bc4:	d5 01       	movw	r26, r10
     bc6:	0d 90       	ld	r0, X+
     bc8:	00 20       	and	r0, r0
     bca:	e9 f7       	brne	.-6      	; 0xbc6 <addNewUser+0x228>
     bcc:	aa 19       	sub	r26, r10
     bce:	bb 09       	sbc	r27, r11
     bd0:	f7 01       	movw	r30, r14
     bd2:	80 81       	ld	r24, Z
     bd4:	91 81       	ldd	r25, Z+1	; 0x01
     bd6:	b5 01       	movw	r22, r10
     bd8:	ad 01       	movw	r20, r26
     bda:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
			EEPROM_voidSendFrame(_user->userPassAdd,_user->userPass,strlen((_user->userPass))+1);
     bde:	d8 01       	movw	r26, r16
     be0:	0d 90       	ld	r0, X+
     be2:	00 20       	and	r0, r0
     be4:	e9 f7       	brne	.-6      	; 0xbe0 <addNewUser+0x242>
     be6:	a0 1b       	sub	r26, r16
     be8:	b1 0b       	sbc	r27, r17
     bea:	f7 01       	movw	r30, r14
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	b8 01       	movw	r22, r16
     bf2:	ad 01       	movw	r20, r26
     bf4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <EEPROM_voidSendFrame>
			USART_u8SendStringSynch((u8 *)"\n\rUser Added Successfully ");
     bf8:	8d e6       	ldi	r24, 0x6D	; 109
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			NumberOfRegistars++;
     c00:	80 91 82 07 	lds	r24, 0x0782
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 82 07 	sts	0x0782, r24
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	aa cf       	rjmp	.-172    	; 0xb62 <addNewUser+0x1c4>
{
	u8 ret = 0;
	USART_u8SendStringSynch((u8 *)"\n\r===== Adding New User =====");
	if(NumberOfRegistars == MAX_NUMBER_OF_USERS)
	{
		USART_u8SendStringSynch((u8 *)"\n\r You Reach The Max Number Of Users");
     c0e:	80 e3       	ldi	r24, 0x30	; 48
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	a4 cf       	rjmp	.-184    	; 0xb62 <addNewUser+0x1c4>

00000c1a <function>:
extern ST_userData_t *dbAccounts[MAX_NUMBER_OF_USERS];
volatile u8 z = 0;
u8 get_name[10] = { 0 };
u8 get_pass[10] = { 0 };
void function(void) {
	z = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 83 07 	sts	0x0783, r24
}
     c20:	08 95       	ret

00000c22 <checkPassword>:
	return INVALID_USER_INDEX;
}

// Function to check password
u8 checkPassword(u8 user_index) {
	if (strcmp((char *) get_pass, (char *) dbAccounts[user_index]->userPass)
     c22:	e8 2f       	mov	r30, r24
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e9 5b       	subi	r30, 0xB9	; 185
     c2c:	f8 4f       	sbci	r31, 0xF8	; 248
     c2e:	60 81       	ld	r22, Z
     c30:	71 81       	ldd	r23, Z+1	; 0x01
     c32:	62 5f       	subi	r22, 0xF2	; 242
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	8e e8       	ldi	r24, 0x8E	; 142
     c38:	97 e0       	ldi	r25, 0x07	; 7
     c3a:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     c3e:	9c 01       	movw	r18, r24
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	23 2b       	or	r18, r19
     c44:	09 f4       	brne	.+2      	; 0xc48 <checkPassword+0x26>
     c46:	81 e0       	ldi	r24, 0x01	; 1
			== 0) {
		return 1;
	} else {
		return 0;
	}
}
     c48:	08 95       	ret

00000c4a <findUserByUsername>:
		;
	z = 0;
}
u8 findUserByUsername(void) {
	for (u8 i = 0; i < MAX_NUMBER_OF_USERS - 5; i++) {
		if (strcmp((char *) get_name, (char *) dbAccounts[i]->userName) == 0) {
     c4a:	60 91 47 07 	lds	r22, 0x0747
     c4e:	70 91 48 07 	lds	r23, 0x0748
     c52:	6c 5f       	subi	r22, 0xFC	; 252
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	84 e8       	ldi	r24, 0x84	; 132
     c58:	97 e0       	ldi	r25, 0x07	; 7
     c5a:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	91 f1       	breq	.+100    	; 0xcc6 <findUserByUsername+0x7c>
     c62:	60 91 49 07 	lds	r22, 0x0749
     c66:	70 91 4a 07 	lds	r23, 0x074A
     c6a:	6c 5f       	subi	r22, 0xFC	; 252
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
     c6e:	84 e8       	ldi	r24, 0x84	; 132
     c70:	97 e0       	ldi	r25, 0x07	; 7
     c72:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	41 f1       	breq	.+80     	; 0xcca <findUserByUsername+0x80>
     c7a:	60 91 4b 07 	lds	r22, 0x074B
     c7e:	70 91 4c 07 	lds	r23, 0x074C
     c82:	6c 5f       	subi	r22, 0xFC	; 252
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	84 e8       	ldi	r24, 0x84	; 132
     c88:	97 e0       	ldi	r25, 0x07	; 7
     c8a:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	f1 f0       	breq	.+60     	; 0xcce <findUserByUsername+0x84>
     c92:	60 91 4d 07 	lds	r22, 0x074D
     c96:	70 91 4e 07 	lds	r23, 0x074E
     c9a:	6c 5f       	subi	r22, 0xFC	; 252
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	84 e8       	ldi	r24, 0x84	; 132
     ca0:	97 e0       	ldi	r25, 0x07	; 7
     ca2:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	a1 f0       	breq	.+40     	; 0xcd2 <findUserByUsername+0x88>
     caa:	60 91 4f 07 	lds	r22, 0x074F
     cae:	70 91 50 07 	lds	r23, 0x0750
     cb2:	6c 5f       	subi	r22, 0xFC	; 252
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	84 e8       	ldi	r24, 0x84	; 132
     cb8:	97 e0       	ldi	r25, 0x07	; 7
     cba:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	51 f0       	breq	.+20     	; 0xcd6 <findUserByUsername+0x8c>
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	08 95       	ret
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 95       	ret
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	08 95       	ret
     cd2:	83 e0       	ldi	r24, 0x03	; 3
     cd4:	08 95       	ret
     cd6:	84 e0       	ldi	r24, 0x04	; 4
			return i;
		}
	}
	return INVALID_USER_INDEX;
}
     cd8:	08 95       	ret

00000cda <get_passwoard>:
	while (z == 0)
		;
	z = 0;
}
void get_passwoard(void) {
	USART_u8SendStringSynch((u8 *) "\n\r enter your pass");
     cda:	88 e8       	ldi	r24, 0x88	; 136
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8ReceiveBufferAsynch(get_pass, 10, function);
     ce2:	8e e8       	ldi	r24, 0x8E	; 142
     ce4:	97 e0       	ldi	r25, 0x07	; 7
     ce6:	4a e0       	ldi	r20, 0x0A	; 10
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	2d e0       	ldi	r18, 0x0D	; 13
     cf0:	36 e0       	ldi	r19, 0x06	; 6
     cf2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while (z == 0)
     cf6:	80 91 83 07 	lds	r24, 0x0783
     cfa:	88 23       	and	r24, r24
     cfc:	e1 f3       	breq	.-8      	; 0xcf6 <get_passwoard+0x1c>
		;
	z = 0;
     cfe:	10 92 83 07 	sts	0x0783, r1
}
     d02:	08 95       	ret

00000d04 <get_Name>:
void function(void) {
	z = 1;
}

void get_Name(void) {
	USART_u8SendStringSynch((u8 *) "\n\r enter your name");
     d04:	8b e9       	ldi	r24, 0x9B	; 155
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8ReceiveBufferAsynch(get_name, 10, function);
     d0c:	84 e8       	ldi	r24, 0x84	; 132
     d0e:	97 e0       	ldi	r25, 0x07	; 7
     d10:	4a e0       	ldi	r20, 0x0A	; 10
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	2d e0       	ldi	r18, 0x0D	; 13
     d1a:	36 e0       	ldi	r19, 0x06	; 6
     d1c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while (z == 0)
     d20:	80 91 83 07 	lds	r24, 0x0783
     d24:	88 23       	and	r24, r24
     d26:	e1 f3       	breq	.-8      	; 0xd20 <get_Name+0x1c>
		;
	z = 0;
     d28:	10 92 83 07 	sts	0x0783, r1
}
     d2c:	08 95       	ret

00000d2e <check_pass_operation>:
	} else {
		return 0;
	}
}

u8 check_pass_operation(void) {
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
void function(void) {
	z = 1;
}

void get_Name(void) {
	USART_u8SendStringSynch((u8 *) "\n\r enter your name");
     d34:	8b e9       	ldi	r24, 0x9B	; 155
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8ReceiveBufferAsynch(get_name, 10, function);
     d3c:	84 e8       	ldi	r24, 0x84	; 132
     d3e:	97 e0       	ldi	r25, 0x07	; 7
     d40:	4a e0       	ldi	r20, 0x0A	; 10
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	2d e0       	ldi	r18, 0x0D	; 13
     d4a:	36 e0       	ldi	r19, 0x06	; 6
     d4c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while (z == 0)
     d50:	80 91 83 07 	lds	r24, 0x0783
     d54:	88 23       	and	r24, r24
     d56:	e1 f3       	breq	.-8      	; 0xd50 <check_pass_operation+0x22>
		;
	z = 0;
     d58:	10 92 83 07 	sts	0x0783, r1
}
void get_passwoard(void) {
	USART_u8SendStringSynch((u8 *) "\n\r enter your pass");
     d5c:	88 e8       	ldi	r24, 0x88	; 136
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8ReceiveBufferAsynch(get_pass, 10, function);
     d64:	8e e8       	ldi	r24, 0x8E	; 142
     d66:	97 e0       	ldi	r25, 0x07	; 7
     d68:	4a e0       	ldi	r20, 0x0A	; 10
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	2d e0       	ldi	r18, 0x0D	; 13
     d72:	36 e0       	ldi	r19, 0x06	; 6
     d74:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while (z == 0)
     d78:	80 91 83 07 	lds	r24, 0x0783
     d7c:	88 23       	and	r24, r24
     d7e:	e1 f3       	breq	.-8      	; 0xd78 <check_pass_operation+0x4a>
		;
	z = 0;
     d80:	10 92 83 07 	sts	0x0783, r1
}
u8 findUserByUsername(void) {
	for (u8 i = 0; i < MAX_NUMBER_OF_USERS - 5; i++) {
		if (strcmp((char *) get_name, (char *) dbAccounts[i]->userName) == 0) {
     d84:	60 91 47 07 	lds	r22, 0x0747
     d88:	70 91 48 07 	lds	r23, 0x0748
     d8c:	6c 5f       	subi	r22, 0xFC	; 252
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	84 e8       	ldi	r24, 0x84	; 132
     d92:	97 e0       	ldi	r25, 0x07	; 7
     d94:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	e9 f1       	breq	.+122    	; 0xe16 <check_pass_operation+0xe8>
     d9c:	60 91 49 07 	lds	r22, 0x0749
     da0:	70 91 4a 07 	lds	r23, 0x074A
     da4:	6c 5f       	subi	r22, 0xFC	; 252
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	84 e8       	ldi	r24, 0x84	; 132
     daa:	97 e0       	ldi	r25, 0x07	; 7
     dac:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	09 f4       	brne	.+2      	; 0xdb6 <check_pass_operation+0x88>
     db4:	75 c0       	rjmp	.+234    	; 0xea0 <check_pass_operation+0x172>
     db6:	60 91 4b 07 	lds	r22, 0x074B
     dba:	70 91 4c 07 	lds	r23, 0x074C
     dbe:	6c 5f       	subi	r22, 0xFC	; 252
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	84 e8       	ldi	r24, 0x84	; 132
     dc4:	97 e0       	ldi	r25, 0x07	; 7
     dc6:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <check_pass_operation+0xa2>
     dce:	6b c0       	rjmp	.+214    	; 0xea6 <check_pass_operation+0x178>
     dd0:	60 91 4d 07 	lds	r22, 0x074D
     dd4:	70 91 4e 07 	lds	r23, 0x074E
     dd8:	6c 5f       	subi	r22, 0xFC	; 252
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	84 e8       	ldi	r24, 0x84	; 132
     dde:	97 e0       	ldi	r25, 0x07	; 7
     de0:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	09 f4       	brne	.+2      	; 0xdea <check_pass_operation+0xbc>
     de8:	61 c0       	rjmp	.+194    	; 0xeac <check_pass_operation+0x17e>
     dea:	60 91 4f 07 	lds	r22, 0x074F
     dee:	70 91 50 07 	lds	r23, 0x0750
     df2:	6c 5f       	subi	r22, 0xFC	; 252
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	84 e8       	ldi	r24, 0x84	; 132
     df8:	97 e0       	ldi	r25, 0x07	; 7
     dfa:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	09 f4       	brne	.+2      	; 0xe04 <check_pass_operation+0xd6>
     e02:	57 c0       	rjmp	.+174    	; 0xeb2 <check_pass_operation+0x184>
			ret = 1;
		} else {
			USART_u8SendStringSynch((u8 *) "\n\r Access Denied ");
		}
	} else {
		USART_u8SendStringSynch((u8 *) "\n\r user not found ");
     e04:	8e ea       	ldi	r24, 0xAE	; 174
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ret;
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret
		;
	z = 0;
}
u8 findUserByUsername(void) {
	for (u8 i = 0; i < MAX_NUMBER_OF_USERS - 5; i++) {
		if (strcmp((char *) get_name, (char *) dbAccounts[i]->userName) == 0) {
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
			ret = 1;
		} else {
			USART_u8SendStringSynch((u8 *) "\n\r Access Denied ");
		}
	} else {
		USART_u8SendStringSynch((u8 *) "\n\r user not found ");
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	eb 01       	movw	r28, r22
     e1e:	cc 0f       	add	r28, r28
     e20:	dd 1f       	adc	r29, r29
	return INVALID_USER_INDEX;
}

// Function to check password
u8 checkPassword(u8 user_index) {
	if (strcmp((char *) get_pass, (char *) dbAccounts[user_index]->userPass)
     e22:	c9 5b       	subi	r28, 0xB9	; 185
     e24:	d8 4f       	sbci	r29, 0xF8	; 248
     e26:	68 81       	ld	r22, Y
     e28:	79 81       	ldd	r23, Y+1	; 0x01
     e2a:	62 5f       	subi	r22, 0xF2	; 242
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8e e8       	ldi	r24, 0x8E	; 142
     e30:	97 e0       	ldi	r25, 0x07	; 7
     e32:	0e 94 42 14 	call	0x2884	; 0x2884 <strcmp>
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	31 f1       	breq	.+76     	; 0xe86 <check_pass_operation+0x158>
	get_passwoard();
	x = findUserByUsername();
	if (x != 255) {
		while (num_attemps < 3) {
			y = checkPassword(x);
			num_attemps++;
     e3a:	1f 5f       	subi	r17, 0xFF	; 255
			if (y == 0 && num_attemps < 3)
     e3c:	13 30       	cpi	r17, 0x03	; 3
     e3e:	d1 f0       	breq	.+52     	; 0xe74 <check_pass_operation+0x146>
			{
				USART_u8SendStringSynch((u8 *)"\n\r===== Wrong pass =====");
     e40:	81 ec       	ldi	r24, 0xC1	; 193
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	while (z == 0)
		;
	z = 0;
}
void get_passwoard(void) {
	USART_u8SendStringSynch((u8 *) "\n\r enter your pass");
     e48:	88 e8       	ldi	r24, 0x88	; 136
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8ReceiveBufferAsynch(get_pass, 10, function);
     e50:	8e e8       	ldi	r24, 0x8E	; 142
     e52:	97 e0       	ldi	r25, 0x07	; 7
     e54:	4a e0       	ldi	r20, 0x0A	; 10
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	2d e0       	ldi	r18, 0x0D	; 13
     e5e:	36 e0       	ldi	r19, 0x06	; 6
     e60:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while (z == 0)
     e64:	80 91 83 07 	lds	r24, 0x0783
     e68:	88 23       	and	r24, r24
     e6a:	e1 f3       	breq	.-8      	; 0xe64 <check_pass_operation+0x136>
		;
	z = 0;
     e6c:	10 92 83 07 	sts	0x0783, r1
	u8 num_attemps = 0;
	get_Name();
	get_passwoard();
	x = findUserByUsername();
	if (x != 255) {
		while (num_attemps < 3) {
     e70:	13 30       	cpi	r17, 0x03	; 3
     e72:	c8 f2       	brcs	.-78     	; 0xe26 <check_pass_operation+0xf8>
		if (y == 1) {
			USART_u8SendStringSynch((u8 *) "\n\r Welcome ");
			USART_u8SendStringSynch((u8 *) "\n\r Access Granted ");
			ret = 1;
		} else {
			USART_u8SendStringSynch((u8 *) "\n\r Access Denied ");
     e74:	8a ed       	ldi	r24, 0xDA	; 218
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
		}
	} else {
		USART_u8SendStringSynch((u8 *) "\n\r user not found ");
	}
	return ret;
}
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	08 95       	ret
			{
				break;
			}
		}
		if (y == 1) {
			USART_u8SendStringSynch((u8 *) "\n\r Welcome ");
     e86:	8c ee       	ldi	r24, 0xEC	; 236
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *) "\n\r Access Granted ");
     e8e:	88 ef       	ldi	r24, 0xF8	; 248
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     e96:	81 e0       	ldi	r24, 0x01	; 1
		}
	} else {
		USART_u8SendStringSynch((u8 *) "\n\r user not found ");
	}
	return ret;
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	08 95       	ret
		;
	z = 0;
}
u8 findUserByUsername(void) {
	for (u8 i = 0; i < MAX_NUMBER_OF_USERS - 5; i++) {
		if (strcmp((char *) get_name, (char *) dbAccounts[i]->userName) == 0) {
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	ba cf       	rjmp	.-140    	; 0xe1a <check_pass_operation+0xec>
     ea6:	62 e0       	ldi	r22, 0x02	; 2
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	b7 cf       	rjmp	.-146    	; 0xe1a <check_pass_operation+0xec>
     eac:	63 e0       	ldi	r22, 0x03	; 3
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	b4 cf       	rjmp	.-152    	; 0xe1a <check_pass_operation+0xec>
			ret = 1;
		} else {
			USART_u8SendStringSynch((u8 *) "\n\r Access Denied ");
		}
	} else {
		USART_u8SendStringSynch((u8 *) "\n\r user not found ");
     eb2:	64 e0       	ldi	r22, 0x04	; 4
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	b1 cf       	rjmp	.-158    	; 0xe1a <check_pass_operation+0xec>

00000eb8 <fun>:
extern ST_userData_t *dbAccounts[MAX_NUMBER_OF_USERS];
u8 operation[2] = {0};
u8 user[2]={0};
volatile u8 flag=0;
void fun(void){
flag=1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 9c 07 	sts	0x079C, r24
}
     ebe:	08 95       	ret

00000ec0 <master_user_interface>:
void master_user_interface()
{

	User_init(*dbAccounts);
     ec0:	80 91 47 07 	lds	r24, 0x0747
     ec4:	90 91 48 07 	lds	r25, 0x0748
     ec8:	0e 94 75 01 	call	0x2ea	; 0x2ea <User_init>
	USART_u8SendStringSynch((u8 *)"\n\r===== User Management System =====");
     ecc:	8b e0       	ldi	r24, 0x0B	; 11
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			return;
		}
		default :
		{
			USART_u8SendStringSynch((u8 *)"\n\rWrong Choice Try Again : ");
			USART_u8SendStringSynch((u8 *)"\n\r===== Choose Operation =====");
     ed4:	80 e3       	ldi	r24, 0x30	; 48
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *)"\n\r1 - Add User ");
     edc:	8f e4       	ldi	r24, 0x4F	; 79
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *)"\n\r2 - Edit User ");
     ee4:	8f e5       	ldi	r24, 0x5F	; 95
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *)"\n\r3 - Remove User ");
     eec:	80 e7       	ldi	r24, 0x70	; 112
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *)"\n\r4 - Exit ");
     ef4:	83 e8       	ldi	r24, 0x83	; 131
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
     efc:	8f e8       	ldi	r24, 0x8F	; 143
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
	USART_u8SendStringSynch((u8 *)"\n\r3 - Remove User ");
	USART_u8SendStringSynch((u8 *)"\n\r4 - Exit ");
	USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
	while(1)
	{
		while(flag==0){
     f04:	80 91 9c 07 	lds	r24, 0x079C
     f08:	88 23       	and	r24, r24
     f0a:	89 f0       	breq	.+34     	; 0xf2e <master_user_interface+0x6e>
		USART_u8ReceiveBufferAsynch(operation,1,fun);
	    }
	    flag=0;
     f0c:	10 92 9c 07 	sts	0x079C, r1
	     switch(operation[0])
     f10:	80 91 98 07 	lds	r24, 0x0798
     f14:	82 33       	cpi	r24, 0x32	; 50
     f16:	09 f4       	brne	.+2      	; 0xf1a <master_user_interface+0x5a>
     f18:	77 c0       	rjmp	.+238    	; 0x1008 <master_user_interface+0x148>
     f1a:	83 33       	cpi	r24, 0x33	; 51
     f1c:	98 f4       	brcc	.+38     	; 0xf44 <master_user_interface+0x84>
     f1e:	81 33       	cpi	r24, 0x31	; 49
     f20:	09 f4       	brne	.+2      	; 0xf24 <master_user_interface+0x64>
     f22:	46 c0       	rjmp	.+140    	; 0xfb0 <master_user_interface+0xf0>
			USART_u8SendStringSynch((u8 *)"\n\r===== Please Wait While Saving Your Data =====\r\n\r\n");
			return;
		}
		default :
		{
			USART_u8SendStringSynch((u8 *)"\n\rWrong Choice Try Again : ");
     f24:	87 e3       	ldi	r24, 0x37	; 55
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     f2c:	d3 cf       	rjmp	.-90     	; 0xed4 <master_user_interface+0x14>
	USART_u8SendStringSynch((u8 *)"\n\r4 - Exit ");
	USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
	while(1)
	{
		while(flag==0){
		USART_u8ReceiveBufferAsynch(operation,1,fun);
     f2e:	88 e9       	ldi	r24, 0x98	; 152
     f30:	97 e0       	ldi	r25, 0x07	; 7
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	2c e5       	ldi	r18, 0x5C	; 92
     f3c:	37 e0       	ldi	r19, 0x07	; 7
     f3e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
     f42:	e0 cf       	rjmp	.-64     	; 0xf04 <master_user_interface+0x44>
	    }
	    flag=0;
	     switch(operation[0])
     f44:	83 33       	cpi	r24, 0x33	; 51
     f46:	39 f0       	breq	.+14     	; 0xf56 <master_user_interface+0x96>
     f48:	84 33       	cpi	r24, 0x34	; 52
     f4a:	61 f7       	brne	.-40     	; 0xf24 <master_user_interface+0x64>
			USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
			break;
		}
		case '4':
		{
			USART_u8SendStringSynch((u8 *)"\n\r===== Please Wait While Saving Your Data =====\r\n\r\n");
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
			break;
		}
		}
	}
}
     f54:	08 95       	ret
			USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
			break;
		}
		case '3':
		{
			UsersList();
     f56:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UsersList>
			USART_u8SendStringSynch((u8 *)"\n\rChoose User To Remove : ");
     f5a:	87 ee       	ldi	r24, 0xE7	; 231
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			while(flag==0){
     f62:	80 91 9c 07 	lds	r24, 0x079C
     f66:	88 23       	and	r24, r24
     f68:	71 f4       	brne	.+28     	; 0xf86 <master_user_interface+0xc6>
			USART_u8ReceiveBufferAsynch(user,1,fun);
     f6a:	8a e9       	ldi	r24, 0x9A	; 154
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	2c e5       	ldi	r18, 0x5C	; 92
     f78:	37 e0       	ldi	r19, 0x07	; 7
     f7a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
		}
		case '3':
		{
			UsersList();
			USART_u8SendStringSynch((u8 *)"\n\rChoose User To Remove : ");
			while(flag==0){
     f7e:	80 91 9c 07 	lds	r24, 0x079C
     f82:	88 23       	and	r24, r24
     f84:	91 f3       	breq	.-28     	; 0xf6a <master_user_interface+0xaa>
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
     f86:	10 92 9c 07 	sts	0x079C, r1
			switch(user[0])
     f8a:	80 91 9a 07 	lds	r24, 0x079A
     f8e:	82 33       	cpi	r24, 0x32	; 50
     f90:	09 f4       	brne	.+2      	; 0xf94 <master_user_interface+0xd4>
     f92:	a6 c0       	rjmp	.+332    	; 0x10e0 <master_user_interface+0x220>
     f94:	83 33       	cpi	r24, 0x33	; 51
     f96:	08 f4       	brcc	.+2      	; 0xf9a <master_user_interface+0xda>
     f98:	6c c0       	rjmp	.+216    	; 0x1072 <master_user_interface+0x1b2>
     f9a:	83 33       	cpi	r24, 0x33	; 51
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <master_user_interface+0xe0>
     f9e:	91 c0       	rjmp	.+290    	; 0x10c2 <master_user_interface+0x202>
     fa0:	84 33       	cpi	r24, 0x34	; 52
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <master_user_interface+0xe6>
     fa4:	7a c0       	rjmp	.+244    	; 0x109a <master_user_interface+0x1da>
			/*case '5' : removeUser(&USER_SIX); break;
			case '6' : removeUser(&USER_SEVEN); break;
			case '7' : removeUser(&USER_EGIHT); break;
			case '8' : removeUser(&USER_NINE); break;
			case '9' : removeUser(&USER_TEN); break;*/
			default: USART_u8SendStringSynch((u8 *)"\n\rWrong Entry!\n\r ");
     fa6:	8c eb       	ldi	r24, 0xBC	; 188
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
     fae:	92 cf       	rjmp	.-220    	; 0xed4 <master_user_interface+0x14>
	    flag=0;
	     switch(operation[0])
		{
		case '1' :
		{
			UsersList();
     fb0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UsersList>
			USART_u8SendStringSynch((u8 *)"\n\rChoose Free User Slot : ");
     fb4:	81 ea       	ldi	r24, 0xA1	; 161
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			while(flag==0){
     fbc:	80 91 9c 07 	lds	r24, 0x079C
     fc0:	88 23       	and	r24, r24
     fc2:	71 f4       	brne	.+28     	; 0xfe0 <master_user_interface+0x120>
			USART_u8ReceiveBufferAsynch(user,1,fun);
     fc4:	8a e9       	ldi	r24, 0x9A	; 154
     fc6:	97 e0       	ldi	r25, 0x07	; 7
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	2c e5       	ldi	r18, 0x5C	; 92
     fd2:	37 e0       	ldi	r19, 0x07	; 7
     fd4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
		{
		case '1' :
		{
			UsersList();
			USART_u8SendStringSynch((u8 *)"\n\rChoose Free User Slot : ");
			while(flag==0){
     fd8:	80 91 9c 07 	lds	r24, 0x079C
     fdc:	88 23       	and	r24, r24
     fde:	91 f3       	breq	.-28     	; 0xfc4 <master_user_interface+0x104>
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
     fe0:	10 92 9c 07 	sts	0x079C, r1
			switch(user[0])
     fe4:	80 91 9a 07 	lds	r24, 0x079A
     fe8:	82 33       	cpi	r24, 0x32	; 50
     fea:	09 f4       	brne	.+2      	; 0xfee <master_user_interface+0x12e>
     fec:	7e c0       	rjmp	.+252    	; 0x10ea <master_user_interface+0x22a>
     fee:	83 33       	cpi	r24, 0x33	; 51
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <master_user_interface+0x134>
     ff2:	49 c0       	rjmp	.+146    	; 0x1086 <master_user_interface+0x1c6>
     ff4:	83 33       	cpi	r24, 0x33	; 51
     ff6:	09 f4       	brne	.+2      	; 0xffa <master_user_interface+0x13a>
     ff8:	5a c0       	rjmp	.+180    	; 0x10ae <master_user_interface+0x1ee>
     ffa:	84 33       	cpi	r24, 0x34	; 52
     ffc:	a1 f6       	brne	.-88     	; 0xfa6 <master_user_interface+0xe6>
			{
			case '0' : addNewUser(&USER_ONE); break;
			case '1' : addNewUser(&USER_TWO); break;
			case '2' : addNewUser(&USER_THREE); break;
			case '3' : addNewUser(&USER_FOUR); break;
			case '4' : addNewUser(&USER_FIVE); break;
     ffe:	8f e2       	ldi	r24, 0x2F	; 47
    1000:	97 e0       	ldi	r25, 0x07	; 7
    1002:	0e 94 cf 04 	call	0x99e	; 0x99e <addNewUser>
    1006:	66 cf       	rjmp	.-308    	; 0xed4 <master_user_interface+0x14>
			USART_u8SendStringSynch((u8 *)"\n\rEnter Choice : ");
			break;
		}
		case '2':
		{
			UsersList();
    1008:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UsersList>
			USART_u8SendStringSynch((u8 *)"\n\rChoose User To Edit : ");
    100c:	8e ec       	ldi	r24, 0xCE	; 206
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			while(flag==0){
    1014:	80 91 9c 07 	lds	r24, 0x079C
    1018:	88 23       	and	r24, r24
    101a:	71 f4       	brne	.+28     	; 0x1038 <master_user_interface+0x178>
			USART_u8ReceiveBufferAsynch(user,1,fun);
    101c:	8a e9       	ldi	r24, 0x9A	; 154
    101e:	97 e0       	ldi	r25, 0x07	; 7
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	2c e5       	ldi	r18, 0x5C	; 92
    102a:	37 e0       	ldi	r19, 0x07	; 7
    102c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
		}
		case '2':
		{
			UsersList();
			USART_u8SendStringSynch((u8 *)"\n\rChoose User To Edit : ");
			while(flag==0){
    1030:	80 91 9c 07 	lds	r24, 0x079C
    1034:	88 23       	and	r24, r24
    1036:	91 f3       	breq	.-28     	; 0x101c <master_user_interface+0x15c>
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
    1038:	10 92 9c 07 	sts	0x079C, r1
			switch(user[0])
    103c:	80 91 9a 07 	lds	r24, 0x079A
    1040:	82 33       	cpi	r24, 0x32	; 50
    1042:	09 f4       	brne	.+2      	; 0x1046 <master_user_interface+0x186>
    1044:	57 c0       	rjmp	.+174    	; 0x10f4 <master_user_interface+0x234>
    1046:	83 33       	cpi	r24, 0x33	; 51
    1048:	50 f0       	brcs	.+20     	; 0x105e <master_user_interface+0x19e>
    104a:	83 33       	cpi	r24, 0x33	; 51
    104c:	59 f1       	breq	.+86     	; 0x10a4 <master_user_interface+0x1e4>
    104e:	84 33       	cpi	r24, 0x34	; 52
    1050:	09 f0       	breq	.+2      	; 0x1054 <master_user_interface+0x194>
    1052:	a9 cf       	rjmp	.-174    	; 0xfa6 <master_user_interface+0xe6>

			case '0' : editUser(&USER_ONE); break;
			case '1' : editUser(&USER_TWO); break;
			case '2' : editUser(&USER_THREE); break;
			case '3' : editUser(&USER_FOUR);break;
			case '4' : editUser(&USER_FIVE); break;
    1054:	8f e2       	ldi	r24, 0x2F	; 47
    1056:	97 e0       	ldi	r25, 0x07	; 7
    1058:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <editUser>
    105c:	3b cf       	rjmp	.-394    	; 0xed4 <master_user_interface+0x14>
			USART_u8SendStringSynch((u8 *)"\n\rChoose User To Edit : ");
			while(flag==0){
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
			switch(user[0])
    105e:	80 33       	cpi	r24, 0x30	; 48
    1060:	d1 f1       	breq	.+116    	; 0x10d6 <master_user_interface+0x216>
    1062:	81 33       	cpi	r24, 0x31	; 49
    1064:	09 f0       	breq	.+2      	; 0x1068 <master_user_interface+0x1a8>
    1066:	9f cf       	rjmp	.-194    	; 0xfa6 <master_user_interface+0xe6>
			{

			case '0' : editUser(&USER_ONE); break;
			case '1' : editUser(&USER_TWO); break;
    1068:	87 ee       	ldi	r24, 0xE7	; 231
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <editUser>
    1070:	31 cf       	rjmp	.-414    	; 0xed4 <master_user_interface+0x14>
			USART_u8SendStringSynch((u8 *)"\n\rChoose User To Remove : ");
			while(flag==0){
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
			switch(user[0])
    1072:	80 33       	cpi	r24, 0x30	; 48
    1074:	59 f1       	breq	.+86     	; 0x10cc <master_user_interface+0x20c>
    1076:	81 33       	cpi	r24, 0x31	; 49
    1078:	09 f0       	breq	.+2      	; 0x107c <master_user_interface+0x1bc>
    107a:	95 cf       	rjmp	.-214    	; 0xfa6 <master_user_interface+0xe6>
			{
			case '0' : removeUser(&USER_ONE); break;
			case '1' : removeUser(&USER_TWO); break;
    107c:	87 ee       	ldi	r24, 0xE7	; 231
    107e:	96 e0       	ldi	r25, 0x06	; 6
    1080:	0e 94 bf 00 	call	0x17e	; 0x17e <removeUser>
    1084:	27 cf       	rjmp	.-434    	; 0xed4 <master_user_interface+0x14>
			USART_u8SendStringSynch((u8 *)"\n\rChoose Free User Slot : ");
			while(flag==0){
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
			switch(user[0])
    1086:	80 33       	cpi	r24, 0x30	; 48
    1088:	b9 f0       	breq	.+46     	; 0x10b8 <master_user_interface+0x1f8>
    108a:	81 33       	cpi	r24, 0x31	; 49
    108c:	09 f0       	breq	.+2      	; 0x1090 <master_user_interface+0x1d0>
    108e:	8b cf       	rjmp	.-234    	; 0xfa6 <master_user_interface+0xe6>
			{
			case '0' : addNewUser(&USER_ONE); break;
			case '1' : addNewUser(&USER_TWO); break;
    1090:	87 ee       	ldi	r24, 0xE7	; 231
    1092:	96 e0       	ldi	r25, 0x06	; 6
    1094:	0e 94 cf 04 	call	0x99e	; 0x99e <addNewUser>
    1098:	1d cf       	rjmp	.-454    	; 0xed4 <master_user_interface+0x14>
			{
			case '0' : removeUser(&USER_ONE); break;
			case '1' : removeUser(&USER_TWO); break;
			case '2' : removeUser(&USER_THREE); break;
			case '3' : removeUser(&USER_FOUR);break;
			case '4' : removeUser(&USER_FIVE); break;
    109a:	8f e2       	ldi	r24, 0x2F	; 47
    109c:	97 e0       	ldi	r25, 0x07	; 7
    109e:	0e 94 bf 00 	call	0x17e	; 0x17e <removeUser>
    10a2:	18 cf       	rjmp	.-464    	; 0xed4 <master_user_interface+0x14>
			{

			case '0' : editUser(&USER_ONE); break;
			case '1' : editUser(&USER_TWO); break;
			case '2' : editUser(&USER_THREE); break;
			case '3' : editUser(&USER_FOUR);break;
    10a4:	87 e1       	ldi	r24, 0x17	; 23
    10a6:	97 e0       	ldi	r25, 0x07	; 7
    10a8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <editUser>
    10ac:	13 cf       	rjmp	.-474    	; 0xed4 <master_user_interface+0x14>
			switch(user[0])
			{
			case '0' : addNewUser(&USER_ONE); break;
			case '1' : addNewUser(&USER_TWO); break;
			case '2' : addNewUser(&USER_THREE); break;
			case '3' : addNewUser(&USER_FOUR); break;
    10ae:	87 e1       	ldi	r24, 0x17	; 23
    10b0:	97 e0       	ldi	r25, 0x07	; 7
    10b2:	0e 94 cf 04 	call	0x99e	; 0x99e <addNewUser>
    10b6:	0e cf       	rjmp	.-484    	; 0xed4 <master_user_interface+0x14>
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
			switch(user[0])
			{
			case '0' : addNewUser(&USER_ONE); break;
    10b8:	8f ec       	ldi	r24, 0xCF	; 207
    10ba:	96 e0       	ldi	r25, 0x06	; 6
    10bc:	0e 94 cf 04 	call	0x99e	; 0x99e <addNewUser>
    10c0:	09 cf       	rjmp	.-494    	; 0xed4 <master_user_interface+0x14>
			switch(user[0])
			{
			case '0' : removeUser(&USER_ONE); break;
			case '1' : removeUser(&USER_TWO); break;
			case '2' : removeUser(&USER_THREE); break;
			case '3' : removeUser(&USER_FOUR);break;
    10c2:	87 e1       	ldi	r24, 0x17	; 23
    10c4:	97 e0       	ldi	r25, 0x07	; 7
    10c6:	0e 94 bf 00 	call	0x17e	; 0x17e <removeUser>
    10ca:	04 cf       	rjmp	.-504    	; 0xed4 <master_user_interface+0x14>
			USART_u8ReceiveBufferAsynch(user,1,fun);
			}
			flag=0;
			switch(user[0])
			{
			case '0' : removeUser(&USER_ONE); break;
    10cc:	8f ec       	ldi	r24, 0xCF	; 207
    10ce:	96 e0       	ldi	r25, 0x06	; 6
    10d0:	0e 94 bf 00 	call	0x17e	; 0x17e <removeUser>
    10d4:	ff ce       	rjmp	.-514    	; 0xed4 <master_user_interface+0x14>
			}
			flag=0;
			switch(user[0])
			{

			case '0' : editUser(&USER_ONE); break;
    10d6:	8f ec       	ldi	r24, 0xCF	; 207
    10d8:	96 e0       	ldi	r25, 0x06	; 6
    10da:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <editUser>
    10de:	fa ce       	rjmp	.-524    	; 0xed4 <master_user_interface+0x14>
			flag=0;
			switch(user[0])
			{
			case '0' : removeUser(&USER_ONE); break;
			case '1' : removeUser(&USER_TWO); break;
			case '2' : removeUser(&USER_THREE); break;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	96 e0       	ldi	r25, 0x06	; 6
    10e4:	0e 94 bf 00 	call	0x17e	; 0x17e <removeUser>
    10e8:	f5 ce       	rjmp	.-534    	; 0xed4 <master_user_interface+0x14>
			flag=0;
			switch(user[0])
			{
			case '0' : addNewUser(&USER_ONE); break;
			case '1' : addNewUser(&USER_TWO); break;
			case '2' : addNewUser(&USER_THREE); break;
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	96 e0       	ldi	r25, 0x06	; 6
    10ee:	0e 94 cf 04 	call	0x99e	; 0x99e <addNewUser>
    10f2:	f0 ce       	rjmp	.-544    	; 0xed4 <master_user_interface+0x14>
			switch(user[0])
			{

			case '0' : editUser(&USER_ONE); break;
			case '1' : editUser(&USER_TWO); break;
			case '2' : editUser(&USER_THREE); break;
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	96 e0       	ldi	r25, 0x06	; 6
    10f8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <editUser>
    10fc:	eb ce       	rjmp	.-554    	; 0xed4 <master_user_interface+0x14>

000010fe <flag_func>:
	}
}


void flag_func(void){
	flag_1=1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 9d 07 	sts	0x079D, r24
}
    1104:	08 95       	ret

00001106 <led_control>:
	SERVO_Init();
	SERVO_SetAngle(0);
	GIE_VoidEnable();
}

void led_control(void) {
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <led_control+0xa>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <led_control+0xc>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    u8 choice[2] = {0};
    1116:	1a 82       	std	Y+2, r1	; 0x02
    1118:	19 82       	std	Y+1, r1	; 0x01
    u8 ledState[2] = {0}; // 0 for OFF, 1 for ON
    111a:	1c 82       	std	Y+4, r1	; 0x04
    111c:	1b 82       	std	Y+3, r1	; 0x03

    USART_u8SendStringSynch((u8 *)"\n\r===== LED Control =====");
    111e:	83 e5       	ldi	r24, 0x53	; 83
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 0- LED Bathroom    =====");
    1126:	8d e6       	ldi	r24, 0x6D	; 109
    1128:	93 e0       	ldi	r25, 0x03	; 3
    112a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 1- LED Kitchen     =====");
    112e:	8e e8       	ldi	r24, 0x8E	; 142
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 2- LED Living Room =====");
    1136:	8f ea       	ldi	r24, 0xAF	; 175
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 3- LED Bedroom     =====");
    113e:	80 ed       	ldi	r24, 0xD0	; 208
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 4- LED Garage      =====");
    1146:	81 ef       	ldi	r24, 0xF1	; 241
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 5- LED Hallway     =====");
    114e:	82 e1       	ldi	r24, 0x12	; 18
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 6- LED Garden      =====");
    1156:	83 e3       	ldi	r24, 0x33	; 51
    1158:	94 e0       	ldi	r25, 0x04	; 4
    115a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 7- LED Balcony     =====");
    115e:	84 e5       	ldi	r24, 0x54	; 84
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    USART_u8SendStringSynch((u8 *)"\n\rEnter LED number: ");
    1166:	85 e7       	ldi	r24, 0x75	; 117
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>

    while(flag_1 == 0) {
    116e:	80 91 9d 07 	lds	r24, 0x079D
    1172:	88 23       	and	r24, r24
    1174:	81 f4       	brne	.+32     	; 0x1196 <led_control+0x90>
    1176:	8e 01       	movw	r16, r28
    1178:	0f 5f       	subi	r16, 0xFF	; 255
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
        USART_u8ReceiveBufferAsynch(choice, 1, flag_func);
    117c:	c8 01       	movw	r24, r16
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	2f e7       	ldi	r18, 0x7F	; 127
    1188:	38 e0       	ldi	r19, 0x08	; 8
    118a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
    USART_u8SendStringSynch((u8 *)"\n\r===== 5- LED Hallway     =====");
    USART_u8SendStringSynch((u8 *)"\n\r===== 6- LED Garden      =====");
    USART_u8SendStringSynch((u8 *)"\n\r===== 7- LED Balcony     =====");
    USART_u8SendStringSynch((u8 *)"\n\rEnter LED number: ");

    while(flag_1 == 0) {
    118e:	80 91 9d 07 	lds	r24, 0x079D
    1192:	88 23       	and	r24, r24
    1194:	99 f3       	breq	.-26     	; 0x117c <led_control+0x76>
        USART_u8ReceiveBufferAsynch(choice, 1, flag_func);
    }
    flag_1 = 0;
    1196:	10 92 9d 07 	sts	0x079D, r1

    USART_u8SendStringSynch((u8 *)"\n\rEnter 1 to Turn ON or 0 to Turn OFF: ");
    119a:	8a e8       	ldi	r24, 0x8A	; 138
    119c:	94 e0       	ldi	r25, 0x04	; 4
    119e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    while(flag_1 == 0) {
    11a2:	80 91 9d 07 	lds	r24, 0x079D
    11a6:	88 23       	and	r24, r24
    11a8:	81 f4       	brne	.+32     	; 0x11ca <led_control+0xc4>
    11aa:	8e 01       	movw	r16, r28
    11ac:	0d 5f       	subi	r16, 0xFD	; 253
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
        USART_u8ReceiveBufferAsynch(ledState, 1, flag_func);
    11b0:	c8 01       	movw	r24, r16
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	2f e7       	ldi	r18, 0x7F	; 127
    11bc:	38 e0       	ldi	r19, 0x08	; 8
    11be:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
        USART_u8ReceiveBufferAsynch(choice, 1, flag_func);
    }
    flag_1 = 0;

    USART_u8SendStringSynch((u8 *)"\n\rEnter 1 to Turn ON or 0 to Turn OFF: ");
    while(flag_1 == 0) {
    11c2:	80 91 9d 07 	lds	r24, 0x079D
    11c6:	88 23       	and	r24, r24
    11c8:	99 f3       	breq	.-26     	; 0x11b0 <led_control+0xaa>
        USART_u8ReceiveBufferAsynch(ledState, 1, flag_func);
    }
    flag_1 = 0;
    11ca:	10 92 9d 07 	sts	0x079D, r1

    switch(choice[0]) {
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	83 33       	cpi	r24, 0x33	; 51
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <led_control+0xd0>
    11d4:	61 c0       	rjmp	.+194    	; 0x1298 <led_control+0x192>
    11d6:	84 33       	cpi	r24, 0x34	; 52
    11d8:	c0 f0       	brcs	.+48     	; 0x120a <led_control+0x104>
    11da:	85 33       	cpi	r24, 0x35	; 53
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <led_control+0xda>
    11de:	42 c0       	rjmp	.+132    	; 0x1264 <led_control+0x15e>
    11e0:	85 33       	cpi	r24, 0x35	; 53
    11e2:	98 f1       	brcs	.+102    	; 0x124a <led_control+0x144>
    11e4:	86 33       	cpi	r24, 0x36	; 54
    11e6:	09 f4       	brne	.+2      	; 0x11ea <led_control+0xe4>
    11e8:	6f c0       	rjmp	.+222    	; 0x12c8 <led_control+0x1c2>
    11ea:	87 33       	cpi	r24, 0x37	; 55
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <led_control+0xea>
    11ee:	60 c0       	rjmp	.+192    	; 0x12b0 <led_control+0x1aa>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[7]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Balcony is now OFF");
            }
            break;
        default:
            USART_u8SendStringSynch((u8 *)"\n\rInvalid Choice");
    11f0:	80 e4       	ldi	r24, 0x40	; 64
    11f2:	96 e0       	ldi	r25, 0x06	; 6
    11f4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
            break;
    }
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret
    while(flag_1 == 0) {
        USART_u8ReceiveBufferAsynch(ledState, 1, flag_func);
    }
    flag_1 = 0;

    switch(choice[0]) {
    120a:	81 33       	cpi	r24, 0x31	; 49
    120c:	c1 f1       	breq	.+112    	; 0x127e <led_control+0x178>
    120e:	82 33       	cpi	r24, 0x32	; 50
    1210:	68 f0       	brcs	.+26     	; 0x122c <led_control+0x126>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[1]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Kitchen is now OFF");
            }
            break;
        case '2':
            if (ledState[0] == '1') {
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 33       	cpi	r24, 0x31	; 49
    1216:	09 f4       	brne	.+2      	; 0x121a <led_control+0x114>
    1218:	63 c0       	rjmp	.+198    	; 0x12e0 <led_control+0x1da>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[2]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Living Room is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[2]);
    121a:	86 e6       	ldi	r24, 0x66	; 102
    121c:	97 e0       	ldi	r25, 0x07	; 7
    121e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Living Room is now OFF");
    1222:	82 e3       	ldi	r24, 0x32	; 50
    1224:	95 e0       	ldi	r25, 0x05	; 5
    1226:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    122a:	e6 cf       	rjmp	.-52     	; 0x11f8 <led_control+0xf2>
    while(flag_1 == 0) {
        USART_u8ReceiveBufferAsynch(ledState, 1, flag_func);
    }
    flag_1 = 0;

    switch(choice[0]) {
    122c:	80 33       	cpi	r24, 0x30	; 48
    122e:	01 f7       	brne	.-64     	; 0x11f0 <led_control+0xea>
        case '0':
            if (ledState[0] == '1') {
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 33       	cpi	r24, 0x31	; 49
    1234:	09 f4       	brne	.+2      	; 0x1238 <led_control+0x132>
    1236:	8a c0       	rjmp	.+276    	; 0x134c <led_control+0x246>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[0]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Bathroom is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[0]);
    1238:	8e e5       	ldi	r24, 0x5E	; 94
    123a:	97 e0       	ldi	r25, 0x07	; 7
    123c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Bathroom is now OFF");
    1240:	8b ec       	ldi	r24, 0xCB	; 203
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1248:	d7 cf       	rjmp	.-82     	; 0x11f8 <led_control+0xf2>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[3]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Bedroom is now OFF");
            }
            break;
        case '4':
            if (ledState[0] == '1') {
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	81 33       	cpi	r24, 0x31	; 49
    124e:	09 f4       	brne	.+2      	; 0x1252 <led_control+0x14c>
    1250:	86 c0       	rjmp	.+268    	; 0x135e <led_control+0x258>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[4]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Garage is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[4]);
    1252:	8e e6       	ldi	r24, 0x6E	; 110
    1254:	97 e0       	ldi	r25, 0x07	; 7
    1256:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Garage is now OFF");
    125a:	87 e9       	ldi	r24, 0x97	; 151
    125c:	95 e0       	ldi	r25, 0x05	; 5
    125e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1262:	ca cf       	rjmp	.-108    	; 0x11f8 <led_control+0xf2>
            }
            break;
        case '5':
            if (ledState[0] == '1') {
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 33       	cpi	r24, 0x31	; 49
    1268:	09 f4       	brne	.+2      	; 0x126c <led_control+0x166>
    126a:	67 c0       	rjmp	.+206    	; 0x133a <led_control+0x234>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[5]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Hallway is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[5]);
    126c:	82 e7       	ldi	r24, 0x72	; 114
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Hallway is now OFF");
    1274:	87 ec       	ldi	r24, 0xC7	; 199
    1276:	95 e0       	ldi	r25, 0x05	; 5
    1278:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    127c:	bd cf       	rjmp	.-134    	; 0x11f8 <led_control+0xf2>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[0]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Bathroom is now OFF");
            }
            break;
        case '1':
            if (ledState[0] == '1') {
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	81 33       	cpi	r24, 0x31	; 49
    1282:	09 f4       	brne	.+2      	; 0x1286 <led_control+0x180>
    1284:	51 c0       	rjmp	.+162    	; 0x1328 <led_control+0x222>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[1]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Kitchen is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[1]);
    1286:	82 e6       	ldi	r24, 0x62	; 98
    1288:	97 e0       	ldi	r25, 0x07	; 7
    128a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Kitchen is now OFF");
    128e:	8d ef       	ldi	r24, 0xFD	; 253
    1290:	94 e0       	ldi	r25, 0x04	; 4
    1292:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1296:	b0 cf       	rjmp	.-160    	; 0x11f8 <led_control+0xf2>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[2]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Living Room is now OFF");
            }
            break;
        case '3':
            if (ledState[0] == '1') {
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	81 33       	cpi	r24, 0x31	; 49
    129c:	e1 f1       	breq	.+120    	; 0x1316 <led_control+0x210>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[3]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Bedroom is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[3]);
    129e:	8a e6       	ldi	r24, 0x6A	; 106
    12a0:	97 e0       	ldi	r25, 0x07	; 7
    12a2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Bedroom is now OFF");
    12a6:	87 e6       	ldi	r24, 0x67	; 103
    12a8:	95 e0       	ldi	r25, 0x05	; 5
    12aa:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    12ae:	a4 cf       	rjmp	.-184    	; 0x11f8 <led_control+0xf2>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[6]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Garden is now OFF");
            }
            break;
        case '7':
            if (ledState[0] == '1') {
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 33       	cpi	r24, 0x31	; 49
    12b4:	39 f1       	breq	.+78     	; 0x1304 <led_control+0x1fe>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[7]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Balcony is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[7]);
    12b6:	8a e7       	ldi	r24, 0x7A	; 122
    12b8:	97 e0       	ldi	r25, 0x07	; 7
    12ba:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Balcony is now OFF");
    12be:	87 e2       	ldi	r24, 0x27	; 39
    12c0:	96 e0       	ldi	r25, 0x06	; 6
    12c2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    12c6:	98 cf       	rjmp	.-208    	; 0x11f8 <led_control+0xf2>
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[5]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Hallway is now OFF");
            }
            break;
        case '6':
            if (ledState[0] == '1') {
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	81 33       	cpi	r24, 0x31	; 49
    12cc:	91 f0       	breq	.+36     	; 0x12f2 <led_control+0x1ec>
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[6]);
                USART_u8SendStringSynch((u8 *)"\n\rLED Garden is now ON");
            } else {
                LED_EnuTurnOFF(&LED_Arr_Str_LedConfig[6]);
    12ce:	86 e7       	ldi	r24, 0x76	; 118
    12d0:	97 e0       	ldi	r25, 0x07	; 7
    12d2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LED_EnuTurnOFF>
                USART_u8SendStringSynch((u8 *)"\n\rLED Garden is now OFF");
    12d6:	87 ef       	ldi	r24, 0xF7	; 247
    12d8:	95 e0       	ldi	r25, 0x05	; 5
    12da:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    12de:	8c cf       	rjmp	.-232    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Kitchen is now OFF");
            }
            break;
        case '2':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[2]);
    12e0:	86 e6       	ldi	r24, 0x66	; 102
    12e2:	97 e0       	ldi	r25, 0x07	; 7
    12e4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Living Room is now ON");
    12e8:	86 e1       	ldi	r24, 0x16	; 22
    12ea:	95 e0       	ldi	r25, 0x05	; 5
    12ec:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    12f0:	83 cf       	rjmp	.-250    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Hallway is now OFF");
            }
            break;
        case '6':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[6]);
    12f2:	86 e7       	ldi	r24, 0x76	; 118
    12f4:	97 e0       	ldi	r25, 0x07	; 7
    12f6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Garden is now ON");
    12fa:	80 ee       	ldi	r24, 0xE0	; 224
    12fc:	95 e0       	ldi	r25, 0x05	; 5
    12fe:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1302:	7a cf       	rjmp	.-268    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Garden is now OFF");
            }
            break;
        case '7':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[7]);
    1304:	8a e7       	ldi	r24, 0x7A	; 122
    1306:	97 e0       	ldi	r25, 0x07	; 7
    1308:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Balcony is now ON");
    130c:	8f e0       	ldi	r24, 0x0F	; 15
    130e:	96 e0       	ldi	r25, 0x06	; 6
    1310:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1314:	71 cf       	rjmp	.-286    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Living Room is now OFF");
            }
            break;
        case '3':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[3]);
    1316:	8a e6       	ldi	r24, 0x6A	; 106
    1318:	97 e0       	ldi	r25, 0x07	; 7
    131a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Bedroom is now ON");
    131e:	8f e4       	ldi	r24, 0x4F	; 79
    1320:	95 e0       	ldi	r25, 0x05	; 5
    1322:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1326:	68 cf       	rjmp	.-304    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Bathroom is now OFF");
            }
            break;
        case '1':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[1]);
    1328:	82 e6       	ldi	r24, 0x62	; 98
    132a:	97 e0       	ldi	r25, 0x07	; 7
    132c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Kitchen is now ON");
    1330:	85 ee       	ldi	r24, 0xE5	; 229
    1332:	94 e0       	ldi	r25, 0x04	; 4
    1334:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    1338:	5f cf       	rjmp	.-322    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Garage is now OFF");
            }
            break;
        case '5':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[5]);
    133a:	82 e7       	ldi	r24, 0x72	; 114
    133c:	97 e0       	ldi	r25, 0x07	; 7
    133e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Hallway is now ON");
    1342:	8f ea       	ldi	r24, 0xAF	; 175
    1344:	95 e0       	ldi	r25, 0x05	; 5
    1346:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    134a:	56 cf       	rjmp	.-340    	; 0x11f8 <led_control+0xf2>
    flag_1 = 0;

    switch(choice[0]) {
        case '0':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[0]);
    134c:	8e e5       	ldi	r24, 0x5E	; 94
    134e:	97 e0       	ldi	r25, 0x07	; 7
    1350:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Bathroom is now ON");
    1354:	82 eb       	ldi	r24, 0xB2	; 178
    1356:	94 e0       	ldi	r25, 0x04	; 4
    1358:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    135c:	4d cf       	rjmp	.-358    	; 0x11f8 <led_control+0xf2>
                USART_u8SendStringSynch((u8 *)"\n\rLED Bedroom is now OFF");
            }
            break;
        case '4':
            if (ledState[0] == '1') {
                LED_EnuTurnON(&LED_Arr_Str_LedConfig[4]);
    135e:	8e e6       	ldi	r24, 0x6E	; 110
    1360:	97 e0       	ldi	r25, 0x07	; 7
    1362:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LED_EnuTurnON>
                USART_u8SendStringSynch((u8 *)"\n\rLED Garage is now ON");
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	95 e0       	ldi	r25, 0x05	; 5
    136a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
    136e:	44 cf       	rjmp	.-376    	; 0x11f8 <led_control+0xf2>

00001370 <user_mode>:
}


void user_mode(void){
	u8 state = 0;
			USART_u8SendStringSynch((u8 *)"\n\r===== Welcome User Mode =====");
    1370:	81 e5       	ldi	r24, 0x51	; 81
    1372:	96 e0       	ldi	r25, 0x06	; 6
    1374:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			state=check_pass_operation();
    1378:	0e 94 97 06 	call	0xd2e	; 0xd2e <check_pass_operation>
			if(state==1){
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	c9 f0       	breq	.+50     	; 0x13b2 <user_mode+0x42>
				_delay_ms(5000);
				SERVO_SetAngle(0);
				led_control();
			}
			else{
				SERVO_SetAngle(0);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
				BUZ_voidOn(&BUZ);        // Enable buzzer
    1386:	8b e5       	ldi	r24, 0x5B	; 91
    1388:	97 e0       	ldi	r25, 0x07	; 7
    138a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <BUZ_voidOn>
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1392:	48 ec       	ldi	r20, 0xC8	; 200
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	ca 01       	movw	r24, r20
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <user_mode+0x28>
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	83 ec       	ldi	r24, 0xC3	; 195
    13a2:	20 35       	cpi	r18, 0x50	; 80
    13a4:	38 07       	cpc	r19, r24
    13a6:	b9 f7       	brne	.-18     	; 0x1396 <user_mode+0x26>
				_delay_ms(5000);        // Keep the buzzer on for 5 seconds
				BUZ_voidOff(&BUZ);       // Turn off the buzzer
    13a8:	8b e5       	ldi	r24, 0x5B	; 91
    13aa:	97 e0       	ldi	r25, 0x07	; 7
    13ac:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <BUZ_voidOff>
    13b0:	08 95       	ret
void user_mode(void){
	u8 state = 0;
			USART_u8SendStringSynch((u8 *)"\n\r===== Welcome User Mode =====");
			state=check_pass_operation();
			if(state==1){
				SERVO_SetAngle(90);
    13b2:	8a e5       	ldi	r24, 0x5A	; 90
    13b4:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	48 ec       	ldi	r20, 0xC8	; 200
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	ca 01       	movw	r24, r20
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <user_mode+0x52>
    13c6:	2f 5f       	subi	r18, 0xFF	; 255
    13c8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ca:	83 ec       	ldi	r24, 0xC3	; 195
    13cc:	20 35       	cpi	r18, 0x50	; 80
    13ce:	38 07       	cpc	r19, r24
    13d0:	b9 f7       	brne	.-18     	; 0x13c0 <user_mode+0x50>
				_delay_ms(5000);
				SERVO_SetAngle(0);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
				led_control();
    13d8:	0e 94 83 08 	call	0x1106	; 0x1106 <led_control>
    13dc:	08 95       	ret

000013de <system_init>:
void flag_func(void){
	flag_1=1;
}

void system_init(void){
	DIO_Enu_Init();
    13de:	0e 94 f5 11 	call	0x23ea	; 0x23ea <DIO_Enu_Init>
	TIMER1_voidInit();
    13e2:	0e 94 b5 10 	call	0x216a	; 0x216a <TIMER1_voidInit>
	LED_EnuInit(&LED_Arr_Str_LedConfig);
    13e6:	8e e5       	ldi	r24, 0x5E	; 94
    13e8:	97 e0       	ldi	r25, 0x07	; 7
    13ea:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LED_EnuInit>
	BUZ_voidInit(&BUZ);
    13ee:	8b e5       	ldi	r24, 0x5B	; 91
    13f0:	97 e0       	ldi	r25, 0x07	; 7
    13f2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <BUZ_voidInit>
	SERVO_Init();
    13f6:	0e 94 a5 0a 	call	0x154a	; 0x154a <SERVO_Init>
	SERVO_SetAngle(0);
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
	GIE_VoidEnable();
    1400:	0e 94 ed 11 	call	0x23da	; 0x23da <GIE_VoidEnable>
}
    1404:	08 95       	ret

00001406 <main>:
void system_init(void);
void led_control(void);
void user_mode(void);


void main(void) {
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <main+0xe>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
u8 choice[2]={0};
    1418:	1a 82       	std	Y+2, r1	; 0x02
    141a:	19 82       	std	Y+1, r1	; 0x01
	system_init();
    141c:	0e 94 ef 09 	call	0x13de	; 0x13de <system_init>
	master_user_interface();
    1420:	0e 94 60 07 	call	0xec0	; 0xec0 <master_user_interface>
	system_init();
    1424:	0e 94 ef 09 	call	0x13de	; 0x13de <system_init>
	user_mode();
    1428:	0e 94 b8 09 	call	0x1370	; 0x1370 <user_mode>
    142c:	7e 01       	movw	r14, r28
    142e:	08 94       	sec
    1430:	e1 1c       	adc	r14, r1
    1432:	f1 1c       	adc	r15, r1
    1434:	08 ec       	ldi	r16, 0xC8	; 200
    1436:	10 e0       	ldi	r17, 0x00	; 0
	while (1) {
		USART_u8SendStringSynch((u8 *)"\n\r===== choice master or user mode =====");
    1438:	81 e7       	ldi	r24, 0x71	; 113
    143a:	96 e0       	ldi	r25, 0x06	; 6
    143c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8SendStringSynch((u8 *)"\n\r===== 1- Master =====");
    1440:	8a e9       	ldi	r24, 0x9A	; 154
    1442:	96 e0       	ldi	r25, 0x06	; 6
    1444:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8SendStringSynch((u8 *)"\n\r===== 2- User =====");
    1448:	82 eb       	ldi	r24, 0xB2	; 178
    144a:	96 e0       	ldi	r25, 0x06	; 6
    144c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		USART_u8SendStringSynch((u8 *)"\n\r");
    1450:	88 ec       	ldi	r24, 0xC8	; 200
    1452:	96 e0       	ldi	r25, 0x06	; 6
    1454:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
		while(flag_1==0){
    1458:	80 91 9d 07 	lds	r24, 0x079D
    145c:	88 23       	and	r24, r24
    145e:	69 f4       	brne	.+26     	; 0x147a <main+0x74>
		USART_u8ReceiveBufferAsynch(choice,1,flag_func);
    1460:	c7 01       	movw	r24, r14
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	2f e7       	ldi	r18, 0x7F	; 127
    146c:	38 e0       	ldi	r19, 0x08	; 8
    146e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <USART_u8ReceiveBufferAsynch>
	while (1) {
		USART_u8SendStringSynch((u8 *)"\n\r===== choice master or user mode =====");
		USART_u8SendStringSynch((u8 *)"\n\r===== 1- Master =====");
		USART_u8SendStringSynch((u8 *)"\n\r===== 2- User =====");
		USART_u8SendStringSynch((u8 *)"\n\r");
		while(flag_1==0){
    1472:	80 91 9d 07 	lds	r24, 0x079D
    1476:	88 23       	and	r24, r24
    1478:	99 f3       	breq	.-26     	; 0x1460 <main+0x5a>
		USART_u8ReceiveBufferAsynch(choice,1,flag_func);
		}
		flag_1=0;
    147a:	10 92 9d 07 	sts	0x079D, r1
		switch(choice[0])
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	81 33       	cpi	r24, 0x31	; 49
    1482:	09 f1       	breq	.+66     	; 0x14c6 <main+0xc0>
    1484:	82 33       	cpi	r24, 0x32	; 50
    1486:	c1 f6       	brne	.-80     	; 0x1438 <main+0x32>
}


void user_mode(void){
	u8 state = 0;
			USART_u8SendStringSynch((u8 *)"\n\r===== Welcome User Mode =====");
    1488:	81 e5       	ldi	r24, 0x51	; 81
    148a:	96 e0       	ldi	r25, 0x06	; 6
    148c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USART_u8SendStringSynch>
			state=check_pass_operation();
    1490:	0e 94 97 06 	call	0xd2e	; 0xd2e <check_pass_operation>
			if(state==1){
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	69 f1       	breq	.+90     	; 0x14f2 <main+0xec>
				_delay_ms(5000);
				SERVO_SetAngle(0);
				led_control();
			}
			else{
				SERVO_SetAngle(0);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
				BUZ_voidOn(&BUZ);        // Enable buzzer
    149e:	8b e5       	ldi	r24, 0x5B	; 91
    14a0:	97 e0       	ldi	r25, 0x07	; 7
    14a2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <BUZ_voidOn>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	c8 01       	movw	r24, r16
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <main+0xa6>
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	83 ec       	ldi	r24, 0xC3	; 195
    14b6:	20 35       	cpi	r18, 0x50	; 80
    14b8:	38 07       	cpc	r19, r24
    14ba:	b9 f7       	brne	.-18     	; 0x14aa <main+0xa4>
				_delay_ms(5000);        // Keep the buzzer on for 5 seconds
				BUZ_voidOff(&BUZ);       // Turn off the buzzer
    14bc:	8b e5       	ldi	r24, 0x5B	; 91
    14be:	97 e0       	ldi	r25, 0x07	; 7
    14c0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <BUZ_voidOff>
    14c4:	b9 cf       	rjmp	.-142    	; 0x1438 <main+0x32>
void flag_func(void){
	flag_1=1;
}

void system_init(void){
	DIO_Enu_Init();
    14c6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <DIO_Enu_Init>
	TIMER1_voidInit();
    14ca:	0e 94 b5 10 	call	0x216a	; 0x216a <TIMER1_voidInit>
	LED_EnuInit(&LED_Arr_Str_LedConfig);
    14ce:	8e e5       	ldi	r24, 0x5E	; 94
    14d0:	97 e0       	ldi	r25, 0x07	; 7
    14d2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LED_EnuInit>
	BUZ_voidInit(&BUZ);
    14d6:	8b e5       	ldi	r24, 0x5B	; 91
    14d8:	97 e0       	ldi	r25, 0x07	; 7
    14da:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <BUZ_voidInit>
	SERVO_Init();
    14de:	0e 94 a5 0a 	call	0x154a	; 0x154a <SERVO_Init>
	SERVO_SetAngle(0);
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
	GIE_VoidEnable();
    14e8:	0e 94 ed 11 	call	0x23da	; 0x23da <GIE_VoidEnable>
		flag_1=0;
		switch(choice[0])
		{
		case '1' :
			system_init();
		    master_user_interface();
    14ec:	0e 94 60 07 	call	0xec0	; 0xec0 <master_user_interface>
    14f0:	a3 cf       	rjmp	.-186    	; 0x1438 <main+0x32>
void user_mode(void){
	u8 state = 0;
			USART_u8SendStringSynch((u8 *)"\n\r===== Welcome User Mode =====");
			state=check_pass_operation();
			if(state==1){
				SERVO_SetAngle(90);
    14f2:	8a e5       	ldi	r24, 0x5A	; 90
    14f4:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	c8 01       	movw	r24, r16
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <main+0xf8>
    1502:	2f 5f       	subi	r18, 0xFF	; 255
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	83 ec       	ldi	r24, 0xC3	; 195
    1508:	20 35       	cpi	r18, 0x50	; 80
    150a:	38 07       	cpc	r19, r24
    150c:	b9 f7       	brne	.-18     	; 0x14fc <main+0xf6>
				_delay_ms(5000);
				SERVO_SetAngle(0);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 8d 0a 	call	0x151a	; 0x151a <SERVO_SetAngle>
				led_control();
    1514:	0e 94 83 08 	call	0x1106	; 0x1106 <led_control>
    1518:	8f cf       	rjmp	.-226    	; 0x1438 <main+0x32>

0000151a <SERVO_SetAngle>:
	TIMER1_voidSetICR1((u16)19999);      //freq=timer_freq/(ICR1+1)   //HZ
	TIMER1_voidSetCTCA((u16)599);        //duty=OCR1A/(ICR1+1)    3%
}
void SERVO_SetAngle(u8 angle)
{
	TIMER1_voidSetCTCA((((u32)angle * 2000) / 180)  + 600 - 1) ; 
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a0 e0       	ldi	r26, 0x00	; 0
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	20 ed       	ldi	r18, 0xD0	; 208
    1526:	37 e0       	ldi	r19, 0x07	; 7
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	0e 94 01 14 	call	0x2802	; 0x2802 <__mulsi3>
    1530:	24 eb       	ldi	r18, 0xB4	; 180
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	0e 94 20 14 	call	0x2840	; 0x2840 <__udivmodsi4>
    153c:	da 01       	movw	r26, r20
    153e:	c9 01       	movw	r24, r18
    1540:	89 5a       	subi	r24, 0xA9	; 169
    1542:	9d 4f       	sbci	r25, 0xFD	; 253
    1544:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TIMER1_voidSetCTCA>
	
}
    1548:	08 95       	ret

0000154a <SERVO_Init>:
#include "Servo.h"


void SERVO_Init(void)
{
	TIMER1_voidInit();
    154a:	0e 94 b5 10 	call	0x216a	; 0x216a <TIMER1_voidInit>
	TIMER1_voidSetICR1((u16)19999);      //freq=timer_freq/(ICR1+1)   //HZ
    154e:	8f e1       	ldi	r24, 0x1F	; 31
    1550:	9e e4       	ldi	r25, 0x4E	; 78
    1552:	0e 94 f6 10 	call	0x21ec	; 0x21ec <TIMER1_voidSetICR1>
	TIMER1_voidSetCTCA((u16)599);        //duty=OCR1A/(ICR1+1)    3%
    1556:	87 e5       	ldi	r24, 0x57	; 87
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TIMER1_voidSetCTCA>
}
    155e:	08 95       	ret

00001560 <LED_EnuTurnOFF>:

    return Local_enuErrorState;
}

ES_t LED_EnuTurnOFF(LED_t *Copy_P_Str_LedID)
{
    1560:	fc 01       	movw	r30, r24
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedID != NULL)
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	99 f0       	breq	.+38     	; 0x158c <LED_EnuTurnOFF+0x2c>
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	88 23       	and	r24, r24
    156a:	21 f0       	breq	.+8      	; 0x1574 <LED_EnuTurnOFF+0x14>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	41 f0       	breq	.+16     	; 0x1580 <LED_EnuTurnOFF+0x20>
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	08 95       	ret

    if (Copy_P_Str_LedID != NULL)
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
    1574:	80 81       	ld	r24, Z
    1576:	61 81       	ldd	r22, Z+1	; 0x01
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    157e:	08 95       	ret
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
    1580:	80 81       	ld	r24, Z
    1582:	61 81       	ldd	r22, Z+1	; 0x01
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    {
        Local_enuErrorState = ES_NULL_POINTER;
    }

    return Local_enuErrorState;
}
    158a:	08 95       	ret

ES_t LED_EnuTurnOFF(LED_t *Copy_P_Str_LedID)
{
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedID != NULL)
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	08 95       	ret

00001590 <LED_EnuTurnON>:

    return Local_enuErrorState;
}

ES_t LED_EnuTurnON(LED_t *Copy_P_Str_LedID)
{
    1590:	fc 01       	movw	r30, r24
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedID != NULL)
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	99 f0       	breq	.+38     	; 0x15bc <LED_EnuTurnON+0x2c>
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	88 23       	and	r24, r24
    159a:	21 f0       	breq	.+8      	; 0x15a4 <LED_EnuTurnON+0x14>
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	41 f0       	breq	.+16     	; 0x15b0 <LED_EnuTurnON+0x20>
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	08 95       	ret

    if (Copy_P_Str_LedID != NULL)
    {
        if (Copy_P_Str_LedID->LED_u8Connection == LED_SINK)
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8LOW);
    15a4:	80 81       	ld	r24, Z
    15a6:	61 81       	ldd	r22, Z+1	; 0x01
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    15ae:	08 95       	ret
        }
        else if (Copy_P_Str_LedID->LED_u8Connection == LED_SOURCE)
        {
            Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedID->LED_u8PortID, Copy_P_Str_LedID->LED_u8PinID, DIO_u8HIGH);
    15b0:	80 81       	ld	r24, Z
    15b2:	61 81       	ldd	r22, Z+1	; 0x01
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    {
        Local_enuErrorState = ES_NULL_POINTER;
    }

    return Local_enuErrorState;
}
    15ba:	08 95       	ret

ES_t LED_EnuTurnON(LED_t *Copy_P_Str_LedID)
{
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedID != NULL)
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	08 95       	ret

000015c0 <LED_EnuInit>:
#include"../../1_MCAL/DIO/DIO_INTERFACE.h"
#include "LED_CONFIG.h"
#include "LED_PRIVATE.h"

ES_t LED_EnuInit(LED_t *Copy_P_Str_LedConfig)
{
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	8c 01       	movw	r16, r24
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedConfig != NULL)
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <LED_EnuInit+0x10>
    15ce:	54 c1       	rjmp	.+680    	; 0x1878 <LED_EnuInit+0x2b8>
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	61 81       	ldd	r22, Z+1	; 0x01
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    15dc:	f8 01       	movw	r30, r16
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	88 23       	and	r24, r24
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <LED_EnuInit+0x26>
    15e4:	e8 c0       	rjmp	.+464    	; 0x17b6 <LED_EnuInit+0x1f6>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	09 f0       	breq	.+2      	; 0x15ec <LED_EnuInit+0x2c>
    15ea:	d8 c0       	rjmp	.+432    	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    15ec:	f8 01       	movw	r30, r16
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <LED_EnuInit+0x36>
    15f4:	47 c1       	rjmp	.+654    	; 0x1884 <LED_EnuInit+0x2c4>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    15f6:	88 23       	and	r24, r24
    15f8:	09 f0       	breq	.+2      	; 0x15fc <LED_EnuInit+0x3c>
    15fa:	d0 c0       	rjmp	.+416    	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    15fc:	80 81       	ld	r24, Z
    15fe:	61 81       	ldd	r22, Z+1	; 0x01
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    1606:	e8 01       	movw	r28, r16
    1608:	24 96       	adiw	r28, 0x04	; 4
    160a:	f8 01       	movw	r30, r16
    160c:	84 81       	ldd	r24, Z+4	; 0x04
    160e:	69 81       	ldd	r22, Y+1	; 0x01
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <LED_EnuInit+0x5e>
    161c:	b9 c0       	rjmp	.+370    	; 0x1790 <LED_EnuInit+0x1d0>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	09 f0       	breq	.+2      	; 0x1624 <LED_EnuInit+0x64>
    1622:	bc c0       	rjmp	.+376    	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	09 f4       	brne	.+2      	; 0x162c <LED_EnuInit+0x6c>
    162a:	be c0       	rjmp	.+380    	; 0x17a8 <LED_EnuInit+0x1e8>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    162c:	88 23       	and	r24, r24
    162e:	09 f0       	breq	.+2      	; 0x1632 <LED_EnuInit+0x72>
    1630:	b5 c0       	rjmp	.+362    	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    1632:	f8 01       	movw	r30, r16
    1634:	84 81       	ldd	r24, Z+4	; 0x04
    1636:	69 81       	ldd	r22, Y+1	; 0x01
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    163e:	e8 01       	movw	r28, r16
    1640:	28 96       	adiw	r28, 0x08	; 8
    1642:	f8 01       	movw	r30, r16
    1644:	80 85       	ldd	r24, Z+8	; 0x08
    1646:	69 81       	ldd	r22, Y+1	; 0x01
    1648:	41 e0       	ldi	r20, 0x01	; 1
    164a:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 23       	and	r24, r24
    1652:	09 f4       	brne	.+2      	; 0x1656 <LED_EnuInit+0x96>
    1654:	bc c0       	rjmp	.+376    	; 0x17ce <LED_EnuInit+0x20e>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	09 f0       	breq	.+2      	; 0x165c <LED_EnuInit+0x9c>
    165a:	a0 c0       	rjmp	.+320    	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	09 f4       	brne	.+2      	; 0x1664 <LED_EnuInit+0xa4>
    1662:	bb c0       	rjmp	.+374    	; 0x17da <LED_EnuInit+0x21a>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    1664:	88 23       	and	r24, r24
    1666:	09 f0       	breq	.+2      	; 0x166a <LED_EnuInit+0xaa>
    1668:	99 c0       	rjmp	.+306    	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    166a:	f8 01       	movw	r30, r16
    166c:	80 85       	ldd	r24, Z+8	; 0x08
    166e:	69 81       	ldd	r22, Y+1	; 0x01
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    1676:	e8 01       	movw	r28, r16
    1678:	2c 96       	adiw	r28, 0x0c	; 12
    167a:	f8 01       	movw	r30, r16
    167c:	84 85       	ldd	r24, Z+12	; 0x0c
    167e:	69 81       	ldd	r22, Y+1	; 0x01
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	88 23       	and	r24, r24
    168a:	09 f4       	brne	.+2      	; 0x168e <LED_EnuInit+0xce>
    168c:	ad c0       	rjmp	.+346    	; 0x17e8 <LED_EnuInit+0x228>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	09 f0       	breq	.+2      	; 0x1694 <LED_EnuInit+0xd4>
    1692:	84 c0       	rjmp	.+264    	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	09 f4       	brne	.+2      	; 0x169c <LED_EnuInit+0xdc>
    169a:	ac c0       	rjmp	.+344    	; 0x17f4 <LED_EnuInit+0x234>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    169c:	88 23       	and	r24, r24
    169e:	09 f0       	breq	.+2      	; 0x16a2 <LED_EnuInit+0xe2>
    16a0:	7d c0       	rjmp	.+250    	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    16a2:	f8 01       	movw	r30, r16
    16a4:	84 85       	ldd	r24, Z+12	; 0x0c
    16a6:	69 81       	ldd	r22, Y+1	; 0x01
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    16ae:	e8 01       	movw	r28, r16
    16b0:	60 96       	adiw	r28, 0x10	; 16
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 89       	ldd	r24, Z+16	; 0x10
    16b6:	69 81       	ldd	r22, Y+1	; 0x01
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	88 23       	and	r24, r24
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <LED_EnuInit+0x106>
    16c4:	9e c0       	rjmp	.+316    	; 0x1802 <LED_EnuInit+0x242>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <LED_EnuInit+0x10c>
    16ca:	68 c0       	rjmp	.+208    	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <LED_EnuInit+0x114>
    16d2:	9d c0       	rjmp	.+314    	; 0x180e <LED_EnuInit+0x24e>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    16d4:	88 23       	and	r24, r24
    16d6:	09 f0       	breq	.+2      	; 0x16da <LED_EnuInit+0x11a>
    16d8:	61 c0       	rjmp	.+194    	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    16da:	f8 01       	movw	r30, r16
    16dc:	80 89       	ldd	r24, Z+16	; 0x10
    16de:	69 81       	ldd	r22, Y+1	; 0x01
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    16e6:	e8 01       	movw	r28, r16
    16e8:	64 96       	adiw	r28, 0x14	; 20
    16ea:	f8 01       	movw	r30, r16
    16ec:	84 89       	ldd	r24, Z+20	; 0x14
    16ee:	69 81       	ldd	r22, Y+1	; 0x01
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	88 23       	and	r24, r24
    16fa:	09 f4       	brne	.+2      	; 0x16fe <LED_EnuInit+0x13e>
    16fc:	8f c0       	rjmp	.+286    	; 0x181c <LED_EnuInit+0x25c>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	09 f0       	breq	.+2      	; 0x1704 <LED_EnuInit+0x144>
    1702:	4c c0       	rjmp	.+152    	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	09 f4       	brne	.+2      	; 0x170c <LED_EnuInit+0x14c>
    170a:	8f c0       	rjmp	.+286    	; 0x182a <LED_EnuInit+0x26a>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    170c:	88 23       	and	r24, r24
    170e:	09 f0       	breq	.+2      	; 0x1712 <LED_EnuInit+0x152>
    1710:	45 c0       	rjmp	.+138    	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    1712:	f8 01       	movw	r30, r16
    1714:	84 89       	ldd	r24, Z+20	; 0x14
    1716:	69 81       	ldd	r22, Y+1	; 0x01
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    171e:	e8 01       	movw	r28, r16
    1720:	68 96       	adiw	r28, 0x18	; 24
    1722:	f8 01       	movw	r30, r16
    1724:	80 8d       	ldd	r24, Z+24	; 0x18
    1726:	69 81       	ldd	r22, Y+1	; 0x01
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <LED_EnuInit+0x176>
    1734:	81 c0       	rjmp	.+258    	; 0x1838 <LED_EnuInit+0x278>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	89 f5       	brne	.+98     	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	09 f4       	brne	.+2      	; 0x1742 <LED_EnuInit+0x182>
    1740:	82 c0       	rjmp	.+260    	; 0x1846 <LED_EnuInit+0x286>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    1742:	88 23       	and	r24, r24
    1744:	59 f5       	brne	.+86     	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    1746:	f8 01       	movw	r30, r16
    1748:	80 8d       	ldd	r24, Z+24	; 0x18
    174a:	69 81       	ldd	r22, Y+1	; 0x01
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    if (Copy_P_Str_LedConfig != NULL)
    {
        u8 Local_enuIterator = 0;
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
    1752:	e8 01       	movw	r28, r16
    1754:	6c 96       	adiw	r28, 0x1c	; 28
    1756:	f8 01       	movw	r30, r16
    1758:	84 8d       	ldd	r24, Z+28	; 0x1c
    175a:	69 81       	ldd	r22, Y+1	; 0x01
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	88 23       	and	r24, r24
    1766:	09 f4       	brne	.+2      	; 0x176a <LED_EnuInit+0x1aa>
    1768:	75 c0       	rjmp	.+234    	; 0x1854 <LED_EnuInit+0x294>
                else
                {
                    return ES_OUT_OF_RANGE;
                }
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	b9 f4       	brne	.+46     	; 0x179c <LED_EnuInit+0x1dc>
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	09 f4       	brne	.+2      	; 0x1776 <LED_EnuInit+0x1b6>
    1774:	76 c0       	rjmp	.+236    	; 0x1862 <LED_EnuInit+0x2a2>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    1776:	88 23       	and	r24, r24
    1778:	89 f4       	brne	.+34     	; 0x179c <LED_EnuInit+0x1dc>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    177a:	f8 01       	movw	r30, r16
    177c:	84 8d       	ldd	r24, Z+28	; 0x1c
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    {
        Local_enuErrorState = ES_NULL_POINTER;
    }

    return Local_enuErrorState;
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	08 95       	ret
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	09 f4       	brne	.+2      	; 0x1798 <LED_EnuInit+0x1d8>
    1796:	4d cf       	rjmp	.-358    	; 0x1632 <LED_EnuInit+0x72>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    1798:	88 23       	and	r24, r24
    179a:	31 f0       	breq	.+12     	; 0x17a8 <LED_EnuInit+0x1e8>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    179c:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_enuErrorState = ES_NULL_POINTER;
    }

    return Local_enuErrorState;
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    17a8:	f8 01       	movw	r30, r16
    17aa:	84 81       	ldd	r24, Z+4	; 0x04
    17ac:	69 81       	ldd	r22, Y+1	; 0x01
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    17b4:	44 cf       	rjmp	.-376    	; 0x163e <LED_EnuInit+0x7e>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    17b6:	83 81       	ldd	r24, Z+3	; 0x03
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	09 f4       	brne	.+2      	; 0x17be <LED_EnuInit+0x1fe>
    17bc:	65 c0       	rjmp	.+202    	; 0x1888 <LED_EnuInit+0x2c8>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    17be:	88 23       	and	r24, r24
    17c0:	69 f7       	brne	.-38     	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    17c2:	80 81       	ld	r24, Z
    17c4:	61 81       	ldd	r22, Z+1	; 0x01
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    17cc:	1c cf       	rjmp	.-456    	; 0x1606 <LED_EnuInit+0x46>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <LED_EnuInit+0x216>
    17d4:	4a cf       	rjmp	.-364    	; 0x166a <LED_EnuInit+0xaa>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    17d6:	88 23       	and	r24, r24
    17d8:	09 f7       	brne	.-62     	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    17da:	f8 01       	movw	r30, r16
    17dc:	80 85       	ldd	r24, Z+8	; 0x08
    17de:	69 81       	ldd	r22, Y+1	; 0x01
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    17e6:	47 cf       	rjmp	.-370    	; 0x1676 <LED_EnuInit+0xb6>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <LED_EnuInit+0x230>
    17ee:	59 cf       	rjmp	.-334    	; 0x16a2 <LED_EnuInit+0xe2>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    17f0:	88 23       	and	r24, r24
    17f2:	a1 f6       	brne	.-88     	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    17f4:	f8 01       	movw	r30, r16
    17f6:	84 85       	ldd	r24, Z+12	; 0x0c
    17f8:	69 81       	ldd	r22, Y+1	; 0x01
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1800:	56 cf       	rjmp	.-340    	; 0x16ae <LED_EnuInit+0xee>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	09 f4       	brne	.+2      	; 0x180a <LED_EnuInit+0x24a>
    1808:	68 cf       	rjmp	.-304    	; 0x16da <LED_EnuInit+0x11a>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    180a:	88 23       	and	r24, r24
    180c:	39 f6       	brne	.-114    	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    180e:	f8 01       	movw	r30, r16
    1810:	80 89       	ldd	r24, Z+16	; 0x10
    1812:	69 81       	ldd	r22, Y+1	; 0x01
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    181a:	65 cf       	rjmp	.-310    	; 0x16e6 <LED_EnuInit+0x126>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	09 f4       	brne	.+2      	; 0x1824 <LED_EnuInit+0x264>
    1822:	77 cf       	rjmp	.-274    	; 0x1712 <LED_EnuInit+0x152>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    1824:	88 23       	and	r24, r24
    1826:	09 f0       	breq	.+2      	; 0x182a <LED_EnuInit+0x26a>
    1828:	b9 cf       	rjmp	.-142    	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    182a:	f8 01       	movw	r30, r16
    182c:	84 89       	ldd	r24, Z+20	; 0x14
    182e:	69 81       	ldd	r22, Y+1	; 0x01
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1836:	73 cf       	rjmp	.-282    	; 0x171e <LED_EnuInit+0x15e>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	09 f4       	brne	.+2      	; 0x1840 <LED_EnuInit+0x280>
    183e:	83 cf       	rjmp	.-250    	; 0x1746 <LED_EnuInit+0x186>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    1840:	88 23       	and	r24, r24
    1842:	09 f0       	breq	.+2      	; 0x1846 <LED_EnuInit+0x286>
    1844:	ab cf       	rjmp	.-170    	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    1846:	f8 01       	movw	r30, r16
    1848:	80 8d       	ldd	r24, Z+24	; 0x18
    184a:	69 81       	ldd	r22, Y+1	; 0x01
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1852:	7f cf       	rjmp	.-258    	; 0x1752 <LED_EnuInit+0x192>
        for (Local_enuIterator = 0; Local_enuIterator < LED_NUM; Local_enuIterator++)
        {
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	09 f4       	brne	.+2      	; 0x185c <LED_EnuInit+0x29c>
    185a:	8f cf       	rjmp	.-226    	; 0x177a <LED_EnuInit+0x1ba>
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
                }
                else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_OFF)
    185c:	88 23       	and	r24, r24
    185e:	09 f0       	breq	.+2      	; 0x1862 <LED_EnuInit+0x2a2>
    1860:	9d cf       	rjmp	.-198    	; 0x179c <LED_EnuInit+0x1dc>
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    1862:	f8 01       	movw	r30, r16
    1864:	84 8d       	ldd	r24, Z+28	; 0x1c
    1866:	69 81       	ldd	r22, Y+1	; 0x01
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    {
        Local_enuErrorState = ES_NULL_POINTER;
    }

    return Local_enuErrorState;
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

ES_t LED_EnuInit(LED_t *Copy_P_Str_LedConfig)
{
    ES_t Local_enuErrorState = ES_NOT_OK;

    if (Copy_P_Str_LedConfig != NULL)
    1878:	82 e0       	ldi	r24, 0x02	; 2
    {
        Local_enuErrorState = ES_NULL_POINTER;
    }

    return Local_enuErrorState;
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	08 95       	ret
            }
            else if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SOURCE)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8HIGH);
    1884:	f8 01       	movw	r30, r16
    1886:	9d cf       	rjmp	.-198    	; 0x17c2 <LED_EnuInit+0x202>
            Local_enuErrorState = DIO_Enu_SetPinDirection(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8OUTPUT);
            if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8Connection == LED_SINK)
            {
                if (Copy_P_Str_LedConfig[Local_enuIterator].LED_u8InitState == LED_ON)
                {
                    Local_enuErrorState = DIO_Enu_SetPinValue(Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PortID, Copy_P_Str_LedConfig[Local_enuIterator].LED_u8PinID, DIO_u8LOW);
    1888:	f8 01       	movw	r30, r16
    188a:	80 81       	ld	r24, Z
    188c:	61 81       	ldd	r22, Z+1	; 0x01
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1894:	b8 ce       	rjmp	.-656    	; 0x1606 <LED_EnuInit+0x46>

00001896 <EEPROM_u8ReadDataByte>:
	_delay_ms(10);

}

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    1896:	1f 93       	push	r17
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	18 2f       	mov	r17, r24
		//Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
	//if 24C02 :
	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;

	/*Send start condition*/
	TWI_SendStartCondition();
    18a4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    18a8:	80 e5       	ldi	r24, 0x50	; 80
    18aa:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    18ae:	81 2f       	mov	r24, r17
    18b0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    18b4:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    18b8:	80 e5       	ldi	r24, 0x50	; 80
    18ba:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByteWithACK(&Local_u8Data);
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	0e 94 17 10 	call	0x202e	; 0x202e <TWI_MasterReadDataByteWithACK>

    /* Send NACK after last byte */
    TWI_SendNACK();
    18c6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TWI_SendNACK>

	/*send the stop condition*/
	TWI_SendStopCondition();
    18ca:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_SendStopCondition>

	return Local_u8Data;
}
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <EEPROM_voidSendDataByte>:
	TWI_voidInitMaster(0x0);
	TWI_voidInitSlave(0xA0);
}

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	18 2f       	mov	r17, r24
    18e0:	06 2f       	mov	r16, r22
	//if 24C02 :
	 Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;


	/*Send start condition*/
	TWI_SendStartCondition();
    18e2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    18e6:	80 e5       	ldi	r24, 0x50	; 80
    18e8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    18ec:	81 2f       	mov	r24, r17
    18ee:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    18f2:	80 2f       	mov	r24, r16
    18f4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    18f8:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_SendStopCondition>
    18fc:	80 e2       	ldi	r24, 0x20	; 32
    18fe:	9e e4       	ldi	r25, 0x4E	; 78
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <EEPROM_voidSendDataByte+0x26>

	/*Delay until the write cycle is finished*/
	_delay_ms(10);

}
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <EEPROM_voidInit>:
#include <util/delay.h>

//----------------------------------------------------------------------------------------------------------------------------------------------------

void EEPROM_voidInit(void){
	DIO_Enu_SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8INPUT);
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8INPUT);
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
	DIO_Enu_SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8LOW);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
	DIO_Enu_SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8LOW);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
	TWI_voidInitMaster(0x0);
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TWI_voidInitMaster>
	TWI_voidInitSlave(0xA0);
    1938:	80 ea       	ldi	r24, 0xA0	; 160
    193a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <TWI_voidInitSlave>
}
    193e:	08 95       	ret

00001940 <EEPROM_voidSendFrame>:
	TWI_SendStopCondition();

	return Local_u8Data;
}

void EEPROM_voidSendFrame(u16 Copy_u16StartAddress, u8 *Copy_u8Frame, u16 Copy_u16Length) {
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	08 2f       	mov	r16, r24
    1956:	5b 01       	movw	r10, r22
    1958:	6a 01       	movw	r12, r20
    for (u16 i = 0; i < Copy_u16Length; i++) {
    195a:	41 15       	cp	r20, r1
    195c:	51 05       	cpc	r21, r1
    195e:	11 f1       	breq	.+68     	; 0x19a4 <EEPROM_voidSendFrame+0x64>
    1960:	c0 e0       	ldi	r28, 0x00	; 0
    1962:	d0 e0       	ldi	r29, 0x00	; 0
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	e8 2e       	mov	r14, r24
    1968:	8e e4       	ldi	r24, 0x4E	; 78
    196a:	f8 2e       	mov	r15, r24
        EEPROM_voidSendDataByte(Copy_u16StartAddress + i, Copy_u8Frame[i]);
    196c:	f5 01       	movw	r30, r10
    196e:	ec 0f       	add	r30, r28
    1970:	fd 1f       	adc	r31, r29
    1972:	10 81       	ld	r17, Z
	//if 24C02 :
	 Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;


	/*Send start condition*/
	TWI_SendStartCondition();
    1974:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    1978:	80 e5       	ldi	r24, 0x50	; 80
    197a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    197e:	80 2f       	mov	r24, r16
    1980:	8c 0f       	add	r24, r28
    1982:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    1986:	81 2f       	mov	r24, r17
    1988:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    198c:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_SendStopCondition>
    1990:	c7 01       	movw	r24, r14
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <EEPROM_voidSendFrame+0x52>

	return Local_u8Data;
}

void EEPROM_voidSendFrame(u16 Copy_u16StartAddress, u8 *Copy_u8Frame, u16 Copy_u16Length) {
    for (u16 i = 0; i < Copy_u16Length; i++) {
    1996:	c7 01       	movw	r24, r14
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <EEPROM_voidSendFrame+0x58>
    199c:	21 96       	adiw	r28, 0x01	; 1
    199e:	cc 15       	cp	r28, r12
    19a0:	dd 05       	cpc	r29, r13
    19a2:	20 f3       	brcs	.-56     	; 0x196c <EEPROM_voidSendFrame+0x2c>
        EEPROM_voidSendDataByte(Copy_u16StartAddress + i, Copy_u8Frame[i]);
        _delay_ms(10);  // Ensure time for EEPROM write cycle
    }
}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
    19b4:	bf 90       	pop	r11
    19b6:	af 90       	pop	r10
    19b8:	08 95       	ret

000019ba <EEPROM_voidReadFrame>:

void EEPROM_voidReadFrame(u16 Copy_u16StartAddress, u8 *Copy_u8Frame, u16 Copy_u16Length) {
    19ba:	7f 92       	push	r7
    19bc:	8f 92       	push	r8
    19be:	9f 92       	push	r9
    19c0:	af 92       	push	r10
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	78 2e       	mov	r7, r24
    19dc:	6b 01       	movw	r12, r22
    19de:	7a 01       	movw	r14, r20
    for (u16 i = 0; i < Copy_u16Length; i++) {
    19e0:	41 15       	cp	r20, r1
    19e2:	51 05       	cpc	r21, r1
    19e4:	61 f1       	breq	.+88     	; 0x1a3e <EEPROM_voidReadFrame+0x84>
    19e6:	00 e0       	ldi	r16, 0x00	; 0
    19e8:	10 e0       	ldi	r17, 0x00	; 0
    19ea:	4e 01       	movw	r8, r28
    19ec:	08 94       	sec
    19ee:	81 1c       	adc	r8, r1
    19f0:	91 1c       	adc	r9, r1
    19f2:	90 e2       	ldi	r25, 0x20	; 32
    19f4:	a9 2e       	mov	r10, r25
    19f6:	9e e4       	ldi	r25, 0x4E	; 78
    19f8:	b9 2e       	mov	r11, r25
		//Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
	//if 24C02 :
	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;

	/*Send start condition*/
	TWI_SendStartCondition();
    19fa:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    19fe:	80 e5       	ldi	r24, 0x50	; 80
    1a00:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    1a04:	87 2d       	mov	r24, r7
    1a06:	80 0f       	add	r24, r16
    1a08:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    1a0c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    1a10:	80 e5       	ldi	r24, 0x50	; 80
    1a12:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByteWithACK(&Local_u8Data);
    1a16:	c4 01       	movw	r24, r8
    1a18:	0e 94 17 10 	call	0x202e	; 0x202e <TWI_MasterReadDataByteWithACK>

    /* Send NACK after last byte */
    TWI_SendNACK();
    1a1c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TWI_SendNACK>

	/*send the stop condition*/
	TWI_SendStopCondition();
    1a20:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_SendStopCondition>
    }
}

void EEPROM_voidReadFrame(u16 Copy_u16StartAddress, u8 *Copy_u8Frame, u16 Copy_u16Length) {
    for (u16 i = 0; i < Copy_u16Length; i++) {
        Copy_u8Frame[i] = EEPROM_u8ReadDataByte(Copy_u16StartAddress + i);
    1a24:	f6 01       	movw	r30, r12
    1a26:	e0 0f       	add	r30, r16
    1a28:	f1 1f       	adc	r31, r17
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	80 83       	st	Z, r24
    1a2e:	c5 01       	movw	r24, r10
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <EEPROM_voidReadFrame+0x76>
        _delay_ms(10);  // Ensure time for EEPROM write cycle
    }
}

void EEPROM_voidReadFrame(u16 Copy_u16StartAddress, u8 *Copy_u8Frame, u16 Copy_u16Length) {
    for (u16 i = 0; i < Copy_u16Length; i++) {
    1a34:	0f 5f       	subi	r16, 0xFF	; 255
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	0e 15       	cp	r16, r14
    1a3a:	1f 05       	cpc	r17, r15
    1a3c:	f0 f2       	brcs	.-68     	; 0x19fa <EEPROM_voidReadFrame+0x40>
        Copy_u8Frame[i] = EEPROM_u8ReadDataByte(Copy_u16StartAddress + i);
        _delay_ms(10);  // Ensure time for EEPROM read cycle
    }
}
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	08 95       	ret

00001a5c <BUZ_voidToggle>:
}

//----------------------------------------------------------------------------------------------------------------------------------------------------

void BUZ_voidToggle  ( BUZ_Type *BUZ_Configuration )
{
    1a5c:	fc 01       	movw	r30, r24
	DIO_Enu_TogPinValue  ( BUZ_Configuration->Port , BUZ_Configuration->Pin );
    1a5e:	80 81       	ld	r24, Z
    1a60:	61 81       	ldd	r22, Z+1	; 0x01
    1a62:	0e 94 2a 13 	call	0x2654	; 0x2654 <DIO_Enu_TogPinValue>
}
    1a66:	08 95       	ret

00001a68 <BUZ_voidOff>:
}

//----------------------------------------------------------------------------------------------------------------------------------------------------

void BUZ_voidOff ( BUZ_Type *BUZ_Configuration )
{
    1a68:	fc 01       	movw	r30, r24
	
	if( BUZ_Configuration->Active_State == ACTIVE_HIGH ){
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	41 f0       	breq	.+16     	; 0x1a80 <BUZ_voidOff+0x18>
		
		DIO_Enu_SetPinValue( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8LOW  );
		
	}else if( BUZ_Configuration->Active_State == ACTIVE_LOW ){
    1a70:	81 11       	cpse	r24, r1
    1a72:	08 95       	ret
		
		DIO_Enu_SetPinValue( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8HIGH  );
    1a74:	80 81       	ld	r24, Z
    1a76:	61 81       	ldd	r22, Z+1	; 0x01
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1a7e:	08 95       	ret
void BUZ_voidOff ( BUZ_Type *BUZ_Configuration )
{
	
	if( BUZ_Configuration->Active_State == ACTIVE_HIGH ){
		
		DIO_Enu_SetPinValue( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8LOW  );
    1a80:	80 81       	ld	r24, Z
    1a82:	61 81       	ldd	r22, Z+1	; 0x01
    1a84:	40 e0       	ldi	r20, 0x00	; 0
    1a86:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1a8a:	08 95       	ret

00001a8c <BUZ_voidOn>:
}

//----------------------------------------------------------------------------------------------------------------------------------------------------

void BUZ_voidOn  ( BUZ_Type *BUZ_Configuration )
{
    1a8c:	fc 01       	movw	r30, r24
	
	if( BUZ_Configuration->Active_State == ACTIVE_HIGH ){
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	41 f0       	breq	.+16     	; 0x1aa4 <BUZ_voidOn+0x18>
		
		DIO_Enu_SetPinValue( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8HIGH );
		
	}else if( BUZ_Configuration->Active_State == ACTIVE_LOW ){
    1a94:	81 11       	cpse	r24, r1
    1a96:	08 95       	ret
		
		DIO_Enu_SetPinValue( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8LOW  );
    1a98:	80 81       	ld	r24, Z
    1a9a:	61 81       	ldd	r22, Z+1	; 0x01
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1aa2:	08 95       	ret
void BUZ_voidOn  ( BUZ_Type *BUZ_Configuration )
{
	
	if( BUZ_Configuration->Active_State == ACTIVE_HIGH ){
		
		DIO_Enu_SetPinValue( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8HIGH );
    1aa4:	80 81       	ld	r24, Z
    1aa6:	61 81       	ldd	r22, Z+1	; 0x01
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 9f 12 	call	0x253e	; 0x253e <DIO_Enu_SetPinValue>
    1aae:	08 95       	ret

00001ab0 <BUZ_voidInit>:
#include "../../4_LIB/ERROR_STATES.h"
#include "../../1_MCAL/DIO/DIO_INTERFACE.h"
#include "BUZ_interface.h"

void BUZ_voidInit( BUZ_Type *BUZ_Configuration )
{
    1ab0:	fc 01       	movw	r30, r24
	
	DIO_Enu_SetPinDirection( BUZ_Configuration->Port , BUZ_Configuration->Pin , DIO_u8OUTPUT );
    1ab2:	80 81       	ld	r24, Z
    1ab4:	61 81       	ldd	r22, Z+1	; 0x01
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 36 12 	call	0x246c	; 0x246c <DIO_Enu_SetPinDirection>
	
}
    1abc:	08 95       	ret

00001abe <USART_voidInit>:
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);

/***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

	CLR_BIT(UCSRA, UCSRA_U2X);
    1abe:	59 98       	cbi	0x0b, 1	; 11

	/*
		$ Set Baud Rate
		Hint : UBRRH then UBRRL to avoid problems
	*/
	UBRRH = (u8)(Local_u16UBRR >> 8); /* MSBs at Local_u16UBRR */
    1ac0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8)Local_u16UBRR;
    1ac2:	83 e3       	ldi	r24, 0x33	; 51
    1ac4:	89 b9       	out	0x09, r24	; 9

/*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
	CLR_BIT(UCSRA, UCSRA_MPCM);
    1ac6:	58 98       	cbi	0x0b, 0	; 11
	SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
	SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB, UCSRB_UCSZ2);
    1ac8:	52 98       	cbi	0x0a, 2	; 10

	/*Set UCSRC Mode*/
	SET_BIT(Local_u8UCSRC, UCSRC_URSEL);

	/*Store the value in UCSRC Register (one operation) */
	UCSRC = Local_u8UCSRC;
    1aca:	86 e8       	ldi	r24, 0x86	; 134
    1acc:	80 bd       	out	0x20, r24	; 32

/*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
	CLR_BIT(UCSRB, UCSRB_RXCIE);
#elif USART_RX_COMPLETE_INTERRUPT == ENABLE
	SET_BIT(UCSRB, UCSRB_RXCIE);
    1ace:	57 9a       	sbi	0x0a, 7	; 10

/*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
	CLR_BIT(UCSRB, UCSRB_TXCIE);
#elif USART_TX_COMPLETE_INTERRUPT == ENABLE
	SET_BIT(UCSRB, UCSRB_TXCIE);
    1ad0:	56 9a       	sbi	0x0a, 6	; 10
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

/*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
	CLR_BIT(UCSRB, UCSRB_UDRIE);
    1ad2:	55 98       	cbi	0x0a, 5	; 10

/*Receive Enable*/
#if USART_RECEIVER_ENABLE == DISABLE
	CLR_BIT(UCSRB, UCSRB_RXEN);
#elif USART_RECEIVER_ENABLE == ENABLE
	SET_BIT(UCSRB, UCSRB_RXEN);
    1ad4:	54 9a       	sbi	0x0a, 4	; 10

/*Transmitter Enable*/
#if USART_TRANSMITTER_ENABLE == DISABLE
	CLR_BIT(UCSRB, UCSRB_TXEN);
#elif USART_TRANSMITTER_ENABLE == ENABLE
	SET_BIT(UCSRB, UCSRB_TXEN);
    1ad6:	53 9a       	sbi	0x0a, 3	; 10
#else
#error "Wrong USART_TRANSMITTER_ENABLE config"
#endif
}
    1ad8:	08 95       	ret

00001ada <USART_u8SendStringAsynch>:
}

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8SendStringAsynch(const u8 *Copy_pchString, void (*NotificationFunc)(void))
{
    1ada:	fc 01       	movw	r30, r24
	ES_t Local_u8ErrorState = ES_OK;

	if (USART_u8State == ES_USART_IDLE)
    1adc:	80 91 7e 07 	lds	r24, 0x077E
    1ae0:	88 30       	cpi	r24, 0x08	; 8
    1ae2:	11 f0       	breq	.+4      	; 0x1ae8 <USART_u8SendStringAsynch+0xe>
    1ae4:	87 e0       	ldi	r24, 0x07	; 7
    1ae6:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    1ae8:	30 97       	sbiw	r30, 0x00	; 0
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <USART_u8SendStringAsynch+0x3c>
    1aec:	61 15       	cp	r22, r1
    1aee:	71 05       	cpc	r23, r1
    1af0:	91 f0       	breq	.+36     	; 0x1b16 <USART_u8SendStringAsynch+0x3c>
		{
			/*USART is now Busy*/
			USART_u8State = ES_USART_BUSY;
    1af2:	87 e0       	ldi	r24, 0x07	; 7
    1af4:	80 93 7e 07 	sts	0x077E, r24

			/*Assign the USART data globally*/
			USART_pu8SendData = Copy_pchString;
    1af8:	f0 93 9f 07 	sts	0x079F, r31
    1afc:	e0 93 9e 07 	sts	0x079E, r30
			USART_pvNotificationFunc = NotificationFunc;
    1b00:	70 93 a1 07 	sts	0x07A1, r23
    1b04:	60 93 a0 07 	sts	0x07A0, r22

			/*Set Index to first element*/
			USART_u8Index = 0;
    1b08:	10 92 a5 07 	sts	0x07A5, r1

			/*Send first Data */
			UDR = USART_pu8SendData[USART_u8Index];
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8c b9       	out	0x0c, r24	; 12

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB, UCSRB_TXCIE);
    1b10:	56 9a       	sbi	0x0a, 6	; 10
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	08 95       	ret
{
	ES_t Local_u8ErrorState = ES_OK;

	if (USART_u8State == ES_USART_IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    1b16:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}

	return Local_u8ErrorState;
}
    1b18:	08 95       	ret

00001b1a <USART_u8ReceiveBufferAsynch>:
}

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8ReceiveBufferAsynch(u8 *Copy_pchString, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    1b1a:	bc 01       	movw	r22, r24
	ES_t Local_u8ErrorState = ES_OK;

	if (USART_u8State == ES_USART_IDLE)
    1b1c:	80 91 7e 07 	lds	r24, 0x077E
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	11 f0       	breq	.+4      	; 0x1b28 <USART_u8ReceiveBufferAsynch+0xe>
    1b24:	87 e0       	ldi	r24, 0x07	; 7
    1b26:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    1b28:	61 15       	cp	r22, r1
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	91 f0       	breq	.+36     	; 0x1b52 <USART_u8ReceiveBufferAsynch+0x38>
    1b2e:	21 15       	cp	r18, r1
    1b30:	31 05       	cpc	r19, r1
    1b32:	79 f0       	breq	.+30     	; 0x1b52 <USART_u8ReceiveBufferAsynch+0x38>
		{
			/*USART is now Busy*/
			//USART_u8State = ES_USART_BUSY;

			/*Assign the USART data globally*/
			USART_pu8ReceiveData = Copy_pchString;
    1b34:	70 93 a3 07 	sts	0x07A3, r23
    1b38:	60 93 a2 07 	sts	0x07A2, r22
			USART_pvNotificationFunc = NotificationFunc;
    1b3c:	30 93 a1 07 	sts	0x07A1, r19
    1b40:	20 93 a0 07 	sts	0x07A0, r18
			USART_u8BufferSize = Copy_u32BufferSize;
    1b44:	40 93 a4 07 	sts	0x07A4, r20

			/*Set Index to first element*/
			USART_u8Index = 0;
    1b48:	10 92 a5 07 	sts	0x07A5, r1

			/*USART Recieve Interrupt Enable */
			SET_BIT(UCSRB, UCSRB_RXCIE);
    1b4c:	57 9a       	sbi	0x0a, 7	; 10
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	08 95       	ret
{
	ES_t Local_u8ErrorState = ES_OK;

	if (USART_u8State == ES_USART_IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    1b52:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	return Local_u8ErrorState;
}
    1b54:	08 95       	ret

00001b56 <USART_voidEnableTX>:

USART_voidEnableTX(void){
		SET_BIT(UCSRB, UCSRB_TXCIE);
    1b56:	56 9a       	sbi	0x0a, 6	; 10
}
    1b58:	08 95       	ret

00001b5a <USART_voidEnableRX>:
USART_voidEnableRX(void){
		SET_BIT(UCSRB, UCSRB_RXCIE);
    1b5a:	57 9a       	sbi	0x0a, 7	; 10
}
    1b5c:	08 95       	ret

00001b5e <USART_voidDisableTX>:
USART_voidDisableTX(void){
		CLR_BIT(UCSRB, UCSRB_TXCIE);
    1b5e:	56 98       	cbi	0x0a, 6	; 10
}
    1b60:	08 95       	ret

00001b62 <USART_voidDisableRX>:
USART_voidDisableRX(void){
		CLR_BIT(UCSRB, UCSRB_RXCIE);
    1b62:	57 98       	cbi	0x0a, 7	; 10
}
    1b64:	08 95       	ret

00001b66 <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1b66:	1f 92       	push	r1
    1b68:	0f 92       	push	r0
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	0f 92       	push	r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	4f 93       	push	r20
    1b76:	5f 93       	push	r21
    1b78:	6f 93       	push	r22
    1b7a:	7f 93       	push	r23
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	af 93       	push	r26
    1b82:	bf 93       	push	r27
    1b84:	ef 93       	push	r30
    1b86:	ff 93       	push	r31
	/*Receive next Data*/
	USART_pu8ReceiveData[USART_u8Index] = UDR;
    1b88:	80 91 a5 07 	lds	r24, 0x07A5
    1b8c:	e0 91 a2 07 	lds	r30, 0x07A2
    1b90:	f0 91 a3 07 	lds	r31, 0x07A3
    1b94:	e8 0f       	add	r30, r24
    1b96:	f1 1d       	adc	r31, r1
    1b98:	8c b1       	in	r24, 0x0c	; 12
    1b9a:	80 83       	st	Z, r24
	if(USART_pu8ReceiveData[USART_u8Index] == 0x0D){
    1b9c:	8d 30       	cpi	r24, 0x0D	; 13
    1b9e:	d1 f0       	breq	.+52     	; 0x1bd4 <__vector_13+0x6e>
    1ba0:	90 91 a4 07 	lds	r25, 0x07A4
		USART_pu8ReceiveData[USART_u8Index]='\0';
		USART_u8Index=USART_u8BufferSize-1;
	}
	/*Increment Data index of the buffer*/
	USART_u8Index++;
    1ba4:	80 91 a5 07 	lds	r24, 0x07A5
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	80 93 a5 07 	sts	0x07A5, r24

	if (USART_u8Index == USART_u8BufferSize)
    1bae:	89 17       	cp	r24, r25
    1bb0:	f9 f0       	breq	.+62     	; 0x1bf0 <__vector_13+0x8a>
	}
	else
	{
		/*Do Noting*/
	}
}
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	bf 91       	pop	r27
    1bb8:	af 91       	pop	r26
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	0f 90       	pop	r0
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	0f 90       	pop	r0
    1bd0:	1f 90       	pop	r1
    1bd2:	18 95       	reti
void __vector_13(void)
{
	/*Receive next Data*/
	USART_pu8ReceiveData[USART_u8Index] = UDR;
	if(USART_pu8ReceiveData[USART_u8Index] == 0x0D){
		USART_pu8ReceiveData[USART_u8Index]='\0';
    1bd4:	10 82       	st	Z, r1
		USART_u8Index=USART_u8BufferSize-1;
    1bd6:	90 91 a4 07 	lds	r25, 0x07A4
    1bda:	91 50       	subi	r25, 0x01	; 1
    1bdc:	90 93 a5 07 	sts	0x07A5, r25
    1be0:	9f 5f       	subi	r25, 0xFF	; 255
	}
	/*Increment Data index of the buffer*/
	USART_u8Index++;
    1be2:	80 91 a5 07 	lds	r24, 0x07A5
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	80 93 a5 07 	sts	0x07A5, r24

	if (USART_u8Index == USART_u8BufferSize)
    1bec:	89 17       	cp	r24, r25
    1bee:	09 f7       	brne	.-62     	; 0x1bb2 <__vector_13+0x4c>
	{
		/*Send Data Complete*/

		USART_u8Index = 0;
    1bf0:	10 92 a5 07 	sts	0x07A5, r1
		/*USART is now IDLE*/
		USART_u8State = ES_USART_IDLE;
    1bf4:	88 e0       	ldi	r24, 0x08	; 8
    1bf6:	80 93 7e 07 	sts	0x077E, r24

		/*Call Notification Function*/
		USART_pvNotificationFunc();
    1bfa:	e0 91 a0 07 	lds	r30, 0x07A0
    1bfe:	f0 91 a1 07 	lds	r31, 0x07A1
    1c02:	09 95       	icall

		/*USART Recieve Interrupt Disable*/
		CLR_BIT(UCSRB, UCSRB_RXCIE);
    1c04:	57 98       	cbi	0x0a, 7	; 10
    1c06:	d5 cf       	rjmp	.-86     	; 0x1bb2 <__vector_13+0x4c>

00001c08 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	2f 93       	push	r18
    1c14:	3f 93       	push	r19
    1c16:	4f 93       	push	r20
    1c18:	5f 93       	push	r21
    1c1a:	6f 93       	push	r22
    1c1c:	7f 93       	push	r23
    1c1e:	8f 93       	push	r24
    1c20:	9f 93       	push	r25
    1c22:	af 93       	push	r26
    1c24:	bf 93       	push	r27
    1c26:	ef 93       	push	r30
    1c28:	ff 93       	push	r31

	/*Increment Data index of the buffer*/
	USART_u8Index++;
    1c2a:	80 91 a5 07 	lds	r24, 0x07A5
    1c2e:	8f 5f       	subi	r24, 0xFF	; 255
    1c30:	80 93 a5 07 	sts	0x07A5, r24

	if (USART_pu8SendData[USART_u8Index] == '\0')
    1c34:	e0 91 9e 07 	lds	r30, 0x079E
    1c38:	f0 91 9f 07 	lds	r31, 0x079F
    1c3c:	e8 0f       	add	r30, r24
    1c3e:	f1 1d       	adc	r31, r1
    1c40:	e0 81       	ld	r30, Z
    1c42:	ee 23       	and	r30, r30
    1c44:	91 f0       	breq	.+36     	; 0x1c6a <__vector_15+0x62>
	}
	else
	{
		/*Send Data not Complete*/
		/*Send next Data*/
		UDR = USART_pu8SendData[USART_u8Index];
    1c46:	ec b9       	out	0x0c, r30	; 12
	}
}
    1c48:	ff 91       	pop	r31
    1c4a:	ef 91       	pop	r30
    1c4c:	bf 91       	pop	r27
    1c4e:	af 91       	pop	r26
    1c50:	9f 91       	pop	r25
    1c52:	8f 91       	pop	r24
    1c54:	7f 91       	pop	r23
    1c56:	6f 91       	pop	r22
    1c58:	5f 91       	pop	r21
    1c5a:	4f 91       	pop	r20
    1c5c:	3f 91       	pop	r19
    1c5e:	2f 91       	pop	r18
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti
	USART_u8Index++;

	if (USART_pu8SendData[USART_u8Index] == '\0')
	{
		/*Receive Data Complete*/
		USART_u8Index = 0;
    1c6a:	10 92 a5 07 	sts	0x07A5, r1

		/*USART is now IDLE*/
		USART_u8State = ES_USART_IDLE;
    1c6e:	88 e0       	ldi	r24, 0x08	; 8
    1c70:	80 93 7e 07 	sts	0x077E, r24

		/*Call Notification Function*/
		USART_pvNotificationFunc();
    1c74:	e0 91 a0 07 	lds	r30, 0x07A0
    1c78:	f0 91 a1 07 	lds	r31, 0x07A1
    1c7c:	09 95       	icall

		/*USART Transmit Interrupt Disable*/
		CLR_BIT(UCSRB, UCSRB_TXCIE);
    1c7e:	56 98       	cbi	0x0a, 6	; 10
    1c80:	e3 cf       	rjmp	.-58     	; 0x1c48 <__vector_15+0x40>

00001c82 <USART_voidClearBuffer>:
	}
}

void USART_voidClearBuffer(void){
	u8 temp;
	temp = UDR;
    1c82:	8c b1       	in	r24, 0x0c	; 12
	CLR_BIT(UCSRA, UCSRA_RXC);
    1c84:	5f 98       	cbi	0x0b, 7	; 11
}
    1c86:	08 95       	ret

00001c88 <USART_u8RecevieData>:
}

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8RecevieData(u8 *Copy_u8ReceviedData)
{
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
	u8 state=SREG;
    1c90:	1f b7       	in	r17, 0x3f	; 63
	GIE_VoidDisable();
    1c92:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <GIE_VoidDisable>
	ES_t Local_u8ErrorState=ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_u8ReceviedData != NULL)
    1c96:	20 97       	sbiw	r28, 0x00	; 0
    1c98:	99 f1       	breq	.+102    	; 0x1d00 <USART_u8RecevieData+0x78>
	{
		if (USART_u8State == ES_USART_IDLE)
    1c9a:	80 91 7e 07 	lds	r24, 0x077E
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <USART_u8RecevieData+0x28>
    1ca2:	97 e0       	ldi	r25, 0x07	; 7
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	SREG=state;
    1ca4:	1f bf       	out	0x3f, r17	; 63
	return Local_u8ErrorState;
}
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	08 95       	ret
		if (USART_u8State == ES_USART_IDLE)
		{
			USART_u8State = ES_USART_BUSY;

			/*Wait until a receive complete*/
			while (((GIT_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1cb0:	5f 99       	sbic	0x0b, 7	; 11
    1cb2:	17 c0       	rjmp	.+46     	; 0x1ce2 <USART_u8RecevieData+0x5a>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <USART_u8RecevieData+0x46>
    1cbe:	80 31       	cpi	r24, 0x10	; 16
    1cc0:	27 e2       	ldi	r18, 0x27	; 39
    1cc2:	92 07       	cpc	r25, r18
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	a2 07       	cpc	r26, r18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	b2 07       	cpc	r27, r18
    1ccc:	b9 f0       	breq	.+46     	; 0x1cfc <USART_u8RecevieData+0x74>
			{
				Local_u32TimeoutCounter++;
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	a1 1d       	adc	r26, r1
    1cd2:	b1 1d       	adc	r27, r1
		if (USART_u8State == ES_USART_IDLE)
		{
			USART_u8State = ES_USART_BUSY;

			/*Wait until a receive complete*/
			while (((GIT_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1cd4:	5f 9b       	sbis	0x0b, 7	; 11
    1cd6:	f3 cf       	rjmp	.-26     	; 0x1cbe <USART_u8RecevieData+0x36>
			{
				Local_u32TimeoutCounter++;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1cd8:	80 51       	subi	r24, 0x10	; 16
    1cda:	97 42       	sbci	r25, 0x27	; 39
    1cdc:	a0 40       	sbci	r26, 0x00	; 0
    1cde:	b0 40       	sbci	r27, 0x00	; 0
    1ce0:	69 f0       	breq	.+26     	; 0x1cfc <USART_u8RecevieData+0x74>
			{
				Local_u8ErrorState = ES_TIMEOUT_STATE;
			}
			else
			{
				*Copy_u8ReceviedData = UDR;
    1ce2:	8c b1       	in	r24, 0x0c	; 12
    1ce4:	88 83       	st	Y, r24
				CLR_BIT(UCSRA, UCSRA_RXC);
    1ce6:	5f 98       	cbi	0x0b, 7	; 11
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
			}

			USART_u8State = ES_USART_IDLE;
    1cea:	88 e0       	ldi	r24, 0x08	; 8
    1cec:	80 93 7e 07 	sts	0x077E, r24
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	SREG=state;
    1cf0:	1f bf       	out	0x3f, r17	; 63
	return Local_u8ErrorState;
}
    1cf2:	89 2f       	mov	r24, r25
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	08 95       	ret
				Local_u8ErrorState = ES_TIMEOUT_STATE;
			}
			else
			{
				*Copy_u8ReceviedData = UDR;
				CLR_BIT(UCSRA, UCSRA_RXC);
    1cfc:	96 e0       	ldi	r25, 0x06	; 6
    1cfe:	f5 cf       	rjmp	.-22     	; 0x1cea <USART_u8RecevieData+0x62>
{
	u8 state=SREG;
	GIE_VoidDisable();
	ES_t Local_u8ErrorState=ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_u8ReceviedData != NULL)
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	d0 cf       	rjmp	.-96     	; 0x1ca4 <USART_u8RecevieData+0x1c>

00001d04 <USART_u8SendData>:
}

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8SendData(u8 Copy_u8Data)
{
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	08 2f       	mov	r16, r24
	u8 state =SREG;
    1d0a:	1f b7       	in	r17, 0x3f	; 63
	GIE_VoidDisable();
    1d0c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <GIE_VoidDisable>
	ES_t Local_u8ErrorState = ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (USART_u8State == ES_USART_IDLE)
    1d10:	80 91 7e 07 	lds	r24, 0x077E
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	31 f0       	breq	.+12     	; 0x1d24 <USART_u8SendData+0x20>
    1d18:	97 e0       	ldi	r25, 0x07	; 7
	}
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	SREG=state;
    1d1a:	1f bf       	out	0x3f, r17	; 63
	return Local_u8ErrorState;
}
    1d1c:	89 2f       	mov	r24, r25
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

		/*
			Hint : TIMEOUT to avoid infinity loop
		*/
		/*Wait until a Receiving complete or Timing out*/
		while (((GIT_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1d24:	8b b1       	in	r24, 0x0b	; 11
    1d26:	82 95       	swap	r24
    1d28:	86 95       	lsr	r24
    1d2a:	87 70       	andi	r24, 0x07	; 7
    1d2c:	80 fd       	sbrc	r24, 0
    1d2e:	17 c0       	rjmp	.+46     	; 0x1d5e <USART_u8SendData+0x5a>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e0       	ldi	r26, 0x00	; 0
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	08 c0       	rjmp	.+16     	; 0x1d4a <USART_u8SendData+0x46>
    1d3a:	80 31       	cpi	r24, 0x10	; 16
    1d3c:	27 e2       	ldi	r18, 0x27	; 39
    1d3e:	92 07       	cpc	r25, r18
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	a2 07       	cpc	r26, r18
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	b2 07       	cpc	r27, r18
    1d48:	b9 f0       	breq	.+46     	; 0x1d78 <USART_u8SendData+0x74>
		{
			Local_u32TimeoutCounter++;
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	a1 1d       	adc	r26, r1
    1d4e:	b1 1d       	adc	r27, r1

		/*
			Hint : TIMEOUT to avoid infinity loop
		*/
		/*Wait until a Receiving complete or Timing out*/
		while (((GIT_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1d50:	5d 9b       	sbis	0x0b, 5	; 11
    1d52:	f3 cf       	rjmp	.-26     	; 0x1d3a <USART_u8SendData+0x36>
		{
			Local_u32TimeoutCounter++;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1d54:	80 51       	subi	r24, 0x10	; 16
    1d56:	97 42       	sbci	r25, 0x27	; 39
    1d58:	a0 40       	sbci	r26, 0x00	; 0
    1d5a:	b0 40       	sbci	r27, 0x00	; 0
    1d5c:	69 f0       	breq	.+26     	; 0x1d78 <USART_u8SendData+0x74>
		{
			Local_u8ErrorState = ES_TIMEOUT_STATE;
		}
		else
		{
			UDR = Copy_u8Data;
    1d5e:	0c b9       	out	0x0c, r16	; 12
            while (((GIT_BIT(UCSRA, UCSRA_TXC)) == 0));
    1d60:	5e 9b       	sbis	0x0b, 6	; 11
    1d62:	fe cf       	rjmp	.-4      	; 0x1d60 <USART_u8SendData+0x5c>
            SET_BIT(UCSRA, UCSRA_TXC);
    1d64:	5e 9a       	sbi	0x0b, 6	; 11
    1d66:	91 e0       	ldi	r25, 0x01	; 1
		}

		USART_u8State = ES_USART_IDLE;
    1d68:	88 e0       	ldi	r24, 0x08	; 8
    1d6a:	80 93 7e 07 	sts	0x077E, r24
	}
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	SREG=state;
    1d6e:	1f bf       	out	0x3f, r17	; 63
	return Local_u8ErrorState;
}
    1d70:	89 2f       	mov	r24, r25
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret
		}
		else
		{
			UDR = Copy_u8Data;
            while (((GIT_BIT(UCSRA, UCSRA_TXC)) == 0));
            SET_BIT(UCSRA, UCSRA_TXC);
    1d78:	96 e0       	ldi	r25, 0x06	; 6
    1d7a:	f6 cf       	rjmp	.-20     	; 0x1d68 <USART_u8SendData+0x64>

00001d7c <USART_u8ReceiveBufferSynch>:
}

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8ReceiveBufferSynch(u8 *Copy_pchString, u32 Copy_u32BufferSize)
{
    1d7c:	7f 92       	push	r7
    1d7e:	8f 92       	push	r8
    1d80:	9f 92       	push	r9
    1d82:	af 92       	push	r10
    1d84:	bf 92       	push	r11
    1d86:	cf 92       	push	r12
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	5a 01       	movw	r10, r20
    1d98:	6b 01       	movw	r12, r22
	ES_t Local_u8ErrorState = ES_OK;

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <USART_u8ReceiveBufferSynch+0x24>
    1d9e:	4e c0       	rjmp	.+156    	; 0x1e3c <USART_u8ReceiveBufferSynch+0xc0>
	{
		while (Local_u32Index < Copy_u32BufferSize)
    1da0:	41 15       	cp	r20, r1
    1da2:	51 05       	cpc	r21, r1
    1da4:	61 05       	cpc	r22, r1
    1da6:	71 05       	cpc	r23, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <USART_u8ReceiveBufferSynch+0x30>
    1daa:	5d c0       	rjmp	.+186    	; 0x1e66 <USART_u8ReceiveBufferSynch+0xea>
{
	ES_t Local_u8ErrorState = ES_OK;

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
    1dac:	ec 01       	movw	r28, r24
    1dae:	ee 24       	eor	r14, r14
    1db0:	ff 24       	eor	r15, r15
    1db2:	87 01       	movw	r16, r14
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_u8ReceviedData != NULL)
	{
		if (USART_u8State == ES_USART_IDLE)
		{
			USART_u8State = ES_USART_BUSY;
    1db4:	97 e0       	ldi	r25, 0x07	; 7
    1db6:	89 2e       	mov	r8, r25
			{
				*Copy_u8ReceviedData = UDR;
				CLR_BIT(UCSRA, UCSRA_RXC);
			}

			USART_u8State = ES_USART_IDLE;
    1db8:	88 e0       	ldi	r24, 0x08	; 8
    1dba:	78 2e       	mov	r7, r24
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <USART_u8ReceiveBufferSynch+0x6a>
	GIE_VoidDisable();
	ES_t Local_u8ErrorState=ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_u8ReceviedData != NULL)
	{
		if (USART_u8State == ES_USART_IDLE)
    1dbe:	98 81       	ld	r25, Y
    1dc0:	87 e0       	ldi	r24, 0x07	; 7
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	SREG=state;
    1dc2:	9f be       	out	0x3f, r9	; 63
	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]);
			if(Copy_pchString[Local_u32Index]=='\n'||Copy_pchString[Local_u32Index]=='\r'||Copy_pchString[Local_u32Index]==0x0D){
    1dc4:	9a 30       	cpi	r25, 0x0A	; 10
    1dc6:	d9 f1       	breq	.+118    	; 0x1e3e <USART_u8ReceiveBufferSynch+0xc2>
    1dc8:	9d 30       	cpi	r25, 0x0D	; 13
    1dca:	c9 f1       	breq	.+114    	; 0x1e3e <USART_u8ReceiveBufferSynch+0xc2>
				break;
			}
			Local_u32Index++;

			if (Local_u8ErrorState != ES_OK)
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	b9 f5       	brne	.+110    	; 0x1e3e <USART_u8ReceiveBufferSynch+0xc2>
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]);
			if(Copy_pchString[Local_u32Index]=='\n'||Copy_pchString[Local_u32Index]=='\r'||Copy_pchString[Local_u32Index]==0x0D){
				break;
			}
			Local_u32Index++;
    1dd0:	08 94       	sec
    1dd2:	e1 1c       	adc	r14, r1
    1dd4:	f1 1c       	adc	r15, r1
    1dd6:	01 1d       	adc	r16, r1
    1dd8:	11 1d       	adc	r17, r1
    1dda:	21 96       	adiw	r28, 0x01	; 1

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    1ddc:	ea 14       	cp	r14, r10
    1dde:	fb 04       	cpc	r15, r11
    1de0:	0c 05       	cpc	r16, r12
    1de2:	1d 05       	cpc	r17, r13
    1de4:	60 f5       	brcc	.+88     	; 0x1e3e <USART_u8ReceiveBufferSynch+0xc2>

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8RecevieData(u8 *Copy_u8ReceviedData)
{
	u8 state=SREG;
    1de6:	9f b6       	in	r9, 0x3f	; 63
	GIE_VoidDisable();
    1de8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <GIE_VoidDisable>
	ES_t Local_u8ErrorState=ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_u8ReceviedData != NULL)
    1dec:	20 97       	sbiw	r28, 0x00	; 0
    1dee:	c1 f1       	breq	.+112    	; 0x1e60 <USART_u8ReceiveBufferSynch+0xe4>
	{
		if (USART_u8State == ES_USART_IDLE)
    1df0:	80 91 7e 07 	lds	r24, 0x077E
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	19 f7       	brne	.-58     	; 0x1dbe <USART_u8ReceiveBufferSynch+0x42>
		{
			USART_u8State = ES_USART_BUSY;
    1df8:	80 92 7e 07 	sts	0x077E, r8

			/*Wait until a receive complete*/
			while (((GIT_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1dfc:	5f 99       	sbic	0x0b, 7	; 11
    1dfe:	17 c0       	rjmp	.+46     	; 0x1e2e <USART_u8ReceiveBufferSynch+0xb2>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e0       	ldi	r26, 0x00	; 0
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <USART_u8ReceiveBufferSynch+0x9e>
    1e0a:	80 31       	cpi	r24, 0x10	; 16
    1e0c:	27 e2       	ldi	r18, 0x27	; 39
    1e0e:	92 07       	cpc	r25, r18
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	a2 07       	cpc	r26, r18
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	b2 07       	cpc	r27, r18
    1e18:	01 f1       	breq	.+64     	; 0x1e5a <USART_u8ReceiveBufferSynch+0xde>
			{
				Local_u32TimeoutCounter++;
    1e1a:	01 96       	adiw	r24, 0x01	; 1
    1e1c:	a1 1d       	adc	r26, r1
    1e1e:	b1 1d       	adc	r27, r1
		if (USART_u8State == ES_USART_IDLE)
		{
			USART_u8State = ES_USART_BUSY;

			/*Wait until a receive complete*/
			while (((GIT_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1e20:	5f 9b       	sbis	0x0b, 7	; 11
    1e22:	f3 cf       	rjmp	.-26     	; 0x1e0a <USART_u8ReceiveBufferSynch+0x8e>
			{
				Local_u32TimeoutCounter++;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1e24:	80 51       	subi	r24, 0x10	; 16
    1e26:	97 42       	sbci	r25, 0x27	; 39
    1e28:	a0 40       	sbci	r26, 0x00	; 0
    1e2a:	b0 40       	sbci	r27, 0x00	; 0
    1e2c:	b1 f0       	breq	.+44     	; 0x1e5a <USART_u8ReceiveBufferSynch+0xde>
			{
				Local_u8ErrorState = ES_TIMEOUT_STATE;
			}
			else
			{
				*Copy_u8ReceviedData = UDR;
    1e2e:	9c b1       	in	r25, 0x0c	; 12
    1e30:	98 83       	st	Y, r25
				CLR_BIT(UCSRA, UCSRA_RXC);
    1e32:	5f 98       	cbi	0x0b, 7	; 11
    1e34:	81 e0       	ldi	r24, 0x01	; 1
			}

			USART_u8State = ES_USART_IDLE;
    1e36:	70 92 7e 07 	sts	0x077E, r7
    1e3a:	c3 cf       	rjmp	.-122    	; 0x1dc2 <USART_u8ReceiveBufferSynch+0x46>
{
	ES_t Local_u8ErrorState = ES_OK;

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	return Local_u8ErrorState;
}
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	ff 90       	pop	r15
    1e48:	ef 90       	pop	r14
    1e4a:	df 90       	pop	r13
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	9f 90       	pop	r9
    1e54:	8f 90       	pop	r8
    1e56:	7f 90       	pop	r7
    1e58:	08 95       	ret
			while (((GIT_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1e5a:	98 81       	ld	r25, Y
    1e5c:	86 e0       	ldi	r24, 0x06	; 6
    1e5e:	eb cf       	rjmp	.-42     	; 0x1e36 <USART_u8ReceiveBufferSynch+0xba>
{
	u8 state=SREG;
	GIE_VoidDisable();
	ES_t Local_u8ErrorState=ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_u8ReceviedData != NULL)
    1e60:	98 81       	ld	r25, Y
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	ae cf       	rjmp	.-164    	; 0x1dc2 <USART_u8ReceiveBufferSynch+0x46>

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	ea cf       	rjmp	.-44     	; 0x1e3e <USART_u8ReceiveBufferSynch+0xc2>

00001e6a <USART_u8SendStringSynch>:
}

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8SendStringSynch(const u8 *Copy_pchString)
{
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	fc 01       	movw	r30, r24
	ES_t Local_u8ErrorState = ES_OK;

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <USART_u8SendStringSynch+0x14>
    1e7c:	4c c0       	rjmp	.+152    	; 0x1f16 <USART_u8SendStringSynch+0xac>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    1e7e:	10 81       	ld	r17, Z
    1e80:	11 23       	and	r17, r17
    1e82:	d9 f1       	breq	.+118    	; 0x1efa <USART_u8SendStringSynch+0x90>
    1e84:	ec 01       	movw	r28, r24
	GIE_VoidDisable();
	ES_t Local_u8ErrorState = ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (USART_u8State == ES_USART_IDLE)
	{
		USART_u8State = ES_USART_BUSY;
    1e86:	37 e0       	ldi	r19, 0x07	; 7
    1e88:	f3 2e       	mov	r15, r19
			UDR = Copy_u8Data;
            while (((GIT_BIT(UCSRA, UCSRA_TXC)) == 0));
            SET_BIT(UCSRA, UCSRA_TXC);
		}

		USART_u8State = ES_USART_IDLE;
    1e8a:	28 e0       	ldi	r18, 0x08	; 8
    1e8c:	e2 2e       	mov	r14, r18

//-------------------------------------------------------------------------------------------------------------------------------

ES_t USART_u8SendData(u8 Copy_u8Data)
{
	u8 state =SREG;
    1e8e:	0f b7       	in	r16, 0x3f	; 63
	GIE_VoidDisable();
    1e90:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <GIE_VoidDisable>
	ES_t Local_u8ErrorState = ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (USART_u8State == ES_USART_IDLE)
    1e94:	80 91 7e 07 	lds	r24, 0x077E
    1e98:	88 30       	cpi	r24, 0x08	; 8
    1e9a:	49 f0       	breq	.+18     	; 0x1eae <USART_u8SendStringSynch+0x44>
	}
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	SREG=state;
    1e9c:	0f bf       	out	0x3f, r16	; 63
    1e9e:	87 e0       	ldi	r24, 0x07	; 7
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	return Local_u8ErrorState;
}
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	08 95       	ret
	GIE_VoidDisable();
	ES_t Local_u8ErrorState = ES_OK;
	u32 Local_u32TimeoutCounter = 0;
	if (USART_u8State == ES_USART_IDLE)
	{
		USART_u8State = ES_USART_BUSY;
    1eae:	f0 92 7e 07 	sts	0x077E, r15

		/*
			Hint : TIMEOUT to avoid infinity loop
		*/
		/*Wait until a Receiving complete or Timing out*/
		while (((GIT_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1eb2:	5d 99       	sbic	0x0b, 5	; 11
    1eb4:	17 c0       	rjmp	.+46     	; 0x1ee4 <USART_u8SendStringSynch+0x7a>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a0 e0       	ldi	r26, 0x00	; 0
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	08 c0       	rjmp	.+16     	; 0x1ed0 <USART_u8SendStringSynch+0x66>
    1ec0:	80 31       	cpi	r24, 0x10	; 16
    1ec2:	27 e2       	ldi	r18, 0x27	; 39
    1ec4:	92 07       	cpc	r25, r18
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	a2 07       	cpc	r26, r18
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	b2 07       	cpc	r27, r18
    1ece:	b9 f0       	breq	.+46     	; 0x1efe <USART_u8SendStringSynch+0x94>
		{
			Local_u32TimeoutCounter++;
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	a1 1d       	adc	r26, r1
    1ed4:	b1 1d       	adc	r27, r1

		/*
			Hint : TIMEOUT to avoid infinity loop
		*/
		/*Wait until a Receiving complete or Timing out*/
		while (((GIT_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1ed6:	5d 9b       	sbis	0x0b, 5	; 11
    1ed8:	f3 cf       	rjmp	.-26     	; 0x1ec0 <USART_u8SendStringSynch+0x56>
		{
			Local_u32TimeoutCounter++;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1eda:	80 51       	subi	r24, 0x10	; 16
    1edc:	97 42       	sbci	r25, 0x27	; 39
    1ede:	a0 40       	sbci	r26, 0x00	; 0
    1ee0:	b0 40       	sbci	r27, 0x00	; 0
    1ee2:	69 f0       	breq	.+26     	; 0x1efe <USART_u8SendStringSynch+0x94>
		{
			Local_u8ErrorState = ES_TIMEOUT_STATE;
		}
		else
		{
			UDR = Copy_u8Data;
    1ee4:	1c b9       	out	0x0c, r17	; 12
            while (((GIT_BIT(UCSRA, UCSRA_TXC)) == 0));
    1ee6:	5e 9b       	sbis	0x0b, 6	; 11
    1ee8:	fe cf       	rjmp	.-4      	; 0x1ee6 <USART_u8SendStringSynch+0x7c>
            SET_BIT(UCSRA, UCSRA_TXC);
    1eea:	5e 9a       	sbi	0x0b, 6	; 11
		}

		USART_u8State = ES_USART_IDLE;
    1eec:	e0 92 7e 07 	sts	0x077E, r14
	}
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	SREG=state;
    1ef0:	0f bf       	out	0x3f, r16	; 63

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    1ef2:	19 81       	ldd	r17, Y+1	; 0x01
    1ef4:	21 96       	adiw	r28, 0x01	; 1
    1ef6:	11 23       	and	r17, r17
    1ef8:	51 f6       	brne	.-108    	; 0x1e8e <USART_u8SendStringSynch+0x24>
	}
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	SREG=state;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	d1 cf       	rjmp	.-94     	; 0x1ea0 <USART_u8SendStringSynch+0x36>
			UDR = Copy_u8Data;
            while (((GIT_BIT(UCSRA, UCSRA_TXC)) == 0));
            SET_BIT(UCSRA, UCSRA_TXC);
		}

		USART_u8State = ES_USART_IDLE;
    1efe:	88 e0       	ldi	r24, 0x08	; 8
    1f00:	80 93 7e 07 	sts	0x077E, r24
	}
	else
	{
		Local_u8ErrorState = ES_USART_BUSY;
	}
	SREG=state;
    1f04:	0f bf       	out	0x3f, r16	; 63
    1f06:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	return Local_u8ErrorState;
}
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	08 95       	ret
{
	ES_t Local_u8ErrorState = ES_OK;

	u32 Local_u32Index = 0;

	if (Copy_pchString != NULL)
    1f16:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER;
	}
	return Local_u8ErrorState;
}
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	08 95       	ret

00001f26 <TWI_voidInitMaster>:
#include "TWI_config.h"
#include "TWI_interface.h"
#include "TWI_private.h"

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address) {
    1f26:	98 2f       	mov	r25, r24

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR = (u8) (((F_CPU / SCL_Clock) - 16) / (2 * TWI_PRESCALLER));
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	80 b9       	out	0x00, r24	; 0

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER == PRESCALLER_BY_1) {
		TWSR = 0;
    1f2c:	11 b8       	out	0x01, r1	; 1
	} else if (TWI_PRESCALLER == PRESCALLER_BY_64) {
		TWSR = 3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if (Copy_u8Address != 0) {
    1f2e:	99 23       	and	r25, r25
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <TWI_voidInitMaster+0x10>
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address << 1;
    1f32:	99 0f       	add	r25, r25
    1f34:	92 b9       	out	0x02, r25	; 2
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    1f36:	86 b7       	in	r24, 0x36	; 54
    1f38:	80 64       	ori	r24, 0x40	; 64
    1f3a:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR, TWCR_TWEN);
    1f3c:	86 b7       	in	r24, 0x36	; 54
    1f3e:	84 60       	ori	r24, 0x04	; 4
    1f40:	86 bf       	out	0x36, r24	; 54
}
    1f42:	08 95       	ret

00001f44 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address) {
	/*Set the slave address*/
	TWAR = Copy_u8Address << 1;
    1f44:	88 0f       	add	r24, r24
    1f46:	82 b9       	out	0x02, r24	; 2

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    1f48:	86 b7       	in	r24, 0x36	; 54
    1f4a:	80 64       	ori	r24, 0x40	; 64
    1f4c:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
    1f4e:	86 b7       	in	r24, 0x36	; 54
    1f50:	84 60       	ori	r24, 0x04	; 4
    1f52:	86 bf       	out	0x36, r24	; 54
}
    1f54:	08 95       	ret

00001f56 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void) {
	TWI_ErrStatus Local_Error = NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    1f56:	86 b7       	in	r24, 0x36	; 54
    1f58:	80 62       	ori	r24, 0x20	; 32
    1f5a:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    1f5c:	86 b7       	in	r24, 0x36	; 54
    1f5e:	80 68       	ori	r24, 0x80	; 128
    1f60:	86 bf       	out	0x36, r24	; 54

	SET_BIT(TWCR, TWCR_TWEN);
    1f62:	86 b7       	in	r24, 0x36	; 54
    1f64:	84 60       	ori	r24, 0x04	; 4
    1f66:	86 bf       	out	0x36, r24	; 54
//	 Hint : we could use
//	 TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTA);


	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    1f68:	06 b6       	in	r0, 0x36	; 54
    1f6a:	07 fe       	sbrs	r0, 7
    1f6c:	fd cf       	rjmp	.-6      	; 0x1f68 <TWI_SendStartCondition+0x12>
		;

	/*Check the operation status (Bit Masking) */
	if ((TWSR & 0xF8) != START_ACK) {
    1f6e:	81 b1       	in	r24, 0x01	; 1
    1f70:	88 7f       	andi	r24, 0xF8	; 248
    1f72:	88 30       	cpi	r24, 0x08	; 8
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <TWI_SendStartCondition+0x24>
    1f76:	88 e0       	ldi	r24, 0x08	; 8
    1f78:	08 95       	ret
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    1f7c:	08 95       	ret

00001f7e <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void) {
	TWI_ErrStatus Local_Error = NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    1f7e:	86 b7       	in	r24, 0x36	; 54
    1f80:	80 62       	ori	r24, 0x20	; 32
    1f82:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    1f84:	86 b7       	in	r24, 0x36	; 54
    1f86:	80 68       	ori	r24, 0x80	; 128
    1f88:	86 bf       	out	0x36, r24	; 54
	 Hint : we could use
	 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    1f8a:	06 b6       	in	r0, 0x36	; 54
    1f8c:	07 fe       	sbrs	r0, 7
    1f8e:	fd cf       	rjmp	.-6      	; 0x1f8a <TWI_SendRepeatedStart+0xc>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != REP_START_ACK) {
    1f90:	81 b1       	in	r24, 0x01	; 1
    1f92:	88 7f       	andi	r24, 0xF8	; 248
    1f94:	80 31       	cpi	r24, 0x10	; 16
    1f96:	11 f0       	breq	.+4      	; 0x1f9c <TWI_SendRepeatedStart+0x1e>
    1f98:	87 e0       	ldi	r24, 0x07	; 7
    1f9a:	08 95       	ret
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    1f9e:	08 95       	ret

00001fa0 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress) {
	TWI_ErrStatus Local_Error = NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    1fa0:	88 0f       	add	r24, r24
    1fa2:	83 b9       	out	0x03, r24	; 3
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR, 0);
    1fa4:	18 98       	cbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    1fa6:	86 b7       	in	r24, 0x36	; 54
    1fa8:	8f 7d       	andi	r24, 0xDF	; 223
    1faa:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    1fac:	86 b7       	in	r24, 0x36	; 54
    1fae:	80 68       	ori	r24, 0x80	; 128
    1fb0:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    1fb2:	06 b6       	in	r0, 0x36	; 54
    1fb4:	07 fe       	sbrs	r0, 7
    1fb6:	fd cf       	rjmp	.-6      	; 0x1fb2 <TWI_SendSlaveAddressWithWrite+0x12>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK) {
    1fb8:	81 b1       	in	r24, 0x01	; 1
    1fba:	88 7f       	andi	r24, 0xF8	; 248
    1fbc:	88 31       	cpi	r24, 0x18	; 24
    1fbe:	11 f0       	breq	.+4      	; 0x1fc4 <TWI_SendSlaveAddressWithWrite+0x24>
    1fc0:	86 e0       	ldi	r24, 0x06	; 6
    1fc2:	08 95       	ret
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    1fc6:	08 95       	ret

00001fc8 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress) {
	TWI_ErrStatus Local_Error = NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress << 1;
    1fc8:	88 0f       	add	r24, r24
    1fca:	83 b9       	out	0x03, r24	; 3
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR, 0);
    1fcc:	18 9a       	sbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    1fce:	86 b7       	in	r24, 0x36	; 54
    1fd0:	8f 7d       	andi	r24, 0xDF	; 223
    1fd2:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    1fd4:	86 b7       	in	r24, 0x36	; 54
    1fd6:	80 68       	ori	r24, 0x80	; 128
    1fd8:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    1fda:	06 b6       	in	r0, 0x36	; 54
    1fdc:	07 fe       	sbrs	r0, 7
    1fde:	fd cf       	rjmp	.-6      	; 0x1fda <TWI_SendSlaveAddressWithRead+0x12>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK) {
    1fe0:	81 b1       	in	r24, 0x01	; 1
    1fe2:	88 7f       	andi	r24, 0xF8	; 248
    1fe4:	80 34       	cpi	r24, 0x40	; 64
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <TWI_SendSlaveAddressWithRead+0x24>
    1fe8:	85 e0       	ldi	r24, 0x05	; 5
    1fea:	08 95       	ret
    1fec:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    1fee:	08 95       	ret

00001ff0 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte) {
	TWI_ErrStatus Local_Error = NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    1ff0:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    1ff2:	86 b7       	in	r24, 0x36	; 54
    1ff4:	80 68       	ori	r24, 0x80	; 128
    1ff6:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    1ff8:	06 b6       	in	r0, 0x36	; 54
    1ffa:	07 fe       	sbrs	r0, 7
    1ffc:	fd cf       	rjmp	.-6      	; 0x1ff8 <TWI_MasterWriteDataByte+0x8>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK) {
    1ffe:	81 b1       	in	r24, 0x01	; 1
    2000:	88 7f       	andi	r24, 0xF8	; 248
    2002:	88 32       	cpi	r24, 0x28	; 40
    2004:	11 f0       	breq	.+4      	; 0x200a <TWI_MasterWriteDataByte+0x1a>
    2006:	84 e0       	ldi	r24, 0x04	; 4
    2008:	08 95       	ret
    200a:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    200c:	08 95       	ret

0000200e <TWI_MasterReadDataByteWithoutACK>:

TWI_ErrStatus TWI_MasterReadDataByteWithoutACK(u8 *Copy_pu8DataByte) {
    200e:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error = NoError;

	/* Receive Data */
	TWCR = (1<< TWCR_TWINT) | (1 << TWCR_TWEN);
    2010:	84 e8       	ldi	r24, 0x84	; 132
    2012:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    2014:	06 b6       	in	r0, 0x36	; 54
    2016:	07 fe       	sbrs	r0, 7
    2018:	fd cf       	rjmp	.-6      	; 0x2014 <TWI_MasterReadDataByteWithoutACK+0x6>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK) {
    201a:	81 b1       	in	r24, 0x01	; 1
    201c:	88 7f       	andi	r24, 0xF8	; 248
    201e:	80 35       	cpi	r24, 0x50	; 80
    2020:	11 f0       	breq	.+4      	; 0x2026 <TWI_MasterReadDataByteWithoutACK+0x18>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	08 95       	ret
		Local_Error = MasterReadByteErr;
	} else {
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    2026:	83 b1       	in	r24, 0x03	; 3
    2028:	80 83       	st	Z, r24
    202a:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_Error;
}
    202c:	08 95       	ret

0000202e <TWI_MasterReadDataByteWithACK>:
TWI_ErrStatus TWI_MasterReadDataByteWithACK(u8 *Copy_pu8DataByte) {
    202e:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error = NoError;

	/* Receive Data */
	TWCR = (1<< TWCR_TWEA) | (1<< TWCR_TWINT) | (1 << TWCR_TWEN);
    2030:	84 ec       	ldi	r24, 0xC4	; 196
    2032:	86 bf       	out	0x36, r24	; 54


	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    2034:	06 b6       	in	r0, 0x36	; 54
    2036:	07 fe       	sbrs	r0, 7
    2038:	fd cf       	rjmp	.-6      	; 0x2034 <TWI_MasterReadDataByteWithACK+0x6>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK) {
    203a:	81 b1       	in	r24, 0x01	; 1
    203c:	88 7f       	andi	r24, 0xF8	; 248
    203e:	80 35       	cpi	r24, 0x50	; 80
    2040:	11 f0       	breq	.+4      	; 0x2046 <TWI_MasterReadDataByteWithACK+0x18>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	08 95       	ret
		Local_Error = MasterReadByteErr;
	} else {
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    2046:	83 b1       	in	r24, 0x03	; 3
    2048:	80 83       	st	Z, r24
    204a:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_Error;
}
    204c:	08 95       	ret

0000204e <TWI_SlaveWriteDataByte>:
TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte) {
	TWI_ErrStatus Local_Error = NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    204e:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    2050:	86 b7       	in	r24, 0x36	; 54
    2052:	80 68       	ori	r24, 0x80	; 128
    2054:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    2056:	06 b6       	in	r0, 0x36	; 54
    2058:	07 fe       	sbrs	r0, 7
    205a:	fd cf       	rjmp	.-6      	; 0x2056 <TWI_SlaveWriteDataByte+0x8>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED) {
    205c:	81 b1       	in	r24, 0x01	; 1
    205e:	88 7f       	andi	r24, 0xF8	; 248
    2060:	88 3b       	cpi	r24, 0xB8	; 184
    2062:	11 f0       	breq	.+4      	; 0x2068 <TWI_SlaveWriteDataByte+0x1a>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	08 95       	ret
    2068:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		/*Do nothing*/
	}

	return Local_Error;
}
    206a:	08 95       	ret

0000206c <TWI_SlaveReadDataByte>:


TWI_ErrStatus TWI_SlaveReadDataByte(u8 *Copy_pu8DataByte) {
    206c:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error = NoError;

	// Set the TWINT flag to clear it and enable TWI operations
	SET_BIT(TWCR, TWCR_TWINT);
    206e:	86 b7       	in	r24, 0x36	; 54
    2070:	80 68       	ori	r24, 0x80	; 128
    2072:	86 bf       	out	0x36, r24	; 54

	// Wait until the operation finishes and the flag is raised
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    2074:	06 b6       	in	r0, 0x36	; 54
    2076:	07 fe       	sbrs	r0, 7
    2078:	fd cf       	rjmp	.-6      	; 0x2074 <TWI_SlaveReadDataByte+0x8>
		;

	// Check the operation status for data received
	if ((TWSR & 0xF8) != SLAVE_DATA_RECEIVED) {
    207a:	81 b1       	in	r24, 0x01	; 1
    207c:	88 7f       	andi	r24, 0xF8	; 248
    207e:	80 38       	cpi	r24, 0x80	; 128
    2080:	11 f0       	breq	.+4      	; 0x2086 <TWI_SlaveReadDataByte+0x1a>
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	08 95       	ret
		Local_Error = SlaveReadByteErr;
	} else {
		// Read the received data
		*Copy_pu8DataByte = TWDR;
    2086:	83 b1       	in	r24, 0x03	; 3
    2088:	80 83       	st	Z, r24
    208a:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_Error;
}
    208c:	08 95       	ret

0000208e <TWI_SendStopCondition>:

void TWI_SendStopCondition(void) {
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    208e:	86 b7       	in	r24, 0x36	; 54
    2090:	80 61       	ori	r24, 0x10	; 16
    2092:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    2094:	86 b7       	in	r24, 0x36	; 54
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	86 bf       	out	0x36, r24	; 54

}
    209a:	08 95       	ret

0000209c <TWI_voidDisableACK>:
	TWI_SendStopCondition();
	return state;
}
void TWI_voidDisableACK(void){
	/*Disable Acknowledge bit*/
	CLR_BIT(TWCR, TWCR_TWEA);
    209c:	86 b7       	in	r24, 0x36	; 54
    209e:	8f 7b       	andi	r24, 0xBF	; 191
    20a0:	86 bf       	out	0x36, r24	; 54
}
    20a2:	08 95       	ret

000020a4 <TWI_voidDisableTWI>:
void TWI_voidDisableTWI(void){
	/*Disable TWI Peripheral*/
	CLR_BIT(TWCR, TWCR_TWEN);
    20a4:	86 b7       	in	r24, 0x36	; 54
    20a6:	8b 7f       	andi	r24, 0xFB	; 251
    20a8:	86 bf       	out	0x36, r24	; 54
}
    20aa:	08 95       	ret

000020ac <TWI_voidEnableACK>:
void TWI_voidEnableACK(void){
	/*Enable Acknowledge bit*/
	SET_BIT(TWCR, TWCR_TWEA);
    20ac:	86 b7       	in	r24, 0x36	; 54
    20ae:	80 64       	ori	r24, 0x40	; 64
    20b0:	86 bf       	out	0x36, r24	; 54
}
    20b2:	08 95       	ret

000020b4 <TWI_voidEnableTWI>:
void TWI_voidEnableTWI(void){
	/*Enable TWI Peripheral*/
	SET_BIT(TWCR, TWCR_TWEN);
    20b4:	86 b7       	in	r24, 0x36	; 54
    20b6:	84 60       	ori	r24, 0x04	; 4
    20b8:	86 bf       	out	0x36, r24	; 54
}
    20ba:	08 95       	ret

000020bc <TWI_SendACK>:
void TWI_SendACK(void) {
    // Enable ACK generation (TWEA bit set to 1)
    SET_BIT(TWCR, TWCR_TWEA);
    20bc:	86 b7       	in	r24, 0x36	; 54
    20be:	80 64       	ori	r24, 0x40	; 64
    20c0:	86 bf       	out	0x36, r24	; 54
    // Clear the interrupt flag to start the next operation
    SET_BIT(TWCR, TWCR_TWINT);
    20c2:	86 b7       	in	r24, 0x36	; 54
    20c4:	80 68       	ori	r24, 0x80	; 128
    20c6:	86 bf       	out	0x36, r24	; 54
    // Wait until the operation finishes and the flag is raised
    while (!(GIT_BIT(TWCR, TWCR_TWINT)))
    20c8:	06 b6       	in	r0, 0x36	; 54
    20ca:	07 fe       	sbrs	r0, 7
    20cc:	fd cf       	rjmp	.-6      	; 0x20c8 <TWI_SendACK+0xc>
        ;
}
    20ce:	08 95       	ret

000020d0 <TWI_SendNACK>:
void TWI_SendNACK(void) {
    // Disable ACK generation (TWEA bit set to 0)
    CLR_BIT(TWCR, TWCR_TWEA);
    20d0:	86 b7       	in	r24, 0x36	; 54
    20d2:	8f 7b       	andi	r24, 0xBF	; 191
    20d4:	86 bf       	out	0x36, r24	; 54
    // Clear the interrupt flag to start the next operation
    SET_BIT(TWCR, TWCR_TWINT);
    20d6:	86 b7       	in	r24, 0x36	; 54
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	86 bf       	out	0x36, r24	; 54
    // Wait until the operation finishes and the flag is raised
    while (!(GIT_BIT(TWCR, TWCR_TWINT)))
    20dc:	06 b6       	in	r0, 0x36	; 54
    20de:	07 fe       	sbrs	r0, 7
    20e0:	fd cf       	rjmp	.-6      	; 0x20dc <TWI_SendNACK+0xc>
        ;
}
    20e2:	08 95       	ret

000020e4 <TWI_u8SendFrame>:
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);

}

TWI_ErrStatus TWI_u8SendFrame(u8 A_u8Address,u8 *PA_u8buffer,u8 len){
    20e4:	98 2f       	mov	r25, r24

TWI_ErrStatus TWI_SendStartCondition(void) {
	TWI_ErrStatus Local_Error = NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    20e6:	86 b7       	in	r24, 0x36	; 54
    20e8:	80 62       	ori	r24, 0x20	; 32
    20ea:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    20ec:	86 b7       	in	r24, 0x36	; 54
    20ee:	80 68       	ori	r24, 0x80	; 128
    20f0:	86 bf       	out	0x36, r24	; 54

	SET_BIT(TWCR, TWCR_TWEN);
    20f2:	86 b7       	in	r24, 0x36	; 54
    20f4:	84 60       	ori	r24, 0x04	; 4
    20f6:	86 bf       	out	0x36, r24	; 54
//	 Hint : we could use
//	 TWCR=(1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTA);


	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    20f8:	06 b6       	in	r0, 0x36	; 54
    20fa:	07 fe       	sbrs	r0, 7
    20fc:	fd cf       	rjmp	.-6      	; 0x20f8 <TWI_u8SendFrame+0x14>
		;

	/*Check the operation status (Bit Masking) */
	if ((TWSR & 0xF8) != START_ACK) {
    20fe:	81 b1       	in	r24, 0x01	; 1
    2100:	88 7f       	andi	r24, 0xF8	; 248
    2102:	88 30       	cpi	r24, 0x08	; 8
    2104:	11 f0       	breq	.+4      	; 0x210a <TWI_u8SendFrame+0x26>
    2106:	88 e0       	ldi	r24, 0x08	; 8
    2108:	08 95       	ret

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress) {
	TWI_ErrStatus Local_Error = NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress << 1);
    210a:	99 0f       	add	r25, r25
    210c:	93 b9       	out	0x03, r25	; 3
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR, 0);
    210e:	18 98       	cbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR, TWCR_TWSTA);
    2110:	86 b7       	in	r24, 0x36	; 54
    2112:	8f 7d       	andi	r24, 0xDF	; 223
    2114:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    2116:	86 b7       	in	r24, 0x36	; 54
    2118:	80 68       	ori	r24, 0x80	; 128
    211a:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    211c:	06 b6       	in	r0, 0x36	; 54
    211e:	07 fe       	sbrs	r0, 7
    2120:	fd cf       	rjmp	.-6      	; 0x211c <TWI_u8SendFrame+0x38>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK) {
    2122:	81 b1       	in	r24, 0x01	; 1
    2124:	88 7f       	andi	r24, 0xF8	; 248
    2126:	88 31       	cpi	r24, 0x18	; 24
    2128:	11 f0       	breq	.+4      	; 0x212e <TWI_u8SendFrame+0x4a>
    212a:	86 e0       	ldi	r24, 0x06	; 6
    212c:	08 95       	ret
	if(state != NoError)
		return state;
	state=TWI_SendSlaveAddressWithWrite(A_u8Address);
	if(state != NoError)
		return state;
	for(u8 itr=0;itr<len;itr++){
    212e:	44 23       	and	r20, r20
    2130:	a1 f0       	breq	.+40     	; 0x215a <TWI_u8SendFrame+0x76>
    2132:	fb 01       	movw	r30, r22
		state=TWI_MasterWriteDataByte(PA_u8buffer[itr]);
    2134:	80 81       	ld	r24, Z

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte) {
	TWI_ErrStatus Local_Error = NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    2136:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    2138:	86 b7       	in	r24, 0x36	; 54
    213a:	80 68       	ori	r24, 0x80	; 128
    213c:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while ((GIT_BIT(TWCR, TWCR_TWINT)) == 0)
    213e:	06 b6       	in	r0, 0x36	; 54
    2140:	07 fe       	sbrs	r0, 7
    2142:	fd cf       	rjmp	.-6      	; 0x213e <TWI_u8SendFrame+0x5a>
		;

	/*Check the operation status*/
	if ((TWSR & 0xF8) != MSTR_WR_BYTE_ACK) {
    2144:	81 b1       	in	r24, 0x01	; 1
    2146:	88 7f       	andi	r24, 0xF8	; 248
    2148:	88 32       	cpi	r24, 0x28	; 40
    214a:	11 f0       	breq	.+4      	; 0x2150 <TWI_u8SendFrame+0x6c>
    214c:	84 e0       	ldi	r24, 0x04	; 4
    214e:	08 95       	ret
    2150:	31 96       	adiw	r30, 0x01	; 1
	if(state != NoError)
		return state;
	state=TWI_SendSlaveAddressWithWrite(A_u8Address);
	if(state != NoError)
		return state;
	for(u8 itr=0;itr<len;itr++){
    2152:	8e 2f       	mov	r24, r30
    2154:	86 1b       	sub	r24, r22
    2156:	84 17       	cp	r24, r20
    2158:	68 f3       	brcs	.-38     	; 0x2134 <TWI_u8SendFrame+0x50>
	return Local_Error;
}

void TWI_SendStopCondition(void) {
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR, TWCR_TWSTO);
    215a:	86 b7       	in	r24, 0x36	; 54
    215c:	80 61       	ori	r24, 0x10	; 16
    215e:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR, TWCR_TWINT);
    2160:	86 b7       	in	r24, 0x36	; 54
    2162:	80 68       	ori	r24, 0x80	; 128
    2164:	86 bf       	out	0x36, r24	; 54
    2166:	82 e0       	ldi	r24, 0x02	; 2
		if(state != NoError)
			return state;
	}
	TWI_SendStopCondition();
	return state;
}
    2168:	08 95       	ret

0000216a <TIMER1_voidInit>:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    216a:	8f b5       	in	r24, 0x2f	; 47
    216c:	8e 7f       	andi	r24, 0xFE	; 254
    216e:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    2170:	8f b5       	in	r24, 0x2f	; 47
    2172:	82 60       	ori	r24, 0x02	; 2
    2174:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    2176:	8e b5       	in	r24, 0x2e	; 46
    2178:	88 60       	ori	r24, 0x08	; 8
    217a:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    217c:	8e b5       	in	r24, 0x2e	; 46
    217e:	80 61       	ori	r24, 0x10	; 16
    2180:	8e bd       	out	0x2e, r24	; 46
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    2182:	8c eb       	ldi	r24, 0xBC	; 188
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	9b bd       	out	0x2b, r25	; 43
    2188:	8a bd       	out	0x2a, r24	; 42
			OCR1B = TIMER1_CTCB_VAL ;
    218a:	19 bc       	out	0x29, r1	; 41
    218c:	18 bc       	out	0x28, r1	; 40

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    218e:	80 e2       	ldi	r24, 0x20	; 32
    2190:	9e e4       	ldi	r25, 0x4E	; 78
    2192:	97 bd       	out	0x27, r25	; 39
    2194:	86 bd       	out	0x26, r24	; 38

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    2196:	8e b5       	in	r24, 0x2e	; 46
    2198:	80 64       	ori	r24, 0x40	; 64
    219a:	8e bd       	out	0x2e, r24	; 46
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    219c:	8f b5       	in	r24, 0x2f	; 47
    219e:	8f 7b       	andi	r24, 0xBF	; 191
    21a0:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    21a2:	8f b5       	in	r24, 0x2f	; 47
    21a4:	80 68       	ori	r24, 0x80	; 128
    21a6:	8f bd       	out	0x2f, r24	; 47
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    21a8:	8f b5       	in	r24, 0x2f	; 47
    21aa:	8f 7e       	andi	r24, 0xEF	; 239
    21ac:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    21ae:	8f b5       	in	r24, 0x2f	; 47
    21b0:	80 62       	ori	r24, 0x20	; 32
    21b2:	8f bd       	out	0x2f, r24	; 47
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    21b4:	89 b7       	in	r24, 0x39	; 57
    21b6:	8b 7f       	andi	r24, 0xFB	; 251
    21b8:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    21ba:	89 b7       	in	r24, 0x39	; 57
    21bc:	8f 7e       	andi	r24, 0xEF	; 239
    21be:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    21c0:	89 b7       	in	r24, 0x39	; 57
    21c2:	87 7f       	andi	r24, 0xF7	; 247
    21c4:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    21c6:	89 b7       	in	r24, 0x39	; 57
    21c8:	8f 7d       	andi	r24, 0xDF	; 223
    21ca:	89 bf       	out	0x39, r24	; 57
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    21cc:	8e b5       	in	r24, 0x2e	; 46
    21ce:	88 7f       	andi	r24, 0xF8	; 248
    21d0:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    21d2:	8e b5       	in	r24, 0x2e	; 46
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	8e bd       	out	0x2e, r24	; 46


}
    21d8:	08 95       	ret

000021da <TIMER1_voidSetPreload>:


void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
	TCNT1 = Copy_u16Preload ;
    21da:	9d bd       	out	0x2d, r25	; 45
    21dc:	8c bd       	out	0x2c, r24	; 44
}
    21de:	08 95       	ret

000021e0 <TIMER1_voidSetCTCA>:



void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)//ton
{
	OCR1A = Copy_u16CTCA ;
    21e0:	9b bd       	out	0x2b, r25	; 43
    21e2:	8a bd       	out	0x2a, r24	; 42
}
    21e4:	08 95       	ret

000021e6 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
	OCR1B = Copy_u16CTCB ;
    21e6:	99 bd       	out	0x29, r25	; 41
    21e8:	88 bd       	out	0x28, r24	; 40
}
    21ea:	08 95       	ret

000021ec <TIMER1_voidSetICR1>:



void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)//period
{
	ICR1 = Copy_u16ICR1 ;
    21ec:	97 bd       	out	0x27, r25	; 39
    21ee:	86 bd       	out	0x26, r24	; 38
}
    21f0:	08 95       	ret

000021f2 <TIMER1_u16GetTimerCounterValue>:



u16 TIMER1_u16GetTimerCounterValue (void)
{
	return TCNT1 ;
    21f2:	2c b5       	in	r18, 0x2c	; 44
    21f4:	3d b5       	in	r19, 0x2d	; 45
}
    21f6:	c9 01       	movw	r24, r18
    21f8:	08 95       	ret

000021fa <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
	OCR1A = Copy_u16CompareValue;
    21fa:	9b bd       	out	0x2b, r25	; 43
    21fc:	8a bd       	out	0x2a, r24	; 42
}
    21fe:	08 95       	ret

00002200 <TIMER_voidICUInitEnable>:
{
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2200:	8e b5       	in	r24, 0x2e	; 46
    2202:	8f 7b       	andi	r24, 0xBF	; 191
    2204:	8e bd       	out	0x2e, r24	; 46
	#endif

	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2206:	89 b7       	in	r24, 0x39	; 57
    2208:	80 62       	ori	r24, 0x20	; 32
    220a:	89 bf       	out	0x39, r24	; 57
}
    220c:	08 95       	ret

0000220e <TIMER_voidICUSetTriggerEdge>:
ES_t TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
	ES_t Local_u8ErrorStatus = ES_OK ;

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	49 f0       	breq	.+18     	; 0x2224 <TIMER_voidICUSetTriggerEdge+0x16>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    2212:	88 23       	and	r24, r24
    2214:	29 f4       	brne	.+10     	; 0x2220 <TIMER_voidICUSetTriggerEdge+0x12>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2216:	8e b5       	in	r24, 0x2e	; 46
    2218:	8f 7b       	andi	r24, 0xBF	; 191
    221a:	8e bd       	out	0x2e, r24	; 46
    221c:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorStatus = ES_NOT_OK ;
	}
	return Local_u8ErrorStatus;

}
    221e:	08 95       	ret
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	08 95       	ret
	ES_t Local_u8ErrorStatus = ES_OK ;

	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    2224:	8e b5       	in	r24, 0x2e	; 46
    2226:	80 64       	ori	r24, 0x40	; 64
    2228:	8e bd       	out	0x2e, r24	; 46
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	08 95       	ret

0000222e <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    222e:	89 b7       	in	r24, 0x39	; 57
    2230:	80 62       	ori	r24, 0x20	; 32
    2232:	89 bf       	out	0x39, r24	; 57
}
    2234:	08 95       	ret

00002236 <TIMER_voidICUDisableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    2236:	89 b7       	in	r24, 0x39	; 57
    2238:	8f 7d       	andi	r24, 0xDF	; 223
    223a:	89 bf       	out	0x39, r24	; 57
}
    223c:	08 95       	ret

0000223e <Timer1_OVF_InterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void Timer1_OVF_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE1);
    223e:	89 b7       	in	r24, 0x39	; 57
    2240:	84 60       	ori	r24, 0x04	; 4
    2242:	89 bf       	out	0x39, r24	; 57
}
    2244:	08 95       	ret

00002246 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    2246:	89 b7       	in	r24, 0x39	; 57
    2248:	8b 7f       	andi	r24, 0xFB	; 251
    224a:	89 bf       	out	0x39, r24	; 57
}
    224c:	08 95       	ret

0000224e <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1A);
    224e:	89 b7       	in	r24, 0x39	; 57
    2250:	80 61       	ori	r24, 0x10	; 16
    2252:	89 bf       	out	0x39, r24	; 57
}
    2254:	08 95       	ret

00002256 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
    2256:	89 b7       	in	r24, 0x39	; 57
    2258:	8f 7e       	andi	r24, 0xEF	; 239
    225a:	89 bf       	out	0x39, r24	; 57
}
    225c:	08 95       	ret

0000225e <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1B);
    225e:	89 b7       	in	r24, 0x39	; 57
    2260:	88 60       	ori	r24, 0x08	; 8
    2262:	89 bf       	out	0x39, r24	; 57
}
    2264:	08 95       	ret

00002266 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
    2266:	89 b7       	in	r24, 0x39	; 57
    2268:	87 7f       	andi	r24, 0xF7	; 247
    226a:	89 bf       	out	0x39, r24	; 57
}
    226c:	08 95       	ret

0000226e <TIMER_u16GetICR>:



u16 TIMER_u16GetICR(void)
{
	return ICR1;
    226e:	26 b5       	in	r18, 0x26	; 38
    2270:	37 b5       	in	r19, 0x27	; 39
}
    2272:	c9 01       	movw	r24, r18
    2274:	08 95       	ret

00002276 <TIMER_u8SetCallBack>:

ES_t TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	ES_t Local_u8ErrorState = ES_OK ;

	if (Copy_pvCallBackFunc != NULL)
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	51 f0       	breq	.+20     	; 0x228e <TIMER_u8SetCallBack+0x18>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    227a:	e6 2f       	mov	r30, r22
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	ea 55       	subi	r30, 0x5A	; 90
    2284:	f8 4f       	sbci	r31, 0xF8	; 248
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    228a:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
	}

	return Local_u8ErrorState ;
}
    228c:	08 95       	ret

ES_t TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	ES_t Local_u8ErrorState = ES_OK ;

	if (Copy_pvCallBackFunc != NULL)
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	08 95       	ret

00002292 <__vector_9>:
}

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    2292:	1f 92       	push	r1
    2294:	0f 92       	push	r0
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	0f 92       	push	r0
    229a:	11 24       	eor	r1, r1
    229c:	2f 93       	push	r18
    229e:	3f 93       	push	r19
    22a0:	4f 93       	push	r20
    22a2:	5f 93       	push	r21
    22a4:	6f 93       	push	r22
    22a6:	7f 93       	push	r23
    22a8:	8f 93       	push	r24
    22aa:	9f 93       	push	r25
    22ac:	af 93       	push	r26
    22ae:	bf 93       	push	r27
    22b0:	ef 93       	push	r30
    22b2:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    22b4:	e0 91 b8 07 	lds	r30, 0x07B8
    22b8:	f0 91 b9 07 	lds	r31, 0x07B9
    22bc:	30 97       	sbiw	r30, 0x00	; 0
    22be:	09 f0       	breq	.+2      	; 0x22c2 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    22c0:	09 95       	icall
	}
}
    22c2:	ff 91       	pop	r31
    22c4:	ef 91       	pop	r30
    22c6:	bf 91       	pop	r27
    22c8:	af 91       	pop	r26
    22ca:	9f 91       	pop	r25
    22cc:	8f 91       	pop	r24
    22ce:	7f 91       	pop	r23
    22d0:	6f 91       	pop	r22
    22d2:	5f 91       	pop	r21
    22d4:	4f 91       	pop	r20
    22d6:	3f 91       	pop	r19
    22d8:	2f 91       	pop	r18
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	0f 90       	pop	r0
    22e0:	1f 90       	pop	r1
    22e2:	18 95       	reti

000022e4 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    22e4:	1f 92       	push	r1
    22e6:	0f 92       	push	r0
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	0f 92       	push	r0
    22ec:	11 24       	eor	r1, r1
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	ef 93       	push	r30
    2304:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    2306:	e0 91 b6 07 	lds	r30, 0x07B6
    230a:	f0 91 b7 07 	lds	r31, 0x07B7
    230e:	30 97       	sbiw	r30, 0x00	; 0
    2310:	09 f0       	breq	.+2      	; 0x2314 <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    2312:	09 95       	icall
	}
}
    2314:	ff 91       	pop	r31
    2316:	ef 91       	pop	r30
    2318:	bf 91       	pop	r27
    231a:	af 91       	pop	r26
    231c:	9f 91       	pop	r25
    231e:	8f 91       	pop	r24
    2320:	7f 91       	pop	r23
    2322:	6f 91       	pop	r22
    2324:	5f 91       	pop	r21
    2326:	4f 91       	pop	r20
    2328:	3f 91       	pop	r19
    232a:	2f 91       	pop	r18
    232c:	0f 90       	pop	r0
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	0f 90       	pop	r0
    2332:	1f 90       	pop	r1
    2334:	18 95       	reti

00002336 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    2336:	1f 92       	push	r1
    2338:	0f 92       	push	r0
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	0f 92       	push	r0
    233e:	11 24       	eor	r1, r1
    2340:	2f 93       	push	r18
    2342:	3f 93       	push	r19
    2344:	4f 93       	push	r20
    2346:	5f 93       	push	r21
    2348:	6f 93       	push	r22
    234a:	7f 93       	push	r23
    234c:	8f 93       	push	r24
    234e:	9f 93       	push	r25
    2350:	af 93       	push	r26
    2352:	bf 93       	push	r27
    2354:	ef 93       	push	r30
    2356:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    2358:	e0 91 b4 07 	lds	r30, 0x07B4
    235c:	f0 91 b5 07 	lds	r31, 0x07B5
    2360:	30 97       	sbiw	r30, 0x00	; 0
    2362:	09 f0       	breq	.+2      	; 0x2366 <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    2364:	09 95       	icall
	}
}
    2366:	ff 91       	pop	r31
    2368:	ef 91       	pop	r30
    236a:	bf 91       	pop	r27
    236c:	af 91       	pop	r26
    236e:	9f 91       	pop	r25
    2370:	8f 91       	pop	r24
    2372:	7f 91       	pop	r23
    2374:	6f 91       	pop	r22
    2376:	5f 91       	pop	r21
    2378:	4f 91       	pop	r20
    237a:	3f 91       	pop	r19
    237c:	2f 91       	pop	r18
    237e:	0f 90       	pop	r0
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	0f 90       	pop	r0
    2384:	1f 90       	pop	r1
    2386:	18 95       	reti

00002388 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    2388:	1f 92       	push	r1
    238a:	0f 92       	push	r0
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	0f 92       	push	r0
    2390:	11 24       	eor	r1, r1
    2392:	2f 93       	push	r18
    2394:	3f 93       	push	r19
    2396:	4f 93       	push	r20
    2398:	5f 93       	push	r21
    239a:	6f 93       	push	r22
    239c:	7f 93       	push	r23
    239e:	8f 93       	push	r24
    23a0:	9f 93       	push	r25
    23a2:	af 93       	push	r26
    23a4:	bf 93       	push	r27
    23a6:	ef 93       	push	r30
    23a8:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    23aa:	e0 91 b2 07 	lds	r30, 0x07B2
    23ae:	f0 91 b3 07 	lds	r31, 0x07B3
    23b2:	30 97       	sbiw	r30, 0x00	; 0
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    23b6:	09 95       	icall
	}
}
    23b8:	ff 91       	pop	r31
    23ba:	ef 91       	pop	r30
    23bc:	bf 91       	pop	r27
    23be:	af 91       	pop	r26
    23c0:	9f 91       	pop	r25
    23c2:	8f 91       	pop	r24
    23c4:	7f 91       	pop	r23
    23c6:	6f 91       	pop	r22
    23c8:	5f 91       	pop	r21
    23ca:	4f 91       	pop	r20
    23cc:	3f 91       	pop	r19
    23ce:	2f 91       	pop	r18
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f 90       	pop	r0
    23d6:	1f 90       	pop	r1
    23d8:	18 95       	reti

000023da <GIE_VoidEnable>:
#include "GIE_private.h"


void GIE_VoidEnable (void)
{
	SET_BIT (SREG , SREG_I) ;
    23da:	8f b7       	in	r24, 0x3f	; 63
    23dc:	80 68       	ori	r24, 0x80	; 128
    23de:	8f bf       	out	0x3f, r24	; 63
}
    23e0:	08 95       	ret

000023e2 <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
	CLR_BIT (SREG , SREG_I) ;
    23e2:	8f b7       	in	r24, 0x3f	; 63
    23e4:	8f 77       	andi	r24, 0x7F	; 127
    23e6:	8f bf       	out	0x3f, r24	; 63
}
    23e8:	08 95       	ret

000023ea <DIO_Enu_Init>:

ES_t DIO_Enu_Init(void)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    23ea:	8f ef       	ldi	r24, 0xFF	; 255
    23ec:	8a bb       	out	0x1a, r24	; 26
    DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    23ee:	87 bb       	out	0x17, r24	; 23
    DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    23f0:	8c ef       	ldi	r24, 0xFC	; 252
    23f2:	84 bb       	out	0x14, r24	; 20
    DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    23f4:	8e ef       	ldi	r24, 0xFE	; 254
    23f6:	81 bb       	out	0x11, r24	; 17

    PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    23f8:	1b ba       	out	0x1b, r1	; 27
    PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    23fa:	18 ba       	out	0x18, r1	; 24
    PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    23fc:	15 ba       	out	0x15, r1	; 21
    PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    23fe:	12 ba       	out	0x12, r1	; 18

    Local_EnuErrorState = ES_OK;

    return Local_EnuErrorState;
}
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	08 95       	ret

00002404 <DIO_Enu_SetPortDirection>:

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    2404:	84 30       	cpi	r24, 0x04	; 4
    2406:	50 f4       	brcc	.+20     	; 0x241c <DIO_Enu_SetPortDirection+0x18>
    {
        switch (Copy_u8PortID)
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	69 f0       	breq	.+26     	; 0x2426 <DIO_Enu_SetPortDirection+0x22>
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	40 f0       	brcs	.+16     	; 0x2420 <DIO_Enu_SetPortDirection+0x1c>
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	79 f0       	breq	.+30     	; 0x2432 <DIO_Enu_SetPortDirection+0x2e>
    2414:	83 30       	cpi	r24, 0x03	; 3
    2416:	51 f0       	breq	.+20     	; 0x242c <DIO_Enu_SetPortDirection+0x28>
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	08 95       	ret

ES_t DIO_Enu_SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	08 95       	ret
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            DDRA = Copy_u8Value;
    2420:	6a bb       	out	0x1a, r22	; 26
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	08 95       	ret
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
    2426:	67 bb       	out	0x17, r22	; 23
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	08 95       	ret
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
            break;
        case DIO_PORTD:
            DDRD = Copy_u8Value;
    242c:	61 bb       	out	0x11, r22	; 17
    242e:	81 e0       	ldi	r24, 0x01	; 1
    else
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }
    return Local_EnuErrorState;
}
    2430:	08 95       	ret
            break;
        case DIO_PORTB:
            DDRB = Copy_u8Value;
            break;
        case DIO_PORTC:
            DDRC = Copy_u8Value;
    2432:	64 bb       	out	0x14, r22	; 20
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	08 95       	ret

00002438 <DIO_Enu_SetPortValue>:

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    2438:	84 30       	cpi	r24, 0x04	; 4
    243a:	50 f4       	brcc	.+20     	; 0x2450 <DIO_Enu_SetPortValue+0x18>
    {
        switch (Copy_u8PortID)
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	69 f0       	breq	.+26     	; 0x245a <DIO_Enu_SetPortValue+0x22>
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	40 f0       	brcs	.+16     	; 0x2454 <DIO_Enu_SetPortValue+0x1c>
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	79 f0       	breq	.+30     	; 0x2466 <DIO_Enu_SetPortValue+0x2e>
    2448:	83 30       	cpi	r24, 0x03	; 3
    244a:	51 f0       	breq	.+20     	; 0x2460 <DIO_Enu_SetPortValue+0x28>
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	08 95       	ret

ES_t DIO_Enu_SetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	08 95       	ret
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            PORTA = Copy_u8Value;
    2454:	6b bb       	out	0x1b, r22	; 27
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
    245a:	68 bb       	out	0x18, r22	; 24
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	08 95       	ret
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
            break;
        case DIO_PORTD:
            PORTD = Copy_u8Value;
    2460:	62 bb       	out	0x12, r22	; 18
    2462:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    2464:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = Copy_u8Value;
            break;
        case DIO_PORTC:
            PORTC = Copy_u8Value;
    2466:	65 bb       	out	0x15, r22	; 21
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	08 95       	ret

0000246c <DIO_Enu_SetPinDirection>:
}

ES_t DIO_Enu_SetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;
    if (Copy_u8PortID <= DIO_PORTD &&
    246c:	84 30       	cpi	r24, 0x04	; 4
    246e:	20 f4       	brcc	.+8      	; 0x2478 <DIO_Enu_SetPinDirection+0xc>
    2470:	68 30       	cpi	r22, 0x08	; 8
    2472:	10 f4       	brcc	.+4      	; 0x2478 <DIO_Enu_SetPinDirection+0xc>
    2474:	42 30       	cpi	r20, 0x02	; 2
    2476:	10 f0       	brcs	.+4      	; 0x247c <DIO_Enu_SetPinDirection+0x10>
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    2478:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    247a:	08 95       	ret
    ES_t Local_EnuErrorState = ES_NOT_OK;
    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
    247c:	81 30       	cpi	r24, 0x01	; 1
    247e:	09 f4       	brne	.+2      	; 0x2482 <DIO_Enu_SetPinDirection+0x16>
    2480:	48 c0       	rjmp	.+144    	; 0x2512 <DIO_Enu_SetPinDirection+0xa6>
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	b0 f4       	brcc	.+44     	; 0x24b2 <DIO_Enu_SetPinDirection+0x46>
        {
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    2486:	8a b3       	in	r24, 0x1a	; 26
    2488:	21 e0       	ldi	r18, 0x01	; 1
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	06 2e       	mov	r0, r22
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <DIO_Enu_SetPinDirection+0x28>
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	0a 94       	dec	r0
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <DIO_Enu_SetPinDirection+0x24>
    2498:	20 95       	com	r18
    249a:	28 23       	and	r18, r24
            DDRA |= (Copy_u8Value << Copy_u8PinID);
    249c:	84 2f       	mov	r24, r20
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_Enu_SetPinDirection+0x3a>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	6a 95       	dec	r22
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_Enu_SetPinDirection+0x36>
    24aa:	28 2b       	or	r18, r24
    24ac:	2a bb       	out	0x1a, r18	; 26
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	08 95       	ret
    ES_t Local_EnuErrorState = ES_NOT_OK;
    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= OUTPUT)
    {
        switch (Copy_u8PortID)
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	c1 f0       	breq	.+48     	; 0x24e6 <DIO_Enu_SetPinDirection+0x7a>
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	a1 f4       	brne	.+40     	; 0x24e2 <DIO_Enu_SetPinDirection+0x76>
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            DDRD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    24ba:	81 b3       	in	r24, 0x11	; 17
    24bc:	21 e0       	ldi	r18, 0x01	; 1
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	06 2e       	mov	r0, r22
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <DIO_Enu_SetPinDirection+0x5c>
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <DIO_Enu_SetPinDirection+0x58>
    24cc:	20 95       	com	r18
    24ce:	28 23       	and	r18, r24
            DDRD |= (Copy_u8Value << Copy_u8PinID);
    24d0:	84 2f       	mov	r24, r20
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <DIO_Enu_SetPinDirection+0x6e>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	6a 95       	dec	r22
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <DIO_Enu_SetPinDirection+0x6a>
    24de:	28 2b       	or	r18, r24
    24e0:	21 bb       	out	0x11, r18	; 17
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	08 95       	ret
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRB |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTC:
            DDRC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    24e6:	84 b3       	in	r24, 0x14	; 20
    24e8:	21 e0       	ldi	r18, 0x01	; 1
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	06 2e       	mov	r0, r22
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_Enu_SetPinDirection+0x88>
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_Enu_SetPinDirection+0x84>
    24f8:	20 95       	com	r18
    24fa:	28 23       	and	r18, r24
            DDRC |= (Copy_u8Value << Copy_u8PinID);
    24fc:	84 2f       	mov	r24, r20
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <DIO_Enu_SetPinDirection+0x9a>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	6a 95       	dec	r22
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <DIO_Enu_SetPinDirection+0x96>
    250a:	28 2b       	or	r18, r24
    250c:	24 bb       	out	0x14, r18	; 20
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	08 95       	ret
        case DIO_PORTA:
            DDRA &= ~(DIO_MASK_BIT << Copy_u8PinID);
            DDRA |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTB:
            DDRB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    2512:	87 b3       	in	r24, 0x17	; 23
    2514:	21 e0       	ldi	r18, 0x01	; 1
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	06 2e       	mov	r0, r22
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <DIO_Enu_SetPinDirection+0xb4>
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <DIO_Enu_SetPinDirection+0xb0>
    2524:	20 95       	com	r18
    2526:	28 23       	and	r18, r24
            DDRB |= (Copy_u8Value << Copy_u8PinID);
    2528:	84 2f       	mov	r24, r20
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <DIO_Enu_SetPinDirection+0xc6>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	6a 95       	dec	r22
    2534:	e2 f7       	brpl	.-8      	; 0x252e <DIO_Enu_SetPinDirection+0xc2>
    2536:	28 2b       	or	r18, r24
    2538:	27 bb       	out	0x17, r18	; 23
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	08 95       	ret

0000253e <DIO_Enu_SetPinValue>:

ES_t DIO_Enu_SetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD &&
    253e:	84 30       	cpi	r24, 0x04	; 4
    2540:	20 f4       	brcc	.+8      	; 0x254a <DIO_Enu_SetPinValue+0xc>
    2542:	68 30       	cpi	r22, 0x08	; 8
    2544:	10 f4       	brcc	.+4      	; 0x254a <DIO_Enu_SetPinValue+0xc>
    2546:	42 30       	cpi	r20, 0x02	; 2
    2548:	10 f0       	brcs	.+4      	; 0x254e <DIO_Enu_SetPinValue+0x10>
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    254a:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    254c:	08 95       	ret

    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	09 f4       	brne	.+2      	; 0x2554 <DIO_Enu_SetPinValue+0x16>
    2552:	48 c0       	rjmp	.+144    	; 0x25e4 <DIO_Enu_SetPinValue+0xa6>
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	b0 f4       	brcc	.+44     	; 0x2584 <DIO_Enu_SetPinValue+0x46>
        {
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
    2558:	8b b3       	in	r24, 0x1b	; 27
    255a:	21 e0       	ldi	r18, 0x01	; 1
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	06 2e       	mov	r0, r22
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_Enu_SetPinValue+0x28>
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	0a 94       	dec	r0
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_Enu_SetPinValue+0x24>
    256a:	20 95       	com	r18
    256c:	28 23       	and	r18, r24
            PORTA |= (Copy_u8Value << Copy_u8PinID);
    256e:	84 2f       	mov	r24, r20
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <DIO_Enu_SetPinValue+0x3a>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	6a 95       	dec	r22
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <DIO_Enu_SetPinValue+0x36>
    257c:	28 2b       	or	r18, r24
    257e:	2b bb       	out	0x1b, r18	; 27
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	08 95       	ret

    if (Copy_u8PortID <= DIO_PORTD &&
        Copy_u8PinID <= DIO_PIN7 &&
        Copy_u8Value <= HIGH)
    {
        switch (Copy_u8PortID)
    2584:	82 30       	cpi	r24, 0x02	; 2
    2586:	c1 f0       	breq	.+48     	; 0x25b8 <DIO_Enu_SetPinValue+0x7a>
    2588:	83 30       	cpi	r24, 0x03	; 3
    258a:	a1 f4       	brne	.+40     	; 0x25b4 <DIO_Enu_SetPinValue+0x76>
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTC |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTD:
            PORTD &= ~(DIO_MASK_BIT << Copy_u8PinID);
    258c:	82 b3       	in	r24, 0x12	; 18
    258e:	21 e0       	ldi	r18, 0x01	; 1
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	06 2e       	mov	r0, r22
    2594:	02 c0       	rjmp	.+4      	; 0x259a <DIO_Enu_SetPinValue+0x5c>
    2596:	22 0f       	add	r18, r18
    2598:	33 1f       	adc	r19, r19
    259a:	0a 94       	dec	r0
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <DIO_Enu_SetPinValue+0x58>
    259e:	20 95       	com	r18
    25a0:	28 23       	and	r18, r24
            PORTD |= (Copy_u8Value << Copy_u8PinID);
    25a2:	84 2f       	mov	r24, r20
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <DIO_Enu_SetPinValue+0x6e>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	6a 95       	dec	r22
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <DIO_Enu_SetPinValue+0x6a>
    25b0:	28 2b       	or	r18, r24
    25b2:	22 bb       	out	0x12, r18	; 18
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	08 95       	ret
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTB |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTC:
            PORTC &= ~(DIO_MASK_BIT << Copy_u8PinID);
    25b8:	85 b3       	in	r24, 0x15	; 21
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	06 2e       	mov	r0, r22
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <DIO_Enu_SetPinValue+0x88>
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	0a 94       	dec	r0
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <DIO_Enu_SetPinValue+0x84>
    25ca:	20 95       	com	r18
    25cc:	28 23       	and	r18, r24
            PORTC |= (Copy_u8Value << Copy_u8PinID);
    25ce:	84 2f       	mov	r24, r20
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <DIO_Enu_SetPinValue+0x9a>
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	6a 95       	dec	r22
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <DIO_Enu_SetPinValue+0x96>
    25dc:	28 2b       	or	r18, r24
    25de:	25 bb       	out	0x15, r18	; 21
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	08 95       	ret
        case DIO_PORTA:
            PORTA &= ~(DIO_MASK_BIT << Copy_u8PinID);
            PORTA |= (Copy_u8Value << Copy_u8PinID);
            break;
        case DIO_PORTB:
            PORTB &= ~(DIO_MASK_BIT << Copy_u8PinID);
    25e4:	88 b3       	in	r24, 0x18	; 24
    25e6:	21 e0       	ldi	r18, 0x01	; 1
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	06 2e       	mov	r0, r22
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <DIO_Enu_SetPinValue+0xb4>
    25ee:	22 0f       	add	r18, r18
    25f0:	33 1f       	adc	r19, r19
    25f2:	0a 94       	dec	r0
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <DIO_Enu_SetPinValue+0xb0>
    25f6:	20 95       	com	r18
    25f8:	28 23       	and	r18, r24
            PORTB |= (Copy_u8Value << Copy_u8PinID);
    25fa:	84 2f       	mov	r24, r20
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <DIO_Enu_SetPinValue+0xc6>
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	6a 95       	dec	r22
    2606:	e2 f7       	brpl	.-8      	; 0x2600 <DIO_Enu_SetPinValue+0xc2>
    2608:	28 2b       	or	r18, r24
    260a:	28 bb       	out	0x18, r18	; 24
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	08 95       	ret

00002610 <DIO_Enu_TogPortValue>:

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    2610:	84 30       	cpi	r24, 0x04	; 4
    2612:	50 f4       	brcc	.+20     	; 0x2628 <DIO_Enu_TogPortValue+0x18>
    {
        switch (Copy_u8PortID)
    2614:	81 30       	cpi	r24, 0x01	; 1
    2616:	79 f0       	breq	.+30     	; 0x2636 <DIO_Enu_TogPortValue+0x26>
    2618:	81 30       	cpi	r24, 0x01	; 1
    261a:	40 f0       	brcs	.+16     	; 0x262c <DIO_Enu_TogPortValue+0x1c>
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	a9 f0       	breq	.+42     	; 0x264a <DIO_Enu_TogPortValue+0x3a>
    2620:	83 30       	cpi	r24, 0x03	; 3
    2622:	71 f0       	breq	.+28     	; 0x2640 <DIO_Enu_TogPortValue+0x30>
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	08 95       	ret

ES_t DIO_Enu_TogPortValue(u8 Copy_u8PortID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD)
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	08 95       	ret
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            PORTA = ~PORTA;
    262c:	8b b3       	in	r24, 0x1b	; 27
    262e:	80 95       	com	r24
    2630:	8b bb       	out	0x1b, r24	; 27
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
    2636:	88 b3       	in	r24, 0x18	; 24
    2638:	80 95       	com	r24
    263a:	88 bb       	out	0x18, r24	; 24
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	08 95       	ret
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
            break;
        case DIO_PORTD:
            PORTD = ~PORTD;
    2640:	82 b3       	in	r24, 0x12	; 18
    2642:	80 95       	com	r24
    2644:	82 bb       	out	0x12, r24	; 18
    2646:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    2648:	08 95       	ret
            break;
        case DIO_PORTB:
            PORTB = ~PORTB;
            break;
        case DIO_PORTC:
            PORTC = ~PORTC;
    264a:	85 b3       	in	r24, 0x15	; 21
    264c:	80 95       	com	r24
    264e:	85 bb       	out	0x15, r24	; 21
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	08 95       	ret

00002654 <DIO_Enu_TogPinValue>:

ES_t DIO_Enu_TogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_u8PortID <= DIO_PORTD &&
    2654:	84 30       	cpi	r24, 0x04	; 4
    2656:	b0 f4       	brcc	.+44     	; 0x2684 <DIO_Enu_TogPinValue+0x30>
    2658:	68 30       	cpi	r22, 0x08	; 8
    265a:	a0 f4       	brcc	.+40     	; 0x2684 <DIO_Enu_TogPinValue+0x30>
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	61 f1       	breq	.+88     	; 0x26b8 <DIO_Enu_TogPinValue+0x64>
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	90 f0       	brcs	.+36     	; 0x2688 <DIO_Enu_TogPinValue+0x34>
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	e1 f0       	breq	.+56     	; 0x26a0 <DIO_Enu_TogPinValue+0x4c>
    2668:	83 30       	cpi	r24, 0x03	; 3
    266a:	51 f4       	brne	.+20     	; 0x2680 <DIO_Enu_TogPinValue+0x2c>
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
            break;
        case DIO_PORTD:
            TOG_BIT(PORTD, Copy_u8PinID);
    266c:	22 b3       	in	r18, 0x12	; 18
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <DIO_Enu_TogPinValue+0x24>
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	6a 95       	dec	r22
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <DIO_Enu_TogPinValue+0x20>
    267c:	28 27       	eor	r18, r24
    267e:	22 bb       	out	0x12, r18	; 18
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	08 95       	ret
    2684:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

    return Local_EnuErrorState;
}
    2686:	08 95       	ret
        Copy_u8PinID <= DIO_PIN7)
    {
        switch (Copy_u8PortID)
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
    2688:	2b b3       	in	r18, 0x1b	; 27
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <DIO_Enu_TogPinValue+0x40>
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	6a 95       	dec	r22
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <DIO_Enu_TogPinValue+0x3c>
    2698:	28 27       	eor	r18, r24
    269a:	2b bb       	out	0x1b, r18	; 27
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	08 95       	ret
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
            break;
        case DIO_PORTC:
            TOG_BIT(PORTC, Copy_u8PinID);
    26a0:	25 b3       	in	r18, 0x15	; 21
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <DIO_Enu_TogPinValue+0x58>
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	6a 95       	dec	r22
    26ae:	e2 f7       	brpl	.-8      	; 0x26a8 <DIO_Enu_TogPinValue+0x54>
    26b0:	28 27       	eor	r18, r24
    26b2:	25 bb       	out	0x15, r18	; 21
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	08 95       	ret
        {
        case DIO_PORTA:
            TOG_BIT(PORTA, Copy_u8PinID);
            break;
        case DIO_PORTB:
            TOG_BIT(PORTB, Copy_u8PinID);
    26b8:	28 b3       	in	r18, 0x18	; 24
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <DIO_Enu_TogPinValue+0x70>
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	6a 95       	dec	r22
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <DIO_Enu_TogPinValue+0x6c>
    26c8:	28 27       	eor	r18, r24
    26ca:	28 bb       	out	0x18, r18	; 24
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	08 95       	ret

000026d0 <DIO_Enu_GetPortValue>:

    return Local_EnuErrorState;
}

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    26d0:	fb 01       	movw	r30, r22
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    26d2:	61 15       	cp	r22, r1
    26d4:	71 05       	cpc	r23, r1
    26d6:	e9 f0       	breq	.+58     	; 0x2712 <DIO_Enu_GetPortValue+0x42>
    {
        if (Copy_u8PortID <= DIO_PORTD)
    26d8:	84 30       	cpi	r24, 0x04	; 4
    26da:	50 f4       	brcc	.+20     	; 0x26f0 <DIO_Enu_GetPortValue+0x20>
        {
            switch (Copy_u8PortID)
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	a9 f0       	breq	.+42     	; 0x270a <DIO_Enu_GetPortValue+0x3a>
    26e0:	81 30       	cpi	r24, 0x01	; 1
    26e2:	40 f0       	brcs	.+16     	; 0x26f4 <DIO_Enu_GetPortValue+0x24>
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	71 f0       	breq	.+28     	; 0x2704 <DIO_Enu_GetPortValue+0x34>
    26e8:	83 30       	cpi	r24, 0x03	; 3
    26ea:	41 f0       	breq	.+16     	; 0x26fc <DIO_Enu_GetPortValue+0x2c>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	08 95       	ret
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    {
        if (Copy_u8PortID <= DIO_PORTD)
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	08 95       	ret
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
    26f4:	89 b3       	in	r24, 0x19	; 25
    26f6:	80 83       	st	Z, r24
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	08 95       	ret
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
                break;
            case DIO_PORTD:
                *Copy_pu8Value = PIND;
    26fc:	80 b3       	in	r24, 0x10	; 16
    26fe:	80 83       	st	Z, r24
    2700:	81 e0       	ldi	r24, 0x01	; 1
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
    2702:	08 95       	ret
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
                break;
            case DIO_PORTC:
                *Copy_pu8Value = PINC;
    2704:	83 b3       	in	r24, 0x13	; 19
    2706:	80 83       	st	Z, r24
    2708:	f1 cf       	rjmp	.-30     	; 0x26ec <DIO_Enu_GetPortValue+0x1c>
            {
            case DIO_PORTA:
                *Copy_pu8Value = PINA;
                break;
            case DIO_PORTB:
                *Copy_pu8Value = PINB;
    270a:	86 b3       	in	r24, 0x16	; 22
    270c:	80 83       	st	Z, r24
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	08 95       	ret

ES_t DIO_Enu_GetPortValue(u8 Copy_u8PortID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	08 95       	ret

00002716 <DIO_Enu_GetPinValue>:

    return Local_EnuErrorState;
}

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    2716:	fa 01       	movw	r30, r20
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    2718:	41 15       	cp	r20, r1
    271a:	51 05       	cpc	r21, r1
    271c:	d9 f0       	breq	.+54     	; 0x2754 <DIO_Enu_GetPinValue+0x3e>
    {
        if (Copy_u8PortID <= DIO_PORTD &&
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	60 f4       	brcc	.+24     	; 0x273a <DIO_Enu_GetPinValue+0x24>
    2722:	68 30       	cpi	r22, 0x08	; 8
    2724:	50 f4       	brcc	.+20     	; 0x273a <DIO_Enu_GetPinValue+0x24>
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	b9 f0       	breq	.+46     	; 0x2758 <DIO_Enu_GetPinValue+0x42>
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	40 f0       	brcs	.+16     	; 0x273e <DIO_Enu_GetPinValue+0x28>
    272e:	82 30       	cpi	r24, 0x02	; 2
    2730:	b9 f0       	breq	.+46     	; 0x2760 <DIO_Enu_GetPinValue+0x4a>
    2732:	83 30       	cpi	r24, 0x03	; 3
    2734:	99 f0       	breq	.+38     	; 0x275c <DIO_Enu_GetPinValue+0x46>
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	08 95       	ret
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    {
        Local_EnuErrorState = ES_NULL_POINTER;
    }

    return Local_EnuErrorState;
}
    273c:	08 95       	ret
            Copy_u8PinID <= DIO_PIN7)
        {
            switch (Copy_u8PortID)
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
    273e:	89 b3       	in	r24, 0x19	; 25
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <DIO_Enu_GetPinValue+0x32>
    2744:	95 95       	asr	r25
    2746:	87 95       	ror	r24
    2748:	6a 95       	dec	r22
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <DIO_Enu_GetPinValue+0x2e>
    274c:	81 70       	andi	r24, 0x01	; 1
    274e:	80 83       	st	Z, r24
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	08 95       	ret

ES_t DIO_Enu_GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

    if (Copy_pu8Value != NULL)
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	08 95       	ret
            {
            case DIO_PORTA:
                *Copy_pu8Value = GIT_BIT(PINA, Copy_u8PinID);
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
    2758:	86 b3       	in	r24, 0x16	; 22
    275a:	f2 cf       	rjmp	.-28     	; 0x2740 <DIO_Enu_GetPinValue+0x2a>
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
                break;
            case DIO_PORTD:
                *Copy_pu8Value = GIT_BIT(PIND, Copy_u8PinID);
    275c:	80 b3       	in	r24, 0x10	; 16
    275e:	f0 cf       	rjmp	.-32     	; 0x2740 <DIO_Enu_GetPinValue+0x2a>
                break;
            case DIO_PORTB:
                *Copy_pu8Value = GIT_BIT(PINB, Copy_u8PinID);
                break;
            case DIO_PORTC:
                *Copy_pu8Value = GIT_BIT(PINC, Copy_u8PinID);
    2760:	83 b3       	in	r24, 0x13	; 19
    2762:	ee cf       	rjmp	.-36     	; 0x2740 <DIO_Enu_GetPinValue+0x2a>

00002764 <DIO_Enu_WriteHighNibbles>:
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    2764:	84 30       	cpi	r24, 0x04	; 4
    2766:	60 f4       	brcc	.+24     	; 0x2780 <DIO_Enu_WriteHighNibbles+0x1c>
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
    2768:	62 95       	swap	r22
    276a:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PortID)
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	81 f0       	breq	.+32     	; 0x2790 <DIO_Enu_WriteHighNibbles+0x2c>
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	40 f0       	brcs	.+16     	; 0x2784 <DIO_Enu_WriteHighNibbles+0x20>
    2774:	82 30       	cpi	r24, 0x02	; 2
    2776:	c1 f0       	breq	.+48     	; 0x27a8 <DIO_Enu_WriteHighNibbles+0x44>
    2778:	83 30       	cpi	r24, 0x03	; 3
    277a:	81 f0       	breq	.+32     	; 0x279c <DIO_Enu_WriteHighNibbles+0x38>
			PORTB &=0x0f;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
			PORTC |=Copy_u8Value;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	08 95       	ret
ES_t DIO_Enu_WriteHighNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{

    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	08 95       	ret
	{
		Copy_u8Value = (Copy_u8Value<<4) ;
		switch(Copy_u8PortID)
		{
		case DIO_PORTA :
			PORTA &=0x0f;                   
    2784:	8b b3       	in	r24, 0x1b	; 27
    2786:	8f 70       	andi	r24, 0x0F	; 15
			PORTA |=Copy_u8Value;			
    2788:	68 2b       	or	r22, r24
    278a:	6b bb       	out	0x1b, r22	; 27
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB &=0x0f;                 
    2790:	88 b3       	in	r24, 0x18	; 24
    2792:	8f 70       	andi	r24, 0x0F	; 15
			PORTB |=Copy_u8Value;
    2794:	68 2b       	or	r22, r24
    2796:	68 bb       	out	0x18, r22	; 24
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	08 95       	ret
		case DIO_PORTC :
			PORTC &=0x0f;                 
			PORTC |=Copy_u8Value;
			break ;
		case DIO_PORTD:
			PORTD &=0x0f;                 
    279c:	82 b3       	in	r24, 0x12	; 18
    279e:	8f 70       	andi	r24, 0x0F	; 15
			PORTD |=Copy_u8Value;
    27a0:	68 2b       	or	r22, r24
    27a2:	62 bb       	out	0x12, r22	; 18
    27a4:	81 e0       	ldi	r24, 0x01	; 1
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

	return Local_EnuErrorState ;

}
    27a6:	08 95       	ret
		case DIO_PORTB:
			PORTB &=0x0f;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0x0f;                 
    27a8:	85 b3       	in	r24, 0x15	; 21
    27aa:	8f 70       	andi	r24, 0x0F	; 15
			PORTC |=Copy_u8Value;
    27ac:	68 2b       	or	r22, r24
    27ae:	65 bb       	out	0x15, r22	; 21
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	08 95       	ret

000027b4 <DIO_Enu_WriteLowNibbles>:

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    27b4:	84 30       	cpi	r24, 0x04	; 4
    27b6:	58 f4       	brcc	.+22     	; 0x27ce <DIO_Enu_WriteLowNibbles+0x1a>
	{
		Copy_u8Value&=0x0f;
    27b8:	6f 70       	andi	r22, 0x0F	; 15
		switch(Copy_u8PortID)
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	81 f0       	breq	.+32     	; 0x27de <DIO_Enu_WriteLowNibbles+0x2a>
    27be:	81 30       	cpi	r24, 0x01	; 1
    27c0:	40 f0       	brcs	.+16     	; 0x27d2 <DIO_Enu_WriteLowNibbles+0x1e>
    27c2:	82 30       	cpi	r24, 0x02	; 2
    27c4:	c1 f0       	breq	.+48     	; 0x27f6 <DIO_Enu_WriteLowNibbles+0x42>
    27c6:	83 30       	cpi	r24, 0x03	; 3
    27c8:	81 f0       	breq	.+32     	; 0x27ea <DIO_Enu_WriteLowNibbles+0x36>
			PORTB &=0xf0;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
			PORTC |=Copy_u8Value;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	08 95       	ret

ES_t DIO_Enu_WriteLowNibbles(u8 Copy_u8PortID,u8 Copy_u8Value)
{
    ES_t Local_EnuErrorState = ES_NOT_OK;

	if ( (Copy_u8PortID <= DIO_PORTD))
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	08 95       	ret
	{
		Copy_u8Value&=0x0f;
		switch(Copy_u8PortID)
		{
		case DIO_PORTA :
			PORTA &=0xf0;                   
    27d2:	8b b3       	in	r24, 0x1b	; 27
    27d4:	80 7f       	andi	r24, 0xF0	; 240
			PORTA |=Copy_u8Value;			
    27d6:	68 2b       	or	r22, r24
    27d8:	6b bb       	out	0x1b, r22	; 27
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB &=0xf0;                 
    27de:	88 b3       	in	r24, 0x18	; 24
    27e0:	80 7f       	andi	r24, 0xF0	; 240
			PORTB |=Copy_u8Value;
    27e2:	68 2b       	or	r22, r24
    27e4:	68 bb       	out	0x18, r22	; 24
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	08 95       	ret
		case DIO_PORTC :
			PORTC &=0xf0;                 
			PORTC |=Copy_u8Value;
			break ;
		case DIO_PORTD:
			PORTD &=0xf0;                 
    27ea:	82 b3       	in	r24, 0x12	; 18
    27ec:	80 7f       	andi	r24, 0xF0	; 240
			PORTD |=Copy_u8Value;
    27ee:	68 2b       	or	r22, r24
    27f0:	62 bb       	out	0x12, r22	; 18
    27f2:	81 e0       	ldi	r24, 0x01	; 1
        Local_EnuErrorState = ES_OUT_OF_RANGE;
    }

	return Local_EnuErrorState ;

}
    27f4:	08 95       	ret
		case DIO_PORTB:
			PORTB &=0xf0;                 
			PORTB |=Copy_u8Value;
			break ;
		case DIO_PORTC :
			PORTC &=0xf0;                 
    27f6:	85 b3       	in	r24, 0x15	; 21
    27f8:	80 7f       	andi	r24, 0xF0	; 240
			PORTC |=Copy_u8Value;
    27fa:	68 2b       	or	r22, r24
    27fc:	65 bb       	out	0x15, r22	; 21
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	08 95       	ret

00002802 <__mulsi3>:
    2802:	62 9f       	mul	r22, r18
    2804:	d0 01       	movw	r26, r0
    2806:	73 9f       	mul	r23, r19
    2808:	f0 01       	movw	r30, r0
    280a:	82 9f       	mul	r24, r18
    280c:	e0 0d       	add	r30, r0
    280e:	f1 1d       	adc	r31, r1
    2810:	64 9f       	mul	r22, r20
    2812:	e0 0d       	add	r30, r0
    2814:	f1 1d       	adc	r31, r1
    2816:	92 9f       	mul	r25, r18
    2818:	f0 0d       	add	r31, r0
    281a:	83 9f       	mul	r24, r19
    281c:	f0 0d       	add	r31, r0
    281e:	74 9f       	mul	r23, r20
    2820:	f0 0d       	add	r31, r0
    2822:	65 9f       	mul	r22, r21
    2824:	f0 0d       	add	r31, r0
    2826:	99 27       	eor	r25, r25
    2828:	72 9f       	mul	r23, r18
    282a:	b0 0d       	add	r27, r0
    282c:	e1 1d       	adc	r30, r1
    282e:	f9 1f       	adc	r31, r25
    2830:	63 9f       	mul	r22, r19
    2832:	b0 0d       	add	r27, r0
    2834:	e1 1d       	adc	r30, r1
    2836:	f9 1f       	adc	r31, r25
    2838:	bd 01       	movw	r22, r26
    283a:	cf 01       	movw	r24, r30
    283c:	11 24       	eor	r1, r1
    283e:	08 95       	ret

00002840 <__udivmodsi4>:
    2840:	a1 e2       	ldi	r26, 0x21	; 33
    2842:	1a 2e       	mov	r1, r26
    2844:	aa 1b       	sub	r26, r26
    2846:	bb 1b       	sub	r27, r27
    2848:	fd 01       	movw	r30, r26
    284a:	0d c0       	rjmp	.+26     	; 0x2866 <__udivmodsi4_ep>

0000284c <__udivmodsi4_loop>:
    284c:	aa 1f       	adc	r26, r26
    284e:	bb 1f       	adc	r27, r27
    2850:	ee 1f       	adc	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	a2 17       	cp	r26, r18
    2856:	b3 07       	cpc	r27, r19
    2858:	e4 07       	cpc	r30, r20
    285a:	f5 07       	cpc	r31, r21
    285c:	20 f0       	brcs	.+8      	; 0x2866 <__udivmodsi4_ep>
    285e:	a2 1b       	sub	r26, r18
    2860:	b3 0b       	sbc	r27, r19
    2862:	e4 0b       	sbc	r30, r20
    2864:	f5 0b       	sbc	r31, r21

00002866 <__udivmodsi4_ep>:
    2866:	66 1f       	adc	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	88 1f       	adc	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	1a 94       	dec	r1
    2870:	69 f7       	brne	.-38     	; 0x284c <__udivmodsi4_loop>
    2872:	60 95       	com	r22
    2874:	70 95       	com	r23
    2876:	80 95       	com	r24
    2878:	90 95       	com	r25
    287a:	9b 01       	movw	r18, r22
    287c:	ac 01       	movw	r20, r24
    287e:	bd 01       	movw	r22, r26
    2880:	cf 01       	movw	r24, r30
    2882:	08 95       	ret

00002884 <strcmp>:
    2884:	fb 01       	movw	r30, r22
    2886:	dc 01       	movw	r26, r24
    2888:	8d 91       	ld	r24, X+
    288a:	01 90       	ld	r0, Z+
    288c:	80 19       	sub	r24, r0
    288e:	01 10       	cpse	r0, r1
    2890:	d9 f3       	breq	.-10     	; 0x2888 <strcmp+0x4>
    2892:	99 0b       	sbc	r25, r25
    2894:	08 95       	ret

00002896 <strcpy>:
    2896:	fb 01       	movw	r30, r22
    2898:	dc 01       	movw	r26, r24
    289a:	01 90       	ld	r0, Z+
    289c:	0d 92       	st	X+, r0
    289e:	00 20       	and	r0, r0
    28a0:	e1 f7       	brne	.-8      	; 0x289a <strcpy+0x4>
    28a2:	08 95       	ret

000028a4 <_exit>:
    28a4:	f8 94       	cli

000028a6 <__stop_program>:
    28a6:	ff cf       	rjmp	.-2      	; 0x28a6 <__stop_program>
